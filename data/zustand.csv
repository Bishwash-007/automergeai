repo,commit,commit_msg,file,left_diff,right_diff,merged_diff
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,.eslintrc.json,,"-    ""vitest""
+    ""vitest"",
+    ""eslint-plugin-react-compiler""
+    ""react-compiler/react-compiler"": ""warn"",","-    ""vitest""
+    ""vitest"",
+    ""eslint-plugin-react-compiler""
+    ""react-compiler/react-compiler"": ""warn"","
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,examples/demo/src/components/CodePreview.jsx,,"-            <div {...getLineProps({ line, key: i })}>
+            <div {...getLineProps({ line })} key={i}>
-                <span {...getTokenProps({ token, key })} />
+                <span {...getTokenProps({ token })} key={key} />","-            <div {...getLineProps({ line, key: i })}>
+            <div {...getLineProps({ line })} key={i}>
-                <span {...getTokenProps({ token, key })} />
+                <span {...getTokenProps({ token })} key={key} />"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,examples/demo/src/components/Details.jsx,,"-        <a href=""https://docs.pmnd.rs/zustand"" children=""Documentation"" />
-        <a href=""https://github.com/pmndrs/zustand"" children=""Github"" />
+        <a href=""https://docs.pmnd.rs/zustand"">Documentation</a>
+        <a href=""https://github.com/pmndrs/zustand"">Github</a>
-        <a href=""https://github.com/pmndrs/zustand/tree/main/examples/demo"" className=""bottom-right"" children=""<Source />"" />
-        <a href=""https://www.instagram.com/tina.henschel/"" className=""bottom-left"" children=""Illustrations @ Tina Henschel"" />
+        <a href=""https://github.com/pmndrs/zustand/tree/main/examples/demo"" className=""bottom-right"">
+          {'<Source />'}
+        </a>
+        <a href=""https://www.instagram.com/tina.henschel/"" className=""bottom-left"">
+          Illustrations @ Tina Henschel
+        </a>","-        <a href=""https://docs.pmnd.rs/zustand"" children=""Documentation"" />
-        <a href=""https://github.com/pmndrs/zustand"" children=""Github"" />
+        <a href=""https://docs.pmnd.rs/zustand"">Documentation</a>
+        <a href=""https://github.com/pmndrs/zustand"">Github</a>
-        <a href=""https://github.com/pmndrs/zustand/tree/main/examples/demo"" className=""bottom-right"" children=""<Source />"" />
-        <a href=""https://www.instagram.com/tina.henschel/"" className=""bottom-left"" children=""Illustrations @ Tina Henschel"" />
+        <a href=""https://github.com/pmndrs/zustand/tree/main/examples/demo"" className=""bottom-right"">
+          {'<Source />'}
+        </a>
+        <a href=""https://www.instagram.com/tina.henschel/"" className=""bottom-left"">
+          Illustrations @ Tina Henschel
+        </a>"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,examples/demo/src/components/Fireflies.jsx,,"-import React, { useRef, useMemo } from 'react'
+import { useRef, useMemo } from 'react'
-function Fatline({ curve, width, color }) {
+function Fatline({ curve, color }) {
-      new Array(count).fill().map((_, index) => {
+      new Array(count).fill().map(() => {","-import React, { useRef, useMemo } from 'react'
+import { useRef, useMemo } from 'react'
-function Fatline({ curve, width, color }) {
+function Fatline({ curve, color }) {
-      new Array(count).fill().map((_, index) => {
+      new Array(count).fill().map(() => {"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,examples/demo/src/components/Scene.jsx,,"-import React, { useRef, useState, useLayoutEffect } from 'react'
+import { memo, useRef, useState, useLayoutEffect } from 'react'
-  }, [])
+  }, [children])","-import React, { useRef, useState, useLayoutEffect } from 'react'
+import { memo, useRef, useState, useLayoutEffect } from 'react'
-  }, [])
+  }, [children])"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,examples/demo/src/materials/layerMaterial.js,,"-      }      
+      }
-      #include <encodings_fragment>
+      #include <colorspace_fragment>","-      }      
+      }
-      #include <encodings_fragment>
+      #include <colorspace_fragment>"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-beta.0"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.6"",
-    ""@babel/plugin-external-helpers"": ""^7.24.6"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.24.6"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.6"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.6"",
-    ""@babel/preset-env"": ""^7.24.6"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.2"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-  ""version"": ""4.5.2"",
+  ""version"": ""4.5.3"",
-    ""@babel/core"": ""^7.24.6"",
-    ""@babel/plugin-external-helpers"": ""^7.24.6"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.24.6"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.6"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.6"",
-    ""@babel/preset-env"": ""^7.24.6"",
+    ""@babel/core"": ""^7.24.7"",
+    ""@babel/plugin-external-helpers"": ""^7.24.7"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.24.7"",
+    ""@babel/plugin-transform-runtime"": ""^7.24.7"",
+    ""@babel/plugin-transform-typescript"": ""^7.24.7"",
+    ""@babel/preset-env"": ""^7.24.7"",
-    ""@rollup/plugin-replace"": ""^5.0.6"",
+    ""@rollup/plugin-replace"": ""^5.0.7"",
-    ""@types/node"": ""^20.14.1"",
+    ""@types/node"": ""^20.14.9"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.12.0"",
-    ""@typescript-eslint/parser"": ""^7.12.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.14.1"",
+    ""@typescript-eslint/parser"": ""^7.14.1"",
-    ""esbuild"": ""^0.21.4"",
+    ""esbuild"": ""^0.21.5"",
-    ""eslint-plugin-react"": ""^7.34.2"",
+    ""eslint-plugin-react"": ""^7.34.3"",
+    ""eslint-plugin-react-compiler"": ""0.0.0-experimental-0998c1e-20240625"",
-    ""prettier"": ""^3.3.0"",
-    ""react"": ""^19.0.0-rc.0"",
-    ""react-dom"": ""^19.0.0-rc.0"",
+    ""prettier"": ""^3.3.2"",
+    ""react"": ""19.0.0-rc.0"",
+    ""react-dom"": ""19.0.0-rc.0"",
-    ""typescript"": ""^5.4.5"",
+    ""typescript"": ""^5.5.2"",","-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-beta.0"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.6"",
-    ""@babel/plugin-external-helpers"": ""^7.24.6"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.24.6"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.6"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.6"",
-    ""@babel/preset-env"": ""^7.24.6"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@types/node"": ""^20.14.1"",
+    ""@types/node"": ""^20.14.9"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.12.0"",
-    ""@typescript-eslint/parser"": ""^7.12.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.14.1"",
+    ""@typescript-eslint/parser"": ""^7.14.1"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.21.4"",
+    ""esbuild"": ""^0.21.5"",
-    ""eslint-plugin-react"": ""^7.34.2"",
+    ""eslint-plugin-react"": ""^7.34.3"",
+    ""eslint-plugin-react-compiler"": ""0.0.0-experimental-0998c1e-20240625"",
-    ""prettier"": ""^3.3.0"",
-    ""react"": ""^19.0.0-rc.0"",
-    ""react-dom"": ""^19.0.0-rc.0"",
+    ""prettier"": ""^3.3.2"",
+    ""react"": ""19.0.0-rc.0"",
+    ""react-dom"": ""19.0.0-rc.0"",
-    ""typescript"": ""^5.4.5"",
+    ""typescript"": ""^5.5.2"",
+    ""use-sync-external-store"": ""^1.2.2"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,src/react.ts,"-// import { useDebugValue } from 'react'
-// import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector'
-// Those don't work in ESM, because React libs are CJS only.
+// import { useDebugValue, useSyncExternalStore } from 'react'
+// That doesn't work in ESM, because React libs are CJS only.
-// eslint-disable-next-line import/extensions
-import useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector'
-const { useDebugValue } = ReactExports
-const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports
+const { useDebugValue, useSyncExternalStore } = ReactExports
-type WithReact<S extends ReadonlyStoreApi<unknown>> = S & {
-  /** @deprecated please use api.getInitialState() */
-  getServerState?: () => ExtractState<S>
-}
+const identity = <T>(arg: T): T => arg
+export function useStore<S extends StoreApi<unknown>>(api: S): ExtractState<S>
-let didWarnAboutEqualityFn = false
-
-const identity = <T>(arg: T): T => arg
-
-export function useStore<S extends WithReact<StoreApi<unknown>>>(
-  api: S,
-): ExtractState<S>
-
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
+export function useStore<S extends StoreApi<unknown>, U>(
-/**
- * @deprecated The usage with three arguments is deprecated. Use `useStoreWithEqualityFn` from 'zustand/traditional'. The usage with one or two arguments is not deprecated.
- * https://github.com/pmndrs/zustand/discussions/1937
- */
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
-  api: S,
-  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined,
-): U
-
-  api: WithReact<StoreApi<TState>>,
+  api: StoreApi<TState>,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    equalityFn &&
-    !didWarnAboutEqualityFn
-  ) {
-    console.warn(
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    )
-    didWarnAboutEqualityFn = true
-  }
-  const slice = useSyncExternalStoreWithSelector(
+  const slice = useSyncExternalStore(
-    api.getState,
-    api.getServerState || api.getInitialState,
-    selector,
-    equalityFn,
+    () => selector(api.getState()),
+    () => selector(api.getInitialState()),
-export type UseBoundStore<S extends WithReact<ReadonlyStoreApi<unknown>>> = {
+export type UseBoundStore<S extends ReadonlyStoreApi<unknown>> = {
-  /**
-   * @deprecated Use `createWithEqualityFn` from 'zustand/traditional'
-   */
-  <U>(
-    selector: (state: ExtractState<S>) => U,
-    equalityFn: (a: U, b: U) => boolean,
-  ): U
-  /**
-   * @deprecated Use `useStore` hook to bind store
-   */
-  <S extends StoreApi<unknown>>(store: S): UseBoundStore<S>
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    typeof createState !== 'function'
-  ) {
-    console.warn(
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-    )
-  }
-  const api =
-    typeof createState === 'function' ? createStore(createState) : createState
+  const api = createStore(createState)
-  const useBoundStore: any = (selector?: any, equalityFn?: any) =>
-    useStore(api, selector, equalityFn)
+  const useBoundStore: any = (selector?: any) => useStore(api, selector)
-
-/**
- * @deprecated Use `import { create } from 'zustand'`
- */
-export default ((createState: any) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."",
-    )
-  }
-  return create(createState)
-}) as Create","-type ReadonlyStoreApi<T> = Pick<StoreApi<T>, 'getState' | 'subscribe'>
+type ReadonlyStoreApi<T> = Pick<
+  StoreApi<T>,
+  'getState' | 'getInitialState' | 'subscribe'
+>
-export function useStore<S extends WithReact<StoreApi<unknown>>>(
+export function useStore<S extends WithReact<ReadonlyStoreApi<unknown>>>(
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
+export function useStore<S extends WithReact<ReadonlyStoreApi<unknown>>, U>(
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
+export function useStore<S extends WithReact<ReadonlyStoreApi<unknown>>, U>(
-  api: WithReact<StoreApi<TState>>,
+  api: WithReact<ReadonlyStoreApi<TState>>,","-// import { useDebugValue } from 'react'
-// import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector'
-// Those don't work in ESM, because React libs are CJS only.
+// import { useDebugValue, useSyncExternalStore } from 'react'
+// That doesn't work in ESM, because React libs are CJS only.
-// eslint-disable-next-line import/extensions
-import useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector'
-const { useDebugValue } = ReactExports
-const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports
+const { useDebugValue, useSyncExternalStore } = ReactExports
-type ReadonlyStoreApi<T> = Pick<StoreApi<T>, 'getState' | 'subscribe'>
-
-type WithReact<S extends ReadonlyStoreApi<unknown>> = S & {
-  /** @deprecated please use api.getInitialState() */
-  getServerState?: () => ExtractState<S>
-}
-
-let didWarnAboutEqualityFn = false
+type ReadonlyStoreApi<T> = Pick<
+  StoreApi<T>,
+  'getState' | 'getInitialState' | 'subscribe'
+>
+export function useStore<S extends ReadonlyStoreApi<unknown>>(api: S): ExtractState<S>
-export function useStore<S extends WithReact<StoreApi<unknown>>>(
-  api: S,
-): ExtractState<S>
-
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
+export function useStore<S extends ReadonlyStoreApi<unknown>, U>(
-/**
- * @deprecated The usage with three arguments is deprecated. Use `useStoreWithEqualityFn` from 'zustand/traditional'. The usage with one or two arguments is not deprecated.
- * https://github.com/pmndrs/zustand/discussions/1937
- */
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
-  api: S,
-  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined,
-): U
-
-  api: WithReact<StoreApi<TState>>,
+  api: ReadonlyStoreApi<TState>,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    equalityFn &&
-    !didWarnAboutEqualityFn
-  ) {
-    console.warn(
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    )
-    didWarnAboutEqualityFn = true
-  }
-  const slice = useSyncExternalStoreWithSelector(
+  const slice = useSyncExternalStore(
-    api.getState,
-    api.getServerState || api.getInitialState,
-    selector,
-    equalityFn,
+    () => selector(api.getState()),
+    () => selector(api.getInitialState()),
-export type UseBoundStore<S extends WithReact<ReadonlyStoreApi<unknown>>> = {
+export type UseBoundStore<S extends ReadonlyStoreApi<unknown>> = {
-  /**
-   * @deprecated Use `createWithEqualityFn` from 'zustand/traditional'
-   */
-  <U>(
-    selector: (state: ExtractState<S>) => U,
-    equalityFn: (a: U, b: U) => boolean,
-  ): U
-  /**
-   * @deprecated Use `useStore` hook to bind store
-   */
-  <S extends StoreApi<unknown>>(store: S): UseBoundStore<S>
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    typeof createState !== 'function'
-  ) {
-    console.warn(
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-    )
-  }
-  const api =
-    typeof createState === 'function' ? createStore(createState) : createState
+  const api = createStore(createState)
-  const useBoundStore: any = (selector?: any, equalityFn?: any) =>
-    useStore(api, selector, equalityFn)
+  const useBoundStore: any = (selector?: any) => useStore(api, selector)
-
-/**
- * @deprecated Use `import { create } from 'zustand'`
- */
-export default ((createState: any) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."",
-    )
-  }
-  return create(createState)
-}) as Create"
pmndrs_zustand,a379a958b620a9b6dc81ac253eab98e06138a22f,Merge branch 'main' into v5,src/traditional.ts,"-type WithReact<S extends ReadonlyStoreApi<unknown>> = S & {
-  /** @deprecated please use api.getInitialState() */
-  getServerState?: () => ExtractState<S>
-}
-
-export function useStoreWithEqualityFn<S extends WithReact<StoreApi<unknown>>>(
+export function useStoreWithEqualityFn<S extends StoreApi<unknown>>(
-export function useStoreWithEqualityFn<
-  S extends WithReact<StoreApi<unknown>>,
-  U,
->(
+export function useStoreWithEqualityFn<S extends StoreApi<unknown>, U>(
-  api: WithReact<StoreApi<TState>>,
+  api: StoreApi<TState>,
-    api.getServerState || api.getInitialState,
+    api.getInitialState,
-export type UseBoundStoreWithEqualityFn<
-  S extends WithReact<ReadonlyStoreApi<unknown>>,
-> = {
+export type UseBoundStoreWithEqualityFn<S extends ReadonlyStoreApi<unknown>> = {","-type ReadonlyStoreApi<T> = Pick<StoreApi<T>, 'getState' | 'subscribe'>
+type ReadonlyStoreApi<T> = Pick<
+  StoreApi<T>,
+  'getState' | 'getInitialState' | 'subscribe'
+>
-export function useStoreWithEqualityFn<S extends WithReact<StoreApi<unknown>>>(
-  api: S,
-): ExtractState<S>
+export function useStoreWithEqualityFn<
+  S extends WithReact<ReadonlyStoreApi<unknown>>,
+>(api: S): ExtractState<S>
-  S extends WithReact<StoreApi<unknown>>,
+  S extends WithReact<ReadonlyStoreApi<unknown>>,
-  api: WithReact<StoreApi<TState>>,
+  api: WithReact<ReadonlyStoreApi<TState>>,","-type ReadonlyStoreApi<T> = Pick<StoreApi<T>, 'getState' | 'subscribe'>
-
-type WithReact<S extends ReadonlyStoreApi<unknown>> = S & {
-  /** @deprecated please use api.getInitialState() */
-  getServerState?: () => ExtractState<S>
-}
+type ReadonlyStoreApi<T> = Pick<
+  StoreApi<T>,
+  'getState' | 'getInitialState' | 'subscribe'
+>
-export function useStoreWithEqualityFn<S extends WithReact<StoreApi<unknown>>>(
+export function useStoreWithEqualityFn<S extends ReadonlyStoreApi<unknown>>(
-export function useStoreWithEqualityFn<
-  S extends WithReact<StoreApi<unknown>>,
-  U,
->(
+export function useStoreWithEqualityFn<S extends ReadonlyStoreApi<unknown>, U>(
-  api: WithReact<StoreApi<TState>>,
+  api: ReadonlyStoreApi<TState>,
-    api.getServerState || api.getInitialState,
+    api.getInitialState,
-export type UseBoundStoreWithEqualityFn<
-  S extends WithReact<ReadonlyStoreApi<unknown>>,
-> = {
+export type UseBoundStoreWithEqualityFn<S extends ReadonlyStoreApi<unknown>> = {"
pmndrs_zustand,2726e1e758d235ff409e5ac25dee11b099278493,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-beta.0"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.5"",
-    ""@babel/plugin-external-helpers"": ""^7.24.1"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.3"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.5"",
-    ""@babel/preset-env"": ""^7.24.5"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.2"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-    ""@babel/core"": ""^7.24.5"",
-    ""@babel/plugin-external-helpers"": ""^7.24.1"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.3"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.5"",
-    ""@babel/preset-env"": ""^7.24.5"",
+    ""@babel/core"": ""^7.24.6"",
+    ""@babel/plugin-external-helpers"": ""^7.24.6"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.24.6"",
+    ""@babel/plugin-transform-runtime"": ""^7.24.6"",
+    ""@babel/plugin-transform-typescript"": ""^7.24.6"",
+    ""@babel/preset-env"": ""^7.24.6"",
-    ""@rollup/plugin-replace"": ""^5.0.5"",
+    ""@rollup/plugin-replace"": ""^5.0.6"",
-    ""@testing-library/react"": ""^15.0.7"",
-    ""@types/node"": ""^20.12.12"",
-    ""@types/react"": ""^18.3.2"",
+    ""@testing-library/react"": ""^16.0.0"",
+    ""@types/node"": ""^20.14.1"",
+    ""@types/react"": ""^18.3.3"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.10.0"",
-    ""@typescript-eslint/parser"": ""^7.10.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.12.0"",
+    ""@typescript-eslint/parser"": ""^7.12.0"",
-    ""esbuild"": ""^0.21.3"",
+    ""esbuild"": ""^0.21.4"",
-    ""eslint-plugin-react"": ""^7.34.1"",
+    ""eslint-plugin-react"": ""^7.34.2"",
-    ""jsdom"": ""^24.0.0"",
+    ""jsdom"": ""^24.1.0"",
-    ""prettier"": ""^3.2.5"",
-    ""react"": ""19.0.0-rc-81c5ff2e04-20240521"",
-    ""react-dom"": ""19.0.0-rc-81c5ff2e04-20240521"",
+    ""prettier"": ""^3.3.0"",
+    ""react"": ""^19.0.0-rc.0"",
+    ""react-dom"": ""^19.0.0-rc.0"",
-    ""rollup"": ""^4.17.2"",
+    ""rollup"": ""^4.18.0"",","-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-beta.0"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.5"",
-    ""@babel/plugin-external-helpers"": ""^7.24.1"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.3"",
-    ""@babel/plugin-transform-typescript"": ""^7.24.5"",
-    ""@babel/preset-env"": ""^7.24.5"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-replace"": ""^5.0.5"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
+    ""@rollup/plugin-replace"": ""^5.0.6"",
-    ""@testing-library/react"": ""^15.0.7"",
-    ""@types/node"": ""^20.12.12"",
-    ""@types/react"": ""^18.3.2"",
+    ""@testing-library/react"": ""^16.0.0"",
+    ""@types/node"": ""^20.14.1"",
+    ""@types/react"": ""^18.3.3"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.10.0"",
-    ""@typescript-eslint/parser"": ""^7.10.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.12.0"",
+    ""@typescript-eslint/parser"": ""^7.12.0"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.21.3"",
+    ""esbuild"": ""^0.21.4"",
-    ""eslint-plugin-react"": ""^7.34.1"",
+    ""eslint-plugin-react"": ""^7.34.2"",
-    ""jsdom"": ""^24.0.0"",
+    ""jsdom"": ""^24.1.0"",
-    ""prettier"": ""^3.2.5"",
-    ""react"": ""19.0.0-rc-81c5ff2e04-20240521"",
-    ""react-dom"": ""19.0.0-rc-81c5ff2e04-20240521"",
+    ""prettier"": ""^3.3.0"",
+    ""react"": ""^19.0.0-rc.0"",
+    ""react-dom"": ""^19.0.0-rc.0"",
-    ""rollup"": ""^4.17.2"",
+    ""rollup"": ""^4.18.0"",
+    ""use-sync-external-store"": ""^1.2.2"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true"
pmndrs_zustand,4de1d1ff29692041e8ff994738bc806748a68fc1,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-    ""test:spec"": ""vitest"",
+    ""test:spec"": ""vitest run"",
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
+    ""@babel/core"": ""^7.24.5"",
+    ""@babel/plugin-external-helpers"": ""^7.24.1"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
+    ""@babel/plugin-transform-runtime"": ""^7.24.3"",
+    ""@babel/plugin-transform-typescript"": ""^7.24.5"",
+    ""@babel/preset-env"": ""^7.24.5"",
-    ""@testing-library/react"": ""^14.2.1"",
-    ""@types/node"": ""^20.11.24"",
-    ""@types/react"": ""^18.2.61"",
-    ""@types/react-dom"": ""^18.2.19"",
+    ""@testing-library/react"": ""^15.0.7"",
+    ""@types/node"": ""^20.12.12"",
+    ""@types/react"": ""^18.3.2"",
+    ""@types/react-dom"": ""^18.3.0"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.1.0"",
-    ""@typescript-eslint/parser"": ""^7.1.0"",
-    ""@vitest/coverage-v8"": ""^1.4.0"",
-    ""@vitest/ui"": ""^1.4.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.10.0"",
+    ""@typescript-eslint/parser"": ""^7.10.0"",
+    ""@vitest/coverage-v8"": ""^1.6.0"",
+    ""@vitest/ui"": ""^1.6.0"",
-    ""esbuild"": ""^0.20.1"",
-    ""eslint"": ""^8.57.0"",
+    ""esbuild"": ""^0.21.3"",
+    ""eslint"": ""8.57.0"",
-    ""eslint-plugin-react"": ""^7.33.2"",
-    ""eslint-plugin-react-hooks"": ""^4.6.0"",
-    ""eslint-plugin-vitest"": ""^0.3.22"",
-    ""immer"": ""^10.0.3"",
+    ""eslint-plugin-react"": ""^7.34.1"",
+    ""eslint-plugin-react-hooks"": ""^4.6.2"",
+    ""eslint-plugin-vitest"": ""^0.5.4"",
+    ""immer"": ""^10.1.1"",
-    ""react"": ""^18.2.0"",
-    ""react-dom"": ""^18.2.0"",
+    ""react"": ""19.0.0-rc-81c5ff2e04-20240521"",
+    ""react-dom"": ""19.0.0-rc-81c5ff2e04-20240521"",
-    ""rollup"": ""^4.12.0"",
+    ""rollup"": ""^4.17.2"",
-    ""typescript"": ""^5.3.3"",
-    ""vitest"": ""^1.4.0""
+    ""typescript"": ""^5.4.5"",
+    ""vitest"": ""^1.6.0""","-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""test:spec"": ""vitest"",
+    ""test:spec"": ""vitest run"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@testing-library/react"": ""^14.2.1"",
-    ""@types/node"": ""^20.11.24"",
-    ""@types/react"": ""^18.2.61"",
-    ""@types/react-dom"": ""^18.2.19"",
+    ""@testing-library/react"": ""^15.0.7"",
+    ""@types/node"": ""^20.12.12"",
+    ""@types/react"": ""^18.3.2"",
+    ""@types/react-dom"": ""^18.3.0"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.1.0"",
-    ""@typescript-eslint/parser"": ""^7.1.0"",
-    ""@vitest/coverage-v8"": ""^1.4.0"",
-    ""@vitest/ui"": ""^1.4.0"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.20.1"",
-    ""eslint"": ""^8.57.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.10.0"",
+    ""@typescript-eslint/parser"": ""^7.10.0"",
+    ""@vitest/coverage-v8"": ""^1.6.0"",
+    ""@vitest/ui"": ""^1.6.0"",
+    ""esbuild"": ""^0.21.3"",
+    ""eslint"": ""8.57.0"",
-    ""eslint-plugin-react"": ""^7.33.2"",
-    ""eslint-plugin-react-hooks"": ""^4.6.0"",
-    ""eslint-plugin-vitest"": ""^0.3.22"",
-    ""immer"": ""^10.0.3"",
+    ""eslint-plugin-react"": ""^7.34.1"",
+    ""eslint-plugin-react-hooks"": ""^4.6.2"",
+    ""eslint-plugin-vitest"": ""^0.5.4"",
+    ""immer"": ""^10.1.1"",
-    ""react"": ""^18.2.0"",
-    ""react-dom"": ""^18.2.0"",
+    ""react"": ""19.0.0-rc-81c5ff2e04-20240521"",
+    ""react-dom"": ""19.0.0-rc-81c5ff2e04-20240521"",
-    ""rollup"": ""^4.12.0"",
+    ""rollup"": ""^4.17.2"",
-    ""typescript"": ""^5.3.3"",
-    ""vitest"": ""^1.4.0""
+    ""typescript"": ""^5.4.5"",
+    ""use-sync-external-store"": ""^1.2.2"",
+    ""vitest"": ""^1.6.0""
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true"
pmndrs_zustand,263d63dbaddf61a05042aea68ae21138a56a2f5e,Merge branch 'main' into v5,examples/demo/package.json,,"+  ""packageManager"": ""pnpm@8.15.0"",
+    ""postprocessing"": ""^6.35.4"",","+  ""packageManager"": ""pnpm@8.15.0"",
+    ""postprocessing"": ""^6.35.4"","
pmndrs_zustand,263d63dbaddf61a05042aea68ae21138a56a2f5e,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","+  ""description"": ""🐻 Bear necessities for state management in React"",
+  ""type"": ""commonjs"",
-  ""description"": ""🐻 Bear necessities for state management in React"",
-    ""build"": ""concurrently -m 8 'yarn:build:*'"",
+    ""build"": ""pnpm run prebuild && pnpm run '/^build:.*/' && pnpm run postbuild"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-esm-ts"",
-    ""prettier:ci"": ""prettier '*.{js,json,md}' '{examples,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --list-different"",
-    ""eslint:ci"": ""eslint  --no-eslintrc --c .eslintrc.json '*.{js,json,ts}' '{src,tests}/**/*.{ts,tsx}'"",
-    ""pretest"": ""tsc"",
-    ""test"": ""vitest --ui --coverage"",
-    ""test:ci"": ""vitest"",
+    ""test"": ""pnpm run '/^test:.*/'"",
+    ""test:format"": ""prettier '*.{js,json,md}' '{examples,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --list-different"",
+    ""test:types"": ""tsc --noEmit"",
+    ""test:lint"": ""eslint  --no-eslintrc --c .eslintrc.json '*.{js,json,ts}' '{src,tests}/**/*.{ts,tsx}'"",
+    ""test:spec"": ""vitest"",
+  ""packageManager"": ""pnpm@8.15.0"",
-    ""concurrently"": ""^8.2.2"",
+    ""shelljs"": ""^0.8.5"",
-  },
-  ""packageManager"": ""yarn@1.22.21+sha256.dbed5b7e10c552ba0e1a545c948d5473bc6c5a28ce22a8fd27e493e3e5eb6370""
+  }","+  ""description"": ""🐻 Bear necessities for state management in React"",
-  ""version"": ""4.5.2"",
-  ""description"": ""🐻 Bear necessities for state management in React"",
+  ""type"": ""commonjs"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
-    ""build"": ""concurrently -m 8 'yarn:build:*'"",
+    ""build"": ""pnpm run prebuild && pnpm run '/^build:.*/' && pnpm run postbuild"",
+    ""build:react"": ""rollup -c --config-react"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""pnpm patch-d-ts && pnpm copy && pnpm patch-old-ts && pnpm patch-esm-ts"",
-    ""prettier:ci"": ""prettier '*.{js,json,md}' '{examples,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --list-different"",
-    ""eslint:ci"": ""eslint  --no-eslintrc --c .eslintrc.json '*.{js,json,ts}' '{src,tests}/**/*.{ts,tsx}'"",
-    ""pretest"": ""tsc"",
-    ""test"": ""vitest --ui --coverage"",
-    ""test:ci"": ""vitest"",
+    ""test"": ""pnpm run '/^test:.*/'"",
+    ""test:format"": ""prettier '*.{js,json,md}' '{examples,src,tests,docs}/**/*.{js,jsx,ts,tsx,md,mdx}' --list-different"",
+    ""test:types"": ""tsc --noEmit"",
+    ""test:lint"": ""eslint  --no-eslintrc --c .eslintrc.json '*.{js,json,ts}' '{src,tests}/**/*.{ts,tsx}'"",
+    ""test:spec"": ""vitest"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
+  ""packageManager"": ""pnpm@8.15.0"",
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""concurrently"": ""^8.2.2"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""shelljs"": ""^0.8.5"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true
-  },
-  ""packageManager"": ""yarn@1.22.21+sha256.dbed5b7e10c552ba0e1a545c948d5473bc6c5a28ce22a8fd27e493e3e5eb6370""
+  }"
pmndrs_zustand,4c4e4d1ec473da93077721c8a4c6522c3570b9a3,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-    ""@vitest/coverage-v8"": ""0.33.0"",
-    ""@vitest/ui"": ""0.33.0"",
+    ""@vitest/coverage-v8"": ""^1.4.0"",
+    ""@vitest/ui"": ""^1.4.0"",
-    ""vitest"": ""0.33.0""
+    ""vitest"": ""^1.4.0""","-  ""version"": ""4.5.2"",
+  ""version"": ""5.0.0-alpha.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-external-helpers"": ""^7.23.3"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
-    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
-    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-babel"": ""^6.0.4"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@vitest/coverage-v8"": ""0.33.0"",
-    ""@vitest/ui"": ""0.33.0"",
+    ""@vitest/coverage-v8"": ""^1.4.0"",
+    ""@vitest/ui"": ""^1.4.0"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""vitest"": ""0.33.0""
+    ""use-sync-external-store"": ""^1.2.0"",
+    ""vitest"": ""^1.4.0""
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true"
pmndrs_zustand,4c4e4d1ec473da93077721c8a4c6522c3570b9a3,Merge branch 'main' into v5,tests/devtools.test.tsx,"- * [] if two stores are coonected to one 'name' group and.
+ * [] if two stores are connected to one 'name' group and.
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-1] should create single connection for all indernal calls of .connect and `store` is not passed to .connect', async () => {
+    it('should create single connection for all internal calls of .connect and `store` is not passed to .connect', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-2] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-3] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-4] does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
+        it('does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-5] dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {
+        it('dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {","-import { Mock, afterEach, beforeEach, describe, expect, it, vi } from 'vitest'
+import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'
-    subscribe: Mock<[f: (m: unknown) => void], () => void>
-    unsubscribe: Mock<any>
-    send: Mock<any>
-    init: Mock<any>
-    error: Mock<any>
-    dispatch?: Mock<any>
+    subscribe: any
+    unsubscribe: any
+    send: any
+    init: any
+    error: any
+    dispatch?: any","-import { Mock, afterEach, beforeEach, describe, expect, it, vi } from 'vitest'
+import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'
-    subscribe: Mock<[f: (m: unknown) => void], () => void>
-    unsubscribe: Mock<any>
-    send: Mock<any>
-    init: Mock<any>
-    error: Mock<any>
-    dispatch?: Mock<any>
+    subscribe: any
+    unsubscribe: any
+    send: any
+    init: any
+    error: any
+    dispatch?: any
- * [] if two stores are coonected to one 'name' group and.
+ * [] if two stores are connected to one 'name' group and.
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-1] should create single connection for all indernal calls of .connect and `store` is not passed to .connect', async () => {
+    it('should create single connection for all internal calls of .connect and `store` is not passed to .connect', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-2] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-3] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-4] does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
+        it('does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-5] dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {
+        it('dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {"
pmndrs_zustand,4c4e4d1ec473da93077721c8a4c6522c3570b9a3,Merge branch 'main' into v5,tests/shallow.test.tsx,,"-  const testUseShallowSimpleCallback =
-    vi.fn<[{ selectorOutput: string[]; useShallowOutput: string[] }]>()
+  const testUseShallowSimpleCallback = vi.fn()","-  const testUseShallowSimpleCallback =
-    vi.fn<[{ selectorOutput: string[]; useShallowOutput: string[] }]>()
+  const testUseShallowSimpleCallback = vi.fn()"
pmndrs_zustand,4c4e4d1ec473da93077721c8a4c6522c3570b9a3,Merge branch 'main' into v5,tests/ssr.test.tsx,"-  const { bears, increasePopulation } = useBearStore(
-    ({ bears, increasePopulation }) => ({
-      bears,
-      increasePopulation,
-    }),
+  const bears = useBearStore(({ bears }) => bears)
+  const increasePopulation = useBearStore(
+    ({ increasePopulation }) => increasePopulation,","-      const { hydrateRoot } =
-        await vi.importActual<typeof import('react-dom/client')>(
-          'react-dom/client',
-        )
+      const { hydrateRoot }: any = await vi.importActual('react-dom/client')
-      const { hydrateRoot } =
-        await vi.importActual<typeof import('react-dom/client')>(
-          'react-dom/client',
-        )
+      const { hydrateRoot }: any = await vi.importActual('react-dom/client')","-  const { bears, increasePopulation } = useBearStore(
-    ({ bears, increasePopulation }) => ({
-      bears,
-      increasePopulation,
-    }),
+  const bears = useBearStore(({ bears }) => bears)
+  const increasePopulation = useBearStore(
+    ({ increasePopulation }) => increasePopulation,
-      const { hydrateRoot } =
-        await vi.importActual<typeof import('react-dom/client')>(
-          'react-dom/client',
-        )
+      const { hydrateRoot }: any = await vi.importActual('react-dom/client')
-      const { hydrateRoot } =
-        await vi.importActual<typeof import('react-dom/client')>(
-          'react-dom/client',
-        )
+      const { hydrateRoot }: any = await vi.importActual('react-dom/client')"
pmndrs_zustand,4c4e4d1ec473da93077721c8a4c6522c3570b9a3,Merge branch 'main' into v5,vitest.config.ts,,"+import { resolve } from 'path'
-      { find: /^zustand$/, replacement: './src/index.ts' },
-      { find: /^zustand(.*)$/, replacement: './src/$1.ts' },
+      { find: /^zustand$/, replacement: resolve('./src/index.ts') },
+      { find: /^zustand(.*)$/, replacement: resolve('./src/$1.ts') },","+import { resolve } from 'path'
-      { find: /^zustand$/, replacement: './src/index.ts' },
-      { find: /^zustand(.*)$/, replacement: './src/$1.ts' },
+      { find: /^zustand$/, replacement: resolve('./src/index.ts') },
+      { find: /^zustand(.*)$/, replacement: resolve('./src/$1.ts') },"
pmndrs_zustand,b19acdfab77fb2bd049c9af6dd94afd25e4b4910,Merge branch 'main' into v5,tests/devtools.test.tsx,"- * [] if two stores are coonected to one 'name' group and.
+ * [] if two stores are connected to one 'name' group and.
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-1] should create single connection for all indernal calls of .connect and `store` is not passed to .connect', async () => {
+    it('should create single connection for all internal calls of .connect and `store` is not passed to .connect', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-2] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-3] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-4] does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
+        it('does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-5] dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {
+        it('dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {","-it('works in non-browser env', async () => {
-  const originalWindow = global.window
-  global.window = undefined as any
-
-  expect(() => {
-    createStore(devtools(() => ({ count: 0 }), { enabled: true }))
-  }).not.toThrow()
-
-  global.window = originalWindow
-})
-
-it('works in react native env', async () => {
-  const originalWindow = global.window
-  global.window = {} as any
-
-  expect(() => {
-    createStore(devtools(() => ({ count: 0 }), { enabled: true }))
-  }).not.toThrow()
-
-  global.window = originalWindow
+describe('different envs', () => {
+  let savedConsoleWarn: any
+  beforeEach(() => {
+    savedConsoleWarn = console.warn
+    console.warn = vi.fn()
+  })
+  afterEach(() => {
+    console.warn = savedConsoleWarn
+  })
+
+  it('works in non-browser env', async () => {
+    const originalWindow = global.window
+    global.window = undefined as any
+
+    expect(() => {
+      createStore(devtools(() => ({ count: 0 }), { enabled: true }))
+    }).not.toThrow()
+
+    global.window = originalWindow
+  })
+
+  it('works in react native env', async () => {
+    const originalWindow = global.window
+    global.window = {} as any
+
+    expect(() => {
+      createStore(devtools(() => ({ count: 0 }), { enabled: true }))
+    }).not.toThrow()
+
+    global.window = originalWindow
+  })","-it('works in non-browser env', async () => {
-  const originalWindow = global.window
-  global.window = undefined as any
-
-  expect(() => {
-    createStore(devtools(() => ({ count: 0 }), { enabled: true }))
-  }).not.toThrow()
-
-  global.window = originalWindow
-})
-
-it('works in react native env', async () => {
-  const originalWindow = global.window
-  global.window = {} as any
-
-  expect(() => {
-    createStore(devtools(() => ({ count: 0 }), { enabled: true }))
-  }).not.toThrow()
-
-  global.window = originalWindow
+describe('different envs', () => {
+  let savedConsoleWarn: any
+  beforeEach(() => {
+    savedConsoleWarn = console.warn
+    console.warn = vi.fn()
+  })
+  afterEach(() => {
+    console.warn = savedConsoleWarn
+  })
+
+  it('works in non-browser env', async () => {
+    const originalWindow = global.window
+    global.window = undefined as any
+
+    expect(() => {
+      createStore(devtools(() => ({ count: 0 }), { enabled: true }))
+    }).not.toThrow()
+
+    global.window = originalWindow
+  })
+
+  it('works in react native env', async () => {
+    const originalWindow = global.window
+    global.window = {} as any
+
+    expect(() => {
+      createStore(devtools(() => ({ count: 0 }), { enabled: true }))
+    }).not.toThrow()
+
+    global.window = originalWindow
+  })
- * [] if two stores are coonected to one 'name' group and.
+ * [] if two stores are connected to one 'name' group and.
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-1] should create single connection for all indernal calls of .connect and `store` is not passed to .connect', async () => {
+    it('should create single connection for all internal calls of .connect and `store` is not passed to .connect', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-2] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-    // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-    // Relevant issues https://github.com/nodejs/node/issues/35889
-    it('[CI-MATRIX-3] should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
+    it('should call `.init` on single connection with combined states after each `create(devtools` call', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-4] does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
+        it('does nothing even if there is `api.dispatch`, connections isolated from each other', async () => {
-        // FIXME: Run this test separately in CI, until we're able to test modules in isolation i.e. use jest.resetModule and re-import modules in each test
-        // Relevant issues https://github.com/nodejs/node/issues/35889
-        it('[CI-MATRIX-5] dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {
+        it('dispatches with `api.dispatch` when `api.dispatchFromDevtools` is set to true, connections are isolated from each other', async () => {"
pmndrs_zustand,77162b5ad71cfbdc9f30fb13cbaf0d8dc8aea7d1,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.1"",
+  ""version"": ""5.0.0-alpha.3"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-  ""version"": ""4.5.1"",
+  ""version"": ""4.5.2"",
-    ""@babel/core"": ""^7.23.9"",
+    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.9"",
+    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/preset-env"": ""^7.23.9"",
+    ""@babel/preset-env"": ""^7.24.0"",
-    ""@types/node"": ""^20.11.19"",
-    ""@types/react"": ""^18.2.55"",
+    ""@types/node"": ""^20.11.24"",
+    ""@types/react"": ""^18.2.61"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.0.1"",
-    ""@typescript-eslint/parser"": ""^7.0.1"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.1.0"",
+    ""@typescript-eslint/parser"": ""^7.1.0"",
-    ""esbuild"": ""^0.20.0"",
-    ""eslint"": ""^8.56.0"",
+    ""esbuild"": ""^0.20.1"",
+    ""eslint"": ""^8.57.0"",
-  }
+  },
+  ""packageManager"": ""yarn@1.22.21+sha256.dbed5b7e10c552ba0e1a545c948d5473bc6c5a28ce22a8fd27e493e3e5eb6370""","-  ""version"": ""4.5.1"",
+  ""version"": ""5.0.0-alpha.3"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.23.9"",
+    ""@babel/core"": ""^7.24.0"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.9"",
+    ""@babel/plugin-transform-runtime"": ""^7.24.0"",
-    ""@babel/preset-env"": ""^7.23.9"",
+    ""@babel/preset-env"": ""^7.24.0"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@types/node"": ""^20.11.19"",
-    ""@types/react"": ""^18.2.55"",
+    ""@types/node"": ""^20.11.24"",
+    ""@types/react"": ""^18.2.61"",
-    ""@typescript-eslint/eslint-plugin"": ""^7.0.1"",
-    ""@typescript-eslint/parser"": ""^7.0.1"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.1.0"",
+    ""@typescript-eslint/parser"": ""^7.1.0"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.20.0"",
-    ""eslint"": ""^8.56.0"",
+    ""esbuild"": ""^0.20.1"",
+    ""eslint"": ""^8.57.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true
-  }
+  },
+  ""packageManager"": ""yarn@1.22.21+sha256.dbed5b7e10c552ba0e1a545c948d5473bc6c5a28ce22a8fd27e493e3e5eb6370"""
pmndrs_zustand,77162b5ad71cfbdc9f30fb13cbaf0d8dc8aea7d1,Merge branch 'main' into v5,rollup.config.js,"-const terser = require('@rollup/plugin-terser')
-const createBabelConfig = require('./babel.config.js')
-const entries = [{ find: /.*\/vanilla\.ts$/, replacement: 'zustand/vanilla' }]
+const entries = [
+  { find: /.*\/vanilla\/shallow\.ts$/, replacement: 'zustand/vanilla/shallow' },
+  { find: /.*\/react\/shallow\.ts$/, replacement: 'zustand/react/shallow' },
+  { find: /.*\/vanilla\.ts$/, replacement: 'zustand/vanilla' },
+  { find: /.*\/react\.ts$/, replacement: 'zustand/react' },
+]
-    ...createBabelConfig({ env: (env) => env === 'build' }, targets),
+    babelrc: false,
+    ignore: ['./node_modules'],
+    presets: [['@babel/preset-env', { loose: true, modules: false, targets }]],
+    plugins: [
+      ['@babel/plugin-transform-react-jsx', { runtime: 'automatic' }],
+      ['@babel/plugin-transform-typescript', { isTSX: true }],
+    ],
-        // a workround for #829
+        // a workaround for #829
-function createCommonJSConfig(input, output, options) {
+function createCommonJSConfig(input, output) {
-      outro: options.addModuleExport
-        ? [
-            `module.exports = ${options.addModuleExport.default};`,
-            ...Object.entries(options.addModuleExport)
-              .filter(([key]) => key !== 'default')
-              .map(([key, value]) => `module.exports.${key} = ${value};`),
-            `exports.default = module.exports;`,
-          ].join('\n')
-        : '',
-function createUMDConfig(input, output, env) {
-  let name = 'zustand'
-  const fileName = output.slice('dist/umd/'.length)
-  const capitalize = (s) => s.slice(0, 1).toUpperCase() + s.slice(1)
-  if (fileName !== 'index') {
-    name += fileName.replace(/(\w+)\W*/g, (_, p) => capitalize(p))
-  }
-  return {
-    input,
-    output: {
-      file: `${output}.${env}.js`,
-      format: 'umd',
-      name,
-      globals: {
-        react: 'React',
-        immer: 'immer',
-        // FIXME not yet supported
-        'use-sync-external-store/shim/with-selector':
-          'useSyncExternalStoreShimWithSelector',
-        'zustand/vanilla': 'zustandVanilla',
-      },
-    },
-    external,
-    plugins: [
-      alias({ entries: entries.filter((e) => !e.find.test(input)) }),
-      resolve({ extensions }),
-      replace({
-        'import.meta.env?.MODE': JSON.stringify(env),
-        delimiters: ['\\b', '\\b(?!(\\.|/))'],
-        preventAssignment: true,
-      }),
-      babelPlugin(getBabelOptions({ ie: 11 })),
-      ...(env === 'production' ? [terser()] : []),
-    ],
-  }
-}
-
-function createSystemConfig(input, output, env) {
-  return {
-    input,
-    output: {
-      file: `${output}.${env}.js`,
-      format: 'system',
-    },
-    external,
-    plugins: [
-      alias({ entries: entries.filter((e) => !e.find.test(input)) }),
-      resolve({ extensions }),
-      replace({
-        'import.meta.env?.MODE': JSON.stringify(env),
-        delimiters: ['\\b', '\\b(?!(\\.|/))'],
-        preventAssignment: true,
-      }),
-      getEsbuild('node12', env),
-    ],
-  }
-}
-
-    createCommonJSConfig(`src/${c}.ts`, `dist/${c}`, {
-      addModuleExport: {
-        index: {
-          default: 'react',
-          create: 'create',
-          useStore: 'useStore',
-          createStore: 'vanilla.createStore',
-        },
-        vanilla: { default: 'vanilla', createStore: 'createStore' },
-        shallow: { default: 'shallow', shallow: 'shallow$1' },
-      }[c],
-    }),
-    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.js`),
-    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.mjs`),
-    createUMDConfig(`src/${c}.ts`, `dist/umd/${c}`, 'development'),
-    createUMDConfig(`src/${c}.ts`, `dist/umd/${c}`, 'production'),
-    createSystemConfig(`src/${c}.ts`, `dist/system/${c}`, 'development'),
-    createSystemConfig(`src/${c}.ts`, `dist/system/${c}`, 'production'),
+    createCommonJSConfig(`src/${c}.ts`, `dist/${c}`),
+    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.mjs`), // just for testing sed -e flag","-function getEsbuild(target, env = 'development') {
+function getEsbuild(env = 'development') {
-    target,
+    target: 'es2018',
+    supported: { 'import-meta': true },
-      getEsbuild('node12'),
+      getEsbuild(),
-      getEsbuild('node12', env),
+      getEsbuild(env),","-const terser = require('@rollup/plugin-terser')
-const createBabelConfig = require('./babel.config.js')
-const entries = [{ find: /.*\/vanilla\.ts$/, replacement: 'zustand/vanilla' }]
+const entries = [
+  { find: /.*\/vanilla\/shallow\.ts$/, replacement: 'zustand/vanilla/shallow' },
+  { find: /.*\/react\/shallow\.ts$/, replacement: 'zustand/react/shallow' },
+  { find: /.*\/vanilla\.ts$/, replacement: 'zustand/vanilla' },
+  { find: /.*\/react\.ts$/, replacement: 'zustand/react' },
+]
-    ...createBabelConfig({ env: (env) => env === 'build' }, targets),
+    babelrc: false,
+    ignore: ['./node_modules'],
+    presets: [['@babel/preset-env', { loose: true, modules: false, targets }]],
+    plugins: [
+      ['@babel/plugin-transform-react-jsx', { runtime: 'automatic' }],
+      ['@babel/plugin-transform-typescript', { isTSX: true }],
+    ],
-function getEsbuild(target, env = 'development') {
+function getEsbuild(env = 'development') {
-    target,
+    target: 'es2018',
+    supported: { 'import-meta': true },
-        // a workround for #829
+        // a workaround for #829
-      getEsbuild('node12'),
+      getEsbuild(),
-function createCommonJSConfig(input, output, options) {
+function createCommonJSConfig(input, output) {
-      outro: options.addModuleExport
-        ? [
-            `module.exports = ${options.addModuleExport.default};`,
-            ...Object.entries(options.addModuleExport)
-              .filter(([key]) => key !== 'default')
-              .map(([key, value]) => `module.exports.${key} = ${value};`),
-            `exports.default = module.exports;`,
-          ].join('\n')
-        : '',
-function createUMDConfig(input, output, env) {
-  let name = 'zustand'
-  const fileName = output.slice('dist/umd/'.length)
-  const capitalize = (s) => s.slice(0, 1).toUpperCase() + s.slice(1)
-  if (fileName !== 'index') {
-    name += fileName.replace(/(\w+)\W*/g, (_, p) => capitalize(p))
-  }
-  return {
-    input,
-    output: {
-      file: `${output}.${env}.js`,
-      format: 'umd',
-      name,
-      globals: {
-        react: 'React',
-        immer: 'immer',
-        // FIXME not yet supported
-        'use-sync-external-store/shim/with-selector':
-          'useSyncExternalStoreShimWithSelector',
-        'zustand/vanilla': 'zustandVanilla',
-      },
-    },
-    external,
-    plugins: [
-      alias({ entries: entries.filter((e) => !e.find.test(input)) }),
-      resolve({ extensions }),
-      replace({
-        'import.meta.env?.MODE': JSON.stringify(env),
-        delimiters: ['\\b', '\\b(?!(\\.|/))'],
-        preventAssignment: true,
-      }),
-      babelPlugin(getBabelOptions({ ie: 11 })),
-      ...(env === 'production' ? [terser()] : []),
-    ],
-  }
-}
-
-function createSystemConfig(input, output, env) {
-  return {
-    input,
-    output: {
-      file: `${output}.${env}.js`,
-      format: 'system',
-    },
-    external,
-    plugins: [
-      alias({ entries: entries.filter((e) => !e.find.test(input)) }),
-      resolve({ extensions }),
-      replace({
-        'import.meta.env?.MODE': JSON.stringify(env),
-        delimiters: ['\\b', '\\b(?!(\\.|/))'],
-        preventAssignment: true,
-      }),
-      getEsbuild('node12', env),
-    ],
-  }
-}
-
-    createCommonJSConfig(`src/${c}.ts`, `dist/${c}`, {
-      addModuleExport: {
-        index: {
-          default: 'react',
-          create: 'create',
-          useStore: 'useStore',
-          createStore: 'vanilla.createStore',
-        },
-        vanilla: { default: 'vanilla', createStore: 'createStore' },
-        shallow: { default: 'shallow', shallow: 'shallow$1' },
-      }[c],
-    }),
-    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.js`),
-    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.mjs`),
-    createUMDConfig(`src/${c}.ts`, `dist/umd/${c}`, 'development'),
-    createUMDConfig(`src/${c}.ts`, `dist/umd/${c}`, 'production'),
-    createSystemConfig(`src/${c}.ts`, `dist/system/${c}`, 'development'),
-    createSystemConfig(`src/${c}.ts`, `dist/system/${c}`, 'production'),
+    createCommonJSConfig(`src/${c}.ts`, `dist/${c}`),
+    createESMConfig(`src/${c}.ts`, `dist/esm/${c}.mjs`), // just for testing sed -e flag"
pmndrs_zustand,77162b5ad71cfbdc9f30fb13cbaf0d8dc8aea7d1,Merge branch 'main' into v5,src/middleware/persist.ts,"-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-","-  migrate?: (persistedState: unknown, version: number) => S | Promise<S>
+  migrate?: (
+    persistedState: unknown,
+    version: number,
+  ) => PersistedState | Promise<PersistedState>","-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-  migrate?: (persistedState: unknown, version: number) => S | Promise<S>
+  migrate?: (
+    persistedState: unknown,
+    version: number,
+  ) => PersistedState | Promise<PersistedState>
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-"
pmndrs_zustand,77162b5ad71cfbdc9f30fb13cbaf0d8dc8aea7d1,Merge branch 'main' into v5,src/vanilla/shallow.ts,"-      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||
+      !Object.hasOwn(objB, keysA[i] as string) ||","-  for (let i = 0; i < keysA.length; i++) {
+  for (const keyA of keysA) {
-      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||
-      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])
+      !Object.prototype.hasOwnProperty.call(objB, keyA as string) ||
+      !Object.is(objA[keyA as keyof T], objB[keyA as keyof T])","-  for (let i = 0; i < keysA.length; i++) {
+  for (const keyA of keysA) {
-      !Object.prototype.hasOwnProperty.call(objB, keysA[i] as string) ||
-      !Object.is(objA[keysA[i] as keyof T], objB[keysA[i] as keyof T])
+      !Object.hasOwn(objB, keyA as string) ||
+      !Object.is(objA[keyA as keyof T], objB[keyA as keyof T])"
pmndrs_zustand,7868b8c005e8b872b1d64d956f1c6ef5fee16986,Merge branch 'main' into v5,package.json,"-  ""version"": ""4.5.0"",
+  ""version"": ""5.0.0-alpha.2"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-  ""version"": ""4.5.0"",
+  ""version"": ""4.5.1"",
-    ""@babel/core"": ""^7.23.7"",
+    ""@babel/core"": ""^7.23.9"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.7"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.9"",
-    ""@babel/preset-env"": ""^7.23.8"",
+    ""@babel/preset-env"": ""^7.23.9"",
-    ""@testing-library/react"": ""^14.1.2"",
-    ""@types/node"": ""^20.11.5"",
-    ""@types/react"": ""^18.2.48"",
-    ""@types/react-dom"": ""^18.2.18"",
+    ""@testing-library/react"": ""^14.2.1"",
+    ""@types/node"": ""^20.11.19"",
+    ""@types/react"": ""^18.2.55"",
+    ""@types/react-dom"": ""^18.2.19"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.19.0"",
-    ""@typescript-eslint/parser"": ""^6.19.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.0.1"",
+    ""@typescript-eslint/parser"": ""^7.0.1"",
-    ""esbuild"": ""^0.19.11"",
+    ""esbuild"": ""^0.20.0"",
-    ""eslint-plugin-vitest"": ""^0.3.20"",
+    ""eslint-plugin-vitest"": ""^0.3.22"",
-    ""jsdom"": ""^23.2.0"",
+    ""jsdom"": ""^24.0.0"",
-    ""prettier"": ""^3.2.4"",
+    ""prettier"": ""^3.2.5"",
-    ""rollup"": ""^4.9.5"",
-    ""rollup-plugin-esbuild"": ""^6.1.0"",
+    ""rollup"": ""^4.12.0"",
+    ""rollup-plugin-esbuild"": ""^6.1.1"",","-  ""version"": ""4.5.0"",
+  ""version"": ""5.0.0-alpha.2"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
+    ""build:react"": ""rollup -c --config-react"",
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.23.7"",
+    ""@babel/core"": ""^7.23.9"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.7"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.9"",
-    ""@babel/preset-env"": ""^7.23.8"",
+    ""@babel/preset-env"": ""^7.23.9"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@testing-library/react"": ""^14.1.2"",
-    ""@types/node"": ""^20.11.5"",
-    ""@types/react"": ""^18.2.48"",
-    ""@types/react-dom"": ""^18.2.18"",
+    ""@testing-library/react"": ""^14.2.1"",
+    ""@types/node"": ""^20.11.19"",
+    ""@types/react"": ""^18.2.55"",
+    ""@types/react-dom"": ""^18.2.19"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.19.0"",
-    ""@typescript-eslint/parser"": ""^6.19.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^7.0.1"",
+    ""@typescript-eslint/parser"": ""^7.0.1"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.19.11"",
+    ""esbuild"": ""^0.20.0"",
-    ""eslint-plugin-vitest"": ""^0.3.20"",
+    ""eslint-plugin-vitest"": ""^0.3.22"",
-    ""jsdom"": ""^23.2.0"",
+    ""jsdom"": ""^24.0.0"",
-    ""prettier"": ""^3.2.4"",
+    ""prettier"": ""^3.2.5"",
-    ""rollup"": ""^4.9.5"",
-    ""rollup-plugin-esbuild"": ""^6.1.0"",
+    ""rollup"": ""^4.12.0"",
+    ""rollup-plugin-esbuild"": ""^6.1.1"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true"
pmndrs_zustand,7868b8c005e8b872b1d64d956f1c6ef5fee16986,Merge branch 'main' into v5,src/middleware/persist.ts,"-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-","-  setItem: (name: string, value: string) => void | Promise<void>
-  removeItem: (name: string) => void | Promise<void>
+  setItem: (name: string, value: string) => unknown | Promise<unknown>
+  removeItem: (name: string) => unknown | Promise<unknown>
-  setItem: (name: string, value: StorageValue<S>) => void | Promise<void>
-  removeItem: (name: string) => void | Promise<void>
+  setItem: (name: string, value: StorageValue<S>) => unknown | Promise<unknown>
+  removeItem: (name: string) => unknown | Promise<unknown>
-  const setItem = (): void | Promise<void> => {
+  const setItem = () => {","-  setItem: (name: string, value: string) => void | Promise<void>
-  removeItem: (name: string) => void | Promise<void>
+  setItem: (name: string, value: string) => unknown | Promise<unknown>
+  removeItem: (name: string) => unknown | Promise<unknown>
-  setItem: (name: string, value: StorageValue<S>) => void | Promise<void>
-  removeItem: (name: string) => void | Promise<void>
+  setItem: (name: string, value: StorageValue<S>) => unknown | Promise<unknown>
+  removeItem: (name: string) => unknown | Promise<unknown>
-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
+    storage: createJSONStorage<S>(() => localStorage),
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
+  let storage = options.storage
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    storage: createJSONStorage<S>(() => localStorage),
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage = options.storage
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
-  const setItem = (): void | Promise<void> => {
+  const setItem = () => {
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-"
pmndrs_zustand,7868b8c005e8b872b1d64d956f1c6ef5fee16986,Merge branch 'main' into v5,tsconfig.json,,"-      ""zustand/*"": [""./src/*.ts""],
-    },
+      ""zustand/*"": [""./src/*.ts""]
+    }
-  ""exclude"": [""node_modules"", ""dist""],
+  ""exclude"": [""node_modules"", ""dist""]","-      ""zustand/*"": [""./src/*.ts""],
-    },
+      ""zustand/*"": [""./src/*.ts""]
+    }
-  ""exclude"": [""node_modules"", ""dist""],
+  ""exclude"": [""node_modules"", ""dist""]"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""downlevel-dts"": ""^0.11.0"",
+    ""use-sync-external-store"": ""^1.2.0"",
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true","-  ""version"": ""4.4.7"",
+  ""version"": ""4.5.0"",
-    ""@babel/core"": ""^7.23.3"",
+    ""@babel/core"": ""^7.23.7"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.4"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.4"",
-    ""@babel/preset-env"": ""^7.23.3"",
-    ""@redux-devtools/extension"": ""^3.2.6"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.7"",
+    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
+    ""@babel/preset-env"": ""^7.23.8"",
+    ""@redux-devtools/extension"": ""^3.3.0"",
-    ""@rollup/plugin-typescript"": ""^11.1.5"",
+    ""@rollup/plugin-typescript"": ""^11.1.6"",
-    ""@types/react"": ""^18.2.39"",
-    ""@types/react-dom"": ""^18.2.17"",
+    ""@types/node"": ""^20.11.5"",
+    ""@types/react"": ""^18.2.48"",
+    ""@types/react-dom"": ""^18.2.18"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.13.0"",
-    ""@typescript-eslint/parser"": ""^6.13.0"",
-    ""@vitest/coverage-v8"": ""^0.34.6"",
-    ""@vitest/ui"": ""^0.34.6"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.19.0"",
+    ""@typescript-eslint/parser"": ""^6.19.0"",
+    ""@vitest/coverage-v8"": ""0.33.0"",
+    ""@vitest/ui"": ""0.33.0"",
-    ""esbuild"": ""^0.19.8"",
-    ""eslint"": ""^8.54.0"",
-    ""eslint-config-prettier"": ""^9.0.0"",
+    ""esbuild"": ""^0.19.11"",
+    ""eslint"": ""^8.56.0"",
+    ""eslint-config-prettier"": ""^9.1.0"",
-    ""eslint-plugin-import"": ""^2.29.0"",
-    ""eslint-plugin-prettier"": ""^5.0.1"",
+    ""eslint-plugin-import"": ""^2.29.1"",
+    ""eslint-plugin-prettier"": ""^5.1.3"",
-    ""eslint-plugin-vitest"": ""^0.3.10"",
+    ""eslint-plugin-vitest"": ""^0.3.20"",
-    ""jsdom"": ""^23.0.0"",
+    ""jsdom"": ""^23.2.0"",
-    ""prettier"": ""^3.1.0"",
+    ""prettier"": ""^3.2.4"",
-    ""redux"": ""5.0.0-alpha.1"",
-    ""rollup"": ""^4.6.0"",
+    ""redux"": ""^5.0.1"",
+    ""rollup"": ""^4.9.5"",
-    ""typescript"": ""^5.3.2"",
-    ""vitest"": ""^0.34.6""
+    ""typescript"": ""^5.3.3"",
+    ""vitest"": ""0.33.0""
-  },
-  ""resolutions"": {
-    ""vite"": ""4.5.0""","-  ""version"": ""4.4.7"",
+  ""version"": ""4.5.0"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""<4.0"": {
+    "">=4.5"": {
-        ""ts3.4/*""
+        ""esm/*""
-        ""ts3.4/*""
+        ""*""
+      ]
+    },
+    ""*"": {
+      ""esm/*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
+      ],
+      ""*"": [
+        ""ts_version_4.5_and_above_is_required.d.ts""
-  ""files"": [
-    ""**""
-  ],
-      ""module"": {
-        ""types"": ""./esm/index.d.ts"",
-        ""default"": ""./esm/index.js""
-      },
-    ""./vanilla"": {
+    ""./*"": {
-        ""types"": ""./esm/vanilla.d.mts"",
-        ""default"": ""./esm/vanilla.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla.d.ts"",
-        ""default"": ""./esm/vanilla.js""
+        ""types"": ""./esm/*.d.mts"",
+        ""default"": ""./esm/*.mjs""
-        ""types"": ""./vanilla.d.ts"",
-        ""default"": ""./vanilla.js""
-      }
-    },
-    ""./middleware"": {
-      ""import"": {
-        ""types"": ""./esm/middleware.d.mts"",
-        ""default"": ""./esm/middleware.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware.d.ts"",
-        ""default"": ""./esm/middleware.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware.d.ts"",
-        ""default"": ""./middleware.js""
-      }
-    },
-    ""./middleware/immer"": {
-      ""import"": {
-        ""types"": ""./esm/middleware/immer.d.mts"",
-        ""default"": ""./esm/middleware/immer.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/middleware/immer.d.ts"",
-        ""default"": ""./esm/middleware/immer.js""
-      },
-      ""default"": {
-        ""types"": ""./middleware/immer.d.ts"",
-        ""default"": ""./middleware/immer.js""
-      }
-    },
-    ""./shallow"": {
-      ""import"": {
-        ""types"": ""./esm/shallow.d.mts"",
-        ""default"": ""./esm/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/shallow.d.ts"",
-        ""default"": ""./esm/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./shallow.d.ts"",
-        ""default"": ""./shallow.js""
-      }
-    },
-    ""./vanilla/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/vanilla/shallow.d.mts"",
-        ""default"": ""./esm/vanilla/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/vanilla/shallow.d.ts"",
-        ""default"": ""./esm/vanilla/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./vanilla/shallow.d.ts"",
-        ""default"": ""./vanilla/shallow.js""
-      }
-    },
-    ""./react/shallow"": {
-      ""import"": {
-        ""types"": ""./esm/react/shallow.d.mts"",
-        ""default"": ""./esm/react/shallow.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/react/shallow.d.ts"",
-        ""default"": ""./esm/react/shallow.js""
-      },
-      ""default"": {
-        ""types"": ""./react/shallow.d.ts"",
-        ""default"": ""./react/shallow.js""
-      }
-    },
-    ""./traditional"": {
-      ""import"": {
-        ""types"": ""./esm/traditional.d.mts"",
-        ""default"": ""./esm/traditional.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/traditional.d.ts"",
-        ""default"": ""./esm/traditional.js""
-      },
-      ""default"": {
-        ""types"": ""./traditional.d.ts"",
-        ""default"": ""./traditional.js""
-      }
-    },
-    ""./context"": {
-      ""import"": {
-        ""types"": ""./esm/context.d.mts"",
-        ""default"": ""./esm/context.mjs""
-      },
-      ""module"": {
-        ""types"": ""./esm/context.d.ts"",
-        ""default"": ""./esm/context.js""
-      },
-      ""default"": {
-        ""types"": ""./context.d.ts"",
-        ""default"": ""./context.js""
+        ""types"": ""./*.d.ts"",
+        ""default"": ""./*.js""
+  ""files"": [
+    ""**""
+  ],
-    ""build:context"": ""rollup -c --config-context"",
-    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-esm-ts"",
+    ""postbuild"": ""yarn patch-d-ts && yarn copy && yarn patch-old-ts && yarn patch-esm-ts"",
-    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && downlevel-dts dist dist/ts3.4 && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
-    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').copyFileSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
+    ""copy"": ""shx cp -r dist/src/* dist/esm && shx cp -r dist/src/* dist && shx rm -rf dist/src && shx rm -rf dist/{src,tests} && shx cp package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.prettier=undefined;\"""",
+    ""patch-old-ts"": ""shx touch dist/ts_version_4.5_and_above_is_required.d.ts"",
+    ""patch-esm-ts"": ""node -e \""require('shelljs').find('dist/esm/**/*.d.ts').forEach(f=>{var f2=f.replace(/\\.ts$/,'.mts');require('fs').renameSync(f,f2);require('shelljs').sed('-i',/ from '(\\.[^']+)';$/,' from \\'\\$1.mjs\\';',f2);require('shelljs').sed('-i',/^declare module '(\\.[^']+)'/,'declare module \\'\\$1.mjs\\'',f2)})\""""
-    ""node"": "">=12.7.0""
+    ""node"": "">=12.20.0""
-  ""dependencies"": {
-    ""use-sync-external-store"": ""1.2.0""
-  },
-    ""@babel/core"": ""^7.23.3"",
+    ""@babel/core"": ""^7.23.7"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.4"",
-    ""@babel/plugin-transform-typescript"": ""^7.23.4"",
-    ""@babel/preset-env"": ""^7.23.3"",
-    ""@redux-devtools/extension"": ""^3.2.6"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.7"",
+    ""@babel/plugin-transform-typescript"": ""^7.23.6"",
+    ""@babel/preset-env"": ""^7.23.8"",
+    ""@redux-devtools/extension"": ""^3.3.0"",
-    ""@rollup/plugin-terser"": ""^0.4.4"",
-    ""@rollup/plugin-typescript"": ""^11.1.5"",
+    ""@rollup/plugin-typescript"": ""^11.1.6"",
-    ""@types/react"": ""^18.2.39"",
-    ""@types/react-dom"": ""^18.2.17"",
+    ""@types/node"": ""^20.11.5"",
+    ""@types/react"": ""^18.2.48"",
+    ""@types/react-dom"": ""^18.2.18"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.13.0"",
-    ""@typescript-eslint/parser"": ""^6.13.0"",
-    ""@vitest/coverage-v8"": ""^0.34.6"",
-    ""@vitest/ui"": ""^0.34.6"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.19.0"",
+    ""@typescript-eslint/parser"": ""^6.19.0"",
+    ""@vitest/coverage-v8"": ""0.33.0"",
+    ""@vitest/ui"": ""0.33.0"",
-    ""downlevel-dts"": ""^0.11.0"",
-    ""esbuild"": ""^0.19.8"",
-    ""eslint"": ""^8.54.0"",
-    ""eslint-config-prettier"": ""^9.0.0"",
+    ""esbuild"": ""^0.19.11"",
+    ""eslint"": ""^8.56.0"",
+    ""eslint-config-prettier"": ""^9.1.0"",
-    ""eslint-plugin-import"": ""^2.29.0"",
-    ""eslint-plugin-prettier"": ""^5.0.1"",
+    ""eslint-plugin-import"": ""^2.29.1"",
+    ""eslint-plugin-prettier"": ""^5.1.3"",
-    ""eslint-plugin-vitest"": ""^0.3.10"",
+    ""eslint-plugin-vitest"": ""^0.3.20"",
-    ""jsdom"": ""^23.0.0"",
+    ""jsdom"": ""^23.2.0"",
-    ""prettier"": ""^3.1.0"",
+    ""prettier"": ""^3.2.4"",
-    ""redux"": ""5.0.0-alpha.1"",
-    ""rollup"": ""^4.6.0"",
+    ""redux"": ""^5.0.1"",
+    ""rollup"": ""^4.9.5"",
-    ""typescript"": ""^5.3.2"",
-    ""vitest"": ""^0.34.6""
+    ""typescript"": ""^5.3.3"",
+    ""use-sync-external-store"": ""^1.2.0"",
+    ""vitest"": ""0.33.0""
-    ""@types/react"": "">=16.8"",
+    ""@types/react"": "">=18.0"",
-    ""react"": "">=16.8""
+    ""react"": "">=18.0"",
+    ""use-sync-external-store"": "">=1.2.0""
+    },
+    ""use-sync-external-store"": {
+      ""optional"": true
-  },
-  ""resolutions"": {
-    ""vite"": ""4.5.0"""
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,src/middleware/persist.ts,"-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-","+
+  api.getInitialState = () => configResult","-   * @deprecated Use `storage` instead.
-   * A function returning a storage.
-   * The storage must fit `window.localStorage`'s api (or an async version of it).
-   * For example the storage could be `AsyncStorage` from React Native.
-   *
-   * @default () => localStorage
-   */
-  getStorage?: () => StateStorage
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom serializer.
-   * The returned string will be stored in the storage.
-   *
-   * @default JSON.stringify
-   */
-  serialize?: (state: StorageValue<S>) => string | Promise<string>
-  /**
-   * @deprecated Use `storage` instead.
-   * Use a custom deserializer.
-   * Must return an object matching StorageValue<S>
-   *
-   * @param str The storage's current value.
-   * @default JSON.parse
-   */
-  deserialize?: (
-    str: string,
-  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>
-  /**
-const oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
+const persistImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-    getStorage: () => localStorage,
-    serialize: JSON.stringify as (state: StorageValue<S>) => string,
-    deserialize: JSON.parse as (str: string) => StorageValue<S>,
+    storage: createJSONStorage<S>(() => localStorage),
-  let storage: StateStorage | undefined
-
-  try {
-    storage = options.getStorage()
-  } catch (e) {
-    // prevent error if the storage is not defined (e.g. when server side rendering a page)
-  }
+  let storage = options.storage
-  const thenableSerialize = toThenable(options.serialize)
-
-  const setItem = (): Thenable<void> => {
-    const state = options.partialize({ ...get() })
-
-    let errorInSync: Error | undefined
-    const thenable = thenableSerialize({ state, version: options.version })
-      .then((serializedValue) =>
-        (storage as StateStorage).setItem(options.name, serializedValue),
-      )
-      .catch((e) => {
-        errorInSync = e
-      })
-    if (errorInSync) {
-      throw errorInSync
-    }
-    return thenable
-  }
-
-  const savedSetState = api.setState
-
-  api.setState = (state, replace) => {
-    savedSetState(state, replace)
-    void setItem()
-  }
-
-  const configResult = config(
-    (...args) => {
-      set(...args)
-      void setItem()
-    },
-    get,
-    api,
-  )
-
-  // a workaround to solve the issue of not storing rehydrated state in sync storage
-  // the set(state) value would be later overridden with initial state by create()
-  // to avoid this, we merge the state from localStorage into the initial state.
-  let stateFromStorage: S | undefined
-
-  // rehydrate initial state with existing stored state
-  const hydrate = () => {
-    if (!storage) return
-
-    hasHydrated = false
-    hydrationListeners.forEach((cb) => cb(get()))
-
-    const postRehydrationCallback =
-      options.onRehydrateStorage?.(get()) || undefined
-
-    // bind is used to avoid `TypeError: Illegal invocation` error
-    return toThenable(storage.getItem.bind(storage))(options.name)
-      .then((storageValue) => {
-        if (storageValue) {
-          return options.deserialize(storageValue)
-        }
-      })
-      .then((deserializedStorageValue) => {
-        if (deserializedStorageValue) {
-          if (
-            typeof deserializedStorageValue.version === 'number' &&
-            deserializedStorageValue.version !== options.version
-          ) {
-            if (options.migrate) {
-              return options.migrate(
-                deserializedStorageValue.state,
-                deserializedStorageValue.version,
-              )
-            }
-            console.error(
-              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-            )
-          } else {
-            return deserializedStorageValue.state
-          }
-        }
-      })
-      .then((migratedState) => {
-        stateFromStorage = options.merge(
-          migratedState as S,
-          get() ?? configResult,
-        )
-
-        set(stateFromStorage as S, true)
-        return setItem()
-      })
-      .then(() => {
-        postRehydrationCallback?.(stateFromStorage, undefined)
-        hasHydrated = true
-        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))
-      })
-      .catch((e: Error) => {
-        postRehydrationCallback?.(undefined, e)
-      })
-  }
-
-  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {
-    setOptions: (newOptions) => {
-      options = {
-        ...options,
-        ...newOptions,
-      }
-
-      if (newOptions.getStorage) {
-        storage = newOptions.getStorage()
-      }
-    },
-    clearStorage: () => {
-      storage?.removeItem(options.name)
-    },
-    getOptions: () => options,
-    rehydrate: () => hydrate() as Promise<void>,
-    hasHydrated: () => hasHydrated,
-    onHydrate: (cb) => {
-      hydrationListeners.add(cb)
-
-      return () => {
-        hydrationListeners.delete(cb)
-      }
-    },
-    onFinishHydration: (cb) => {
-      finishHydrationListeners.add(cb)
-
-      return () => {
-        finishHydrationListeners.delete(cb)
-      }
-    },
-  }
-
-  hydrate()
-
-  return stateFromStorage || configResult
-}
-
-const newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {
-  type S = ReturnType<typeof config>
-  let options = {
-    storage: createJSONStorage<S>(() => localStorage),
-    partialize: (state: S) => state,
-    version: 0,
-    merge: (persistedState: unknown, currentState: S) => ({
-      ...currentState,
-      ...(persistedState as object),
-    }),
-    ...baseOptions,
-  }
-
-  let hasHydrated = false
-  const hydrationListeners = new Set<PersistListener<S>>()
-  const finishHydrationListeners = new Set<PersistListener<S>>()
-  let storage = options.storage
-
-  if (!storage) {
-    return config(
-      (...args) => {
-        console.warn(
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-        )
-        set(...args)
-      },
-      get,
-      api,
-    )
-  }
-
+
+  api.getInitialState = () => configResult
-const persistImpl: PersistImpl = (config, baseOptions) => {
-  if (
-    'getStorage' in baseOptions ||
-    'serialize' in baseOptions ||
-    'deserialize' in baseOptions
-  ) {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-      )
-    }
-    return oldImpl(config, baseOptions)
-  }
-  return newImpl(config, baseOptions)
-}
-"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,src/react.ts,"-let didWarnAboutEqualityFn = false
-
-/**
- * @deprecated Use `useStoreWithEqualityFn` from 'zustand/traditional'
- * https://github.com/pmndrs/zustand/discussions/1937
- */
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
-  api: S,
-  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined,
-): U
-
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    equalityFn &&
-    !didWarnAboutEqualityFn
-  ) {
-    console.warn(
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    )
-    didWarnAboutEqualityFn = true
-  }
-    equalityFn,
-  /**
-   * @deprecated Use `createWithEqualityFn` from 'zustand/traditional'
-   */
-  <U>(
-    selector: (state: ExtractState<S>) => U,
-    equalityFn: (a: U, b: U) => boolean,
-  ): U
-  /**
-   * @deprecated Use `useStore` hook to bind store
-   */
-  <S extends StoreApi<unknown>>(store: S): UseBoundStore<S>
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    typeof createState !== 'function'
-  ) {
-    console.warn(
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-    )
-  }
-  const api =
-    typeof createState === 'function' ? createStore(createState) : createState
+  const api = createStore(createState)
-  const useBoundStore: any = (selector?: any, equalityFn?: any) =>
-    useStore(api, selector, equalityFn)
+  const useBoundStore: any = (selector?: any) => useStore(api, selector)
-
-/**
- * @deprecated Use `import { create } from 'zustand'`
- */
-export default ((createState: any) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."",
-    )
-  }
-  return create(createState)
-}) as Create","+  /** @deprecated please use api.getState() */
+
+const identity = <T>(arg: T): T => arg
-  selector: (state: TState) => StateSlice = api.getState as any,
+  selector: (state: TState) => StateSlice = identity as any,
-    api.getServerState || api.getState,
+    api.getServerState || api.getInitialState,","+  /** @deprecated please use api.getState() */
-let didWarnAboutEqualityFn = false
+const identity = <T>(arg: T): T => arg
-/**
- * @deprecated Use `useStoreWithEqualityFn` from 'zustand/traditional'
- * https://github.com/pmndrs/zustand/discussions/1937
- */
-export function useStore<S extends WithReact<StoreApi<unknown>>, U>(
-  api: S,
-  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined,
-): U
-
-  selector: (state: TState) => StateSlice = api.getState as any,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
+  selector: (state: TState) => StateSlice = identity as any,
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    equalityFn &&
-    !didWarnAboutEqualityFn
-  ) {
-    console.warn(
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    )
-    didWarnAboutEqualityFn = true
-  }
-    api.getServerState || api.getState,
+    api.getServerState || api.getInitialState,
-    equalityFn,
-  /**
-   * @deprecated Use `createWithEqualityFn` from 'zustand/traditional'
-   */
-  <U>(
-    selector: (state: ExtractState<S>) => U,
-    equalityFn: (a: U, b: U) => boolean,
-  ): U
-  /**
-   * @deprecated Use `useStore` hook to bind store
-   */
-  <S extends StoreApi<unknown>>(store: S): UseBoundStore<S>
-  if (
-    import.meta.env?.MODE !== 'production' &&
-    typeof createState !== 'function'
-  ) {
-    console.warn(
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-    )
-  }
-  const api =
-    typeof createState === 'function' ? createStore(createState) : createState
+  const api = createStore(createState)
-  const useBoundStore: any = (selector?: any, equalityFn?: any) =>
-    useStore(api, selector, equalityFn)
+  const useBoundStore: any = (selector?: any) => useStore(api, selector)
-
-/**
- * @deprecated Use `import { create } from 'zustand'`
- */
-export default ((createState: any) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."",
-    )
-  }
-  return create(createState)
-}) as Create"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,src/traditional.ts,,"+  /** @deprecated please use api.getState() */
+
+const identity = <T>(arg: T): T => arg
-  selector: (state: TState) => StateSlice = api.getState as any,
+  selector: (state: TState) => StateSlice = identity as any,
-    api.getServerState || api.getState,
+    api.getServerState || api.getInitialState,","+  /** @deprecated please use api.getState() */
+
+const identity = <T>(arg: T): T => arg
-  selector: (state: TState) => StateSlice = api.getState as any,
+  selector: (state: TState) => StateSlice = identity as any,
-    api.getServerState || api.getState,
+    api.getServerState || api.getInitialState,"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,src/vanilla.ts,"-  /**
-   * @deprecated Use `unsubscribe` returned by `subscribe`
-   */
-  destroy: () => void
-  const destroy: StoreApi<TState>['destroy'] = () => {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.',
-      )
-    }
-    listeners.clear()
-  }
-
-  const api = { setState, getState, subscribe, destroy }
+  const api = { setState, getState, subscribe }
-
-/**
- * @deprecated Use `import { createStore } from 'zustand/vanilla'`
- */
-export default ((createState) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."",
-    )
-  }
-  return createStore(createState)
-}) as CreateStore
-
-// ---------------------------------------------------------
-
-/**
- * @deprecated Use `unknown` instead of `State`
- */
-export type State = unknown
-
-/**
- * @deprecated Use `Partial<T> | ((s: T) => Partial<T>)` instead of `PartialState<T>`
- */
-export type PartialState<T extends State> =
-  | Partial<T>
-  | ((state: T) => Partial<T>)
-
-/**
- * @deprecated Use `(s: T) => U` instead of `StateSelector<T, U>`
- */
-export type StateSelector<T extends State, U> = (state: T) => U
-
-/**
- * @deprecated Use `(a: T, b: T) => boolean` instead of `EqualityChecker<T>`
- */
-export type EqualityChecker<T> = (state: T, newState: T) => boolean
-
-/**
- * @deprecated Use `(state: T, previousState: T) => void` instead of `StateListener<T>`
- */
-export type StateListener<T> = (state: T, previousState: T) => void
-
-/**
- * @deprecated Use `(slice: T, previousSlice: T) => void` instead of `StateSliceListener<T>`.
- */
-export type StateSliceListener<T> = (slice: T, previousSlice: T) => void
-
-/**
- * @deprecated Use `(listener: (state: T) => void) => void` instead of `Subscribe<T>`.
- */
-export type Subscribe<T extends State> = {
-  (listener: (state: T, previousState: T) => void): () => void
-}
-
-/**
- * @deprecated You might be looking for `StateCreator`, if not then
- * use `StoreApi<T>['setState']` instead of `SetState<T>`.
- */
-export type SetState<T extends State> = {
-  _(
-    partial: T | Partial<T> | { _(state: T): T | Partial<T> }['_'],
-    replace?: boolean | undefined,
-  ): void
-}['_']
-
-/**
- * @deprecated You might be looking for `StateCreator`, if not then
- * use `StoreApi<T>['getState']` instead of `GetState<T>`.
- */
-export type GetState<T extends State> = () => T
-
-/**
- * @deprecated Use `StoreApi<T>['destroy']` instead of `Destroy`.
- */
-export type Destroy = () => void","+  getInitialState: () => T
+  const getInitialState: StoreApi<TState>['getInitialState'] = () =>
+    initialState
+
-  const api = { setState, getState, subscribe, destroy }
-  state = createState(setState, getState, api)
+  const api = { setState, getState, getInitialState, subscribe, destroy }
+  const initialState = (state = createState(setState, getState, api))","+  getInitialState: () => T
-  /**
-   * @deprecated Use `unsubscribe` returned by `subscribe`
-   */
-  destroy: () => void
+  const getInitialState: StoreApi<TState>['getInitialState'] = () =>
+    initialState
+
-  const destroy: StoreApi<TState>['destroy'] = () => {
-    if (import.meta.env?.MODE !== 'production') {
-      console.warn(
-        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.',
-      )
-    }
-    listeners.clear()
-  }
-
-  const api = { setState, getState, subscribe, destroy }
-  state = createState(setState, getState, api)
+  const api = { setState, getState, getInitialState, subscribe }
+  const initialState = (state = createState(setState, getState, api))
-
-/**
- * @deprecated Use `import { createStore } from 'zustand/vanilla'`
- */
-export default ((createState) => {
-  if (import.meta.env?.MODE !== 'production') {
-    console.warn(
-      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."",
-    )
-  }
-  return createStore(createState)
-}) as CreateStore
-
-// ---------------------------------------------------------
-
-/**
- * @deprecated Use `unknown` instead of `State`
- */
-export type State = unknown
-
-/**
- * @deprecated Use `Partial<T> | ((s: T) => Partial<T>)` instead of `PartialState<T>`
- */
-export type PartialState<T extends State> =
-  | Partial<T>
-  | ((state: T) => Partial<T>)
-
-/**
- * @deprecated Use `(s: T) => U` instead of `StateSelector<T, U>`
- */
-export type StateSelector<T extends State, U> = (state: T) => U
-
-/**
- * @deprecated Use `(a: T, b: T) => boolean` instead of `EqualityChecker<T>`
- */
-export type EqualityChecker<T> = (state: T, newState: T) => boolean
-
-/**
- * @deprecated Use `(state: T, previousState: T) => void` instead of `StateListener<T>`
- */
-export type StateListener<T> = (state: T, previousState: T) => void
-
-/**
- * @deprecated Use `(slice: T, previousSlice: T) => void` instead of `StateSliceListener<T>`.
- */
-export type StateSliceListener<T> = (slice: T, previousSlice: T) => void
-
-/**
- * @deprecated Use `(listener: (state: T) => void) => void` instead of `Subscribe<T>`.
- */
-export type Subscribe<T extends State> = {
-  (listener: (state: T, previousState: T) => void): () => void
-}
-
-/**
- * @deprecated You might be looking for `StateCreator`, if not then
- * use `StoreApi<T>['setState']` instead of `SetState<T>`.
- */
-export type SetState<T extends State> = {
-  _(
-    partial: T | Partial<T> | { _(state: T): T | Partial<T> }['_'],
-    replace?: boolean | undefined,
-  ): void
-}['_']
-
-/**
- * @deprecated You might be looking for `StateCreator`, if not then
- * use `StoreApi<T>['getState']` instead of `GetState<T>`.
- */
-export type GetState<T extends State> = () => T
-
-/**
- * @deprecated Use `StoreApi<T>['destroy']` instead of `Destroy`.
- */
-export type Destroy = () => void"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,tests/basic.test.tsx,"-          ""destroy"": [Function],
-it('can destroy the store', () => {
-  const { destroy, getState, setState, subscribe } = create(() => ({
-    value: 1,
-  }))
-
-  subscribe(() => {
-    throw new Error('did not clear listener on destroy')
-  })
-  destroy()
-
-  setState({ value: 2 })
-  expect(getState().value).toEqual(2)
-})
-","+          ""getInitialState"": [Function],","-          ""destroy"": [Function],
+          ""getInitialState"": [Function],
-it('can destroy the store', () => {
-  const { destroy, getState, setState, subscribe } = create(() => ({
-    value: 1,
-  }))
-
-  subscribe(() => {
-    throw new Error('did not clear listener on destroy')
-  })
-  destroy()
-
-  setState({ value: 2 })
-  expect(getState().value).toEqual(2)
-})
-"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,tests/ssr.test.tsx,,"+    it('should not have hydration errors', async () => {
+      const useStore = create(() => ({
+        bears: 0,
+      }))
+
+      const { hydrateRoot } =
+        await vi.importActual<typeof import('react-dom/client')>(
+          'react-dom/client',
+        )
+
+      const Component = () => {
+        const bears = useStore((state) => state.bears)
+        return <div>bears: {bears}</div>
+      }
+
+      const markup = renderToString(
+        <React.Suspense fallback={<div>Loading...</div>}>
+          <Component />
+        </React.Suspense>,
+      )
+
+      const container = document.createElement('div')
+      document.body.appendChild(container)
+      container.innerHTML = markup
+
+      expect(container.textContent).toContain('bears: 0')
+
+      const consoleMock = vi.spyOn(console, 'error')
+
+      const hydratePromise = act(async () => {
+        hydrateRoot(
+          container,
+          <React.Suspense fallback={<div>Loading...</div>}>
+            <Component />
+          </React.Suspense>,
+        )
+      })
+
+      // set state during hydration
+      useStore.setState({ bears: 1 })
+
+      await hydratePromise
+
+      expect(consoleMock).toHaveBeenCalledTimes(0)
+
+      const bearCountText = await screen.findByText('bears: 1')
+      expect(bearCountText).not.toBeNull()
+      document.body.removeChild(container)
+    })","+    it('should not have hydration errors', async () => {
+      const useStore = create(() => ({
+        bears: 0,
+      }))
+
+      const { hydrateRoot } =
+        await vi.importActual<typeof import('react-dom/client')>(
+          'react-dom/client',
+        )
+
+      const Component = () => {
+        const bears = useStore((state) => state.bears)
+        return <div>bears: {bears}</div>
+      }
+
+      const markup = renderToString(
+        <React.Suspense fallback={<div>Loading...</div>}>
+          <Component />
+        </React.Suspense>,
+      )
+
+      const container = document.createElement('div')
+      document.body.appendChild(container)
+      container.innerHTML = markup
+
+      expect(container.textContent).toContain('bears: 0')
+
+      const consoleMock = vi.spyOn(console, 'error')
+
+      const hydratePromise = act(async () => {
+        hydrateRoot(
+          container,
+          <React.Suspense fallback={<div>Loading...</div>}>
+            <Component />
+          </React.Suspense>,
+        )
+      })
+
+      // set state during hydration
+      useStore.setState({ bears: 1 })
+
+      await hydratePromise
+
+      expect(consoleMock).toHaveBeenCalledTimes(0)
+
+      const bearCountText = await screen.findByText('bears: 1')
+      expect(bearCountText).not.toBeNull()
+      document.body.removeChild(container)
+    })"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,tests/vanilla/basic.test.ts,"-          ""destroy"": [Function],
-        ""destroy"": [Function],
-
-it('can destroy the store', () => {
-  const { destroy, getState, setState, subscribe } = createStore(() => ({
-    value: 1,
-  }))
-
-  subscribe(() => {
-    throw new Error('did not clear listener on destroy')
-  })
-  destroy()
-
-  setState({ value: 2 })
-  expect(getState().value).toEqual(2)
-})","-   {
+    {
+          ""getInitialState"": [Function],
+        ""getInitialState"": [Function],","-   {
+    {
-          ""destroy"": [Function],
+          ""getInitialState"": [Function],
-        ""destroy"": [Function],
+        ""getInitialState"": [Function],
-
-it('can destroy the store', () => {
-  const { destroy, getState, setState, subscribe } = createStore(() => ({
-    value: 1,
-  }))
-
-  subscribe(() => {
-    throw new Error('did not clear listener on destroy')
-  })
-  destroy()
-
-  setState({ value: 2 })
-  expect(getState().value).toEqual(2)
-})"
pmndrs_zustand,be31b53560336d9174b9b6c1af1d0ba0aeb11869,Merge branch 'main' into v5,tsconfig.json,,"+    ""skipLibCheck"": true /* FIXME remove this once vite fixes it */,
-      ""zustand/*"": [""./src/*.ts""]
-    }
+      ""zustand/*"": [""./src/*.ts""],
+    },
-  ""exclude"": [""node_modules"", ""dist""]
+  ""exclude"": [""node_modules"", ""dist""],","+    ""skipLibCheck"": true /* FIXME remove this once vite fixes it */,
-      ""zustand/*"": [""./src/*.ts""]
-    }
+      ""zustand/*"": [""./src/*.ts""],
+    },
-  ""exclude"": [""node_modules"", ""dist""]
+  ""exclude"": [""node_modules"", ""dist""],"
pmndrs_zustand,ee248eba4af025e2ef34585ab84f7a526e473442,Merge branch 'main' into v5,tests/shallow.test.tsx,,"+import { createWithEqualityFn } from 'zustand/traditional'
-    const useBoundStore = create(() => ({
+    const useBoundStore = createWithEqualityFn(() => ({
-    const useBoundStore = create(() => ({
+    const useBoundStore = createWithEqualityFn(() => ({","+import { createWithEqualityFn } from 'zustand/traditional'
-    const useBoundStore = create(() => ({
+    const useBoundStore = createWithEqualityFn(() => ({
-    const useBoundStore = create(() => ({
+    const useBoundStore = createWithEqualityFn(() => ({"
pmndrs_zustand,ee248eba4af025e2ef34585ab84f7a526e473442,Merge branch 'main' into v5,tests/subscribe.test.tsx,,"-import { describe, expect, it, vi } from 'vitest'
+import { describe, expect, it } from 'vitest'
-import { subscribeWithSelector } from 'zustand/middleware'
-  it('should not be called if new state identity is the same', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(() => initialState)
-
-    subscribe(spy)
-    setState(initialState)
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called if new state identity is different', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, getState, subscribe } = create(() => initialState)
-
-    subscribe(spy)
-    setState({ ...getState() })
-    expect(spy).toHaveBeenCalledWith(initialState, initialState)
-  })
-
-  it('should not be called when state slice is the same', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy)
-    setState({ other: 'b' })
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called when state slice changes', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy)
-    setState({ value: initialState.value + 1 })
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 1, initialState.value)
-  })
-
-  it('should not be called when equality checker returns true', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s, spy, { equalityFn: () => true })
-    setState({ value: initialState.value + 2 })
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called when equality checker returns false', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy, { equalityFn: () => false })
-    setState({ value: initialState.value + 2 })
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 2, initialState.value)
-  })
-
-  it('should unsubscribe correctly', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    const unsub = subscribe((s) => s.value, spy)
-
-    setState({ value: initialState.value + 1 })
-    unsub()
-    setState({ value: initialState.value + 2 })
-
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 1, initialState.value)
-  })
-
-  it('should keep consistent behavior with equality check', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { getState, setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    const isRoughEqual = (x: number, y: number) => Math.abs(x - y) < 1
-    setState({ value: 0 })
-    spy.mockReset()
-    const spy2 = vi.fn()
-    let prevValue = getState().value
-    const unsub = subscribe((s) => {
-      if (isRoughEqual(prevValue, s.value)) {
-        // skip assuming values are equal
-        return
-      }
-      spy(s.value, prevValue)
-      prevValue = s.value
-    })
-    const unsub2 = subscribe((s) => s.value, spy2, { equalityFn: isRoughEqual })
-    setState({ value: 0.5 })
-    setState({ value: 1 })
-    unsub()
-    unsub2()
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(1, 0)
-    expect(spy2).toHaveBeenCalledTimes(1)
-    expect(spy2).toHaveBeenCalledWith(1, 0)
+  it('should correctly have access to subscribe', () => {
+    const { subscribe } = create(() => ({ value: 1 }))
+    expect(typeof subscribe).toBe('function')","-import { describe, expect, it, vi } from 'vitest'
+import { describe, expect, it } from 'vitest'
-import { subscribeWithSelector } from 'zustand/middleware'
-  it('should not be called if new state identity is the same', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(() => initialState)
-
-    subscribe(spy)
-    setState(initialState)
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called if new state identity is different', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, getState, subscribe } = create(() => initialState)
-
-    subscribe(spy)
-    setState({ ...getState() })
-    expect(spy).toHaveBeenCalledWith(initialState, initialState)
-  })
-
-  it('should not be called when state slice is the same', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy)
-    setState({ other: 'b' })
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called when state slice changes', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy)
-    setState({ value: initialState.value + 1 })
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 1, initialState.value)
-  })
-
-  it('should not be called when equality checker returns true', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s, spy, { equalityFn: () => true })
-    setState({ value: initialState.value + 2 })
-    expect(spy).not.toHaveBeenCalled()
-  })
-
-  it('should be called when equality checker returns false', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    subscribe((s) => s.value, spy, { equalityFn: () => false })
-    setState({ value: initialState.value + 2 })
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 2, initialState.value)
-  })
-
-  it('should unsubscribe correctly', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    const unsub = subscribe((s) => s.value, spy)
-
-    setState({ value: initialState.value + 1 })
-    unsub()
-    setState({ value: initialState.value + 2 })
-
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(initialState.value + 1, initialState.value)
-  })
-
-  it('should keep consistent behavior with equality check', () => {
-    const spy = vi.fn()
-    const initialState = { value: 1, other: 'a' }
-    const { getState, setState, subscribe } = create(
-      subscribeWithSelector(() => initialState),
-    )
-
-    const isRoughEqual = (x: number, y: number) => Math.abs(x - y) < 1
-    setState({ value: 0 })
-    spy.mockReset()
-    const spy2 = vi.fn()
-    let prevValue = getState().value
-    const unsub = subscribe((s) => {
-      if (isRoughEqual(prevValue, s.value)) {
-        // skip assuming values are equal
-        return
-      }
-      spy(s.value, prevValue)
-      prevValue = s.value
-    })
-    const unsub2 = subscribe((s) => s.value, spy2, { equalityFn: isRoughEqual })
-    setState({ value: 0.5 })
-    setState({ value: 1 })
-    unsub()
-    unsub2()
-    expect(spy).toHaveBeenCalledTimes(1)
-    expect(spy).toHaveBeenCalledWith(1, 0)
-    expect(spy2).toHaveBeenCalledTimes(1)
-    expect(spy2).toHaveBeenCalledWith(1, 0)
+  it('should correctly have access to subscribe', () => {
+    const { subscribe } = create(() => ({ value: 1 }))
+    expect(typeof subscribe).toBe('function')"
pmndrs_zustand,105bc570d26dcb70d9cd392336d5722387b88b19,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },","-    ""immer"": "">=9.0"",
+    ""immer"": "">=9.0.6"",
+    ""@types/react"": {
+      ""optional"": true
+    },
-      ""optional"": true
-    },
-    ""@types/react"": {","+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""immer"": "">=9.0"",
+    ""immer"": "">=9.0.6"",
+    ""@types/react"": {
+      ""optional"": true
+    },
-      ""optional"": true
-    },
-    ""@types/react"": {"
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },","-  ""version"": ""4.4.6"",
+  ""version"": ""4.4.7"",
-    ""@babel/core"": ""^7.23.2"",
-    ""@babel/plugin-external-helpers"": ""^7.22.5"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.22.15"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.2"",
-    ""@babel/plugin-transform-typescript"": ""^7.22.15"",
-    ""@babel/preset-env"": ""^7.23.2"",
-    ""@redux-devtools/extension"": ""^3.2.5"",
-    ""@rollup/plugin-alias"": ""^5.0.1"",
+    ""@babel/core"": ""^7.23.3"",
+    ""@babel/plugin-external-helpers"": ""^7.23.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.4"",
+    ""@babel/plugin-transform-typescript"": ""^7.23.4"",
+    ""@babel/preset-env"": ""^7.23.3"",
+    ""@redux-devtools/extension"": ""^3.2.6"",
+    ""@rollup/plugin-alias"": ""^5.1.0"",
-    ""@testing-library/react"": ""^14.0.0"",
-    ""@types/react"": ""^18.2.33"",
-    ""@types/react-dom"": ""^18.2.14"",
-    ""@types/use-sync-external-store"": ""^0.0.5"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.9.1"",
-    ""@typescript-eslint/parser"": ""^6.9.1"",
-    ""@vitest/coverage-c8"": ""^0.33.0"",
+    ""@testing-library/react"": ""^14.1.2"",
+    ""@types/react"": ""^18.2.39"",
+    ""@types/react-dom"": ""^18.2.17"",
+    ""@types/use-sync-external-store"": ""^0.0.6"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.13.0"",
+    ""@typescript-eslint/parser"": ""^6.13.0"",
+    ""@vitest/coverage-v8"": ""^0.34.6"",
-    ""esbuild"": ""^0.19.5"",
-    ""eslint"": ""^8.52.0"",
+    ""esbuild"": ""^0.19.8"",
+    ""eslint"": ""^8.54.0"",
-    ""eslint-plugin-vitest"": ""^0.3.8"",
+    ""eslint-plugin-vitest"": ""^0.3.10"",
-    ""jsdom"": ""^22.1.0"",
+    ""jsdom"": ""^23.0.0"",
-    ""prettier"": ""^3.0.3"",
+    ""prettier"": ""^3.1.0"",
-    ""rollup"": ""^4.2.0"",
+    ""rollup"": ""^4.6.0"",
-    ""typescript"": ""^5.2.2"",
+    ""typescript"": ""^5.3.2"",
+  },
+  ""resolutions"": {
+    ""vite"": ""4.5.0""","-  ""version"": ""4.4.6"",
+  ""version"": ""4.4.7"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""@babel/core"": ""^7.23.2"",
-    ""@babel/plugin-external-helpers"": ""^7.22.5"",
-    ""@babel/plugin-transform-react-jsx"": ""^7.22.15"",
-    ""@babel/plugin-transform-runtime"": ""^7.23.2"",
-    ""@babel/plugin-transform-typescript"": ""^7.22.15"",
-    ""@babel/preset-env"": ""^7.23.2"",
-    ""@redux-devtools/extension"": ""^3.2.5"",
-    ""@rollup/plugin-alias"": ""^5.0.1"",
+    ""@babel/core"": ""^7.23.3"",
+    ""@babel/plugin-external-helpers"": ""^7.23.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.23.4"",
+    ""@babel/plugin-transform-runtime"": ""^7.23.4"",
+    ""@babel/plugin-transform-typescript"": ""^7.23.4"",
+    ""@babel/preset-env"": ""^7.23.3"",
+    ""@redux-devtools/extension"": ""^3.2.6"",
+    ""@rollup/plugin-alias"": ""^5.1.0"",
-    ""@testing-library/react"": ""^14.0.0"",
-    ""@types/react"": ""^18.2.33"",
-    ""@types/react-dom"": ""^18.2.14"",
-    ""@types/use-sync-external-store"": ""^0.0.5"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.9.1"",
-    ""@typescript-eslint/parser"": ""^6.9.1"",
-    ""@vitest/coverage-c8"": ""^0.33.0"",
+    ""@testing-library/react"": ""^14.1.2"",
+    ""@types/react"": ""^18.2.39"",
+    ""@types/react-dom"": ""^18.2.17"",
+    ""@types/use-sync-external-store"": ""^0.0.6"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.13.0"",
+    ""@typescript-eslint/parser"": ""^6.13.0"",
+    ""@vitest/coverage-v8"": ""^0.34.6"",
-    ""esbuild"": ""^0.19.5"",
-    ""eslint"": ""^8.52.0"",
+    ""esbuild"": ""^0.19.8"",
+    ""eslint"": ""^8.54.0"",
-    ""eslint-plugin-vitest"": ""^0.3.8"",
+    ""eslint-plugin-vitest"": ""^0.3.10"",
-    ""jsdom"": ""^22.1.0"",
+    ""jsdom"": ""^23.0.0"",
-    ""prettier"": ""^3.0.3"",
+    ""prettier"": ""^3.1.0"",
-    ""rollup"": ""^4.2.0"",
+    ""rollup"": ""^4.6.0"",
-    ""typescript"": ""^5.2.2"",
+    ""typescript"": ""^5.3.2"",
+  },
+  ""resolutions"": {
+    ""vite"": ""4.5.0"""
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,src/middleware/devtools.ts,,"-  ? [...a0: Cast<T, unknown[]>, a1: undefined]
-  : T extends { length: 0 | 1 }
-  ? [...a0: Cast<T, unknown[]>, a1: undefined]
-  : T extends { length: 2 }
-  ? T
-  : T extends { length: 1 | 2 }
-  ? T
-  : T extends { length: 0 | 1 | 2 }
-  ? T
-  : T extends [infer A0, infer A1, ...unknown[]]
-  ? [A0, A1]
-  : T extends [infer A0, (infer A1)?, ...unknown[]]
-  ? [A0, A1?]
-  : T extends [(infer A0)?, (infer A1)?, ...unknown[]]
-  ? [A0?, A1?]
-  : never
+    ? [...a0: Cast<T, unknown[]>, a1: undefined]
+    : T extends { length: 0 | 1 }
+      ? [...a0: Cast<T, unknown[]>, a1: undefined]
+      : T extends { length: 2 }
+        ? T
+        : T extends { length: 1 | 2 }
+          ? T
+          : T extends { length: 0 | 1 | 2 }
+            ? T
+            : T extends [infer A0, infer A1, ...unknown[]]
+              ? [A0, A1]
+              : T extends [infer A0, (infer A1)?, ...unknown[]]
+                ? [A0, A1?]
+                : T extends [(infer A0)?, (infer A1)?, ...unknown[]]
+                  ? [A0?, A1?]
+                  : never
-      setState<A extends string | { type: unknown }>(
+      setState<A extends string | { type: string }>(
-      const action: { type: unknown } =
+      const action: { type: string } =
-          ? { type: nameOrAction }
-          : nameOrAction
+            ? { type: nameOrAction }
+            : nameOrAction","-  ? [...a0: Cast<T, unknown[]>, a1: undefined]
-  : T extends { length: 0 | 1 }
-  ? [...a0: Cast<T, unknown[]>, a1: undefined]
-  : T extends { length: 2 }
-  ? T
-  : T extends { length: 1 | 2 }
-  ? T
-  : T extends { length: 0 | 1 | 2 }
-  ? T
-  : T extends [infer A0, infer A1, ...unknown[]]
-  ? [A0, A1]
-  : T extends [infer A0, (infer A1)?, ...unknown[]]
-  ? [A0, A1?]
-  : T extends [(infer A0)?, (infer A1)?, ...unknown[]]
-  ? [A0?, A1?]
-  : never
+    ? [...a0: Cast<T, unknown[]>, a1: undefined]
+    : T extends { length: 0 | 1 }
+      ? [...a0: Cast<T, unknown[]>, a1: undefined]
+      : T extends { length: 2 }
+        ? T
+        : T extends { length: 1 | 2 }
+          ? T
+          : T extends { length: 0 | 1 | 2 }
+            ? T
+            : T extends [infer A0, infer A1, ...unknown[]]
+              ? [A0, A1]
+              : T extends [infer A0, (infer A1)?, ...unknown[]]
+                ? [A0, A1?]
+                : T extends [(infer A0)?, (infer A1)?, ...unknown[]]
+                  ? [A0?, A1?]
+                  : never
-      setState<A extends string | { type: unknown }>(
+      setState<A extends string | { type: string }>(
-      const action: { type: unknown } =
+      const action: { type: string } =
-          ? { type: nameOrAction }
-          : nameOrAction
+            ? { type: nameOrAction }
+            : nameOrAction"
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,src/middleware/immer.ts,,"-  ? []
-  : T extends { length: 0 | 1 }
-  ? []
-  : T extends [unknown, unknown, ...infer A]
-  ? A
-  : T extends [unknown, unknown?, ...infer A]
-  ? A
-  : T extends [unknown?, unknown?, ...infer A]
-  ? A
-  : never
+    ? []
+    : T extends { length: 0 | 1 }
+      ? []
+      : T extends [unknown, unknown, ...infer A]
+        ? A
+        : T extends [unknown, unknown?, ...infer A]
+          ? A
+          : T extends [unknown?, unknown?, ...infer A]
+            ? A
+            : never","-  ? []
-  : T extends { length: 0 | 1 }
-  ? []
-  : T extends [unknown, unknown, ...infer A]
-  ? A
-  : T extends [unknown, unknown?, ...infer A]
-  ? A
-  : T extends [unknown?, unknown?, ...infer A]
-  ? A
-  : never
+    ? []
+    : T extends { length: 0 | 1 }
+      ? []
+      : T extends [unknown, unknown, ...infer A]
+        ? A
+        : T extends [unknown, unknown?, ...infer A]
+          ? A
+          : T extends [unknown?, unknown?, ...infer A]
+            ? A
+            : never"
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,src/middleware/redux.ts,,"-type Action = { type: unknown }
+type Action = { type: string }","-type Action = { type: unknown }
+type Action = { type: string }"
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,src/vanilla.ts,,"-  ? S
-  : Ms extends [[infer Mi, infer Ma], ...infer Mrs]
-  ? Mutate<StoreMutators<S, Ma>[Mi & StoreMutatorIdentifier], Mrs>
-  : never
+    ? S
+    : Ms extends [[infer Mi, infer Ma], ...infer Mrs]
+      ? Mutate<StoreMutators<S, Ma>[Mi & StoreMutatorIdentifier], Mrs>
+      : never
-        replace ?? typeof nextState !== 'object'
+        replace ?? (typeof nextState !== 'object' || nextState === null)","-  ? S
-  : Ms extends [[infer Mi, infer Ma], ...infer Mrs]
-  ? Mutate<StoreMutators<S, Ma>[Mi & StoreMutatorIdentifier], Mrs>
-  : never
+    ? S
+    : Ms extends [[infer Mi, infer Ma], ...infer Mrs]
+      ? Mutate<StoreMutators<S, Ma>[Mi & StoreMutatorIdentifier], Mrs>
+      : never
-        replace ?? typeof nextState !== 'object'
+        replace ?? (typeof nextState !== 'object' || nextState === null)"
pmndrs_zustand,39928ef973b1f99a1c4202e0d740d3b676803fd6,Merge branch 'main' into v5,tests/vanilla/basic.test.ts,,"+it('can set the object store to null', () => {
+  const { setState, getState } = createStore<{ a: number } | null>(() => ({
+    a: 1,
+  }))
+
+  setState(null)
+
+  expect(getState()).toEqual(null)
+})
+
+it('can set the non-object store to null', () => {
+  const { setState, getState } = createStore<string | null>(() => 'value')
+
+  setState(null)
+
+  expect(getState()).toEqual(null)
+})
+","+it('can set the object store to null', () => {
+  const { setState, getState } = createStore<{ a: number } | null>(() => ({
+    a: 1,
+  }))
+
+  setState(null)
+
+  expect(getState()).toEqual(null)
+})
+
+it('can set the non-object store to null', () => {
+  const { setState, getState } = createStore<string | null>(() => 'value')
+
+  setState(null)
+
+  expect(getState()).toEqual(null)
+})
+"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },","-    ""trailingComma"": ""es5"",
-    ""singleQuote"": true,
-    ""bracketSameLine"": true,
-    ""tabWidth"": 2,
-    ""printWidth"": 80
+    ""singleQuote"": true","+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-    ""trailingComma"": ""es5"",
-    ""singleQuote"": true,
-    ""bracketSameLine"": true,
-    ""tabWidth"": 2,
-    ""printWidth"": 80
+    ""singleQuote"": true"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/context.ts,,"-    equalityFn?: (a: U, b: U) => boolean
+    equalityFn?: (a: U, b: U) => boolean,
-      ""[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180.""
+      ""[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180."",
-      children
+      children,
-    equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+    equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-        'Seems like you have not used zustand provider as an ancestor.'
+        'Seems like you have not used zustand provider as an ancestor.',
-      equalityFn
+      equalityFn,
-        'Seems like you have not used zustand provider as an ancestor.'
+        'Seems like you have not used zustand provider as an ancestor.',","-    equalityFn?: (a: U, b: U) => boolean
+    equalityFn?: (a: U, b: U) => boolean,
-      ""[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180.""
+      ""[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180."",
-      children
+      children,
-    equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+    equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-        'Seems like you have not used zustand provider as an ancestor.'
+        'Seems like you have not used zustand provider as an ancestor.',
-      equalityFn
+      equalityFn,
-        'Seems like you have not used zustand provider as an ancestor.'
+        'Seems like you have not used zustand provider as an ancestor.',"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/combine.ts,,"-  additionalStateCreator: StateCreator<T, Mps, Mcs, U>
+  additionalStateCreator: StateCreator<T, Mps, Mcs, U>,","-  additionalStateCreator: StateCreator<T, Mps, Mcs, U>
+  additionalStateCreator: StateCreator<T, Mps, Mcs, U>,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/devtools.ts,,"-  devtoolsOptions?: DevtoolsOptions
+  devtoolsOptions?: DevtoolsOptions,
-  devtoolsOptions?: DevtoolsOptions
+  devtoolsOptions?: DevtoolsOptions,
-  name: string | undefined
+  name: string | undefined,
-    Object.entries(api.stores).map(([key, api]) => [key, api.getState()])
+    Object.entries(api.stores).map(([key, api]) => [key, api.getState()]),
-  options: Omit<DevtoolsOptions, 'enabled' | 'anonymousActionType' | 'store'>
+  options: Omit<DevtoolsOptions, 'enabled' | 'anonymousActionType' | 'store'>,
-          '[zustand devtools middleware] Please install/enable Redux devtools extension'
+          '[zustand devtools middleware] Please install/enable Redux devtools extension',
-        }
+        },
-          ])
-        )
+          ]),
+        ),
-              'to set state from the devtools. Avoid using it.'
+              'to set state from the devtools. Avoid using it.',
-          listener: (message: Message) => void
+          listener: (message: Message) => void,
-              '[zustand devtools middleware] Unsupported action format'
+              '[zustand devtools middleware] Unsupported action format',
-                    `
+                    `,
-            }
+            },
-                nextLiftedState
+                nextLiftedState,
-      e
+      e,","-  devtoolsOptions?: DevtoolsOptions
+  devtoolsOptions?: DevtoolsOptions,
-  devtoolsOptions?: DevtoolsOptions
+  devtoolsOptions?: DevtoolsOptions,
-  name: string | undefined
+  name: string | undefined,
-    Object.entries(api.stores).map(([key, api]) => [key, api.getState()])
+    Object.entries(api.stores).map(([key, api]) => [key, api.getState()]),
-  options: Omit<DevtoolsOptions, 'enabled' | 'anonymousActionType' | 'store'>
+  options: Omit<DevtoolsOptions, 'enabled' | 'anonymousActionType' | 'store'>,
-          '[zustand devtools middleware] Please install/enable Redux devtools extension'
+          '[zustand devtools middleware] Please install/enable Redux devtools extension',
-        }
+        },
-          ])
-        )
+          ]),
+        ),
-              'to set state from the devtools. Avoid using it.'
+              'to set state from the devtools. Avoid using it.',
-          listener: (message: Message) => void
+          listener: (message: Message) => void,
-              '[zustand devtools middleware] Unsupported action format'
+              '[zustand devtools middleware] Unsupported action format',
-                    `
+                    `,
-            }
+            },
-                nextLiftedState
+                nextLiftedState,
-      e
+      e,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/immer.ts,,"-  initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>
+  initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>,
-  storeInitializer: StateCreator<T, [], []>
+  storeInitializer: StateCreator<T, [], []>,","-  initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>
+  initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>,
-  storeInitializer: StateCreator<T, [], []>
+  storeInitializer: StateCreator<T, [], []>,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/persist.ts,,"-    name: string
+    name: string,
-  options?: JsonStorageOptions
+  options?: JsonStorageOptions,
-        JSON.stringify(newValue, options?.replacer)
+        JSON.stringify(newValue, options?.replacer),
-    str: string
+    str: string,
-    state: S
+    state: S,
-    onFulfilled: (value: Value) => V | Promise<V> | Thenable<V>
+    onFulfilled: (value: Value) => V | Promise<V> | Thenable<V>,
-    onRejected: (reason: Error) => V | Promise<V> | Thenable<V>
+    onRejected: (reason: Error) => V | Promise<V> | Thenable<V>,
-    fn: (input: Input) => Result | Promise<Result> | Thenable<Result>
+    fn: (input: Input) => Result | Promise<Result> | Thenable<Result>,
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
+          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-      api
+      api,
-        (storage as StateStorage).setItem(options.name, serializedValue)
+        (storage as StateStorage).setItem(options.name, serializedValue),
-    api
+    api,
-                deserializedStorageValue.version
+                deserializedStorageValue.version,
-              `State loaded from storage couldn't be migrated since no migrate function was provided`
+              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-          get() ?? configResult
+          get() ?? configResult,
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
+          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-      api
+      api,
-    api
+    api,
-                deserializedStorageValue.version
+                deserializedStorageValue.version,
-              `State loaded from storage couldn't be migrated since no migrate function was provided`
+              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-          get() ?? configResult
+          get() ?? configResult,
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.'
+        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-  options: PersistOptions<T, U>
+  options: PersistOptions<T, U>,
-  options: PersistOptions<T, T>
+  options: PersistOptions<T, T>,","-    name: string
+    name: string,
-  options?: JsonStorageOptions
+  options?: JsonStorageOptions,
-        JSON.stringify(newValue, options?.replacer)
+        JSON.stringify(newValue, options?.replacer),
-    str: string
+    str: string,
-    state: S
+    state: S,
-    onFulfilled: (value: Value) => V | Promise<V> | Thenable<V>
+    onFulfilled: (value: Value) => V | Promise<V> | Thenable<V>,
-    onRejected: (reason: Error) => V | Promise<V> | Thenable<V>
+    onRejected: (reason: Error) => V | Promise<V> | Thenable<V>,
-    fn: (input: Input) => Result | Promise<Result> | Thenable<Result>
+    fn: (input: Input) => Result | Promise<Result> | Thenable<Result>,
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
+          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-      api
+      api,
-        (storage as StateStorage).setItem(options.name, serializedValue)
+        (storage as StateStorage).setItem(options.name, serializedValue),
-    api
+    api,
-                deserializedStorageValue.version
+                deserializedStorageValue.version,
-              `State loaded from storage couldn't be migrated since no migrate function was provided`
+              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-          get() ?? configResult
+          get() ?? configResult,
-          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
+          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,
-      api
+      api,
-    api
+    api,
-                deserializedStorageValue.version
+                deserializedStorageValue.version,
-              `State loaded from storage couldn't be migrated since no migrate function was provided`
+              `State loaded from storage couldn't be migrated since no migrate function was provided`,
-          get() ?? configResult
+          get() ?? configResult,
-        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.'
+        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',
-  options: PersistOptions<T, U>
+  options: PersistOptions<T, U>,
-  options: PersistOptions<T, T>
+  options: PersistOptions<T, T>,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/redux.ts,,"-  initialState: T
+  initialState: T,
-  initialState: T
+  initialState: T,","-  initialState: T
+  initialState: T,
-  initialState: T
+  initialState: T,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/middleware/subscribeWithSelector.ts,,"-  >
+  >,
-      }
+      },
-  storeInitializer: StateCreator<T, [], []>
+  storeInitializer: StateCreator<T, [], []>,","-  >
+  >,
-      }
+      },
-  storeInitializer: StateCreator<T, [], []>
+  storeInitializer: StateCreator<T, [], []>,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/react.ts,,"-  api: S
+  api: S,
-  selector: (state: ExtractState<S>) => U
+  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined
+  equalityFn: ((a: U, b: U) => boolean) | undefined,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937""
+      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    equalityFn
+    equalityFn,
-    equalityFn: (a: U, b: U) => boolean
+    equalityFn: (a: U, b: U) => boolean,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.""
+      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.""
+      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."",","-  api: S
+  api: S,
-  selector: (state: ExtractState<S>) => U
+  selector: (state: ExtractState<S>) => U,
-  equalityFn: ((a: U, b: U) => boolean) | undefined
+  equalityFn: ((a: U, b: U) => boolean) | undefined,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937""
+      ""[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"",
-    equalityFn
+    equalityFn,
-    equalityFn: (a: U, b: U) => boolean
+    equalityFn: (a: U, b: U) => boolean,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.""
+      ""[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."",
-      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.""
+      ""[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."","
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/shallow.ts,,"-      ""[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`.""
+      ""[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`."",","-      ""[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`.""
+      ""[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`."","
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/traditional.ts,,"-  api: S
+  api: S,
-  equalityFn?: (a: U, b: U) => boolean
+  equalityFn?: (a: U, b: U) => boolean,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-    equalityFn
+    equalityFn,
-    equalityFn?: (a: U, b: U) => boolean
+    equalityFn?: (a: U, b: U) => boolean,
-    defaultEqualityFn?: <U>(a: U, b: U) => boolean
+    defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-    defaultEqualityFn?: <U>(a: U, b: U) => boolean
+    defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-  defaultEqualityFn?: <U>(a: U, b: U) => boolean
+  defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-    equalityFn = defaultEqualityFn
+    equalityFn = defaultEqualityFn,
-  defaultEqualityFn?: <U>(a: U, b: U) => boolean
+  defaultEqualityFn?: <U>(a: U, b: U) => boolean,","-  api: S
+  api: S,
-  equalityFn?: (a: U, b: U) => boolean
+  equalityFn?: (a: U, b: U) => boolean,
-  equalityFn?: (a: StateSlice, b: StateSlice) => boolean
+  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,
-    equalityFn
+    equalityFn,
-    equalityFn?: (a: U, b: U) => boolean
+    equalityFn?: (a: U, b: U) => boolean,
-    defaultEqualityFn?: <U>(a: U, b: U) => boolean
+    defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-    defaultEqualityFn?: <U>(a: U, b: U) => boolean
+    defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-  defaultEqualityFn?: <U>(a: U, b: U) => boolean
+  defaultEqualityFn?: <U>(a: U, b: U) => boolean,
-    equalityFn = defaultEqualityFn
+    equalityFn = defaultEqualityFn,
-  defaultEqualityFn?: <U>(a: U, b: U) => boolean
+  defaultEqualityFn?: <U>(a: U, b: U) => boolean,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,src/vanilla.ts,,"-    replace?: boolean | undefined
+    replace?: boolean | undefined,
-  store: Mutate<StoreApi<T>, Mis>
+  store: Mutate<StoreApi<T>, Mis>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-  initializer: StateCreator<T, [], Mos>
+  initializer: StateCreator<T, [], Mos>,
-        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.'
+        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.',
-      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.""
+      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."",
-    replace?: boolean | undefined
+    replace?: boolean | undefined,","-    replace?: boolean | undefined
+    replace?: boolean | undefined,
-  store: Mutate<StoreApi<T>, Mis>
+  store: Mutate<StoreApi<T>, Mis>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-    initializer: StateCreator<T, [], Mos>
+    initializer: StateCreator<T, [], Mos>,
-  initializer: StateCreator<T, [], Mos>
+  initializer: StateCreator<T, [], Mos>,
-        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.'
+        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.',
-      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.""
+      ""[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'."",
-    replace?: boolean | undefined
+    replace?: boolean | undefined,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/basic.test.tsx,,"-    </>
+    </>,
-    </>
+    </>,
-    Object.is
+    Object.is,
-      (_, newItem) => newItem.value === 1
+      (_, newItem) => newItem.value === 1,
-    </>
+    </>,
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    Object.is
+    Object.is,
-    </>
+    </>,
-    </>
+    </>,
-    Object.is
+    Object.is,
-    </>
+    </>,
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    })
+    }),
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,","-    </>
+    </>,
-    </>
+    </>,
-    Object.is
+    Object.is,
-      (_, newItem) => newItem.value === 1
+      (_, newItem) => newItem.value === 1,
-    </>
+    </>,
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    Object.is
+    Object.is,
-    </>
+    </>,
-    </>
+    </>,
-    Object.is
+    Object.is,
-    </>
+    </>,
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    })
+    }),
-    </>
+    </>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,
-    </StrictMode>
+    </StrictMode>,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/context.test.tsx,,"-    </>
+    </>,
-    </>
+    </>,
-      }))
+      })),
-          () => setCount(storeApi.getState().count)
+          () => setCount(storeApi.getState().count),
-      [storeApi]
+      [storeApi],
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-      : false
+      : false,","-    </>
+    </>,
-    </>
+    </>,
-      }))
+      })),
-          () => setCount(storeApi.getState().count)
+          () => setCount(storeApi.getState().count),
-      [storeApi]
+      [storeApi],
-    </>
+    </>,
-    </StrictMode>
+    </StrictMode>,
-      : false
+      : false,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/devtools.test.tsx,,"-      }
+      },
-      { count: 10, foo: 'bar' }
+      { count: 10, foo: 'bar' },
-      { count: 15, foo: 'bar' }
+      { count: 15, foo: 'bar' },
-      { count: 5, foo: 'baz' }
+      { count: 5, foo: 'baz' },
-        })()
+        })(),
-        '[zustand devtools middleware] Unsupported action format'
+        '[zustand devtools middleware] Unsupported action format',
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-        { count: 1 }
+        { count: 1 },
-        { count: 1 }
+        { count: 1 },
-        { count: 3 }
+        { count: 3 },
-      action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+      action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-            { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+            { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-          { count: 0 }
+          { count: 0 },
-        { enabled: true }
-      )
+        { enabled: true },
+      ),
-        'to set state from the devtools. Avoid using it.'
+        'to set state from the devtools. Avoid using it.',
-      options2.testConnectionId
+      options2.testConnectionId,
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState3, { enabled: true, ...options3 })
+        newDevtools(() => initialState3, { enabled: true, ...options3 }),
-        newDevtools(() => initialState4, { enabled: true, ...options4 })
+        newDevtools(() => initialState4, { enabled: true, ...options4 }),
-        connectionNameGroup2
+        connectionNameGroup2,
-        devtools(() => ({ count: 0 }), { enabled: true, ...options1 })
+        devtools(() => ({ count: 0 }), { enabled: true, ...options1 }),
-        devtools(() => ({ count: 0 }), { enabled: true, ...options2 })
+        devtools(() => ({ count: 0 }), { enabled: true, ...options2 }),
-        options1.name
+        options1.name,
-          action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+          action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-          action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+          action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-              { count: 0 }
+              { count: 0 },
-            { enabled: true, ...options1 }
-          )
+            { enabled: true, ...options1 },
+          ),
-                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-              { count: 10 }
+              { count: 10 },
-            { enabled: true, ...options2 }
-          )
+            { enabled: true, ...options2 },
+          ),
-          options2.testConnectionId
+          options2.testConnectionId,
-            options2.testConnectionId
+            options2.testConnectionId,
-        devtools(() => ({ count: 0, foo: 'bar' }), options1)
+        devtools(() => ({ count: 0, foo: 'bar' }), options1),
-        options3.testConnectionId
+        options3.testConnectionId,
-        { count: 10, foo: 'bar' }
+        { count: 10, foo: 'bar' },
-        { count: 15, foo: 'bar' }
+        { count: 15, foo: 'bar' },
-        { count: 5, foo: 'baz' }
+        { count: 5, foo: 'baz' },
-          })
+          }),
-          })
+          }),
-          })
+          }),
-          options1.testConnectionId
+          options1.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options1.testConnectionId
+          options1.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          nextLiftedState1
+          nextLiftedState1,
-          nextLiftedState2
+          nextLiftedState2,
-          nextLiftedState3
+          nextLiftedState3,
-          devtools(() => ({ count: 0 }), { enabled: true, ...options1 })
+          devtools(() => ({ count: 0 }), { enabled: true, ...options1 }),
-          devtools(() => ({ count: 2 }), { enabled: true, ...options2 })
+          devtools(() => ({ count: 2 }), { enabled: true, ...options2 }),
-          devtools(() => ({ count: 4 }), { enabled: true, ...options3 })
+          devtools(() => ({ count: 4 }), { enabled: true, ...options3 }),
-            options3.testConnectionId
+            options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          newState1
+          newState1,
-          newState1
+          newState1,
-          { count: 3 }
+          { count: 3 },
-          newState2
+          newState2,
-          newState2
+          newState2,
-          { count: 3 }
+          { count: 3 },
-          newState3
+          newState3,
-          newState3
+          newState3,
-          { count: 3 }
+          { count: 3 },
-          devtools(() => ({ count: 0, foo: 'bar' }), options)
+          devtools(() => ({ count: 0, foo: 'bar' }), options),
-          { [options.store]: { count: 10, foo: 'bar' } }
+          { [options.store]: { count: 10, foo: 'bar' } },
-          { [options.store]: { count: 15, foo: 'bar' } }
+          { [options.store]: { count: 15, foo: 'bar' } },
-          { [options.store]: { count: 5, foo: 'baz' } }
+          { [options.store]: { count: 5, foo: 'baz' } },
-            })
+            }),
-            })
+            }),
-            })
+            }),
-            })
+            }),
-            options1.testConnectionId
+            options1.testConnectionId,
-            devtools(() => initialState1, { enabled: true, ...options1 })
+            devtools(() => initialState1, { enabled: true, ...options1 }),
-            devtools(() => initialState2, { enabled: true, ...options2 })
+            devtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options1)
+            getKeyFromOptions(options1),
-              '[zustand devtools middleware] Unsupported __setState'
-            )
+              '[zustand devtools middleware] Unsupported __setState',
+            ),
-            newDevtools(() => initialState1, { enabled: true, ...options1 })
+            newDevtools(() => initialState1, { enabled: true, ...options1 }),
-            newDevtools(() => initialState2, { enabled: true, ...options2 })
+            newDevtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options2)
+            getKeyFromOptions(options2),
-            newDevtools(() => initialState1, { enabled: true, ...options1 })
+            newDevtools(() => initialState1, { enabled: true, ...options1 }),
-            newDevtools(() => initialState2, { enabled: true, ...options2 })
+            newDevtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options2)
+            getKeyFromOptions(options2),","-      }
+      },
-      { count: 10, foo: 'bar' }
+      { count: 10, foo: 'bar' },
-      { count: 15, foo: 'bar' }
+      { count: 15, foo: 'bar' },
-      { count: 5, foo: 'baz' }
+      { count: 5, foo: 'baz' },
-        })()
+        })(),
-        '[zustand devtools middleware] Unsupported action format'
+        '[zustand devtools middleware] Unsupported action format',
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-        { count: 1 }
+        { count: 1 },
-        { count: 1 }
+        { count: 1 },
-        { count: 3 }
+        { count: 3 },
-      action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+      action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-            { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+            { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-          { count: 0 }
+          { count: 0 },
-        { enabled: true }
-      )
+        { enabled: true },
+      ),
-        'to set state from the devtools. Avoid using it.'
+        'to set state from the devtools. Avoid using it.',
-      options2.testConnectionId
+      options2.testConnectionId,
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState1, { enabled: true, ...options1 })
+        newDevtools(() => initialState1, { enabled: true, ...options1 }),
-        newDevtools(() => initialState2, { enabled: true, ...options2 })
+        newDevtools(() => initialState2, { enabled: true, ...options2 }),
-        newDevtools(() => initialState3, { enabled: true, ...options3 })
+        newDevtools(() => initialState3, { enabled: true, ...options3 }),
-        newDevtools(() => initialState4, { enabled: true, ...options4 })
+        newDevtools(() => initialState4, { enabled: true, ...options4 }),
-        connectionNameGroup2
+        connectionNameGroup2,
-        devtools(() => ({ count: 0 }), { enabled: true, ...options1 })
+        devtools(() => ({ count: 0 }), { enabled: true, ...options1 }),
-        devtools(() => ({ count: 0 }), { enabled: true, ...options2 })
+        devtools(() => ({ count: 0 }), { enabled: true, ...options2 }),
-        options1.name
+        options1.name,
-          action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+          action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-          action: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+          action: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-              { count: 0 }
+              { count: 0 },
-            { enabled: true, ...options1 }
-          )
+            { enabled: true, ...options1 },
+          ),
-                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' }
+                { type }: { type: 'INCREMENT' } | { type: 'DECREMENT' },
-              { count: 10 }
+              { count: 10 },
-            { enabled: true, ...options2 }
-          )
+            { enabled: true, ...options2 },
+          ),
-          options2.testConnectionId
+          options2.testConnectionId,
-            options2.testConnectionId
+            options2.testConnectionId,
-        devtools(() => ({ count: 0, foo: 'bar' }), options1)
+        devtools(() => ({ count: 0, foo: 'bar' }), options1),
-        options3.testConnectionId
+        options3.testConnectionId,
-        { count: 10, foo: 'bar' }
+        { count: 10, foo: 'bar' },
-        { count: 15, foo: 'bar' }
+        { count: 15, foo: 'bar' },
-        { count: 5, foo: 'baz' }
+        { count: 5, foo: 'baz' },
-          })
+          }),
-          })
+          }),
-          })
+          }),
-          options1.testConnectionId
+          options1.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options1.testConnectionId
+          options1.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          '[zustand devtools middleware] Unsupported action format'
+          '[zustand devtools middleware] Unsupported action format',
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          })()
+          })(),
-          })()
+          })(),
-          })()
+          })(),
-          devtools(() => initialState1, { enabled: true, ...options1 })
+          devtools(() => initialState1, { enabled: true, ...options1 }),
-          devtools(() => initialState2, { enabled: true, ...options2 })
+          devtools(() => initialState2, { enabled: true, ...options2 }),
-          devtools(() => initialState3, { enabled: true, ...options3 })
+          devtools(() => initialState3, { enabled: true, ...options3 }),
-          options3.testConnectionId
+          options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          nextLiftedState1
+          nextLiftedState1,
-          nextLiftedState2
+          nextLiftedState2,
-          nextLiftedState3
+          nextLiftedState3,
-          devtools(() => ({ count: 0 }), { enabled: true, ...options1 })
+          devtools(() => ({ count: 0 }), { enabled: true, ...options1 }),
-          devtools(() => ({ count: 2 }), { enabled: true, ...options2 })
+          devtools(() => ({ count: 2 }), { enabled: true, ...options2 }),
-          devtools(() => ({ count: 4 }), { enabled: true, ...options3 })
+          devtools(() => ({ count: 4 }), { enabled: true, ...options3 }),
-            options3.testConnectionId
+            options3.testConnectionId,
-          options3.testConnectionId
+          options3.testConnectionId,
-          newState1
+          newState1,
-          newState1
+          newState1,
-          { count: 3 }
+          { count: 3 },
-          newState2
+          newState2,
-          newState2
+          newState2,
-          { count: 3 }
+          { count: 3 },
-          newState3
+          newState3,
-          newState3
+          newState3,
-          { count: 3 }
+          { count: 3 },
-          devtools(() => ({ count: 0, foo: 'bar' }), options)
+          devtools(() => ({ count: 0, foo: 'bar' }), options),
-          { [options.store]: { count: 10, foo: 'bar' } }
+          { [options.store]: { count: 10, foo: 'bar' } },
-          { [options.store]: { count: 15, foo: 'bar' } }
+          { [options.store]: { count: 15, foo: 'bar' } },
-          { [options.store]: { count: 5, foo: 'baz' } }
+          { [options.store]: { count: 5, foo: 'baz' } },
-            })
+            }),
-            })
+            }),
-            })
+            }),
-            })
+            }),
-            options1.testConnectionId
+            options1.testConnectionId,
-            devtools(() => initialState1, { enabled: true, ...options1 })
+            devtools(() => initialState1, { enabled: true, ...options1 }),
-            devtools(() => initialState2, { enabled: true, ...options2 })
+            devtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options1)
+            getKeyFromOptions(options1),
-              '[zustand devtools middleware] Unsupported __setState'
-            )
+              '[zustand devtools middleware] Unsupported __setState',
+            ),
-            newDevtools(() => initialState1, { enabled: true, ...options1 })
+            newDevtools(() => initialState1, { enabled: true, ...options1 }),
-            newDevtools(() => initialState2, { enabled: true, ...options2 })
+            newDevtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options2)
+            getKeyFromOptions(options2),
-            newDevtools(() => initialState1, { enabled: true, ...options1 })
+            newDevtools(() => initialState1, { enabled: true, ...options1 }),
-            newDevtools(() => initialState2, { enabled: true, ...options2 })
+            newDevtools(() => initialState2, { enabled: true, ...options2 }),
-            getKeyFromOptions(options2)
+            getKeyFromOptions(options2),"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/middlewareTypes.test.tsx,,"-      }))
+      })),
-      immer(() => ({ count: 0 }))
+      immer(() => ({ count: 0 })),
-        { count: 0 }
-      )
+        { count: 0 },
+      ),
-      redux((x) => x, { count: 0 })
+      redux((x) => x, { count: 0 }),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-      devtools(() => ({ count: 0 }))
+      devtools(() => ({ count: 0 })),
-      }))
+      })),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-      subscribeWithSelector(() => ({ count: 0 }))
+      subscribeWithSelector(() => ({ count: 0 })),
-      }))
+      })),
-      combine({ count: 0 }, () => ({}))
+      combine({ count: 0 }, () => ({})),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-      persist(() => ({ count: 0 }), { name: 'prefix' })
+      persist(() => ({ count: 0 }), { name: 'prefix' }),
-        { name: 'prefix', partialize: (s) => s.count }
-      )
+        { name: 'prefix', partialize: (s) => s.count },
+      ),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-                { type: 'inc', by: 1 }
+                { type: 'inc', by: 1 },
-          { name: 'prefix' }
-        )
-      )
+          { name: 'prefix' },
+        ),
+      ),
-          { count: 0 }
-        ),
-        { name: 'prefix' }
-      )
+          { count: 0 },
+        ),
+        { name: 'prefix' },
+      ),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-        }))
-      )
+        })),
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-          { name: 'count' }
-        ),
-        { name: 'prefix' }
-      )
+          { name: 'count' },
+        ),
+        { name: 'prefix' },
+      ),
-          { name: 'count' }
-        ),
-        { name: 'prefix' }
-      )
+          { name: 'count' },
+        ),
+        { name: 'prefix' },
+      ),
-          }))
-        ),
-        { name: 'prefix' }
-      )
+          })),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-            { name: 'count' }
-          )
-        ),
-        { name: 'prefix' }
-      )
+            { name: 'count' },
+          ),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-            { name: 'count' }
-          )
-        ),
-        { name: 'prefix' }
-      )
+            { name: 'count' },
+          ),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-          { name: 'name' }
-        )
-      )
+          { name: 'name' },
+        ),
+      ),
-        (foo) => console.log(foo)
+        (foo) => console.log(foo),
-          }) as MyState // NOTE: Asserting the entire state works too.
-      )
+          }) as MyState, // NOTE: Asserting the entire state works too.
+      ),
-        (foo) => console.log(foo)
+        (foo) => console.log(foo),
-        { name: 'auth-store' }
-      )
+        { name: 'auth-store' },
+      ),
-          { name: 'count' }
-        )
-      )
+          { name: 'count' },
+        ),
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),","-      }))
+      })),
-      immer(() => ({ count: 0 }))
+      immer(() => ({ count: 0 })),
-        { count: 0 }
-      )
+        { count: 0 },
+      ),
-      redux((x) => x, { count: 0 })
+      redux((x) => x, { count: 0 }),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-      devtools(() => ({ count: 0 }))
+      devtools(() => ({ count: 0 })),
-      }))
+      })),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-      subscribeWithSelector(() => ({ count: 0 }))
+      subscribeWithSelector(() => ({ count: 0 })),
-      }))
+      })),
-      combine({ count: 0 }, () => ({}))
+      combine({ count: 0 }, () => ({})),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-      persist(() => ({ count: 0 }), { name: 'prefix' })
+      persist(() => ({ count: 0 }), { name: 'prefix' }),
-        { name: 'prefix', partialize: (s) => s.count }
-      )
+        { name: 'prefix', partialize: (s) => s.count },
+      ),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-                { type: 'inc', by: 1 }
+                { type: 'inc', by: 1 },
-          { name: 'prefix' }
-        )
-      )
+          { name: 'prefix' },
+        ),
+      ),
-          { count: 0 }
-        ),
-        { name: 'prefix' }
-      )
+          { count: 0 },
+        ),
+        { name: 'prefix' },
+      ),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-        }))
-      )
+        })),
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-        { name: 'prefix' }
-      )
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-          { name: 'count' }
-        ),
-        { name: 'prefix' }
-      )
+          { name: 'count' },
+        ),
+        { name: 'prefix' },
+      ),
-          { name: 'count' }
-        ),
-        { name: 'prefix' }
-      )
+          { name: 'count' },
+        ),
+        { name: 'prefix' },
+      ),
-          }))
-        ),
-        { name: 'prefix' }
-      )
+          })),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-            { name: 'count' }
-          )
-        ),
-        { name: 'prefix' }
-      )
+            { name: 'count' },
+          ),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-            { name: 'count' }
-          )
-        ),
-        { name: 'prefix' }
-      )
+            { name: 'count' },
+          ),
+        ),
+        { name: 'prefix' },
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),
-          { name: 'name' }
-        )
-      )
+          { name: 'name' },
+        ),
+      ),
-        (foo) => console.log(foo)
+        (foo) => console.log(foo),
-          }) as MyState // NOTE: Asserting the entire state works too.
-      )
+          }) as MyState, // NOTE: Asserting the entire state works too.
+      ),
-        (foo) => console.log(foo)
+        (foo) => console.log(foo),
-        { name: 'auth-store' }
-      )
+        { name: 'auth-store' },
+      ),
-          { name: 'count' }
-        )
-      )
+          { name: 'count' },
+        ),
+      ),
-        (count) => console.log(count * 2)
+        (count) => console.log(count * 2),"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/persistAsync.test.tsx,,"-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      undefined
+      undefined,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        new Error('getItem error')
+        new Error('getItem error'),
-        })
+        }),
-      </StrictMode>
+      </StrictMode>,
-      JSON.stringify({ state: { count: 42 }, version: 0 })
+      JSON.stringify({ state: { count: 42 }, version: 0 }),
-      </StrictMode>
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
+      }),
-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      })
+      }),
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        new Error('migrate error')
+        new Error('migrate error'),
-      })
+      }),
-      </StrictMode>
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        undefined
+        undefined,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
+      }),
-      })
+      }),
-      useBoundStore.persist.onFinishHydration(resolve)
+      useBoundStore.persist.onFinishHydration(resolve),
-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-        }
-      )
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+        },
+      ),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      undefined
+      undefined,
-        })
+        }),
-      </StrictMode>
+      </StrictMode>,
-      })
+      }),
-      </StrictMode>
+      </StrictMode>,
-        undefined
+        undefined,","-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      undefined
+      undefined,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        new Error('getItem error')
+        new Error('getItem error'),
-        })
+        }),
-      </StrictMode>
+      </StrictMode>,
-      JSON.stringify({ state: { count: 42 }, version: 0 })
+      JSON.stringify({ state: { count: 42 }, version: 0 }),
-      </StrictMode>
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
+      }),
-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      })
+      }),
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        new Error('migrate error')
+        new Error('migrate error'),
-      })
+      }),
-      </StrictMode>
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        undefined
+        undefined,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+      }),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-      })
+      }),
-      })
+      }),
-      useBoundStore.persist.onFinishHydration(resolve)
+      useBoundStore.persist.onFinishHydration(resolve),
-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-        }
-      )
-    )
-
-    function Counter() {
-      const { count } = useBoundStore()
-      return <div>count: {count}</div>
-    }
-
-    const { findByText } = render(
-      <StrictMode>
-        <Counter />
-      </StrictMode>
+        },
+      ),
+    )
+
+    function Counter() {
+      const { count } = useBoundStore()
+      return <div>count: {count}</div>
+    }
+
+    const { findByText } = render(
+      <StrictMode>
+        <Counter />
+      </StrictMode>,
-        }
-      )
+        },
+      ),
-      </StrictMode>
+      </StrictMode>,
-      undefined
+      undefined,
-        })
+        }),
-      </StrictMode>
+      </StrictMode>,
-      })
+      }),
-      </StrictMode>
+      </StrictMode>,
-        undefined
+        undefined,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/persistSync.test.tsx,,"-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-      })
+      }),
-        })
+        }),
-      JSON.stringify({ state: { count: 42 }, version: 0 })
+      JSON.stringify({ state: { count: 42 }, version: 0 }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      new Error('migrate error')
+      new Error('migrate error'),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-        }
-      )
+        },
+      ),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      '{""state"":{""count"":0},""version"":0}'
+      '{""state"":{""count"":0},""version"":0}',
-          Object.entries(state).filter(([key]) => key !== 'count')
+          Object.entries(state).filter(([key]) => key !== 'count'),
-      '{""state"":{},""version"":0}'
+      '{""state"":{},""version"":0}',
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      onFinishHydrationSpy1
+      onFinishHydrationSpy1,
-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-        }
-      )
+        },
+      ),
-        }
-      )
+        },
+      ),
-        })
+        }),
-      })
+      }),
-      undefined
+      undefined,","-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-      })
+      }),
-        })
+        }),
-      JSON.stringify({ state: { count: 42 }, version: 0 })
+      JSON.stringify({ state: { count: 42 }, version: 0 }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      new Error('migrate error')
+      new Error('migrate error'),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-        }
-      )
+        },
+      ),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      '{""state"":{""count"":0},""version"":0}'
+      '{""state"":{""count"":0},""version"":0}',
-          Object.entries(state).filter(([key]) => key !== 'count')
+          Object.entries(state).filter(([key]) => key !== 'count'),
-      '{""state"":{},""version"":0}'
+      '{""state"":{},""version"":0}',
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      })
+      }),
-      onFinishHydrationSpy1
+      onFinishHydrationSpy1,
-        }
-      )
+        },
+      ),
-      undefined
+      undefined,
-        }
-      )
+        },
+      ),
-        }
-      )
+        },
+      ),
-        })
+        }),
-      })
+      }),
-      undefined
+      undefined,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/shallow.test.tsx,,"-        shallow
+        shallow,
-      <TestUseShallowSimple state={{ a: 1, b: 2 }} selector={Object.keys} />
+      <TestUseShallowSimple state={{ a: 1, b: 2 }} selector={Object.keys} />,
-      />
+      />,
-      <TestUseShallowSimple state={state} selector={Object.keys} />
+      <TestUseShallowSimple state={state} selector={Object.keys} />,
-      />
+      />,
-      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 })
+      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 }),
-      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 })
+      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 }),
-        useShallow((state) => Object.keys(state).concat([count.toString()]))
+        useShallow((state) => Object.keys(state).concat([count.toString()])),
-          onClick={() => setCount((prev) => ++prev)}>
+          onClick={() => setCount((prev) => ++prev)}
+        >","-        shallow
+        shallow,
-      <TestUseShallowSimple state={{ a: 1, b: 2 }} selector={Object.keys} />
+      <TestUseShallowSimple state={{ a: 1, b: 2 }} selector={Object.keys} />,
-      />
+      />,
-      <TestUseShallowSimple state={state} selector={Object.keys} />
+      <TestUseShallowSimple state={state} selector={Object.keys} />,
-      />
+      />,
-      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 })
+      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 }),
-      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 })
+      (): Record<string, unknown> => ({ a: 1, b: 2, c: 3 }),
-        useShallow((state) => Object.keys(state).concat([count.toString()]))
+        useShallow((state) => Object.keys(state).concat([count.toString()])),
-          onClick={() => setCount((prev) => ++prev)}>
+          onClick={() => setCount((prev) => ++prev)}
+        >"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/ssr.test.tsx,,"-    })
+    }),
-          'react-dom/client'
+          'react-dom/client',
-        </React.Suspense>
+        </React.Suspense>,
-          </React.Suspense>
+          </React.Suspense>,
-  }
+  },","-    })
+    }),
-          'react-dom/client'
+          'react-dom/client',
-        </React.Suspense>
+        </React.Suspense>,
-          </React.Suspense>
+          </React.Suspense>,
-  }
+  },"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/subscribe.test.tsx,,"-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),","-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),
-      subscribeWithSelector(() => initialState)
+      subscribeWithSelector(() => initialState),"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/test-utils.ts,,"-  value: unknown
+  value: unknown,","-  value: unknown
+  value: unknown,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/types.test.tsx,,"-    state
+    state,
-    _useBoundStore: UseBoundStore<StoreApi<ExampleState>>
+    _useBoundStore: UseBoundStore<StoreApi<ExampleState>>,
-    useBoundStore
+    useBoundStore,","-    state
+    state,
-    _useBoundStore: UseBoundStore<StoreApi<ExampleState>>
+    _useBoundStore: UseBoundStore<StoreApi<ExampleState>>,
-    useBoundStore
+    useBoundStore,"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/vanilla/basic.test.ts,,"-    })
+    }),","-    })
+    }),"
pmndrs_zustand,abbc74025a7798c3c03f499dca3ed9cfc95ef13a,Merge branch 'main' into v5,tests/vanilla/shallow.test.tsx,,"-      true
+      true,
-      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', foobar: true })
+      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', foobar: true }),
-      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', asd: 123, foobar: true })
+      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', asd: 123, foobar: true }),
-      shallow([{ foo: 'bar' }, { asd: 123 }], [{ foo: 'bar' }, { asd: 123 }])
+      shallow([{ foo: 'bar' }, { asd: 123 }], [{ foo: 'bar' }, { asd: 123 }]),
-        createMap({ foo: 'bar', asd: 123 })
-      )
+        createMap({ foo: 'bar', asd: 123 }),
+      ),
-        createMap({ foo: 'bar', foobar: true })
-      )
+        createMap({ foo: 'bar', foobar: true }),
+      ),
-        createMap({ foo: 'bar', asd: 123, foobar: true })
-      )
+        createMap({ foo: 'bar', asd: 123, foobar: true }),
+      ),
-      false
+      false,
-        new Date('2022-07-20T00:00:00.000Z')
-      )
+        new Date('2022-07-20T00:00:00.000Z'),
+      ),","-      true
+      true,
-      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', foobar: true })
+      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', foobar: true }),
-      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', asd: 123, foobar: true })
+      shallow({ foo: 'bar', asd: 123 }, { foo: 'bar', asd: 123, foobar: true }),
-      shallow([{ foo: 'bar' }, { asd: 123 }], [{ foo: 'bar' }, { asd: 123 }])
+      shallow([{ foo: 'bar' }, { asd: 123 }], [{ foo: 'bar' }, { asd: 123 }]),
-        createMap({ foo: 'bar', asd: 123 })
-      )
+        createMap({ foo: 'bar', asd: 123 }),
+      ),
-        createMap({ foo: 'bar', foobar: true })
-      )
+        createMap({ foo: 'bar', foobar: true }),
+      ),
-        createMap({ foo: 'bar', asd: 123, foobar: true })
-      )
+        createMap({ foo: 'bar', asd: 123, foobar: true }),
+      ),
-      false
+      false,
-        new Date('2022-07-20T00:00:00.000Z')
-      )
+        new Date('2022-07-20T00:00:00.000Z'),
+      ),"
pmndrs_zustand,aaa5c21fc5ddb7ca336217537a0a49dd09002c10,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },","-  ""version"": ""4.4.5"",
+  ""version"": ""4.4.6"",
-        ""types"": ""./index.d.ts"",
+        ""types"": ""./esm/index.d.ts"",
-      ""types"": ""./vanilla.d.ts"",
-      ""module"": ""./esm/vanilla.js"",
-      ""default"": ""./vanilla.js""
+      ""module"": {
+        ""types"": ""./esm/vanilla.d.ts"",
+        ""default"": ""./esm/vanilla.js""
+      },
+      ""default"": {
+        ""types"": ""./vanilla.d.ts"",
+        ""default"": ""./vanilla.js""
+      }
-      ""types"": ""./middleware.d.ts"",
-      ""module"": ""./esm/middleware.js"",
-      ""default"": ""./middleware.js""
+      ""module"": {
+        ""types"": ""./esm/middleware.d.ts"",
+        ""default"": ""./esm/middleware.js""
+      },
+      ""default"": {
+        ""types"": ""./middleware.d.ts"",
+        ""default"": ""./middleware.js""
+      }
-      ""types"": ""./middleware/immer.d.ts"",
-      ""module"": ""./esm/middleware/immer.js"",
-      ""default"": ""./middleware/immer.js""
+      ""module"": {
+        ""types"": ""./esm/middleware/immer.d.ts"",
+        ""default"": ""./esm/middleware/immer.js""
+      },
+      ""default"": {
+        ""types"": ""./middleware/immer.d.ts"",
+        ""default"": ""./middleware/immer.js""
+      }
-      ""types"": ""./shallow.d.ts"",
-      ""module"": ""./esm/shallow.js"",
-      ""default"": ""./shallow.js""
+      ""module"": {
+        ""types"": ""./esm/shallow.d.ts"",
+        ""default"": ""./esm/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./shallow.d.ts"",
+        ""default"": ""./shallow.js""
+      }
-      ""types"": ""./vanilla/shallow.d.ts"",
-      ""module"": ""./esm/vanilla/shallow.js"",
-      ""default"": ""./vanilla/shallow.js""
+      ""module"": {
+        ""types"": ""./esm/vanilla/shallow.d.ts"",
+        ""default"": ""./esm/vanilla/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./vanilla/shallow.d.ts"",
+        ""default"": ""./vanilla/shallow.js""
+      }
-      ""types"": ""./react/shallow.d.ts"",
-      ""module"": ""./esm/react/shallow.js"",
-      ""default"": ""./react/shallow.js""
+      ""module"": {
+        ""types"": ""./esm/react/shallow.d.ts"",
+        ""default"": ""./esm/react/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./react/shallow.d.ts"",
+        ""default"": ""./react/shallow.js""
+      }
-      ""types"": ""./traditional.d.ts"",
-      ""module"": ""./esm/traditional.js"",
-      ""default"": ""./traditional.js""
+      ""module"": {
+        ""types"": ""./esm/traditional.d.ts"",
+        ""default"": ""./esm/traditional.js""
+      },
+      ""default"": {
+        ""types"": ""./traditional.d.ts"",
+        ""default"": ""./traditional.js""
+      }
-      ""types"": ""./context.d.ts"",
-      ""module"": ""./esm/context.js"",
-      ""default"": ""./context.js""
+      ""module"": {
+        ""types"": ""./esm/context.d.ts"",
+        ""default"": ""./esm/context.js""
+      },
+      ""default"": {
+        ""types"": ""./context.d.ts"",
+        ""default"": ""./context.js""
+      }","-  ""version"": ""4.4.5"",
+  ""version"": ""4.4.6"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-        ""types"": ""./index.d.ts"",
+        ""types"": ""./esm/index.d.ts"",
-      ""types"": ""./vanilla.d.ts"",
-      ""module"": ""./esm/vanilla.js"",
-      ""default"": ""./vanilla.js""
+      ""module"": {
+        ""types"": ""./esm/vanilla.d.ts"",
+        ""default"": ""./esm/vanilla.js""
+      },
+      ""default"": {
+        ""types"": ""./vanilla.d.ts"",
+        ""default"": ""./vanilla.js""
+      }
-      ""types"": ""./middleware.d.ts"",
-      ""module"": ""./esm/middleware.js"",
-      ""default"": ""./middleware.js""
+      ""module"": {
+        ""types"": ""./esm/middleware.d.ts"",
+        ""default"": ""./esm/middleware.js""
+      },
+      ""default"": {
+        ""types"": ""./middleware.d.ts"",
+        ""default"": ""./middleware.js""
+      }
-      ""types"": ""./middleware/immer.d.ts"",
-      ""module"": ""./esm/middleware/immer.js"",
-      ""default"": ""./middleware/immer.js""
+      ""module"": {
+        ""types"": ""./esm/middleware/immer.d.ts"",
+        ""default"": ""./esm/middleware/immer.js""
+      },
+      ""default"": {
+        ""types"": ""./middleware/immer.d.ts"",
+        ""default"": ""./middleware/immer.js""
+      }
-      ""types"": ""./shallow.d.ts"",
-      ""module"": ""./esm/shallow.js"",
-      ""default"": ""./shallow.js""
+      ""module"": {
+        ""types"": ""./esm/shallow.d.ts"",
+        ""default"": ""./esm/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./shallow.d.ts"",
+        ""default"": ""./shallow.js""
+      }
-      ""types"": ""./vanilla/shallow.d.ts"",
-      ""module"": ""./esm/vanilla/shallow.js"",
-      ""default"": ""./vanilla/shallow.js""
+      ""module"": {
+        ""types"": ""./esm/vanilla/shallow.d.ts"",
+        ""default"": ""./esm/vanilla/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./vanilla/shallow.d.ts"",
+        ""default"": ""./vanilla/shallow.js""
+      }
-      ""types"": ""./react/shallow.d.ts"",
-      ""module"": ""./esm/react/shallow.js"",
-      ""default"": ""./react/shallow.js""
+      ""module"": {
+        ""types"": ""./esm/react/shallow.d.ts"",
+        ""default"": ""./esm/react/shallow.js""
+      },
+      ""default"": {
+        ""types"": ""./react/shallow.d.ts"",
+        ""default"": ""./react/shallow.js""
+      }
-      ""types"": ""./traditional.d.ts"",
-      ""module"": ""./esm/traditional.js"",
-      ""default"": ""./traditional.js""
+      ""module"": {
+        ""types"": ""./esm/traditional.d.ts"",
+        ""default"": ""./esm/traditional.js""
+      },
+      ""default"": {
+        ""types"": ""./traditional.d.ts"",
+        ""default"": ""./traditional.js""
+      }
-      ""types"": ""./context.d.ts"",
-      ""module"": ""./esm/context.js"",
-      ""default"": ""./context.js""
+      ""module"": {
+        ""types"": ""./esm/context.d.ts"",
+        ""default"": ""./esm/context.js""
+      },
+      ""default"": {
+        ""types"": ""./context.d.ts"",
+        ""default"": ""./context.js""
+      }"
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,package.json,"+  ""publishConfig"": {
+    ""tag"": ""next""
+  },","-  ""version"": ""4.4.4"",
+  ""version"": ""4.4.5"",
-      ""types"": ""./index.d.ts"",
-      ""module"": ""./esm/index.js"",
-      ""default"": ""./index.js""
+      ""module"": {
+        ""types"": ""./index.d.ts"",
+        ""default"": ""./esm/index.js""
+      },
+      ""default"": {
+        ""types"": ""./index.d.ts"",
+        ""default"": ""./index.js""
+      }
-    ""@rollup/plugin-replace"": ""^5.0.4"",
+    ""@rollup/plugin-replace"": ""^5.0.5"",
-    ""@types/react"": ""^18.2.31"",
+    ""@types/react"": ""^18.2.33"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.8.0"",
-    ""@typescript-eslint/parser"": ""^6.8.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.9.1"",
+    ""@typescript-eslint/parser"": ""^6.9.1"",
-    ""eslint-plugin-import"": ""^2.28.1"",
+    ""eslint-plugin-import"": ""^2.29.0"",
-    ""eslint-plugin-vitest"": ""^0.3.3"",
+    ""eslint-plugin-vitest"": ""^0.3.8"",
-    ""rollup"": ""^4.1.4"",
+    ""rollup"": ""^4.2.0"",","-  ""version"": ""4.4.4"",
+  ""version"": ""4.4.5"",
+  ""publishConfig"": {
+    ""tag"": ""next""
+  },
-      ""types"": ""./index.d.ts"",
-      ""module"": ""./esm/index.js"",
-      ""default"": ""./index.js""
+      ""module"": {
+        ""types"": ""./index.d.ts"",
+        ""default"": ""./esm/index.js""
+      },
+      ""default"": {
+        ""types"": ""./index.d.ts"",
+        ""default"": ""./index.js""
+      }
-    ""@rollup/plugin-replace"": ""^5.0.4"",
+    ""@rollup/plugin-replace"": ""^5.0.5"",
-    ""@types/react"": ""^18.2.31"",
+    ""@types/react"": ""^18.2.33"",
-    ""@typescript-eslint/eslint-plugin"": ""^6.8.0"",
-    ""@typescript-eslint/parser"": ""^6.8.0"",
+    ""@typescript-eslint/eslint-plugin"": ""^6.9.1"",
+    ""@typescript-eslint/parser"": ""^6.9.1"",
-    ""eslint-plugin-import"": ""^2.28.1"",
+    ""eslint-plugin-import"": ""^2.29.0"",
-    ""eslint-plugin-vitest"": ""^0.3.3"",
+    ""eslint-plugin-vitest"": ""^0.3.8"",
-    ""rollup"": ""^4.1.4"",
+    ""rollup"": ""^4.2.0"","
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,src/context.ts,,"-import {
-  createElement,
-  createContext as reactCreateContext,
-  useContext,
-  useMemo,
-  useRef,
-} from 'react'
+// import {
+//   createElement,
+//   createContext as reactCreateContext,
+//   useContext,
+//   useMemo,
+//   useRef,
+// } from 'react'
+// That doesnt work in ESM, because React libs are CJS only.
+// The following is a workaround until ESM is supported.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+
+const {
+  createElement,
+  createContext: reactCreateContext,
+  useContext,
+  useMemo,
+  useRef,
+} = ReactExports","-import {
-  createElement,
-  createContext as reactCreateContext,
-  useContext,
-  useMemo,
-  useRef,
-} from 'react'
+// import {
+//   createElement,
+//   createContext as reactCreateContext,
+//   useContext,
+//   useMemo,
+//   useRef,
+// } from 'react'
+// That doesnt work in ESM, because React libs are CJS only.
+// The following is a workaround until ESM is supported.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+
+const {
+  createElement,
+  createContext: reactCreateContext,
+  useContext,
+  useMemo,
+  useRef,
+} = ReactExports"
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,src/react.ts,,"-import { useDebugValue } from 'react'
+// import { useDebugValue } from 'react'
-// This doesn't work in ESM, because use-sync-external-store only exposes CJS.
+// Those don't work in ESM, because React libs are CJS only.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+const { useDebugValue } = ReactExports","-import { useDebugValue } from 'react'
+// import { useDebugValue } from 'react'
-// This doesn't work in ESM, because use-sync-external-store only exposes CJS.
+// Those don't work in ESM, because React libs are CJS only.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+const { useDebugValue } = ReactExports"
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,src/react/shallow.ts,,"-import { useRef } from 'react'
+// import { useDebugValue } from 'react'
+// That doesnt work in ESM, because React libs are CJS only.
+// The following is a workaround until ESM is supported.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+
+const { useRef } = ReactExports","-import { useRef } from 'react'
+// import { useDebugValue } from 'react'
+// That doesnt work in ESM, because React libs are CJS only.
+// The following is a workaround until ESM is supported.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+
+const { useRef } = ReactExports"
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,src/traditional.ts,,"-import { useDebugValue } from 'react'
+// import { useDebugValue } from 'react'
-// This doesn't work in ESM, because use-sync-external-store only exposes CJS.
+// Those don't work in ESM, because React libs are CJS only.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+const { useDebugValue } = ReactExports","-import { useDebugValue } from 'react'
+// import { useDebugValue } from 'react'
-// This doesn't work in ESM, because use-sync-external-store only exposes CJS.
+// Those don't work in ESM, because React libs are CJS only.
+// eslint-disable-next-line import/extensions
+import ReactExports from 'react'
+const { useDebugValue } = ReactExports"
pmndrs_zustand,10466abe480f055565db878850a7dfb3080f1449,Merge branch 'main' into v5,tsconfig.json,,"-    ""skipLibCheck"": true /* FIXME remove this once redux fixes it */,","-    ""skipLibCheck"": true /* FIXME remove this once redux fixes it */,"
pmndrs_zustand,0dc613240d7479d3a85d8273db77aa72b60f8600,Merge pull request #169 from react-spring/fix-typing-for-immer  fix typing for immer,src/vanilla.ts,,"-// (state: T) => void is for immer https://github.com/react-spring/zustand/pull/99
-  | ((state: T) => void)
-export type StateCreator<T extends State> = (
-  set: SetState<T>,
+export type StateCreator<T extends State, CustomSetState = SetState<T>> = (
+  set: CustomSetState,","-// (state: T) => void is for immer https://github.com/react-spring/zustand/pull/99
-  | ((state: T) => void)
-export type StateCreator<T extends State> = (
-  set: SetState<T>,
+export type StateCreator<T extends State, CustomSetState = SetState<T>> = (
+  set: CustomSetState,"
pmndrs_zustand,4675a5089a15c92fb5d1eb1e3f8f1820aaed0856,Merge pull request #167 from react-spring/fix-devtools-and-type-middleware  fix devtools and type middleware properly,.size-snapshot.json,"-    ""bundled"": 3974,
-    ""minified"": 1304,
-    ""gzipped"": 642,
+    ""bundled"": 4173,
+    ""minified"": 1360,
+    ""gzipped"": 672,
-    ""bundled"": 5287,
-    ""minified"": 2019,
-    ""gzipped"": 859
+    ""bundled"": 5494,
+    ""minified"": 2072,
+    ""gzipped"": 886
-    ""bundled"": 5530,
-    ""minified"": 1695,
-    ""gzipped"": 763
+    ""bundled"": 5747,
+    ""minified"": 1757,
+    ""gzipped"": 795","-    ""bundled"": 2039,
-    ""minified"": 1207,
-    ""gzipped"": 610
+    ""bundled"": 2088,
+    ""minified"": 1231,
+    ""gzipped"": 628","-    ""bundled"": 3974,
-    ""minified"": 1304,
-    ""gzipped"": 642,
+    ""bundled"": 4173,
+    ""minified"": 1360,
+    ""gzipped"": 672,
-    ""bundled"": 5287,
-    ""minified"": 2019,
-    ""gzipped"": 859
+    ""bundled"": 5494,
+    ""minified"": 2072,
+    ""gzipped"": 886
-    ""bundled"": 5530,
-    ""minified"": 1695,
-    ""gzipped"": 763
+    ""bundled"": 5747,
+    ""minified"": 1757,
+    ""gzipped"": 795
-    ""bundled"": 2039,
-    ""minified"": 1207,
-    ""gzipped"": 610
+    ""bundled"": 2088,
+    ""minified"": 1231,
+    ""gzipped"": 628"
pmndrs_zustand,4675a5089a15c92fb5d1eb1e3f8f1820aaed0856,Merge pull request #167 from react-spring/fix-devtools-and-type-middleware  fix devtools and type middleware properly,src/middleware.ts,,"-const redux = (reducer: any, initial: any) => (
-  set: any,
-  get: any,
-  api: any
-) => {
-  api.dispatch = (action: any) => {
-    set((state: any) => reducer(state, action))
+import type {
+  State,
+  GetState,
+  SetState,
+  StoreApi,
+  PartialState,
+} from './vanilla'
+
+const redux = <S extends State, A extends { type: unknown }>(
+  reducer: (state: S, action: A) => S,
+  initial: S
+) => (
+  set: SetState<S & { dispatch: (a: A) => A }>,
+  get: GetState<S & { dispatch: (a: A) => A }>,
+  api: StoreApi<S & { dispatch: (a: A) => A }> & {
+    dispatch?: (a: A) => A
+    devtools?: any
+  }
+): S & { dispatch: (a: A) => A } => {
+  api.dispatch = (action: A) => {
+    set((state: S) => reducer(state, action))
-const devtools = (fn: any, prefix?: string) => (
-  set: any,
-  get: any,
-  api: any
-) => {
+const devtools = <S extends State>(
+  fn: (
+    set: (partial: PartialState<S>, replace?: boolean, name?: string) => void,
+    get: GetState<S>,
+    api: StoreApi<S>
+  ) => S,
+  prefix?: string
+) => (
+  set: SetState<S>,
+  get: GetState<S>,
+  api: StoreApi<S> & { devtools?: any }
+): S => {
-  const namedSet = (state: any, name?: any) => {
-    set(state)
-    if (name) {
-      api.devtools.send(api.devtools.prefix + name, get())
+  const namedSet = (
+    state: PartialState<S>,
+    replace?: boolean,
+    name?: string | false
+  ) => {
+    set(state, replace)
+    if (name !== false) {
+      api.devtools.send(api.devtools.prefix + (name || 'action'), get())
+          false,","-const redux = (reducer: any, initial: any) => (
-  set: any,
-  get: any,
-  api: any
-) => {
-  api.dispatch = (action: any) => {
-    set((state: any) => reducer(state, action))
+import type {
+  State,
+  GetState,
+  SetState,
+  StoreApi,
+  PartialState,
+} from './vanilla'
+
+const redux = <S extends State, A extends { type: unknown }>(
+  reducer: (state: S, action: A) => S,
+  initial: S
+) => (
+  set: SetState<S & { dispatch: (a: A) => A }>,
+  get: GetState<S & { dispatch: (a: A) => A }>,
+  api: StoreApi<S & { dispatch: (a: A) => A }> & {
+    dispatch?: (a: A) => A
+    devtools?: any
+  }
+): S & { dispatch: (a: A) => A } => {
+  api.dispatch = (action: A) => {
+    set((state: S) => reducer(state, action))
-const devtools = (fn: any, prefix?: string) => (
-  set: any,
-  get: any,
-  api: any
-) => {
+const devtools = <S extends State>(
+  fn: (
+    set: (partial: PartialState<S>, replace?: boolean, name?: string) => void,
+    get: GetState<S>,
+    api: StoreApi<S>
+  ) => S,
+  prefix?: string
+) => (
+  set: SetState<S>,
+  get: GetState<S>,
+  api: StoreApi<S> & { devtools?: any }
+): S => {
-  const namedSet = (state: any, name?: any) => {
-    set(state)
-    if (name) {
-      api.devtools.send(api.devtools.prefix + name, get())
+  const namedSet = (
+    state: PartialState<S>,
+    replace?: boolean,
+    name?: string | false
+  ) => {
+    set(state, replace)
+    if (name !== false) {
+      api.devtools.send(api.devtools.prefix + (name || 'action'), get())
+          false,"
pmndrs_zustand,a2547bbdf5e9503c75ab05e52a5a89fbd524a6e8,Merge pull request #164 from react-spring/fix-detect-state-change-before-subscription  fix: detect state change before subscription,.size-snapshot.json,,"-    ""bundled"": 3974,
-    ""minified"": 1304,
-    ""gzipped"": 642,
+    ""bundled"": 4173,
+    ""minified"": 1360,
+    ""gzipped"": 672,
-    ""bundled"": 5287,
-    ""minified"": 2019,
-    ""gzipped"": 859
+    ""bundled"": 5494,
+    ""minified"": 2072,
+    ""gzipped"": 886
-    ""bundled"": 5530,
-    ""minified"": 1695,
-    ""gzipped"": 763
+    ""bundled"": 5747,
+    ""minified"": 1757,
+    ""gzipped"": 795","-    ""bundled"": 3974,
-    ""minified"": 1304,
-    ""gzipped"": 642,
+    ""bundled"": 4173,
+    ""minified"": 1360,
+    ""gzipped"": 672,
-    ""bundled"": 5287,
-    ""minified"": 2019,
-    ""gzipped"": 859
+    ""bundled"": 5494,
+    ""minified"": 2072,
+    ""gzipped"": 886
-    ""bundled"": 5530,
-    ""minified"": 1695,
-    ""gzipped"": 763
+    ""bundled"": 5747,
+    ""minified"": 1757,
+    ""gzipped"": 795"
pmndrs_zustand,a2547bbdf5e9503c75ab05e52a5a89fbd524a6e8,Merge pull request #164 from react-spring/fix-detect-state-change-before-subscription  fix: detect state change before subscription,src/index.ts,,"+    const state = api.getState()
-      currentSliceRef.current = selector(api.getState())
+      currentSliceRef.current = selector(state)
-      newStateSlice = selector(api.getState())
+      newStateSlice = selector(state)
-    useIsoLayoutEffect(() => {
+    const stateBeforeSubscriptionRef = useRef(state)
+    useEffect(() => {
+      if (api.getState() !== stateBeforeSubscriptionRef.current) {
+        listener() // state has changed before subscription
+      }","+    const state = api.getState()
-      currentSliceRef.current = selector(api.getState())
+      currentSliceRef.current = selector(state)
-      newStateSlice = selector(api.getState())
+      newStateSlice = selector(state)
-    useIsoLayoutEffect(() => {
+    const stateBeforeSubscriptionRef = useRef(state)
+    useEffect(() => {
+      if (api.getState() !== stateBeforeSubscriptionRef.current) {
+        listener() // state has changed before subscription
+      }"
pmndrs_zustand,c95b126b505d2f829ca2ec52efe11bcbfda4d993,Merge pull request #150 from react-spring/dependabot/npm_and_yarn/example/prismjs-1.21.0  Bump prismjs from 1.2.0 to 1.21.0 in /example,example/package.json,,"-    ""prismjs"": ""1.2.0"",
+    ""prismjs"": ""1.21.0"",","-    ""prismjs"": ""1.2.0"",
+    ""prismjs"": ""1.21.0"","
pmndrs_zustand,11751336330f2d1ca65d645da6f8b78db766be57,Merge pull request #145 from getreworked/patch-1  Uses prefix as devtools instance name,src/middleware.ts,,"-    api.devtools = extension.connect()
+    api.devtools = extension.connect({ name: prefix })","-    api.devtools = extension.connect()
+    api.devtools = extension.connect({ name: prefix })"
pmndrs_zustand,a00b89ca78147b095ef73f089c8cdb969b22148c,Merge pull request #85 from JeremyRH/master  Fix subscriber being overwritten,.size-snapshot.json,,"-    ""bundled"": 4474,
+    ""bundled"": 4024,
-    ""gzipped"": 579,
+    ""gzipped"": 581,
-    ""bundled"": 5152,
-    ""minified"": 1414,
-    ""gzipped"": 647
+    ""bundled"": 4680,
+    ""minified"": 1398,
+    ""gzipped"": 653
-    ""bundled"": 5387,
-    ""minified"": 1288,
-    ""gzipped"": 599
+    ""bundled"": 4909,
+    ""minified"": 1272,
+    ""gzipped"": 605","-    ""bundled"": 4474,
+    ""bundled"": 4024,
-    ""gzipped"": 579,
+    ""gzipped"": 581,
-    ""bundled"": 5152,
-    ""minified"": 1414,
-    ""gzipped"": 647
+    ""bundled"": 4680,
+    ""minified"": 1398,
+    ""gzipped"": 653
-    ""bundled"": 5387,
-    ""minified"": 1288,
-    ""gzipped"": 599
+    ""bundled"": 4909,
+    ""minified"": 1272,
+    ""gzipped"": 605"
pmndrs_zustand,a00b89ca78147b095ef73f089c8cdb969b22148c,Merge pull request #85 from JeremyRH/master  Fix subscriber being overwritten,src/index.ts,,"-      // Reset subscriberCount because we will be removing holes from the
-      // subscribers array and changing the length which should be the same as
-      // subscriberCount.
-      subscriberCount = 0
-      // Create a dense array by removing holes from the subscribers array.
-      // Holes are not iterated by Array.prototype.filter.
-      subscribers = subscribers.filter(subscriber => {
-        subscriber.index = subscriberCount++
-        return true
-      })
-
-      // Call all subscribers only after the subscribers array has been changed
-      // to a dense array. Subscriber callbacks cannot be called above in
-      // subscribers.filter because the callbacks can cause a synchronous
-      // increment of subscriberCount if not batched.
-    // to a dense array in setState.
+    // to a dense array when a subscriber unsubscribes.
-    // Delete creates a hole and preserves the array length. If we used
-    // Array.prototype.splice, subscribers with a greater subscriber.index
-    // would no longer match their actual index in subscribers.
-    return () => delete subscribers[subscriber.index]
+    return () => {
+      // Reset subscriberCount because we will be removing holes from the
+      // subscribers array and changing the length which should be the same as
+      // subscriberCount.
+      subscriberCount = 0
+      // Create a dense array by removing holes from the subscribers array.
+      // Holes are not iterated by Array.prototype.filter.
+      subscribers = subscribers.filter(s => {
+        if (s !== subscriber) {
+          subscriber.index = subscriberCount++
+          return true
+        }
+      })
+    }","-      // Reset subscriberCount because we will be removing holes from the
-      // subscribers array and changing the length which should be the same as
-      // subscriberCount.
-      subscriberCount = 0
-      // Create a dense array by removing holes from the subscribers array.
-      // Holes are not iterated by Array.prototype.filter.
-      subscribers = subscribers.filter(subscriber => {
-        subscriber.index = subscriberCount++
-        return true
-      })
-
-      // Call all subscribers only after the subscribers array has been changed
-      // to a dense array. Subscriber callbacks cannot be called above in
-      // subscribers.filter because the callbacks can cause a synchronous
-      // increment of subscriberCount if not batched.
-    // to a dense array in setState.
+    // to a dense array when a subscriber unsubscribes.
-    // Delete creates a hole and preserves the array length. If we used
-    // Array.prototype.splice, subscribers with a greater subscriber.index
-    // would no longer match their actual index in subscribers.
-    return () => delete subscribers[subscriber.index]
+    return () => {
+      // Reset subscriberCount because we will be removing holes from the
+      // subscribers array and changing the length which should be the same as
+      // subscriberCount.
+      subscriberCount = 0
+      // Create a dense array by removing holes from the subscribers array.
+      // Holes are not iterated by Array.prototype.filter.
+      subscribers = subscribers.filter(s => {
+        if (s !== subscriber) {
+          subscriber.index = subscriberCount++
+          return true
+        }
+      })
+    }"
pmndrs_zustand,a00b89ca78147b095ef73f089c8cdb969b22148c,Merge pull request #85 from JeremyRH/master  Fix subscriber being overwritten,tests/test.tsx,,"+// https://github.com/react-spring/zustand/issues/84
+it('ensures the correct subscriber is removed on unmount', async () => {
+  const [useStore, api] = create(() => ({ count: 0 }))
+
+  function increment() {
+    api.setState(({ count }) => ({ count: count + 1 }))
+  }
+
+  function Count() {
+    const c = useStore(s => s.count)
+    return <div>count: {c}</div>
+  }
+
+  function CountWithInitialIncrement() {
+    React.useLayoutEffect(increment, [])
+    return <Count />
+  }
+
+  function Component() {
+    const [Counter, setCounter] = React.useState(
+      () => CountWithInitialIncrement
+    )
+    React.useLayoutEffect(() => {
+      setCounter(() => Count)
+    }, [])
+    return (
+      <>
+        <Counter />
+        <Count />
+      </>
+    )
+  }
+
+  const { findAllByText } = render(<Component />)
+
+  expect((await findAllByText('count: 1')).length).toBe(2)
+
+  act(increment)
+
+  expect((await findAllByText('count: 2')).length).toBe(2)
+})
+","+// https://github.com/react-spring/zustand/issues/84
+it('ensures the correct subscriber is removed on unmount', async () => {
+  const [useStore, api] = create(() => ({ count: 0 }))
+
+  function increment() {
+    api.setState(({ count }) => ({ count: count + 1 }))
+  }
+
+  function Count() {
+    const c = useStore(s => s.count)
+    return <div>count: {c}</div>
+  }
+
+  function CountWithInitialIncrement() {
+    React.useLayoutEffect(increment, [])
+    return <Count />
+  }
+
+  function Component() {
+    const [Counter, setCounter] = React.useState(
+      () => CountWithInitialIncrement
+    )
+    React.useLayoutEffect(() => {
+      setCounter(() => Count)
+    }, [])
+    return (
+      <>
+        <Counter />
+        <Count />
+      </>
+    )
+  }
+
+  const { findAllByText } = render(<Component />)
+
+  expect((await findAllByText('count: 1')).length).toBe(2)
+
+  act(increment)
+
+  expect((await findAllByText('count: 2')).length).toBe(2)
+})
+"
pmndrs_zustand,f5fa14d823bc777382299babbcad335b12d0f4dd,Merge pull request #57 from JeremyRH/master  Fix RefError when calling subscribe in middleware,.size-snapshot.json,,"-    ""bundled"": 3081,
-    ""minified"": 1283,
-    ""gzipped"": 668,
+    ""bundled"": 3090,
+    ""minified"": 1286,
+    ""gzipped"": 669,
-    ""bundled"": 3824,
-    ""minified"": 1524,
-    ""gzipped"": 750
+    ""bundled"": 3833,
+    ""minified"": 1527,
+    ""gzipped"": 751
-    ""bundled"": 4007,
-    ""minified"": 1360,
+    ""bundled"": 4018,
+    ""minified"": 1363,","-    ""bundled"": 3081,
-    ""minified"": 1283,
-    ""gzipped"": 668,
+    ""bundled"": 3090,
+    ""minified"": 1286,
+    ""gzipped"": 669,
-    ""bundled"": 3824,
-    ""minified"": 1524,
-    ""gzipped"": 750
+    ""bundled"": 3833,
+    ""minified"": 1527,
+    ""gzipped"": 751
-    ""bundled"": 4007,
-    ""minified"": 1360,
+    ""bundled"": 4018,
+    ""minified"": 1363,"
pmndrs_zustand,f5fa14d823bc777382299babbcad335b12d0f4dd,Merge pull request #57 from JeremyRH/master  Fix RefError when calling subscribe in middleware,src/index.ts,,"+  let state: TState
-  let state = createState(setState, getState, api)
+  state = createState(setState, getState, api)","+  let state: TState
-  let state = createState(setState, getState, api)
+  state = createState(setState, getState, api)"
pmndrs_zustand,c08c7281545e3afc7e12238168ba05064f44a72e,Merge pull request #56 from paulshen/force-update-fix  Support batched updates,.size-snapshot.json,,"-    ""bundled"": 3082,
+    ""bundled"": 3081,
-    ""bundled"": 3825,
-    ""minified"": 1523,
+    ""bundled"": 3824,
+    ""minified"": 1524,
-    ""bundled"": 4008,
-    ""minified"": 1359,
-    ""gzipped"": 685
+    ""bundled"": 4007,
+    ""minified"": 1360,
+    ""gzipped"": 686","-    ""bundled"": 3082,
+    ""bundled"": 3081,
-    ""bundled"": 3825,
-    ""minified"": 1523,
+    ""bundled"": 3824,
+    ""minified"": 1524,
-    ""bundled"": 4008,
-    ""minified"": 1359,
-    ""gzipped"": 685
+    ""bundled"": 4007,
+    ""minified"": 1360,
+    ""gzipped"": 686"
pmndrs_zustand,c08c7281545e3afc7e12238168ba05064f44a72e,Merge pull request #56 from paulshen/force-update-fix  Support batched updates,src/index.ts,,"-const forceUpdateReducer = (state: boolean) => !state
+const forceUpdateReducer = (state: number) => state + 1
-    const forceUpdate = useReducer(forceUpdateReducer, false)[1]
+    const forceUpdate = useReducer(forceUpdateReducer, 1)[1]","-const forceUpdateReducer = (state: boolean) => !state
+const forceUpdateReducer = (state: number) => state + 1
-    const forceUpdate = useReducer(forceUpdateReducer, false)[1]
+    const forceUpdate = useReducer(forceUpdateReducer, 1)[1]"
pmndrs_zustand,c08c7281545e3afc7e12238168ba05064f44a72e,Merge pull request #56 from paulshen/force-update-fix  Support batched updates,tests/test.tsx,,"+import ReactDOM from 'react-dom'
+it('can batch updates', async () => {
+  const [useStore] = create(set => ({
+    count: 0,
+    inc: () => set(state => ({ count: state.count + 1 })),
+  }))
+
+  function Counter() {
+    const { count, inc } = useStore()
+    React.useEffect(() => {
+      ReactDOM.unstable_batchedUpdates(() => {
+        inc()
+        inc()
+      })
+    }, [])
+    return <div>count: {count}</div>
+  }
+
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 2'))
+})
+","+import ReactDOM from 'react-dom'
+it('can batch updates', async () => {
+  const [useStore] = create(set => ({
+    count: 0,
+    inc: () => set(state => ({ count: state.count + 1 })),
+  }))
+
+  function Counter() {
+    const { count, inc } = useStore()
+    React.useEffect(() => {
+      ReactDOM.unstable_batchedUpdates(() => {
+        inc()
+        inc()
+      })
+    }, [])
+    return <div>count: {count}</div>
+  }
+
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 2'))
+})
+"
pmndrs_zustand,aba9537ed58074fa401ed65d56e4a7ea366678d6,Merge pull request #49 from JeremyRH/master  Remove manual check of passed State generic,src/index.ts,,"-  // Use TState for createState signature when available.
-  // e.g. create<MyState>(set => ...
-  createState: keyof TState extends never
-    ? StateCreator<State>
-    : StateCreator<TState>
+  createState: StateCreator<TState>","-  // Use TState for createState signature when available.
-  // e.g. create<MyState>(set => ...
-  createState: keyof TState extends never
-    ? StateCreator<State>
-    : StateCreator<TState>
+  createState: StateCreator<TState>"
pmndrs_zustand,d25f30507d3ad6f4507e34bb240142e246d2e11a,Merge pull request #40 from nihakue/iife  Add IIFE build,.size-snapshot.json,,"-    ""bundled"": 2902,
-    ""minified"": 1064,
-    ""gzipped"": 532,
+    ""bundled"": 2921,
+    ""minified"": 1079,
+    ""gzipped"": 535,
-    ""bundled"": 3639,
-    ""minified"": 1297,
-    ""gzipped"": 609
+    ""bundled"": 3664,
+    ""minified"": 1319,
+    ""gzipped"": 616
+  },
+  ""dist/index.iife.js"": {
+    ""bundled"": 3843,
+    ""minified"": 1155,
+    ""gzipped"": 554
+  },
+  ""dist/middleware.iife.js"": {
+    ""bundled"": 2202,
+    ""minified"": 1012,
+    ""gzipped"": 539","-    ""bundled"": 2902,
-    ""minified"": 1064,
-    ""gzipped"": 532,
+    ""bundled"": 2921,
+    ""minified"": 1079,
+    ""gzipped"": 535,
-    ""bundled"": 3639,
-    ""minified"": 1297,
-    ""gzipped"": 609
+    ""bundled"": 3664,
+    ""minified"": 1319,
+    ""gzipped"": 616
+  },
+  ""dist/index.iife.js"": {
+    ""bundled"": 3843,
+    ""minified"": 1155,
+    ""gzipped"": 554
+  },
+  ""dist/middleware.iife.js"": {
+    ""bundled"": 2202,
+    ""minified"": 1012,
+    ""gzipped"": 539"
pmndrs_zustand,d25f30507d3ad6f4507e34bb240142e246d2e11a,Merge pull request #40 from nihakue/iife  Add IIFE build,rollup.config.js,,"+const packageJson = require('./package.json')
+    {
+      input: entry,
+      output: {
+        file: `dist/${out}.iife.js`,
+        format: 'iife',
+        exports: 'named',
+        name: packageJson.name,
+        globals: {
+          react: 'React',
+        },
+      },
+      external,
+      plugins: [
+        typescript(),
+        babel(getBabelOptions()),
+        sizeSnapshot(),
+        resolve({ extensions }),
+      ],
+    },","+const packageJson = require('./package.json')
+    {
+      input: entry,
+      output: {
+        file: `dist/${out}.iife.js`,
+        format: 'iife',
+        exports: 'named',
+        name: packageJson.name,
+        globals: {
+          react: 'React',
+        },
+      },
+      external,
+      plugins: [
+        typescript(),
+        babel(getBabelOptions()),
+        sizeSnapshot(),
+        resolve({ extensions }),
+      ],
+    },"
pmndrs_zustand,d25f30507d3ad6f4507e34bb240142e246d2e11a,Merge pull request #40 from nihakue/iife  Add IIFE build,src/index.ts,,"+
+export { create }","+
+export { create }"
pmndrs_zustand,32bfe4a45650143300229f3d41e17d8970eed842,"Merge pull request #39 from JeremyRH/master  1.x Remove shallowEqual, change subscribe signature, add tests",.babelrc.js,,"+      isTest && '@babel/plugin-proposal-class-properties',","+      isTest && '@babel/plugin-proposal-class-properties',"
pmndrs_zustand,32bfe4a45650143300229f3d41e17d8970eed842,"Merge pull request #39 from JeremyRH/master  1.x Remove shallowEqual, change subscribe signature, add tests",.size-snapshot.json,,"-  ""dist/esm/index.js"": {
-    ""bundled"": 3308,
-    ""minified"": 1146,
-    ""gzipped"": 584,
-    ""treeshaked"": {
-      ""rollup"": {
-        ""code"": 14,
-        ""import_statements"": 14
-      },
-      ""webpack"": {
-        ""code"": 1061
-      }
-    }
-  },
-  ""dist/cjs/index.js"": {
-    ""bundled"": 3628,
-    ""minified"": 1254,
-    ""gzipped"": 597
-  },
-    ""bundled"": 3333,
-    ""minified"": 1107,
-    ""gzipped"": 579,
+    ""bundled"": 2902,
+    ""minified"": 1064,
+    ""gzipped"": 532,
-    ""bundled"": 3754,
-    ""minified"": 1277,
-    ""gzipped"": 624
+    ""bundled"": 3639,
+    ""minified"": 1297,
+    ""gzipped"": 609","-  ""dist/esm/index.js"": {
-    ""bundled"": 3308,
-    ""minified"": 1146,
-    ""gzipped"": 584,
-    ""treeshaked"": {
-      ""rollup"": {
-        ""code"": 14,
-        ""import_statements"": 14
-      },
-      ""webpack"": {
-        ""code"": 1061
-      }
-    }
-  },
-  ""dist/cjs/index.js"": {
-    ""bundled"": 3628,
-    ""minified"": 1254,
-    ""gzipped"": 597
-  },
-    ""bundled"": 3333,
-    ""minified"": 1107,
-    ""gzipped"": 579,
+    ""bundled"": 2902,
+    ""minified"": 1064,
+    ""gzipped"": 532,
-    ""bundled"": 3754,
-    ""minified"": 1277,
-    ""gzipped"": 624
+    ""bundled"": 3639,
+    ""minified"": 1297,
+    ""gzipped"": 609"
pmndrs_zustand,32bfe4a45650143300229f3d41e17d8970eed842,"Merge pull request #39 from JeremyRH/master  1.x Remove shallowEqual, change subscribe signature, add tests",package.json,,"+  ""contributors"": [
+    ""Jeremy Holcomb (https://github.com/JeremyRH)""
+  ],
+    ""@babel/plugin-proposal-class-properties"": ""^7.4.4"",","+  ""contributors"": [
+    ""Jeremy Holcomb (https://github.com/JeremyRH)""
+  ],
+    ""@babel/plugin-proposal-class-properties"": ""^7.4.4"","
pmndrs_zustand,32bfe4a45650143300229f3d41e17d8970eed842,"Merge pull request #39 from JeremyRH/master  1.x Remove shallowEqual, change subscribe signature, add tests",src/index.ts,,"-import shallowEqual from './shallowEqual'
-export type StateListener<T extends State, U = T> = (state: U) => void
+export type StateListener<T> = (state: T) => void
+export type EqualityChecker<T> = (state: T, newState: any) => boolean
+export interface SubscribeOptions<T extends State, U> {
+  selector?: StateSelector<T, U>
+  equalityFn?: EqualityChecker<U>
+  currentSlice?: U
+  subscribeError?: Error
+}
+export type StateCreator<T extends State> = (
+  set: SetState<T>,
+  get: GetState<T>,
+  api: StoreApi<T>
+) => T
-
-export interface Subscribe<T> {
-  (listener: StateListener<T>): () => void
-  <U>(selector: StateSelector<T, U>, listener: StateListener<T, U>): () => void
-  <U>(
-    selector: StateSelector<T, U>,
-    listener: StateListener<T, U>,
-    equalityFn: Function | undefined
-  ): () => void
-}
-export interface UseStore<T> {
-  (): T
-  <U>(selector: StateSelector<T, U>, equalityFn?: Function): U
-}
-export interface StoreApi<T> {
+export type Subscribe<T extends State> = <U>(
+  listener: StateListener<U | void>,
+  options?: SubscribeOptions<T, U>
+) => () => void
+export type Destroy = () => void
+export type UseStore<T extends State> = <U>(
+  selector?: StateSelector<T, U>,
+  equalityFn?: EqualityChecker<U>
+) => U
+export interface StoreApi<T extends State> {
+  setState: SetState<T>
-  setState: SetState<T>
-  destroy: () => void
+  destroy: Destroy
-const reducer = <T>(state: any, newState: T) => newState
+const forceUpdateReducer = (state: boolean) => !state
+// For server-side rendering: https://github.com/react-spring/zustand/pull/34
-  typeof window !== 'undefined' ? useLayoutEffect : useEffect
+  typeof window === 'undefined' ? useEffect : useLayoutEffect
+  // Use TState for createState signature when available.
+  // e.g. create<MyState>(set => ...
-    ? (set: any, get: any, api: any) => TState
-    : (set: SetState<TState>, get: GetState<TState>, api: any) => TState
+    ? StateCreator<State>
+    : StateCreator<TState>
-  const listeners: Set<StateListener<TState>> = new Set()
+  const listeners: Set<StateListener<void>> = new Set()
-      listeners.forEach(listener => listener(state))
+      listeners.forEach(listener => listener())
-  // Optional selector param goes first so we can infer its return type and use
-  // it for listener
-  const subscribe: Subscribe<TState> = <TStateSlice>(
-    selectorOrListener:
-      | StateListener<TState>
-      | StateSelector<TState, TStateSlice>,
-    listenerOrUndef?: StateListener<TState, TStateSlice>,
-    equalityFn?: Function
+  const subscribe: Subscribe<TState> = <StateSlice>(
+    listener: StateListener<StateSlice | void>,
+    options: SubscribeOptions<TState, StateSlice> = {}
-    let listener = selectorOrListener
-    // Existance of second param means a selector was passed in
-    if (listenerOrUndef) {
-      // We know selector is not type StateListener so it must be StateSelector
-      const selector = selectorOrListener as StateSelector<TState, TStateSlice>
-      let stateSlice = selector(state)
-      listener = () => {
-        try {
-          const sel = selector(state)
-          const old = stateSlice
-          // Update local state slice
-          stateSlice = sel
-          // Test for changes
-          const equal = equalityFn ? equalityFn(old, sel) : old === sel
-          // Call listeners if state has changed
-          if (!equal) listenerOrUndef(stateSlice)
-        } catch {}
+    if (!('currentSlice' in options)) {
+      options.currentSlice = (options.selector || getState)(state)
+    }
+    const listenerFn = () => {
+      // Destructure in the listener to get current values. We rely on this
+      // because options is mutated in useStore.
+      const { selector = getState, equalityFn = Object.is } = options
+      // Selector or equality function could throw but we don't want to stop
+      // the listener from being called.
+      // https://github.com/react-spring/zustand/pull/37
+      try {
+        const newStateSlice = selector(state)
+        if (!equalityFn(options.currentSlice as StateSlice, newStateSlice)) {
+          listener((options.currentSlice = newStateSlice))
+        }
+      } catch (error) {
+        options.subscribeError = error
+        listener()
-    listeners.add(listener)
-    return () => void listeners.delete(listener)
+    listeners.add(listenerFn)
+    return () => void listeners.delete(listenerFn)
-  const destroy: StoreApi<TState>['destroy'] = () => {
-    listeners.clear()
+  const destroy: Destroy = () => listeners.clear()
+
+  const useStore = <StateSlice>(
+    selector: StateSelector<TState, StateSlice> = getState,
+    equalityFn: EqualityChecker<StateSlice> = Object.is
+  ): StateSlice => {
+    const isInitial = useRef(true)
+    const options = useRef(
+      // isInitial prevents the selector from being called every render.
+      isInitial.current && {
+        selector,
+        equalityFn,
+        currentSlice: ((isInitial.current = false), selector(state)),
+      }
+    ).current as SubscribeOptions<TState, StateSlice>
+
+    // Update state slice if selector has changed or subscriber errored.
+    if (selector !== options.selector || options.subscribeError) {
+      const newStateSlice = selector(state)
+      if (!equalityFn(options.currentSlice as StateSlice, newStateSlice)) {
+        options.currentSlice = newStateSlice
+      }
+    }
+
+    useIsoLayoutEffect(() => {
+      options.selector = selector
+      options.equalityFn = equalityFn
+      options.subscribeError = undefined
+    })
+
+    const forceUpdate = useReducer(forceUpdateReducer, false)[1]
+
+    useIsoLayoutEffect(() => subscribe(forceUpdate, options), [])
+
+    return options.currentSlice as StateSlice
-  const useStore: UseStore<TState> = <TStateSlice>(
-    selector?: StateSelector<TState, TStateSlice>,
-    equalityFn?: Function
-  ): TState | TStateSlice => {
-    const selRef = useRef(selector)
-    let [stateSlice, dispatch] = useReducer(
-      reducer,
-      state,
-      // Optional third argument but required to not be 'undefined'
-      selector as StateSelector<TState, TStateSlice>
-    )
-
-    // Need to manually get state slice if selector has changed with no deps or
-    // deps exist and have changed
-    if (selector && selector !== selRef.current) stateSlice = selector(state)
-
-    // Update refs synchronously after view has been updated
-    useIsoLayoutEffect(() => void (selRef.current = selector), [selector])
-
-    // Subscribe to the store
-    useIsoLayoutEffect(() => {
-      return selector
-        ? subscribe(
-            // Truthy check because it might be possible to set selRef to
-            // undefined and call this subscriber before it resubscribes
-            () => (selRef.current ? selRef.current(state) : state),
-            dispatch,
-            equalityFn
-          )
-        : subscribe(dispatch)
-      // Only resubscribe to the store when changing selector from function to
-      // undefined or undefined to function
-    }, [!selector])
-
-    return stateSlice
-  }
-
-  let api = { destroy, getState, setState, subscribe }
+  const api = { setState, getState, subscribe, destroy }
-
-export { shallowEqual }","-import shallowEqual from './shallowEqual'
-export type StateListener<T extends State, U = T> = (state: U) => void
+export type StateListener<T> = (state: T) => void
+export type EqualityChecker<T> = (state: T, newState: any) => boolean
+export interface SubscribeOptions<T extends State, U> {
+  selector?: StateSelector<T, U>
+  equalityFn?: EqualityChecker<U>
+  currentSlice?: U
+  subscribeError?: Error
+}
+export type StateCreator<T extends State> = (
+  set: SetState<T>,
+  get: GetState<T>,
+  api: StoreApi<T>
+) => T
-
-export interface Subscribe<T> {
-  (listener: StateListener<T>): () => void
-  <U>(selector: StateSelector<T, U>, listener: StateListener<T, U>): () => void
-  <U>(
-    selector: StateSelector<T, U>,
-    listener: StateListener<T, U>,
-    equalityFn: Function | undefined
-  ): () => void
-}
-export interface UseStore<T> {
-  (): T
-  <U>(selector: StateSelector<T, U>, equalityFn?: Function): U
-}
-export interface StoreApi<T> {
+export type Subscribe<T extends State> = <U>(
+  listener: StateListener<U | void>,
+  options?: SubscribeOptions<T, U>
+) => () => void
+export type Destroy = () => void
+export type UseStore<T extends State> = <U>(
+  selector?: StateSelector<T, U>,
+  equalityFn?: EqualityChecker<U>
+) => U
+export interface StoreApi<T extends State> {
+  setState: SetState<T>
-  setState: SetState<T>
-  destroy: () => void
+  destroy: Destroy
-const reducer = <T>(state: any, newState: T) => newState
+const forceUpdateReducer = (state: boolean) => !state
+// For server-side rendering: https://github.com/react-spring/zustand/pull/34
-  typeof window !== 'undefined' ? useLayoutEffect : useEffect
+  typeof window === 'undefined' ? useEffect : useLayoutEffect
+  // Use TState for createState signature when available.
+  // e.g. create<MyState>(set => ...
-    ? (set: any, get: any, api: any) => TState
-    : (set: SetState<TState>, get: GetState<TState>, api: any) => TState
+    ? StateCreator<State>
+    : StateCreator<TState>
-  const listeners: Set<StateListener<TState>> = new Set()
+  const listeners: Set<StateListener<void>> = new Set()
-      listeners.forEach(listener => listener(state))
+      listeners.forEach(listener => listener())
-  // Optional selector param goes first so we can infer its return type and use
-  // it for listener
-  const subscribe: Subscribe<TState> = <TStateSlice>(
-    selectorOrListener:
-      | StateListener<TState>
-      | StateSelector<TState, TStateSlice>,
-    listenerOrUndef?: StateListener<TState, TStateSlice>,
-    equalityFn?: Function
+  const subscribe: Subscribe<TState> = <StateSlice>(
+    listener: StateListener<StateSlice | void>,
+    options: SubscribeOptions<TState, StateSlice> = {}
-    let listener = selectorOrListener
-    // Existance of second param means a selector was passed in
-    if (listenerOrUndef) {
-      // We know selector is not type StateListener so it must be StateSelector
-      const selector = selectorOrListener as StateSelector<TState, TStateSlice>
-      let stateSlice = selector(state)
-      listener = () => {
-        try {
-          const sel = selector(state)
-          const old = stateSlice
-          // Update local state slice
-          stateSlice = sel
-          // Test for changes
-          const equal = equalityFn ? equalityFn(old, sel) : old === sel
-          // Call listeners if state has changed
-          if (!equal) listenerOrUndef(stateSlice)
-        } catch {}
+    if (!('currentSlice' in options)) {
+      options.currentSlice = (options.selector || getState)(state)
+    }
+    const listenerFn = () => {
+      // Destructure in the listener to get current values. We rely on this
+      // because options is mutated in useStore.
+      const { selector = getState, equalityFn = Object.is } = options
+      // Selector or equality function could throw but we don't want to stop
+      // the listener from being called.
+      // https://github.com/react-spring/zustand/pull/37
+      try {
+        const newStateSlice = selector(state)
+        if (!equalityFn(options.currentSlice as StateSlice, newStateSlice)) {
+          listener((options.currentSlice = newStateSlice))
+        }
+      } catch (error) {
+        options.subscribeError = error
+        listener()
-    listeners.add(listener)
-    return () => void listeners.delete(listener)
+    listeners.add(listenerFn)
+    return () => void listeners.delete(listenerFn)
-  const destroy: StoreApi<TState>['destroy'] = () => {
-    listeners.clear()
+  const destroy: Destroy = () => listeners.clear()
+
+  const useStore = <StateSlice>(
+    selector: StateSelector<TState, StateSlice> = getState,
+    equalityFn: EqualityChecker<StateSlice> = Object.is
+  ): StateSlice => {
+    const isInitial = useRef(true)
+    const options = useRef(
+      // isInitial prevents the selector from being called every render.
+      isInitial.current && {
+        selector,
+        equalityFn,
+        currentSlice: ((isInitial.current = false), selector(state)),
+      }
+    ).current as SubscribeOptions<TState, StateSlice>
+
+    // Update state slice if selector has changed or subscriber errored.
+    if (selector !== options.selector || options.subscribeError) {
+      const newStateSlice = selector(state)
+      if (!equalityFn(options.currentSlice as StateSlice, newStateSlice)) {
+        options.currentSlice = newStateSlice
+      }
+    }
+
+    useIsoLayoutEffect(() => {
+      options.selector = selector
+      options.equalityFn = equalityFn
+      options.subscribeError = undefined
+    })
+
+    const forceUpdate = useReducer(forceUpdateReducer, false)[1]
+
+    useIsoLayoutEffect(() => subscribe(forceUpdate, options), [])
+
+    return options.currentSlice as StateSlice
-  const useStore: UseStore<TState> = <TStateSlice>(
-    selector?: StateSelector<TState, TStateSlice>,
-    equalityFn?: Function
-  ): TState | TStateSlice => {
-    const selRef = useRef(selector)
-    let [stateSlice, dispatch] = useReducer(
-      reducer,
-      state,
-      // Optional third argument but required to not be 'undefined'
-      selector as StateSelector<TState, TStateSlice>
-    )
-
-    // Need to manually get state slice if selector has changed with no deps or
-    // deps exist and have changed
-    if (selector && selector !== selRef.current) stateSlice = selector(state)
-
-    // Update refs synchronously after view has been updated
-    useIsoLayoutEffect(() => void (selRef.current = selector), [selector])
-
-    // Subscribe to the store
-    useIsoLayoutEffect(() => {
-      return selector
-        ? subscribe(
-            // Truthy check because it might be possible to set selRef to
-            // undefined and call this subscriber before it resubscribes
-            () => (selRef.current ? selRef.current(state) : state),
-            dispatch,
-            equalityFn
-          )
-        : subscribe(dispatch)
-      // Only resubscribe to the store when changing selector from function to
-      // undefined or undefined to function
-    }, [!selector])
-
-    return stateSlice
-  }
-
-  let api = { destroy, getState, setState, subscribe }
+  const api = { setState, getState, subscribe, destroy }
-
-export { shallowEqual }"
pmndrs_zustand,32bfe4a45650143300229f3d41e17d8970eed842,"Merge pull request #39 from JeremyRH/master  1.x Remove shallowEqual, change subscribe signature, add tests",tests/test.tsx,,"-  shallowEqual,
-  GetState,
-  PartialState,
-  SetState,
+  PartialState,
+  EqualityChecker,
+  SubscribeOptions,
+  StateCreator,
+  SetState,
+  GetState,
+  Subscribe,
+  Destroy,
+  UseStore,
-  Subscribe,
-  UseStore,
-afterEach(cleanup)
+
+const consoleError = console.error
+afterEach(() => {
+  cleanup()
+  console.error = consoleError
+})
-  const result = create(() => ({ value: null }))
-  expect(result).toMatchInlineSnapshot(`
-    Array [
-      [Function],
-      Object {
-        ""destroy"": [Function],
-        ""getState"": [Function],
-        ""setState"": [Function],
-        ""subscribe"": [Function],
-      },
-    ]
+  let params
+  const result = create((...args) => {
+    params = args
+    return { value: null }
+  })
+  expect({ params, result }).toMatchInlineSnapshot(`
+    Object {
+      ""params"": Array [
+        [Function],
+        [Function],
+        Object {
+          ""destroy"": [Function],
+          ""getState"": [Function],
+          ""setState"": [Function],
+          ""subscribe"": [Function],
+        },
+      ],
+      ""result"": Array [
+        [Function],
+        Object {
+          ""destroy"": [Function],
+          ""getState"": [Function],
+          ""setState"": [Function],
+          ""subscribe"": [Function],
+        },
+      ],
+    }
-it('updates the store', async () => {
+it('uses the store with no args', async () => {
-    count: 1,
+    count: 0,
-    dec: () => set(state => ({ count: state.count - 1 })),
-    const { count, dec } = useStore()
-    React.useEffect(dec, [])
+    const { count, inc } = useStore()
+    React.useEffect(inc, [])
-  await waitForElement(() => getByText('count: 0'))
-})
-
-it('can subscribe to part of the store', async () => {
+  await waitForElement(() => getByText('count: 1'))
+})
+
+it('uses the store with selectors', async () => {
-    count: 1,
+    count: 0,
-    dec: () => set(state => ({ count: state.count - 1 })),
+  }))
+
+  function Counter() {
+    const count = useStore(s => s.count)
+    const inc = useStore(s => s.inc)
+    React.useEffect(inc, [])
+    return <div>count: {count}</div>
+  }
+
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 1'))
+})
+
+it('uses the store with a selector and equality checker', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+  let renderCount = 0
+
+  function Component() {
+    // Prevent re-render if new value === 1.
+    const value = useStore(s => s.value, (_, newValue) => newValue === 1)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {value}
+      </div>
+    )
+  }
+
+  const { getByText } = render(<Component />)
+
+  await waitForElement(() => getByText('renderCount: 1, value: 0'))
+
+  // This will not cause a re-render.
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 1, value: 0'))
+
+  // This will cause a re-render.
+  act(() => setState({ value: 2 }))
+  await waitForElement(() => getByText('renderCount: 2, value: 2'))
+})
+
+it('only re-renders if selected state has changed', async () => {
+  const [useStore] = create(set => ({
+    count: 0,
+    inc: () => set(state => ({ count: state.count + 1 })),
-  let controlsRenderCount = 0
+  let controlRenderCount = 0
-    return <div>{count}</div>
-  }
-
-  function Controls() {
+    return <div>count: {count}</div>
+  }
+
+  function Control() {
-    controlsRenderCount++
+    controlRenderCount++
-      <Controls />
+      <Control />
-  await waitForElement(() => getByText('2'))
+  await waitForElement(() => getByText('count: 1'))
-  expect(controlsRenderCount).toBe(1)
+  expect(controlRenderCount).toBe(1)
+})
+
+it('can update the selector', async () => {
+  const [useStore] = create(() => ({
+    one: 'one',
+    two: 'two',
+  }))
+
+  function Component({ selector }) {
+    return <div>{useStore(selector)}</div>
+  }
+
+  const { getByText, rerender } = render(<Component selector={s => s.one} />)
+  await waitForElement(() => getByText('one'))
+
+  rerender(<Component selector={s => s.two} />)
+  await waitForElement(() => getByText('two'))
+})
+
+it('can update the equality checker', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+  const selector = s => s.value
+
+  let renderCount = 0
+  function Component({ equalityFn }) {
+    const value = useStore(selector, equalityFn)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {value}
+      </div>
+    )
+  }
+
+  // Set an equality checker that always returns false to always re-render.
+  const { getByText, rerender } = render(<Component equalityFn={() => false} />)
+
+  // This will cause a re-render due to the equality checker.
+  act(() => setState({ value: 0 }))
+  await waitForElement(() => getByText('renderCount: 2, value: 0'))
+
+  // Set an equality checker that always returns true to never re-render.
+  rerender(<Component equalityFn={() => true} />)
+
+  // This will NOT cause a re-render due to the equality checker.
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 3, value: 0'))
+})
+
+it('can call useStore with progressively more arguments', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+
+  let renderCount = 0
+  function Component({ selector, equalityFn }: any) {
+    const value = useStore(selector, equalityFn)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {JSON.stringify(value)}
+      </div>
+    )
+  }
+
+  // Render with no args.
+  const { getByText, rerender } = render(<Component />)
+  await waitForElement(() => getByText('renderCount: 1, value: {""value"":0}'))
+
+  // Render with selector.
+  rerender(<Component selector={s => s.value} />)
+  await waitForElement(() => getByText('renderCount: 2, value: 0'))
+
+  // Render with selector and equality checker.
+  rerender(
+    <Component
+      selector={s => s.value}
+      equalityFn={(oldV, newV) => oldV > newV}
+    />
+  )
+
+  // Should not cause a re-render because new value is less than previous.
+  act(() => setState({ value: -1 }))
+  await waitForElement(() => getByText('renderCount: 3, value: 0'))
+
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 4, value: 1'))
+})
+
+it('can throw an error in selector', async () => {
+  console.error = jest.fn()
+
+  const initialState = { value: 'foo' }
+  const [useStore, { setState }] = create(() => initialState)
+  const selector = s => s.value.toUpperCase()
+
+  class ErrorBoundary extends React.Component {
+    state = { hasError: false }
+    static getDerivedStateFromError() {
+      return { hasError: true }
+    }
+    render() {
+      return this.state.hasError ? <div>errored</div> : this.props.children
+    }
+  }
+
+  function Component() {
+    useStore(selector)
+    return <div>no error</div>
+  }
+
+  const { getByText } = render(
+    <ErrorBoundary>
+      <Component />
+    </ErrorBoundary>
+  )
+  await waitForElement(() => getByText('no error'))
+
+  delete initialState.value
+  act(() => {
+    setState({})
+  })
+  await waitForElement(() => getByText('errored'))
+})
+
+it('can throw an error in equality checker', async () => {
+  console.error = jest.fn()
+
+  const initialState = { value: 'foo' }
+  const [useStore, { setState }] = create(() => initialState)
+  const selector = s => s
+  const equalityFn = (a, b) => a.value.trim() === b.value.trim()
+
+  class ErrorBoundary extends React.Component {
+    state = { hasError: false }
+    static getDerivedStateFromError() {
+      return { hasError: true }
+    }
+    render() {
+      return this.state.hasError ? <div>errored</div> : this.props.children
+    }
+  }
+
+  function Component() {
+    useStore(selector, equalityFn)
+    return <div>no error</div>
+  }
+
+  const { getByText } = render(
+    <ErrorBoundary>
+      <Component />
+    </ErrorBoundary>
+  )
+  await waitForElement(() => getByText('no error'))
+
+  delete initialState.value
+  act(() => {
+    setState({})
+  })
+  await waitForElement(() => getByText('errored'))
-  const [, { getState }] = create((set, get) => ({
+  const [, { getState }] = create((_, get) => ({
-  const [, { getState, setState }] = create(set => ({
+  const [, { setState, getState }] = create(set => ({
-  getState().setState1({ ...getState(), value: 2 })
+  getState().setState1({ value: 2 })
-  getState().setState2({ ...getState(), value: 3 })
+  getState().setState2({ value: 3 })
+  getState().setState1(s => ({ value: ++s.value }))
+  expect(getState().value).toBe(4)
+  getState().setState2(s => ({ value: ++s.value }))
+  expect(getState().value).toBe(5)
-  // Should be called even if shallow equal when no selector used
-  unsub = subscribe(newState => {
+  // Should be called if new state identity is different
+  unsub = subscribe((newState: { value: number; other: string }) => {
-  // Should be called when state changes
-  unsub = subscribe(newState => {
-    expect(newState.value).toBe(2)
-  })
-  setState({ value: 2 })
-  unsub()
-
-  // Should not be called with selector if shallow equal
+  // Should not be called when state slice is the same
-    state => state.value,
-      throw new Error('subscriber called when shallow equal and selector used')
-    }
-  )
-  setState({ ...getState() })
-  unsub()
-
-  // Should not be called with selector if non-selected part changes
+      throw new Error('subscriber called when new state is the same')
+    },
+    { selector: s => s.value }
+  )
+  setState({ other: 'b' })
+  unsub()
+
+  // Should be called when state slice changes
-    state => state.value,
+    (value: number) => {
+      expect(value).toBe(initialState.value + 1)
+    },
+    { selector: s => s.value }
+  )
+  setState({ value: initialState.value + 1 })
+  unsub()
+
+  // Should not be called when equality checker returns true
+  unsub = subscribe(
-      throw new Error('subscriber called when non-selected part changed')
-    }
-  )
-  setState({ other: 'b' })
-  unsub()
-
-  // Should be called with selector if selected part changes
+      throw new Error('subscriber called when equality checker returned true')
+    },
+    { equalityFn: () => true }
+  )
+  setState({ value: initialState.value + 2 })
+  unsub()
+
+  // Should be called when equality checker returns false
-    state => state.value,
-    newValue => {
-      expect(newValue).toBe(3)
-    }
-  )
-  setState({ value: 3 })
+    (value: number) => {
+      expect(value).toBe(initialState.value + 2)
+    },
+    { selector: s => s.value, equalityFn: () => false }
+  )
+  setState(getState())
+  unsub()
+
+  // Can pass in initial state when subscribing
+  unsub = subscribe(
+    () => {
+      throw new Error(
+        'subscriber called when initial state is the same as new state'
+      )
+    },
+    { selector: s => s.value, currentSlice: initialState.value + 3 }
+  )
+  setState({ value: initialState.value + 3 })
-  // should this throw?
-it('can update the selector even when the store does not change', async () => {
-  const [useStore] = create(() => ({
-    one: 'one',
-    two: 'two',
-  }))
-
-  function Component({ selector }) {
-    return <div>{useStore(selector)}</div>
-  }
-
-  const { getByText, rerender } = render(<Component selector={s => s.one} />)
-  await waitForElement(() => getByText('one'))
-
-  rerender(<Component selector={s => s.two} />)
-  await waitForElement(() => getByText('two'))
-})
-
-it('can pass optional dependencies to restrict selector calls', () => {
-  const [useStore] = create(() => ({}))
-  let selectorCallCount = 0
-
-  function Component({ deps }) {
-    const sel = React.useCallback(() => {
-      selectorCallCount++
-    }, deps)
-    useStore(sel, deps)
-    return <div>{selectorCallCount}</div>
-  }
-
-  const { rerender } = render(<Component deps={[true]} />)
-  expect(selectorCallCount).toBe(2)
-
-  rerender(<Component deps={[true]} />)
-  expect(selectorCallCount).toBe(2)
-
-  rerender(<Component deps={[false]} />)
-  expect(selectorCallCount).toBe(3)
-})
-
-it('can update state without updating dependencies', async () => {
-  const [useStore, { setState }] = create(() => ({ value: 0 }))
+it('only calls selectors when necessary', async () => {
+  const [useStore, { setState }] = create(() => ({ a: 0, b: 0 }))
+  let inlineSelectorCallCount = 0
+  let staticSelectorCallCount = 0
+
+  function staticSelector(s) {
+    staticSelectorCallCount++
+    return s.a
+  }
-    const sel = React.useCallback(state => state, [])
-    const { value } = useStore(sel)
-    return <div>value: {value}</div>
-  }
-
-  const { getByText } = render(<Component />)
-  await waitForElement(() => getByText('value: 0'))
-
-  act(() => {
-    setState({ value: 1 })
-  })
-  await waitForElement(() => getByText('value: 1'))
-})
-
-it('can fetch multiple entries with shallow equality', async () => {
-  const [useStore, { setState }] = create(() => ({ a: 0, b: 0, c: 0 }))
-
-  let renderCount = 0
-  function Component() {
-    renderCount++
-    const { a, b } = useStore(
-      state => ({ a: state.a, b: state.b }),
-      shallowEqual
+    useStore(s => (inlineSelectorCallCount++, s.b))
+    useStore(staticSelector)
+    return (
+      <>
+        <div>inline: {inlineSelectorCallCount}</div>
+        <div>static: {staticSelectorCallCount}</div>
+      </>
-    return (
-      <div>
-        a: {a} b: {b}
-      </div>
-    )
-  }
-
-  const { getByText } = render(<Component />)
-  await waitForElement(() => getByText('a: 0 b: 0'))
-
-  act(() => {
-    setState({ a: 1, b: 1 })
-  })
-  await waitForElement(() => getByText('a: 1 b: 1'))
-
-  act(() => {
-    setState({ c: 1 })
-  })
-
-  expect(renderCount).toBe(2)
+  }
+
+  const { rerender, getByText } = render(<Component />)
+  await waitForElement(() => getByText('inline: 1'))
+  await waitForElement(() => getByText('static: 1'))
+
+  rerender(<Component />)
+  await waitForElement(() => getByText('inline: 2'))
+  await waitForElement(() => getByText('static: 1'))
+
+  act(() => setState({ a: 1, b: 1 }))
+  await waitForElement(() => getByText('inline: 4'))
+  await waitForElement(() => getByText('static: 2'))
+  const equlaityFn: EqualityChecker<ExampleState> = (state, newState) =>
+    state !== newState
+
+  const stateCreator: StateCreator<ExampleState> = (set, get) => ({
+    num: 1,
+    numGet: () => get().num,
+    numGetState: () => get().num,
+    numSet: v => {
+      set({ num: v })
+    },
+    numSetState: v => {
+      set({ num: v })
+    },
+  })
+
+  const subscribeOptions: SubscribeOptions<ExampleState, number> = {
+    selector: s => s.num,
+    equalityFn: (a, b) => a < b,
+    currentSlice: 1,
+    subscribeError: new Error(),
+  }
-    useStore: UseStore<ExampleState>
+    destroy: Destroy,
+    equalityFn: EqualityChecker<ExampleState>,
+    stateCreator: StateCreator<ExampleState>,
+    useStore: UseStore<ExampleState>,
+    subscribeOptions: SubscribeOptions<ExampleState, number>
-    useStore
+    storeApi.destroy,
+    equlaityFn,
+    stateCreator,
+    useStore,
+    subscribeOptions
+    console.warn = jest.fn()
+
-    console.warn = jest.fn(console.warn)
-    const [useStore, api] = create(devtools(redux(reducer, initialState)))
+    create(devtools(redux(reducer, initialState)))","-  shallowEqual,
-  GetState,
-  PartialState,
-  SetState,
+  PartialState,
+  EqualityChecker,
+  SubscribeOptions,
+  StateCreator,
+  SetState,
+  GetState,
+  Subscribe,
+  Destroy,
+  UseStore,
-  Subscribe,
-  UseStore,
-afterEach(cleanup)
+
+const consoleError = console.error
+afterEach(() => {
+  cleanup()
+  console.error = consoleError
+})
-  const result = create(() => ({ value: null }))
-  expect(result).toMatchInlineSnapshot(`
-    Array [
-      [Function],
-      Object {
-        ""destroy"": [Function],
-        ""getState"": [Function],
-        ""setState"": [Function],
-        ""subscribe"": [Function],
-      },
-    ]
+  let params
+  const result = create((...args) => {
+    params = args
+    return { value: null }
+  })
+  expect({ params, result }).toMatchInlineSnapshot(`
+    Object {
+      ""params"": Array [
+        [Function],
+        [Function],
+        Object {
+          ""destroy"": [Function],
+          ""getState"": [Function],
+          ""setState"": [Function],
+          ""subscribe"": [Function],
+        },
+      ],
+      ""result"": Array [
+        [Function],
+        Object {
+          ""destroy"": [Function],
+          ""getState"": [Function],
+          ""setState"": [Function],
+          ""subscribe"": [Function],
+        },
+      ],
+    }
-it('updates the store', async () => {
+it('uses the store with no args', async () => {
-    count: 1,
+    count: 0,
-    dec: () => set(state => ({ count: state.count - 1 })),
-    const { count, dec } = useStore()
-    React.useEffect(dec, [])
+    const { count, inc } = useStore()
+    React.useEffect(inc, [])
-  await waitForElement(() => getByText('count: 0'))
-})
-
-it('can subscribe to part of the store', async () => {
+  await waitForElement(() => getByText('count: 1'))
+})
+
+it('uses the store with selectors', async () => {
-    count: 1,
+    count: 0,
-    dec: () => set(state => ({ count: state.count - 1 })),
+  }))
+
+  function Counter() {
+    const count = useStore(s => s.count)
+    const inc = useStore(s => s.inc)
+    React.useEffect(inc, [])
+    return <div>count: {count}</div>
+  }
+
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 1'))
+})
+
+it('uses the store with a selector and equality checker', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+  let renderCount = 0
+
+  function Component() {
+    // Prevent re-render if new value === 1.
+    const value = useStore(s => s.value, (_, newValue) => newValue === 1)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {value}
+      </div>
+    )
+  }
+
+  const { getByText } = render(<Component />)
+
+  await waitForElement(() => getByText('renderCount: 1, value: 0'))
+
+  // This will not cause a re-render.
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 1, value: 0'))
+
+  // This will cause a re-render.
+  act(() => setState({ value: 2 }))
+  await waitForElement(() => getByText('renderCount: 2, value: 2'))
+})
+
+it('only re-renders if selected state has changed', async () => {
+  const [useStore] = create(set => ({
+    count: 0,
+    inc: () => set(state => ({ count: state.count + 1 })),
-  let controlsRenderCount = 0
+  let controlRenderCount = 0
-    return <div>{count}</div>
-  }
-
-  function Controls() {
+    return <div>count: {count}</div>
+  }
+
+  function Control() {
-    controlsRenderCount++
+    controlRenderCount++
-      <Controls />
+      <Control />
-  await waitForElement(() => getByText('2'))
+  await waitForElement(() => getByText('count: 1'))
-  expect(controlsRenderCount).toBe(1)
+  expect(controlRenderCount).toBe(1)
+})
+
+it('can update the selector', async () => {
+  const [useStore] = create(() => ({
+    one: 'one',
+    two: 'two',
+  }))
+
+  function Component({ selector }) {
+    return <div>{useStore(selector)}</div>
+  }
+
+  const { getByText, rerender } = render(<Component selector={s => s.one} />)
+  await waitForElement(() => getByText('one'))
+
+  rerender(<Component selector={s => s.two} />)
+  await waitForElement(() => getByText('two'))
+})
+
+it('can update the equality checker', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+  const selector = s => s.value
+
+  let renderCount = 0
+  function Component({ equalityFn }) {
+    const value = useStore(selector, equalityFn)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {value}
+      </div>
+    )
+  }
+
+  // Set an equality checker that always returns false to always re-render.
+  const { getByText, rerender } = render(<Component equalityFn={() => false} />)
+
+  // This will cause a re-render due to the equality checker.
+  act(() => setState({ value: 0 }))
+  await waitForElement(() => getByText('renderCount: 2, value: 0'))
+
+  // Set an equality checker that always returns true to never re-render.
+  rerender(<Component equalityFn={() => true} />)
+
+  // This will NOT cause a re-render due to the equality checker.
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 3, value: 0'))
+})
+
+it('can call useStore with progressively more arguments', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+
+  let renderCount = 0
+  function Component({ selector, equalityFn }: any) {
+    const value = useStore(selector, equalityFn)
+    return (
+      <div>
+        renderCount: {++renderCount}, value: {JSON.stringify(value)}
+      </div>
+    )
+  }
+
+  // Render with no args.
+  const { getByText, rerender } = render(<Component />)
+  await waitForElement(() => getByText('renderCount: 1, value: {""value"":0}'))
+
+  // Render with selector.
+  rerender(<Component selector={s => s.value} />)
+  await waitForElement(() => getByText('renderCount: 2, value: 0'))
+
+  // Render with selector and equality checker.
+  rerender(
+    <Component
+      selector={s => s.value}
+      equalityFn={(oldV, newV) => oldV > newV}
+    />
+  )
+
+  // Should not cause a re-render because new value is less than previous.
+  act(() => setState({ value: -1 }))
+  await waitForElement(() => getByText('renderCount: 3, value: 0'))
+
+  act(() => setState({ value: 1 }))
+  await waitForElement(() => getByText('renderCount: 4, value: 1'))
+})
+
+it('can throw an error in selector', async () => {
+  console.error = jest.fn()
+
+  const initialState = { value: 'foo' }
+  const [useStore, { setState }] = create(() => initialState)
+  const selector = s => s.value.toUpperCase()
+
+  class ErrorBoundary extends React.Component {
+    state = { hasError: false }
+    static getDerivedStateFromError() {
+      return { hasError: true }
+    }
+    render() {
+      return this.state.hasError ? <div>errored</div> : this.props.children
+    }
+  }
+
+  function Component() {
+    useStore(selector)
+    return <div>no error</div>
+  }
+
+  const { getByText } = render(
+    <ErrorBoundary>
+      <Component />
+    </ErrorBoundary>
+  )
+  await waitForElement(() => getByText('no error'))
+
+  delete initialState.value
+  act(() => {
+    setState({})
+  })
+  await waitForElement(() => getByText('errored'))
+})
+
+it('can throw an error in equality checker', async () => {
+  console.error = jest.fn()
+
+  const initialState = { value: 'foo' }
+  const [useStore, { setState }] = create(() => initialState)
+  const selector = s => s
+  const equalityFn = (a, b) => a.value.trim() === b.value.trim()
+
+  class ErrorBoundary extends React.Component {
+    state = { hasError: false }
+    static getDerivedStateFromError() {
+      return { hasError: true }
+    }
+    render() {
+      return this.state.hasError ? <div>errored</div> : this.props.children
+    }
+  }
+
+  function Component() {
+    useStore(selector, equalityFn)
+    return <div>no error</div>
+  }
+
+  const { getByText } = render(
+    <ErrorBoundary>
+      <Component />
+    </ErrorBoundary>
+  )
+  await waitForElement(() => getByText('no error'))
+
+  delete initialState.value
+  act(() => {
+    setState({})
+  })
+  await waitForElement(() => getByText('errored'))
-  const [, { getState }] = create((set, get) => ({
+  const [, { getState }] = create((_, get) => ({
-  const [, { getState, setState }] = create(set => ({
+  const [, { setState, getState }] = create(set => ({
-  getState().setState1({ ...getState(), value: 2 })
+  getState().setState1({ value: 2 })
-  getState().setState2({ ...getState(), value: 3 })
+  getState().setState2({ value: 3 })
+  getState().setState1(s => ({ value: ++s.value }))
+  expect(getState().value).toBe(4)
+  getState().setState2(s => ({ value: ++s.value }))
+  expect(getState().value).toBe(5)
-  // Should be called even if shallow equal when no selector used
-  unsub = subscribe(newState => {
+  // Should be called if new state identity is different
+  unsub = subscribe((newState: { value: number; other: string }) => {
-  // Should be called when state changes
-  unsub = subscribe(newState => {
-    expect(newState.value).toBe(2)
-  })
-  setState({ value: 2 })
-  unsub()
-
-  // Should not be called with selector if shallow equal
+  // Should not be called when state slice is the same
-    state => state.value,
-      throw new Error('subscriber called when shallow equal and selector used')
-    }
-  )
-  setState({ ...getState() })
-  unsub()
-
-  // Should not be called with selector if non-selected part changes
+      throw new Error('subscriber called when new state is the same')
+    },
+    { selector: s => s.value }
+  )
+  setState({ other: 'b' })
+  unsub()
+
+  // Should be called when state slice changes
-    state => state.value,
+    (value: number) => {
+      expect(value).toBe(initialState.value + 1)
+    },
+    { selector: s => s.value }
+  )
+  setState({ value: initialState.value + 1 })
+  unsub()
+
+  // Should not be called when equality checker returns true
+  unsub = subscribe(
-      throw new Error('subscriber called when non-selected part changed')
-    }
-  )
-  setState({ other: 'b' })
-  unsub()
-
-  // Should be called with selector if selected part changes
+      throw new Error('subscriber called when equality checker returned true')
+    },
+    { equalityFn: () => true }
+  )
+  setState({ value: initialState.value + 2 })
+  unsub()
+
+  // Should be called when equality checker returns false
-    state => state.value,
-    newValue => {
-      expect(newValue).toBe(3)
-    }
-  )
-  setState({ value: 3 })
+    (value: number) => {
+      expect(value).toBe(initialState.value + 2)
+    },
+    { selector: s => s.value, equalityFn: () => false }
+  )
+  setState(getState())
+  unsub()
+
+  // Can pass in initial state when subscribing
+  unsub = subscribe(
+    () => {
+      throw new Error(
+        'subscriber called when initial state is the same as new state'
+      )
+    },
+    { selector: s => s.value, currentSlice: initialState.value + 3 }
+  )
+  setState({ value: initialState.value + 3 })
-  // should this throw?
-it('can update the selector even when the store does not change', async () => {
-  const [useStore] = create(() => ({
-    one: 'one',
-    two: 'two',
-  }))
-
-  function Component({ selector }) {
-    return <div>{useStore(selector)}</div>
-  }
-
-  const { getByText, rerender } = render(<Component selector={s => s.one} />)
-  await waitForElement(() => getByText('one'))
-
-  rerender(<Component selector={s => s.two} />)
-  await waitForElement(() => getByText('two'))
-})
-
-it('can pass optional dependencies to restrict selector calls', () => {
-  const [useStore] = create(() => ({}))
-  let selectorCallCount = 0
-
-  function Component({ deps }) {
-    const sel = React.useCallback(() => {
-      selectorCallCount++
-    }, deps)
-    useStore(sel, deps)
-    return <div>{selectorCallCount}</div>
-  }
-
-  const { rerender } = render(<Component deps={[true]} />)
-  expect(selectorCallCount).toBe(2)
-
-  rerender(<Component deps={[true]} />)
-  expect(selectorCallCount).toBe(2)
-
-  rerender(<Component deps={[false]} />)
-  expect(selectorCallCount).toBe(3)
-})
-
-it('can update state without updating dependencies', async () => {
-  const [useStore, { setState }] = create(() => ({ value: 0 }))
+it('only calls selectors when necessary', async () => {
+  const [useStore, { setState }] = create(() => ({ a: 0, b: 0 }))
+  let inlineSelectorCallCount = 0
+  let staticSelectorCallCount = 0
+
+  function staticSelector(s) {
+    staticSelectorCallCount++
+    return s.a
+  }
-    const sel = React.useCallback(state => state, [])
-    const { value } = useStore(sel)
-    return <div>value: {value}</div>
-  }
-
-  const { getByText } = render(<Component />)
-  await waitForElement(() => getByText('value: 0'))
-
-  act(() => {
-    setState({ value: 1 })
-  })
-  await waitForElement(() => getByText('value: 1'))
-})
-
-it('can fetch multiple entries with shallow equality', async () => {
-  const [useStore, { setState }] = create(() => ({ a: 0, b: 0, c: 0 }))
-
-  let renderCount = 0
-  function Component() {
-    renderCount++
-    const { a, b } = useStore(
-      state => ({ a: state.a, b: state.b }),
-      shallowEqual
+    useStore(s => (inlineSelectorCallCount++, s.b))
+    useStore(staticSelector)
+    return (
+      <>
+        <div>inline: {inlineSelectorCallCount}</div>
+        <div>static: {staticSelectorCallCount}</div>
+      </>
-    return (
-      <div>
-        a: {a} b: {b}
-      </div>
-    )
-  }
-
-  const { getByText } = render(<Component />)
-  await waitForElement(() => getByText('a: 0 b: 0'))
-
-  act(() => {
-    setState({ a: 1, b: 1 })
-  })
-  await waitForElement(() => getByText('a: 1 b: 1'))
-
-  act(() => {
-    setState({ c: 1 })
-  })
-
-  expect(renderCount).toBe(2)
+  }
+
+  const { rerender, getByText } = render(<Component />)
+  await waitForElement(() => getByText('inline: 1'))
+  await waitForElement(() => getByText('static: 1'))
+
+  rerender(<Component />)
+  await waitForElement(() => getByText('inline: 2'))
+  await waitForElement(() => getByText('static: 1'))
+
+  act(() => setState({ a: 1, b: 1 }))
+  await waitForElement(() => getByText('inline: 4'))
+  await waitForElement(() => getByText('static: 2'))
+  const equlaityFn: EqualityChecker<ExampleState> = (state, newState) =>
+    state !== newState
+
+  const stateCreator: StateCreator<ExampleState> = (set, get) => ({
+    num: 1,
+    numGet: () => get().num,
+    numGetState: () => get().num,
+    numSet: v => {
+      set({ num: v })
+    },
+    numSetState: v => {
+      set({ num: v })
+    },
+  })
+
+  const subscribeOptions: SubscribeOptions<ExampleState, number> = {
+    selector: s => s.num,
+    equalityFn: (a, b) => a < b,
+    currentSlice: 1,
+    subscribeError: new Error(),
+  }
-    useStore: UseStore<ExampleState>
+    destroy: Destroy,
+    equalityFn: EqualityChecker<ExampleState>,
+    stateCreator: StateCreator<ExampleState>,
+    useStore: UseStore<ExampleState>,
+    subscribeOptions: SubscribeOptions<ExampleState, number>
-    useStore
+    storeApi.destroy,
+    equlaityFn,
+    stateCreator,
+    useStore,
+    subscribeOptions
+    console.warn = jest.fn()
+
-    console.warn = jest.fn(console.warn)
-    const [useStore, api] = create(devtools(redux(reducer, initialState)))
+    create(devtools(redux(reducer, initialState)))"
pmndrs_zustand,d46c7586ce6bd4027d7d68b6eab3e39c7fe36d51,"Merge pull request #38 from react-spring/1.x  1.x (optional equalityFn, error safe selectors, middleware: redux & devtools)",.size-snapshot.json,,"-    ""bundled"": 3308,
-    ""minified"": 1146,
-    ""gzipped"": 584,
+    ""bundled"": 3333,
+    ""minified"": 1107,
+    ""gzipped"": 579,
-    ""bundled"": 3628,
-    ""minified"": 1254,
-    ""gzipped"": 597
+    ""bundled"": 3754,
+    ""minified"": 1277,
+    ""gzipped"": 624
-    ""bundled"": 1327,
-    ""minified"": 664,
-    ""gzipped"": 391,
+    ""bundled"": 1365,
+    ""minified"": 681,
+    ""gzipped"": 402,
-    ""bundled"": 2014,
-    ""minified"": 1076,
-    ""gzipped"": 567
+    ""bundled"": 2068,
+    ""minified"": 1096,
+    ""gzipped"": 579","-    ""bundled"": 3308,
-    ""minified"": 1146,
-    ""gzipped"": 584,
+    ""bundled"": 3333,
+    ""minified"": 1107,
+    ""gzipped"": 579,
-    ""bundled"": 3628,
-    ""minified"": 1254,
-    ""gzipped"": 597
+    ""bundled"": 3754,
+    ""minified"": 1277,
+    ""gzipped"": 624
-    ""bundled"": 1327,
-    ""minified"": 664,
-    ""gzipped"": 391,
+    ""bundled"": 1365,
+    ""minified"": 681,
+    ""gzipped"": 402,
-    ""bundled"": 2014,
-    ""minified"": 1076,
-    ""gzipped"": 567
+    ""bundled"": 2068,
+    ""minified"": 1096,
+    ""gzipped"": 579"
pmndrs_zustand,d46c7586ce6bd4027d7d68b6eab3e39c7fe36d51,"Merge pull request #38 from react-spring/1.x  1.x (optional equalityFn, error safe selectors, middleware: redux & devtools)",package.json,,"-  ""version"": ""0.2.2"",
+  ""private"": true,
+  ""version"": ""1.0.0-beta.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
-  ""types"": ""dist/index.d.ts"",
+  ""main"": ""index.cjs.js"",
+  ""module"": ""index.js"",
+  ""types"": ""index.d.ts"",
-    ""dist/**""
+    ""**""
-    ""build"": ""rollup -c"",
+    ""build"": ""rollup -c && npm run copy"",
-    ""test:coverage:watch"": ""jest --watch""
+    ""test:coverage:watch"": ""jest --watch"",
+    ""copy"": ""copyfiles -f package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.husky=undefined; this.prettier=undefined; this.jest=undefined; this['lint-staged']=undefined;\""""
+    ""copyfiles"": ""^2.1.0"",
+    ""json"": ""^9.0.6"",","-  ""version"": ""0.2.2"",
+  ""private"": true,
+  ""version"": ""1.0.0-beta.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
-  ""types"": ""dist/index.d.ts"",
+  ""main"": ""index.cjs.js"",
+  ""module"": ""index.js"",
+  ""types"": ""index.d.ts"",
-    ""dist/**""
+    ""**""
-    ""build"": ""rollup -c"",
+    ""build"": ""rollup -c && npm run copy"",
-    ""test:coverage:watch"": ""jest --watch""
+    ""test:coverage:watch"": ""jest --watch"",
+    ""copy"": ""copyfiles -f package.json readme.md LICENSE dist && json -I -f dist/package.json -e \""this.private=false; this.devDependencies=undefined; this.optionalDependencies=undefined; this.scripts=undefined; this.husky=undefined; this.prettier=undefined; this.jest=undefined; this['lint-staged']=undefined;\""""
+    ""copyfiles"": ""^2.1.0"",
+    ""json"": ""^9.0.6"","
pmndrs_zustand,d46c7586ce6bd4027d7d68b6eab3e39c7fe36d51,"Merge pull request #38 from react-spring/1.x  1.x (optional equalityFn, error safe selectors, middleware: redux & devtools)",rollup.config.js,,"-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/${out}.cjs.js`, format: 'cjs', exports: 'named' },","-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/${out}.cjs.js`, format: 'cjs', exports: 'named' },"
pmndrs_zustand,d46c7586ce6bd4027d7d68b6eab3e39c7fe36d51,"Merge pull request #38 from react-spring/1.x  1.x (optional equalityFn, error safe selectors, middleware: redux & devtools)",src/index.ts,,"+  <U>(
+    selector: StateSelector<T, U>,
+    listener: StateListener<T, U>,
+    equalityFn: Function | undefined
+  ): () => void
-  <U>(selector: StateSelector<T, U>, dependencies?: ReadonlyArray<any>): U
+  <U>(selector: StateSelector<T, U>, equalityFn?: Function): U
-const useIsomorphicLayoutEffect =
+const useIsoLayoutEffect =
-    listenerOrUndef?: StateListener<TState, TStateSlice>
+    listenerOrUndef?: StateListener<TState, TStateSlice>,
+    equalityFn?: Function
-        const selectedSlice = selector(state)
-        if (!shallowEqual(stateSlice, (stateSlice = selectedSlice)))
-          listenerOrUndef(stateSlice)
+        try {
+          const sel = selector(state)
+          const old = stateSlice
+          // Update local state slice
+          stateSlice = sel
+          // Test for changes
+          const equal = equalityFn ? equalityFn(old, sel) : old === sel
+          // Call listeners if state has changed
+          if (!equal) listenerOrUndef(stateSlice)
+        } catch {}
-    dependencies?: ReadonlyArray<any>
+    equalityFn?: Function
-    const selectorRef = useRef(selector)
-    const depsRef = useRef(dependencies)
+    const selRef = useRef(selector)
-    if (
-      selector &&
-      ((!dependencies && selector !== selectorRef.current) ||
-        (dependencies && !shallowEqual(dependencies, depsRef.current)))
-    ) {
-      stateSlice = selector(state)
-    }
+    if (selector && selector !== selRef.current) stateSlice = selector(state)
-    useIsomorphicLayoutEffect(() => {
-      selectorRef.current = selector
-      depsRef.current = dependencies
-    }, dependencies || [selector])
+    useIsoLayoutEffect(() => void (selRef.current = selector), [selector])
-    useIsomorphicLayoutEffect(() => {
+    // Subscribe to the store
+    useIsoLayoutEffect(() => {
-            // Truthy check because it might be possible to set selectorRef to
+            // Truthy check because it might be possible to set selRef to
-            () => (selectorRef.current ? selectorRef.current(state) : state),
-            dispatch
+            () => (selRef.current ? selRef.current(state) : state),
+            dispatch,
+            equalityFn
+
+export { shallowEqual }","+  <U>(
+    selector: StateSelector<T, U>,
+    listener: StateListener<T, U>,
+    equalityFn: Function | undefined
+  ): () => void
-  <U>(selector: StateSelector<T, U>, dependencies?: ReadonlyArray<any>): U
+  <U>(selector: StateSelector<T, U>, equalityFn?: Function): U
-const useIsomorphicLayoutEffect =
+const useIsoLayoutEffect =
-    listenerOrUndef?: StateListener<TState, TStateSlice>
+    listenerOrUndef?: StateListener<TState, TStateSlice>,
+    equalityFn?: Function
-        const selectedSlice = selector(state)
-        if (!shallowEqual(stateSlice, (stateSlice = selectedSlice)))
-          listenerOrUndef(stateSlice)
+        try {
+          const sel = selector(state)
+          const old = stateSlice
+          // Update local state slice
+          stateSlice = sel
+          // Test for changes
+          const equal = equalityFn ? equalityFn(old, sel) : old === sel
+          // Call listeners if state has changed
+          if (!equal) listenerOrUndef(stateSlice)
+        } catch {}
-    dependencies?: ReadonlyArray<any>
+    equalityFn?: Function
-    const selectorRef = useRef(selector)
-    const depsRef = useRef(dependencies)
+    const selRef = useRef(selector)
-    if (
-      selector &&
-      ((!dependencies && selector !== selectorRef.current) ||
-        (dependencies && !shallowEqual(dependencies, depsRef.current)))
-    ) {
-      stateSlice = selector(state)
-    }
+    if (selector && selector !== selRef.current) stateSlice = selector(state)
-    useIsomorphicLayoutEffect(() => {
-      selectorRef.current = selector
-      depsRef.current = dependencies
-    }, dependencies || [selector])
+    useIsoLayoutEffect(() => void (selRef.current = selector), [selector])
-    useIsomorphicLayoutEffect(() => {
+    // Subscribe to the store
+    useIsoLayoutEffect(() => {
-            // Truthy check because it might be possible to set selectorRef to
+            // Truthy check because it might be possible to set selRef to
-            () => (selectorRef.current ? selectorRef.current(state) : state),
-            dispatch
+            () => (selRef.current ? selRef.current(state) : state),
+            dispatch,
+            equalityFn
+
+export { shallowEqual }"
pmndrs_zustand,d46c7586ce6bd4027d7d68b6eab3e39c7fe36d51,"Merge pull request #38 from react-spring/1.x  1.x (optional equalityFn, error safe selectors, middleware: redux & devtools)",tests/test.tsx,,"+  shallowEqual,
-
-    useStore(() => {
+    const sel = React.useCallback(() => {
+    useStore(sel, deps)
-    const { value } = useStore(state => state, [])
+    const sel = React.useCallback(state => state, [])
+    const { value } = useStore(sel)
+})
+
+it('can fetch multiple entries with shallow equality', async () => {
+  const [useStore, { setState }] = create(() => ({ a: 0, b: 0, c: 0 }))
+
+  let renderCount = 0
+  function Component() {
+    renderCount++
+    const { a, b } = useStore(
+      state => ({ a: state.a, b: state.b }),
+      shallowEqual
+    )
+    return (
+      <div>
+        a: {a} b: {b}
+      </div>
+    )
+  }
+
+  const { getByText } = render(<Component />)
+  await waitForElement(() => getByText('a: 0 b: 0'))
+
+  act(() => {
+    setState({ a: 1, b: 1 })
+  })
+  await waitForElement(() => getByText('a: 1 b: 1'))
+
+  act(() => {
+    setState({ c: 1 })
+  })
+
+  expect(renderCount).toBe(2)","+  shallowEqual,
-
-    useStore(() => {
+    const sel = React.useCallback(() => {
+    useStore(sel, deps)
-    const { value } = useStore(state => state, [])
+    const sel = React.useCallback(state => state, [])
+    const { value } = useStore(sel)
+})
+
+it('can fetch multiple entries with shallow equality', async () => {
+  const [useStore, { setState }] = create(() => ({ a: 0, b: 0, c: 0 }))
+
+  let renderCount = 0
+  function Component() {
+    renderCount++
+    const { a, b } = useStore(
+      state => ({ a: state.a, b: state.b }),
+      shallowEqual
+    )
+    return (
+      <div>
+        a: {a} b: {b}
+      </div>
+    )
+  }
+
+  const { getByText } = render(<Component />)
+  await waitForElement(() => getByText('a: 0 b: 0'))
+
+  act(() => {
+    setState({ a: 1, b: 1 })
+  })
+  await waitForElement(() => getByText('a: 1 b: 1'))
+
+  act(() => {
+    setState({ c: 1 })
+  })
+
+  expect(renderCount).toBe(2)"
pmndrs_zustand,7331d65c4a6d93a864509eebbe86f5df53405d3d,Merge pull request #35 from JeremyRH/master  Make set & get types use generic state,package.json,,"-    ""@babel/core"": ""^7.4.3"",
-    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/core"": ""^7.4.5"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.4"",
-    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
-    ""@babel/preset-env"": ""^7.4.3"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.5"",
+    ""@babel/preset-env"": ""^7.4.5"",
-    ""@types/jest"": ""^24.0.11"",
-    ""@types/react"": ""^16.8.13"",
-    ""husky"": ""^2.3.0"",
+    ""@types/jest"": ""^24.0.15"",
+    ""@types/react"": ""^16.8.22"",
+    ""husky"": ""^2.4.1"",
-    ""lint-staged"": ""^8.1.5"",
-    ""prettier"": ""^1.17.0"",
+    ""lint-staged"": ""^8.2.1"",
+    ""prettier"": ""^1.18.2"",
-    ""rollup"": ""^1.13.1"",
-    ""rollup-plugin-babel"": ""^4.3.2"",
-    ""rollup-plugin-node-resolve"": ""^5.0.1"",
+    ""rollup"": ""^1.16.2"",
+    ""rollup-plugin-babel"": ""^4.3.3"",
+    ""rollup-plugin-node-resolve"": ""^5.0.4"",
-    ""rollup-plugin-typescript2"": ""^0.21.1"",
-    ""typescript"": ""^3.5.1""
+    ""rollup-plugin-typescript2"": ""^0.21.2"",
+    ""typescript"": ""^3.5.2""","-    ""@babel/core"": ""^7.4.3"",
-    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/core"": ""^7.4.5"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.4"",
-    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
-    ""@babel/preset-env"": ""^7.4.3"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.5"",
+    ""@babel/preset-env"": ""^7.4.5"",
-    ""@types/jest"": ""^24.0.11"",
-    ""@types/react"": ""^16.8.13"",
-    ""husky"": ""^2.3.0"",
+    ""@types/jest"": ""^24.0.15"",
+    ""@types/react"": ""^16.8.22"",
+    ""husky"": ""^2.4.1"",
-    ""lint-staged"": ""^8.1.5"",
-    ""prettier"": ""^1.17.0"",
+    ""lint-staged"": ""^8.2.1"",
+    ""prettier"": ""^1.18.2"",
-    ""rollup"": ""^1.13.1"",
-    ""rollup-plugin-babel"": ""^4.3.2"",
-    ""rollup-plugin-node-resolve"": ""^5.0.1"",
+    ""rollup"": ""^1.16.2"",
+    ""rollup-plugin-babel"": ""^4.3.3"",
+    ""rollup-plugin-node-resolve"": ""^5.0.4"",
-    ""rollup-plugin-typescript2"": ""^0.21.1"",
-    ""typescript"": ""^3.5.1""
+    ""rollup-plugin-typescript2"": ""^0.21.2"",
+    ""typescript"": ""^3.5.2"""
pmndrs_zustand,7331d65c4a6d93a864509eebbe86f5df53405d3d,Merge pull request #35 from JeremyRH/master  Make set & get types use generic state,src/index.ts,,"-const useIsomorphicLayoutEffect =
-  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-
-export type State = Record<string, any>
+export type State = Record<string | number | symbol, any>
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-  createState: (set: SetState<State>, get: GetState<State>, api: any) => TState
+  createState: keyof TState extends never
+    ? (set: any, get: any, api: any) => TState
+    : (set: SetState<TState>, get: GetState<TState>, api: any) => TState
-  let state = createState(setState as SetState<State>, getState, api)
+  let state = createState(setState, getState, api)","-const useIsomorphicLayoutEffect =
-  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-
-export type State = Record<string, any>
+export type State = Record<string | number | symbol, any>
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-  createState: (set: SetState<State>, get: GetState<State>, api: any) => TState
+  createState: keyof TState extends never
+    ? (set: any, get: any, api: any) => TState
+    : (set: SetState<TState>, get: GetState<TState>, api: any) => TState
-  let state = createState(setState as SetState<State>, getState, api)
+  let state = createState(setState, getState, api)"
pmndrs_zustand,7331d65c4a6d93a864509eebbe86f5df53405d3d,Merge pull request #35 from JeremyRH/master  Make set & get types use generic state,src/middleware.ts,,"-  let extension =
-    (<any>window).__REDUX_DEVTOOLS_EXTENSION__ ||
-    (<any>window).top.__REDUX_DEVTOOLS_EXTENSION__
+  let extension
+  try {
+    extension =
+      (window as any).__REDUX_DEVTOOLS_EXTENSION__ ||
+      (window as any).top.__REDUX_DEVTOOLS_EXTENSION__
+  } catch {}","-  let extension =
-    (<any>window).__REDUX_DEVTOOLS_EXTENSION__ ||
-    (<any>window).top.__REDUX_DEVTOOLS_EXTENSION__
+  let extension
+  try {
+    extension =
+      (window as any).__REDUX_DEVTOOLS_EXTENSION__ ||
+      (window as any).top.__REDUX_DEVTOOLS_EXTENSION__
+  } catch {}"
pmndrs_zustand,7331d65c4a6d93a864509eebbe86f5df53405d3d,Merge pull request #35 from JeremyRH/master  Make set & get types use generic state,tests/test.tsx,,"+import { devtools, redux } from '../src/middleware'
-    getState1: get,
+    getState1: () => get(),
-    setState1: set,
-    setState2: newState => setState(newState),
+    setState1: v => set(v),
+    setState2: v => setState(v),
-  const [useStore, storeApi] = create(
-    (set: SetState<ExampleState>, get: GetState<ExampleState>) => ({
-      num: 1,
-      numGet: () => get().num,
-      numGetState: () => storeApi.getState().num,
-      numSet: (v: number) => set({ num: v }),
-      numSetState: (v: number) => storeApi.setState({ num: v }),
-    })
-  )
+  const [useStore, storeApi] = create<ExampleState>((set, get) => ({
+    num: 1,
+    numGet: () => get().num,
+    numGetState: () => {
+      // TypeScript can't get the type of storeApi when it trys to enforce the signature of numGetState.
+      // Need to explicitly state the type of storeApi.getState().num or storeApi type will be type 'any'.
+      const result: number = storeApi.getState().num
+      return result
+    },
+    numSet: v => {
+      set({ num: v })
+    },
+    numSetState: v => {
+      storeApi.setState({ num: v })
+    },
+  }))
+
+describe('redux dev tools middleware', () => {
+  const consoleWarn = console.warn
+
+  afterEach(() => {
+    cleanup()
+    console.warn = consoleWarn
+  })
+
+  it('can warn when trying to use redux devtools without extension', () => {
+    const initialState = { count: 0 }
+    const types = { increase: 'INCREASE', decrease: 'DECREASE' }
+    const reducer = (state, { type, by }) => {
+      switch (type) {
+        case types.increase:
+          return { count: state.count + by }
+        case types.decrease:
+          return { count: state.count - by }
+      }
+    }
+
+    console.warn = jest.fn(console.warn)
+    const [useStore, api] = create(devtools(redux(reducer, initialState)))
+
+    expect(console.warn).toBeCalled()
+  })
+})","+import { devtools, redux } from '../src/middleware'
-    getState1: get,
+    getState1: () => get(),
-    setState1: set,
-    setState2: newState => setState(newState),
+    setState1: v => set(v),
+    setState2: v => setState(v),
-  const [useStore, storeApi] = create(
-    (set: SetState<ExampleState>, get: GetState<ExampleState>) => ({
-      num: 1,
-      numGet: () => get().num,
-      numGetState: () => storeApi.getState().num,
-      numSet: (v: number) => set({ num: v }),
-      numSetState: (v: number) => storeApi.setState({ num: v }),
-    })
-  )
+  const [useStore, storeApi] = create<ExampleState>((set, get) => ({
+    num: 1,
+    numGet: () => get().num,
+    numGetState: () => {
+      // TypeScript can't get the type of storeApi when it trys to enforce the signature of numGetState.
+      // Need to explicitly state the type of storeApi.getState().num or storeApi type will be type 'any'.
+      const result: number = storeApi.getState().num
+      return result
+    },
+    numSet: v => {
+      set({ num: v })
+    },
+    numSetState: v => {
+      storeApi.setState({ num: v })
+    },
+  }))
+
+describe('redux dev tools middleware', () => {
+  const consoleWarn = console.warn
+
+  afterEach(() => {
+    cleanup()
+    console.warn = consoleWarn
+  })
+
+  it('can warn when trying to use redux devtools without extension', () => {
+    const initialState = { count: 0 }
+    const types = { increase: 'INCREASE', decrease: 'DECREASE' }
+    const reducer = (state, { type, by }) => {
+      switch (type) {
+        case types.increase:
+          return { count: state.count + by }
+        case types.decrease:
+          return { count: state.count - by }
+      }
+    }
+
+    console.warn = jest.fn(console.warn)
+    const [useStore, api] = create(devtools(redux(reducer, initialState)))
+
+    expect(console.warn).toBeCalled()
+  })
+})"
pmndrs_zustand,25194f9ee94840a360b88ee8a902a044ad0c54a0,Merge branches 'master' and 'master' of https://github.com/drcmda/zustand,src/index.ts,,"-import { useLayoutEffect, useReducer, useRef } from 'react'
+import { useEffect, useLayoutEffect, useReducer, useRef } from 'react'
+
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {","-import { useLayoutEffect, useReducer, useRef } from 'react'
+import { useEffect, useLayoutEffect, useReducer, useRef } from 'react'
+
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {"
pmndrs_zustand,e4c0fe5cd25050a8bfac1107e6c50d0ab80b914a,Merge pull request #34 from codemilli/patch-ssr-issue  Replace useLayoutEffect to useEffect in server side to fix ssr issue,.size-snapshot.json,,"-    ""bundled"": 3159,
-    ""minified"": 1031,
-    ""gzipped"": 538,
+    ""bundled"": 3181,
+    ""minified"": 1037,
+    ""gzipped"": 542,
-    ""bundled"": 3492,
-    ""minified"": 1149,
-    ""gzipped"": 556
+    ""bundled"": 3514,
+    ""minified"": 1155,
+    ""gzipped"": 561","-    ""bundled"": 3159,
-    ""minified"": 1031,
-    ""gzipped"": 538,
+    ""bundled"": 3181,
+    ""minified"": 1037,
+    ""gzipped"": 542,
-    ""bundled"": 3492,
-    ""minified"": 1149,
-    ""gzipped"": 556
+    ""bundled"": 3514,
+    ""minified"": 1155,
+    ""gzipped"": 561"
pmndrs_zustand,e4c0fe5cd25050a8bfac1107e6c50d0ab80b914a,Merge pull request #34 from codemilli/patch-ssr-issue  Replace useLayoutEffect to useEffect in server side to fix ssr issue,src/index.ts,,"-import { useLayoutEffect, useReducer, useRef } from 'react'
+import { useEffect, useLayoutEffect, useReducer, useRef } from 'react'
+
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {","-import { useLayoutEffect, useReducer, useRef } from 'react'
+import { useEffect, useLayoutEffect, useReducer, useRef } from 'react'
+
+const useIsomorphicLayoutEffect =
+  typeof window !== 'undefined' ? useLayoutEffect : useEffect
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {
-    useLayoutEffect(() => {
+    useIsomorphicLayoutEffect(() => {"
pmndrs_zustand,94fa7c7eb68c036299a1fda7c65fd4f08d032577,Merge pull request #26 from JeremyRH/master  Update dependencies,.size-snapshot.json,,"-    ""bundled"": 3092,
+    ""bundled"": 3159,
-    ""bundled"": 3425,
+    ""bundled"": 3492,","-    ""bundled"": 3092,
+    ""bundled"": 3159,
-    ""bundled"": 3425,
+    ""bundled"": 3492,"
pmndrs_zustand,94fa7c7eb68c036299a1fda7c65fd4f08d032577,Merge pull request #26 from JeremyRH/master  Update dependencies,package.json,,"-    ],
-    ""setupFilesAfterEnv"": [
-      ""<rootDir>/setupTests.js""
+    ""@testing-library/react"": ""^8.0.1"",
-    ""enzyme"": ""^3.9.0"",
-    ""enzyme-adapter-react-16"": ""^1.12.1"",
-    ""husky"": ""^1.3.1"",
-    ""jest"": ""^24.7.1"",
+    ""husky"": ""^2.3.0"",
+    ""jest"": ""^24.8.0"",
-    ""react-testing-library"": ""^6.1.2"",
-    ""rollup"": ""^1.10.0"",
+    ""rollup"": ""^1.13.1"",
-    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""rollup-plugin-size-snapshot"": ""^0.8.0"",
-    ""rollup-plugin-typescript2"": ""^0.20.1"",
-    ""typescript"": ""^3.4.3""
+    ""rollup-plugin-node-resolve"": ""^5.0.1"",
+    ""rollup-plugin-size-snapshot"": ""^0.9.0"",
+    ""rollup-plugin-typescript2"": ""^0.21.1"",
+    ""typescript"": ""^3.5.1""","-    ],
-    ""setupFilesAfterEnv"": [
-      ""<rootDir>/setupTests.js""
+    ""@testing-library/react"": ""^8.0.1"",
-    ""enzyme"": ""^3.9.0"",
-    ""enzyme-adapter-react-16"": ""^1.12.1"",
-    ""husky"": ""^1.3.1"",
-    ""jest"": ""^24.7.1"",
+    ""husky"": ""^2.3.0"",
+    ""jest"": ""^24.8.0"",
-    ""react-testing-library"": ""^6.1.2"",
-    ""rollup"": ""^1.10.0"",
+    ""rollup"": ""^1.13.1"",
-    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""rollup-plugin-size-snapshot"": ""^0.8.0"",
-    ""rollup-plugin-typescript2"": ""^0.20.1"",
-    ""typescript"": ""^3.4.3""
+    ""rollup-plugin-node-resolve"": ""^5.0.1"",
+    ""rollup-plugin-size-snapshot"": ""^0.9.0"",
+    ""rollup-plugin-typescript2"": ""^0.21.1"",
+    ""typescript"": ""^3.5.1"""
pmndrs_zustand,94fa7c7eb68c036299a1fda7c65fd4f08d032577,Merge pull request #26 from JeremyRH/master  Update dependencies,tests/test.tsx,,"-} from 'react-testing-library'
+} from '@testing-library/react'","-} from 'react-testing-library'
+} from '@testing-library/react'"
pmndrs_zustand,8ad90685152f6ec51fe62ca532c436973b80547a,"Merge pull request #25 from JeremyRH/master  Alright, that can be added later. I'm going to merge this.",.size-snapshot.json,,"-    ""bundled"": 2627,
-    ""minified"": 963,
-    ""gzipped"": 506,
+    ""bundled"": 3092,
+    ""minified"": 1031,
+    ""gzipped"": 538,
-    ""bundled"": 2875,
-    ""minified"": 1082,
-    ""gzipped"": 528
+    ""bundled"": 3425,
+    ""minified"": 1149,
+    ""gzipped"": 556","-    ""bundled"": 2627,
-    ""minified"": 963,
-    ""gzipped"": 506,
+    ""bundled"": 3092,
+    ""minified"": 1031,
+    ""gzipped"": 538,
-    ""bundled"": 2875,
-    ""minified"": 1082,
-    ""gzipped"": 528
+    ""bundled"": 3425,
+    ""minified"": 1149,
+    ""gzipped"": 556"
pmndrs_zustand,8ad90685152f6ec51fe62ca532c436973b80547a,"Merge pull request #25 from JeremyRH/master  Alright, that can be added later. I'm going to merge this.",src/index.ts,,"-import { useCallback, useLayoutEffect, useReducer, useRef } from 'react'
+import { useLayoutEffect, useReducer, useRef } from 'react'
-export type StateListener<T> = (state: T) => void
-export type StateSelector<T, U> = (state: T) => U
-export type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+export type State = Record<string, any>
+export type StateListener<T extends State, U = T> = (state: U) => void
+export type StateSelector<T extends State, U> = (state: T) => U
+export type PartialState<T extends State> =
+  | Partial<T>
+  | ((state: T) => Partial<T>)
+export type SetState<T extends State> = (partial: PartialState<T>) => void
+export type GetState<T extends State> = () => T
-export type State = Record<string, any>
-export type SetState<T> = (partialState: PartialState<T>) => void
-export type GetState<T> = () => T
-
-export type UseStore<T> = {
+export interface Subscribe<T> {
+  (listener: StateListener<T>): () => void
+  <U>(selector: StateSelector<T, U>, listener: StateListener<T, U>): () => void
+}
+export interface UseStore<T> {
-
-  subscribe: (listener: StateListener<T>) => () => void
+  subscribe: Subscribe<T>
-  const setState = (partialState: PartialState<TState>) => {
-    state = Object.assign(
-      {},
-      state,
-      typeof partialState === 'function' ? partialState(state) : partialState
-    )
-    listeners.forEach(listener => listener(state))
-  }
-
-  const getState = () => state
-
-  const subscribe = (listener: StateListener<TState>) => {
-    listeners.add(listener)
-    return () => {
-      listeners.delete(listener)
+  const setState: SetState<TState> = partial => {
+    const partialState =
+      typeof partial === 'function' ? partial(state) : partial
+    if (partialState !== state) {
+      state = Object.assign({}, state, partialState)
+      listeners.forEach(listener => listener(state))
-  const destroy = () => {
-    listeners.clear()
-    state = {} as TState
+  const getState: GetState<TState> = () => state
+
+  // Optional selector param goes first so we can infer its return type and use
+  // it for listener
+  const subscribe: Subscribe<TState> = <TStateSlice>(
+    selectorOrListener:
+      | StateListener<TState>
+      | StateSelector<TState, TStateSlice>,
+    listenerOrUndef?: StateListener<TState, TStateSlice>
+  ) => {
+    let listener = selectorOrListener
+    // Existance of second param means a selector was passed in
+    if (listenerOrUndef) {
+      // We know selector is not type StateListener so it must be StateSelector
+      const selector = selectorOrListener as StateSelector<TState, TStateSlice>
+      let stateSlice = selector(state)
+      listener = () => {
+        const selectedSlice = selector(state)
+        if (!shallowEqual(stateSlice, (stateSlice = selectedSlice)))
+          listenerOrUndef(stateSlice)
+      }
+    }
+    listeners.add(listener)
+    return () => void listeners.delete(listener)
-  function useStore(): TState
-  function useStore<U>(
-    selector: StateSelector<TState, U>,
+  const destroy: StoreApi<TState>['destroy'] = () => {
+    listeners.clear()
+  }
+
+  const useStore: UseStore<TState> = <TStateSlice>(
+    selector?: StateSelector<TState, TStateSlice>,
-  ): U
-  function useStore<U>(
-    selector?: StateSelector<TState, U>,
-    dependencies?: ReadonlyArray<any>
-  ): TState | U {
-    // State selector gets entire state if no selector was passed in
-    const stateSelector = typeof selector === 'function' ? selector : getState
-    const selectState = useCallback(
-      stateSelector,
-      dependencies as ReadonlyArray<any>
+  ): TState | TStateSlice => {
+    const selectorRef = useRef(selector)
+    const depsRef = useRef(dependencies)
+    let [stateSlice, dispatch] = useReducer(
+      reducer,
+      state,
+      // Optional third argument but required to not be 'undefined'
+      selector as StateSelector<TState, TStateSlice>
-    const selectStateRef = useRef(selectState)
-    let [stateSlice, dispatch] = useReducer(reducer, state, selectState)
-    // Call new selector if it has changed
-    if (selectState !== selectStateRef.current) stateSlice = selectState(state)
+    // Need to manually get state slice if selector has changed with no deps or
+    // deps exist and have changed
+    if (
+      selector &&
+      ((!dependencies && selector !== selectorRef.current) ||
+        (dependencies && !shallowEqual(dependencies, depsRef.current)))
+    ) {
+      stateSlice = selector(state)
+    }
-    // Store in ref to enable updating without rerunning subscribe/unsubscribe
-    const stateSliceRef = useRef(stateSlice)
+    // Update refs synchronously after view has been updated
+    useLayoutEffect(() => {
+      selectorRef.current = selector
+      depsRef.current = dependencies
+    }, dependencies || [selector])
-    // Update refs only after view has been updated
-      selectStateRef.current = selectState
-      stateSliceRef.current = stateSlice
-    }, [selectState, stateSlice])
-
-    // Subscribe/unsubscribe to the store only on mount/unmount
-    useLayoutEffect(() => {
-      return subscribe(() => {
-        // Use the last selector passed to useStore to get current state slice
-        const selectedSlice = selectStateRef.current(state)
-        // Shallow compare previous state slice with current and rerender only if changed
-        if (!shallowEqual(stateSliceRef.current, selectedSlice))
-          dispatch(selectedSlice)
-      })
-    }, [])
+      return selector
+        ? subscribe(
+            // Truthy check because it might be possible to set selectorRef to
+            // undefined and call this subscriber before it resubscribes
+            () => (selectorRef.current ? selectorRef.current(state) : state),
+            dispatch
+          )
+        : subscribe(dispatch)
+      // Only resubscribe to the store when changing selector from function to
+      // undefined or undefined to function
+    }, [!selector])
-  let state = createState(
-    setState as SetState<State>,
-    getState as GetState<State>
-  )
-  const api = { destroy, getState, setState, subscribe }
+  let state = createState(setState as SetState<State>, getState)
-  return [useStore, api]
+  return [useStore, { destroy, getState, setState, subscribe }]","-import { useCallback, useLayoutEffect, useReducer, useRef } from 'react'
+import { useLayoutEffect, useReducer, useRef } from 'react'
-export type StateListener<T> = (state: T) => void
-export type StateSelector<T, U> = (state: T) => U
-export type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+export type State = Record<string, any>
+export type StateListener<T extends State, U = T> = (state: U) => void
+export type StateSelector<T extends State, U> = (state: T) => U
+export type PartialState<T extends State> =
+  | Partial<T>
+  | ((state: T) => Partial<T>)
+export type SetState<T extends State> = (partial: PartialState<T>) => void
+export type GetState<T extends State> = () => T
-export type State = Record<string, any>
-export type SetState<T> = (partialState: PartialState<T>) => void
-export type GetState<T> = () => T
-
-export type UseStore<T> = {
+export interface Subscribe<T> {
+  (listener: StateListener<T>): () => void
+  <U>(selector: StateSelector<T, U>, listener: StateListener<T, U>): () => void
+}
+export interface UseStore<T> {
-
-  subscribe: (listener: StateListener<T>) => () => void
+  subscribe: Subscribe<T>
-  const setState = (partialState: PartialState<TState>) => {
-    state = Object.assign(
-      {},
-      state,
-      typeof partialState === 'function' ? partialState(state) : partialState
-    )
-    listeners.forEach(listener => listener(state))
-  }
-
-  const getState = () => state
-
-  const subscribe = (listener: StateListener<TState>) => {
-    listeners.add(listener)
-    return () => {
-      listeners.delete(listener)
+  const setState: SetState<TState> = partial => {
+    const partialState =
+      typeof partial === 'function' ? partial(state) : partial
+    if (partialState !== state) {
+      state = Object.assign({}, state, partialState)
+      listeners.forEach(listener => listener(state))
-  const destroy = () => {
-    listeners.clear()
-    state = {} as TState
+  const getState: GetState<TState> = () => state
+
+  // Optional selector param goes first so we can infer its return type and use
+  // it for listener
+  const subscribe: Subscribe<TState> = <TStateSlice>(
+    selectorOrListener:
+      | StateListener<TState>
+      | StateSelector<TState, TStateSlice>,
+    listenerOrUndef?: StateListener<TState, TStateSlice>
+  ) => {
+    let listener = selectorOrListener
+    // Existance of second param means a selector was passed in
+    if (listenerOrUndef) {
+      // We know selector is not type StateListener so it must be StateSelector
+      const selector = selectorOrListener as StateSelector<TState, TStateSlice>
+      let stateSlice = selector(state)
+      listener = () => {
+        const selectedSlice = selector(state)
+        if (!shallowEqual(stateSlice, (stateSlice = selectedSlice)))
+          listenerOrUndef(stateSlice)
+      }
+    }
+    listeners.add(listener)
+    return () => void listeners.delete(listener)
-  function useStore(): TState
-  function useStore<U>(
-    selector: StateSelector<TState, U>,
+  const destroy: StoreApi<TState>['destroy'] = () => {
+    listeners.clear()
+  }
+
+  const useStore: UseStore<TState> = <TStateSlice>(
+    selector?: StateSelector<TState, TStateSlice>,
-  ): U
-  function useStore<U>(
-    selector?: StateSelector<TState, U>,
-    dependencies?: ReadonlyArray<any>
-  ): TState | U {
-    // State selector gets entire state if no selector was passed in
-    const stateSelector = typeof selector === 'function' ? selector : getState
-    const selectState = useCallback(
-      stateSelector,
-      dependencies as ReadonlyArray<any>
+  ): TState | TStateSlice => {
+    const selectorRef = useRef(selector)
+    const depsRef = useRef(dependencies)
+    let [stateSlice, dispatch] = useReducer(
+      reducer,
+      state,
+      // Optional third argument but required to not be 'undefined'
+      selector as StateSelector<TState, TStateSlice>
-    const selectStateRef = useRef(selectState)
-    let [stateSlice, dispatch] = useReducer(reducer, state, selectState)
-    // Call new selector if it has changed
-    if (selectState !== selectStateRef.current) stateSlice = selectState(state)
+    // Need to manually get state slice if selector has changed with no deps or
+    // deps exist and have changed
+    if (
+      selector &&
+      ((!dependencies && selector !== selectorRef.current) ||
+        (dependencies && !shallowEqual(dependencies, depsRef.current)))
+    ) {
+      stateSlice = selector(state)
+    }
-    // Store in ref to enable updating without rerunning subscribe/unsubscribe
-    const stateSliceRef = useRef(stateSlice)
+    // Update refs synchronously after view has been updated
+    useLayoutEffect(() => {
+      selectorRef.current = selector
+      depsRef.current = dependencies
+    }, dependencies || [selector])
-    // Update refs only after view has been updated
-      selectStateRef.current = selectState
-      stateSliceRef.current = stateSlice
-    }, [selectState, stateSlice])
-
-    // Subscribe/unsubscribe to the store only on mount/unmount
-    useLayoutEffect(() => {
-      return subscribe(() => {
-        // Use the last selector passed to useStore to get current state slice
-        const selectedSlice = selectStateRef.current(state)
-        // Shallow compare previous state slice with current and rerender only if changed
-        if (!shallowEqual(stateSliceRef.current, selectedSlice))
-          dispatch(selectedSlice)
-      })
-    }, [])
+      return selector
+        ? subscribe(
+            // Truthy check because it might be possible to set selectorRef to
+            // undefined and call this subscriber before it resubscribes
+            () => (selectorRef.current ? selectorRef.current(state) : state),
+            dispatch
+          )
+        : subscribe(dispatch)
+      // Only resubscribe to the store when changing selector from function to
+      // undefined or undefined to function
+    }, [!selector])
-  let state = createState(
-    setState as SetState<State>,
-    getState as GetState<State>
-  )
-  const api = { destroy, getState, setState, subscribe }
+  let state = createState(setState as SetState<State>, getState)
-  return [useStore, api]
+  return [useStore, { destroy, getState, setState, subscribe }]"
pmndrs_zustand,8ad90685152f6ec51fe62ca532c436973b80547a,"Merge pull request #25 from JeremyRH/master  Alright, that can be added later. I'm going to merge this.",tests/test.tsx,,"-import create from '../src/index'
+import create, {
+  GetState,
+  PartialState,
+  SetState,
+  State,
+  StateListener,
+  StateSelector,
+  StoreApi,
+  Subscribe,
+  UseStore,
+} from '../src/index'
-  expect.assertions(2)
-
-  const [, { setState, subscribe }] = create(() => ({ value: 1 }))
-
-  const unsub1 = subscribe(newState => {
+  const initialState = { value: 1, other: 'a' }
+  const [, { setState, getState, subscribe }] = create(() => initialState)
+
+  // Should not be called if new state identity is the same
+  let unsub = subscribe(() => {
+    throw new Error('subscriber called when new state identity is the same')
+  })
+  setState(initialState)
+  unsub()
+
+  // Should be called even if shallow equal when no selector used
+  unsub = subscribe(newState => {
+    expect(newState.value).toBe(1)
+  })
+  setState({ ...getState() })
+  unsub()
+
+  // Should be called when state changes
+  unsub = subscribe(newState => {
-    unsub1()
-  })
-  const unsub2 = subscribe(newState => {
-    expect(newState.value).toBe(2)
-    unsub2()
-  })
-
+  })
+  unsub()
+
+  // Should not be called with selector if shallow equal
+  unsub = subscribe(
+    state => state.value,
+    () => {
+      throw new Error('subscriber called when shallow equal and selector used')
+    }
+  )
+  setState({ ...getState() })
+  unsub()
+
+  // Should not be called with selector if non-selected part changes
+  unsub = subscribe(
+    state => state.value,
+    () => {
+      throw new Error('subscriber called when non-selected part changed')
+    }
+  )
+  setState({ other: 'b' })
+  unsub()
+
+  // Should be called with selector if selected part changes
+  unsub = subscribe(
+    state => state.value,
+    newValue => {
+      expect(newValue).toBe(3)
+    }
+  )
+  setState({ value: 3 })
+  unsub()
-  expect(selectorCallCount).toBe(1)
+  expect(selectorCallCount).toBe(2)
-  expect(selectorCallCount).toBe(1)
+  expect(selectorCallCount).toBe(2)
-  expect(selectorCallCount).toBe(2)
+  expect(selectorCallCount).toBe(3)
+
+it('can use exposed types', () => {
+  interface ExampleState extends State {
+    num: number
+    numGet: () => number
+    numGetState: () => number
+    numSet: (v: number) => void
+    numSetState: (v: number) => void
+  }
+
+  const listener: StateListener<ExampleState> = state => {
+    const value = state.num * state.numGet() * state.numGetState()
+    state.numSet(value)
+    state.numSetState(value)
+  }
+  const selector: StateSelector<ExampleState, number> = state => state.num
+  const partial: PartialState<ExampleState> = { num: 2, numGet: () => 2 }
+  const partialFn: PartialState<ExampleState> = state => ({ num: 2, ...state })
+
+  const [useStore, storeApi] = create(
+    (set: SetState<ExampleState>, get: GetState<ExampleState>) => ({
+      num: 1,
+      numGet: () => get().num,
+      numGetState: () => storeApi.getState().num,
+      numSet: (v: number) => set({ num: v }),
+      numSetState: (v: number) => storeApi.setState({ num: v }),
+    })
+  )
+
+  function checkAllTypes(
+    getState: GetState<ExampleState>,
+    partialState: PartialState<ExampleState>,
+    setState: SetState<ExampleState>,
+    state: State,
+    stateListener: StateListener<ExampleState>,
+    stateSelector: StateSelector<ExampleState, number>,
+    storeApi: StoreApi<ExampleState>,
+    subscribe: Subscribe<ExampleState>,
+    useStore: UseStore<ExampleState>
+  ) {
+    expect(true).toBeTruthy()
+  }
+
+  checkAllTypes(
+    storeApi.getState,
+    Math.random() > 0.5 ? partial : partialFn,
+    storeApi.setState,
+    storeApi.getState(),
+    listener,
+    selector,
+    storeApi,
+    storeApi.subscribe,
+    useStore
+  )
+})","-import create from '../src/index'
+import create, {
+  GetState,
+  PartialState,
+  SetState,
+  State,
+  StateListener,
+  StateSelector,
+  StoreApi,
+  Subscribe,
+  UseStore,
+} from '../src/index'
-  expect.assertions(2)
-
-  const [, { setState, subscribe }] = create(() => ({ value: 1 }))
-
-  const unsub1 = subscribe(newState => {
+  const initialState = { value: 1, other: 'a' }
+  const [, { setState, getState, subscribe }] = create(() => initialState)
+
+  // Should not be called if new state identity is the same
+  let unsub = subscribe(() => {
+    throw new Error('subscriber called when new state identity is the same')
+  })
+  setState(initialState)
+  unsub()
+
+  // Should be called even if shallow equal when no selector used
+  unsub = subscribe(newState => {
+    expect(newState.value).toBe(1)
+  })
+  setState({ ...getState() })
+  unsub()
+
+  // Should be called when state changes
+  unsub = subscribe(newState => {
-    unsub1()
-  })
-  const unsub2 = subscribe(newState => {
-    expect(newState.value).toBe(2)
-    unsub2()
-  })
-
+  })
+  unsub()
+
+  // Should not be called with selector if shallow equal
+  unsub = subscribe(
+    state => state.value,
+    () => {
+      throw new Error('subscriber called when shallow equal and selector used')
+    }
+  )
+  setState({ ...getState() })
+  unsub()
+
+  // Should not be called with selector if non-selected part changes
+  unsub = subscribe(
+    state => state.value,
+    () => {
+      throw new Error('subscriber called when non-selected part changed')
+    }
+  )
+  setState({ other: 'b' })
+  unsub()
+
+  // Should be called with selector if selected part changes
+  unsub = subscribe(
+    state => state.value,
+    newValue => {
+      expect(newValue).toBe(3)
+    }
+  )
+  setState({ value: 3 })
+  unsub()
-  expect(selectorCallCount).toBe(1)
+  expect(selectorCallCount).toBe(2)
-  expect(selectorCallCount).toBe(1)
+  expect(selectorCallCount).toBe(2)
-  expect(selectorCallCount).toBe(2)
+  expect(selectorCallCount).toBe(3)
+
+it('can use exposed types', () => {
+  interface ExampleState extends State {
+    num: number
+    numGet: () => number
+    numGetState: () => number
+    numSet: (v: number) => void
+    numSetState: (v: number) => void
+  }
+
+  const listener: StateListener<ExampleState> = state => {
+    const value = state.num * state.numGet() * state.numGetState()
+    state.numSet(value)
+    state.numSetState(value)
+  }
+  const selector: StateSelector<ExampleState, number> = state => state.num
+  const partial: PartialState<ExampleState> = { num: 2, numGet: () => 2 }
+  const partialFn: PartialState<ExampleState> = state => ({ num: 2, ...state })
+
+  const [useStore, storeApi] = create(
+    (set: SetState<ExampleState>, get: GetState<ExampleState>) => ({
+      num: 1,
+      numGet: () => get().num,
+      numGetState: () => storeApi.getState().num,
+      numSet: (v: number) => set({ num: v }),
+      numSetState: (v: number) => storeApi.setState({ num: v }),
+    })
+  )
+
+  function checkAllTypes(
+    getState: GetState<ExampleState>,
+    partialState: PartialState<ExampleState>,
+    setState: SetState<ExampleState>,
+    state: State,
+    stateListener: StateListener<ExampleState>,
+    stateSelector: StateSelector<ExampleState, number>,
+    storeApi: StoreApi<ExampleState>,
+    subscribe: Subscribe<ExampleState>,
+    useStore: UseStore<ExampleState>
+  ) {
+    expect(true).toBeTruthy()
+  }
+
+  checkAllTypes(
+    storeApi.getState,
+    Math.random() > 0.5 ? partial : partialFn,
+    storeApi.setState,
+    storeApi.getState(),
+    listener,
+    selector,
+    storeApi,
+    storeApi.subscribe,
+    useStore
+  )
+})"
pmndrs_zustand,9d6be42f378411b4f4ffde6ab47c62f27969b487,Merge pull request #22 from Luxizzle/improve-typescript  Improve Typescript types and generics,src/index.ts,,"-type StateListener<T> = (state: T) => void
-type StateSelector<T, U> = (state: T) => U
-type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+export type StateListener<T> = (state: T) => void
+export type StateSelector<T, U> = (state: T) => U
+export type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+
+export type State = Record<string, any>
+export type SetState<T> = (partialState: PartialState<T>) => void
+export type GetState<T> = () => T
+
+export type UseStore<T> = {
+  (): T
+  <U>(selector: StateSelector<T, U>, dependencies?: ReadonlyArray<any>): U
+}
+
+export interface StoreApi<T> {
+  getState: GetState<T>
+  setState: SetState<T>
+  subscribe: (listener: StateListener<T>) => () => void
+  destroy: () => void
+}
-export default function create<
-  State extends Record<string, any>,
-  SetState extends (partialState: PartialState<Record<string, any>>) => void,
-  GetState extends () => Record<string, any>
->(createState: (set: SetState, get: GetState) => State) {
-  const listeners: Set<StateListener<State>> = new Set()
+export default function create<TState extends State>(
+  createState: (set: SetState<State>, get: GetState<State>) => TState
+): [UseStore<TState>, StoreApi<TState>] {
+  const listeners: Set<StateListener<TState>> = new Set()
-  const setState = (partialState: PartialState<State>) => {
+  const setState = (partialState: PartialState<TState>) => {
-  const subscribe = (listener: StateListener<State>) => {
+  const subscribe = (listener: StateListener<TState>) => {
-    state = {} as State
+    state = {} as TState
-  function useStore(): State
+  function useStore(): TState
-    selector: StateSelector<State, U>,
+    selector: StateSelector<TState, U>,
-    selector?: StateSelector<State, U>,
+    selector?: StateSelector<TState, U>,
-  ) {
+  ): TState | U {
-  let state = createState(setState as SetState, getState as GetState)
+  let state = createState(
+    setState as SetState<State>,
+    getState as GetState<State>
+  )
-  return [useStore, api] as [typeof useStore, typeof api]
+  return [useStore, api]","-type StateListener<T> = (state: T) => void
-type StateSelector<T, U> = (state: T) => U
-type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+export type StateListener<T> = (state: T) => void
+export type StateSelector<T, U> = (state: T) => U
+export type PartialState<T> = Partial<T> | ((state: T) => Partial<T>)
+
+export type State = Record<string, any>
+export type SetState<T> = (partialState: PartialState<T>) => void
+export type GetState<T> = () => T
+
+export type UseStore<T> = {
+  (): T
+  <U>(selector: StateSelector<T, U>, dependencies?: ReadonlyArray<any>): U
+}
+
+export interface StoreApi<T> {
+  getState: GetState<T>
+  setState: SetState<T>
+  subscribe: (listener: StateListener<T>) => () => void
+  destroy: () => void
+}
-export default function create<
-  State extends Record<string, any>,
-  SetState extends (partialState: PartialState<Record<string, any>>) => void,
-  GetState extends () => Record<string, any>
->(createState: (set: SetState, get: GetState) => State) {
-  const listeners: Set<StateListener<State>> = new Set()
+export default function create<TState extends State>(
+  createState: (set: SetState<State>, get: GetState<State>) => TState
+): [UseStore<TState>, StoreApi<TState>] {
+  const listeners: Set<StateListener<TState>> = new Set()
-  const setState = (partialState: PartialState<State>) => {
+  const setState = (partialState: PartialState<TState>) => {
-  const subscribe = (listener: StateListener<State>) => {
+  const subscribe = (listener: StateListener<TState>) => {
-    state = {} as State
+    state = {} as TState
-  function useStore(): State
+  function useStore(): TState
-    selector: StateSelector<State, U>,
+    selector: StateSelector<TState, U>,
-    selector?: StateSelector<State, U>,
+    selector?: StateSelector<TState, U>,
-  ) {
+  ): TState | U {
-  let state = createState(setState as SetState, getState as GetState)
+  let state = createState(
+    setState as SetState<State>,
+    getState as GetState<State>
+  )
-  return [useStore, api] as [typeof useStore, typeof api]
+  return [useStore, api]"
pmndrs_zustand,93a54a79a0cd0d267cd0f05cf6836a692aac12af,Merge pull request #20 from JeremyRH/master   Fix deps ref and add documentation,.size-snapshot.json,,"-    ""bundled"": 2756,
-    ""minified"": 989,
-    ""gzipped"": 509,
+    ""bundled"": 2627,
+    ""minified"": 963,
+    ""gzipped"": 506,
-    ""bundled"": 3079,
-    ""minified"": 1126,
-    ""gzipped"": 527
+    ""bundled"": 2875,
+    ""minified"": 1082,
+    ""gzipped"": 528","-    ""bundled"": 2756,
-    ""minified"": 989,
-    ""gzipped"": 509,
+    ""bundled"": 2627,
+    ""minified"": 963,
+    ""gzipped"": 506,
-    ""bundled"": 3079,
-    ""minified"": 1126,
-    ""gzipped"": 527
+    ""bundled"": 2875,
+    ""minified"": 1082,
+    ""gzipped"": 528"
pmndrs_zustand,93a54a79a0cd0d267cd0f05cf6836a692aac12af,Merge pull request #20 from JeremyRH/master   Fix deps ref and add documentation,src/index.ts,,"-import { useEffect, useReducer, useRef } from 'react'
+import { useCallback, useLayoutEffect, useReducer, useRef } from 'react'
-    const selectState = typeof selector === 'function' ? selector : getState
+    const stateSelector = typeof selector === 'function' ? selector : getState
+    const selectState = useCallback(
+      stateSelector,
+      dependencies as ReadonlyArray<any>
+    )
-    const dependenciesRef = useRef(dependencies)
-    // Call new selector if no dependencies were passed in and selector has changed or dependencies were passed in and have changed
-    if (
-      (!dependencies && selectState !== selectStateRef.current) ||
-      !shallowEqual(dependencies, dependenciesRef.current)
-    )
-      stateSlice = selectState(state)
+    // Call new selector if it has changed
+    if (selectState !== selectStateRef.current) stateSlice = selectState(state)
-    useEffect(() => void (selectStateRef.current = selectState), [selectState])
-    useEffect(() => void (stateSliceRef.current = stateSlice), [stateSlice])
+    useLayoutEffect(() => {
+      selectStateRef.current = selectState
+      stateSliceRef.current = stateSlice
+    }, [selectState, stateSlice])
-    useEffect(() => {
+    useLayoutEffect(() => {","-import { useEffect, useReducer, useRef } from 'react'
+import { useCallback, useLayoutEffect, useReducer, useRef } from 'react'
-    const selectState = typeof selector === 'function' ? selector : getState
+    const stateSelector = typeof selector === 'function' ? selector : getState
+    const selectState = useCallback(
+      stateSelector,
+      dependencies as ReadonlyArray<any>
+    )
-    const dependenciesRef = useRef(dependencies)
-    // Call new selector if no dependencies were passed in and selector has changed or dependencies were passed in and have changed
-    if (
-      (!dependencies && selectState !== selectStateRef.current) ||
-      !shallowEqual(dependencies, dependenciesRef.current)
-    )
-      stateSlice = selectState(state)
+    // Call new selector if it has changed
+    if (selectState !== selectStateRef.current) stateSlice = selectState(state)
-    useEffect(() => void (selectStateRef.current = selectState), [selectState])
-    useEffect(() => void (stateSliceRef.current = stateSlice), [stateSlice])
+    useLayoutEffect(() => {
+      selectStateRef.current = selectState
+      stateSliceRef.current = stateSlice
+    }, [selectState, stateSlice])
-    useEffect(() => {
+    useLayoutEffect(() => {"
pmndrs_zustand,7d06cdfb0eb7688c5303ed7111e16ac6126901cb,Merge pull request #19 from JeremyRH/master  Update state slice when selector changes,.size-snapshot.json,,"-    ""bundled"": 2417,
-    ""minified"": 898,
-    ""gzipped"": 470,
+    ""bundled"": 2756,
+    ""minified"": 989,
+    ""gzipped"": 509,
-    ""bundled"": 2888,
-    ""minified"": 1140,
-    ""gzipped"": 540
+    ""bundled"": 3079,
+    ""minified"": 1126,
+    ""gzipped"": 527","-    ""bundled"": 2417,
-    ""minified"": 898,
-    ""gzipped"": 470,
+    ""bundled"": 2756,
+    ""minified"": 989,
+    ""gzipped"": 509,
-    ""bundled"": 2888,
-    ""minified"": 1140,
-    ""gzipped"": 540
+    ""bundled"": 3079,
+    ""minified"": 1126,
+    ""gzipped"": 527"
pmndrs_zustand,7d06cdfb0eb7688c5303ed7111e16ac6126901cb,Merge pull request #19 from JeremyRH/master  Update state slice when selector changes,src/index.ts,,"-import React from 'react'
+import { useEffect, useReducer, useRef } from 'react'
+
+const reducer = <T>(state: any, newState: T) => newState
-  function useStore<U>(selector: StateSelector<State, U>): U
-  function useStore<U>(selector?: StateSelector<State, U>) {
-    // Gets entire state if no selector was passed in
+  function useStore<U>(
+    selector: StateSelector<State, U>,
+    dependencies?: ReadonlyArray<any>
+  ): U
+  function useStore<U>(
+    selector?: StateSelector<State, U>,
+    dependencies?: ReadonlyArray<any>
+  ) {
+    // State selector gets entire state if no selector was passed in
-    // Using functional initial b/c selected itself could be a function
-    const [stateSlice, setStateSlice] = React.useState(() => selectState(state))
-    // Prevent useEffect from needing to run when values change by storing them in a ref object
-    const refs = React.useRef({ stateSlice, selectState }).current
+    const selectStateRef = useRef(selectState)
+    const dependenciesRef = useRef(dependencies)
+    let [stateSlice, dispatch] = useReducer(reducer, state, selectState)
-    // Update refs when needed and only after view has been updated
-    React.useEffect(() => {
-      refs.stateSlice = stateSlice
-      refs.selectState = selectState
-    }, [stateSlice, selectState])
+    // Call new selector if no dependencies were passed in and selector has changed or dependencies were passed in and have changed
+    if (
+      (!dependencies && selectState !== selectStateRef.current) ||
+      !shallowEqual(dependencies, dependenciesRef.current)
+    )
+      stateSlice = selectState(state)
+
+    // Store in ref to enable updating without rerunning subscribe/unsubscribe
+    const stateSliceRef = useRef(stateSlice)
+
+    // Update refs only after view has been updated
+    useEffect(() => void (selectStateRef.current = selectState), [selectState])
+    useEffect(() => void (stateSliceRef.current = stateSlice), [stateSlice])
-    React.useEffect(() => {
+    useEffect(() => {
-        // Get fresh selected state
-        const selected = refs.selectState(state)
-        if (!shallowEqual(refs.stateSlice, selected))
-          // Refresh local slice, functional initial b/c selected itself could be a function
-          setStateSlice(() => selected)
+        // Use the last selector passed to useStore to get current state slice
+        const selectedSlice = selectStateRef.current(state)
+        // Shallow compare previous state slice with current and rerender only if changed
+        if (!shallowEqual(stateSliceRef.current, selectedSlice))
+          dispatch(selectedSlice)
-    // Returning the selected state slice
-  const result: [typeof useStore, typeof api] = [useStore, api]
-  return result
+  return [useStore, api] as [typeof useStore, typeof api]","-import React from 'react'
+import { useEffect, useReducer, useRef } from 'react'
+
+const reducer = <T>(state: any, newState: T) => newState
-  function useStore<U>(selector: StateSelector<State, U>): U
-  function useStore<U>(selector?: StateSelector<State, U>) {
-    // Gets entire state if no selector was passed in
+  function useStore<U>(
+    selector: StateSelector<State, U>,
+    dependencies?: ReadonlyArray<any>
+  ): U
+  function useStore<U>(
+    selector?: StateSelector<State, U>,
+    dependencies?: ReadonlyArray<any>
+  ) {
+    // State selector gets entire state if no selector was passed in
-    // Using functional initial b/c selected itself could be a function
-    const [stateSlice, setStateSlice] = React.useState(() => selectState(state))
-    // Prevent useEffect from needing to run when values change by storing them in a ref object
-    const refs = React.useRef({ stateSlice, selectState }).current
+    const selectStateRef = useRef(selectState)
+    const dependenciesRef = useRef(dependencies)
+    let [stateSlice, dispatch] = useReducer(reducer, state, selectState)
-    // Update refs when needed and only after view has been updated
-    React.useEffect(() => {
-      refs.stateSlice = stateSlice
-      refs.selectState = selectState
-    }, [stateSlice, selectState])
+    // Call new selector if no dependencies were passed in and selector has changed or dependencies were passed in and have changed
+    if (
+      (!dependencies && selectState !== selectStateRef.current) ||
+      !shallowEqual(dependencies, dependenciesRef.current)
+    )
+      stateSlice = selectState(state)
+
+    // Store in ref to enable updating without rerunning subscribe/unsubscribe
+    const stateSliceRef = useRef(stateSlice)
+
+    // Update refs only after view has been updated
+    useEffect(() => void (selectStateRef.current = selectState), [selectState])
+    useEffect(() => void (stateSliceRef.current = stateSlice), [stateSlice])
-    React.useEffect(() => {
+    useEffect(() => {
-        // Get fresh selected state
-        const selected = refs.selectState(state)
-        if (!shallowEqual(refs.stateSlice, selected))
-          // Refresh local slice, functional initial b/c selected itself could be a function
-          setStateSlice(() => selected)
+        // Use the last selector passed to useStore to get current state slice
+        const selectedSlice = selectStateRef.current(state)
+        // Shallow compare previous state slice with current and rerender only if changed
+        if (!shallowEqual(stateSliceRef.current, selectedSlice))
+          dispatch(selectedSlice)
-    // Returning the selected state slice
-  const result: [typeof useStore, typeof api] = [useStore, api]
-  return result
+  return [useStore, api] as [typeof useStore, typeof api]"
pmndrs_zustand,7d06cdfb0eb7688c5303ed7111e16ac6126901cb,Merge pull request #19 from JeremyRH/master  Update state slice when selector changes,tests/test.tsx,,"-import React, { useEffect } from 'react'
+import React from 'react'
+import { act } from 'react-dom/test-utils'
-it('updates the store', () => {
-  expect.assertions(2)
-
+it('updates the store', async () => {
-  let renderCount = 0
-    renderCount++
-
-    useEffect(dec, [])
-
-    if (renderCount === 1) {
-      expect(count).toBe(1)
-    } else {
-      expect(count).toBe(0)
-    }
-
-    return <div>{count}</div>
+    React.useEffect(dec, [])
+    return <div>count: {count}</div>
-  render(<Counter />)
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 0'))
+
+it('can update the selector even when the store does not change', async () => {
+  const [useStore] = create(() => ({
+    one: 'one',
+    two: 'two',
+  }))
+
+  function Component({ selector }) {
+    return <div>{useStore(selector)}</div>
+  }
+
+  const { getByText, rerender } = render(<Component selector={s => s.one} />)
+  await waitForElement(() => getByText('one'))
+
+  rerender(<Component selector={s => s.two} />)
+  await waitForElement(() => getByText('two'))
+})
+
+it('can pass optional dependencies to restrict selector calls', () => {
+  const [useStore] = create(() => ({}))
+  let selectorCallCount = 0
+
+  function Component({ deps }) {
+    useStore(() => {
+      selectorCallCount++
+    }, deps)
+    return <div>{selectorCallCount}</div>
+  }
+
+  const { rerender } = render(<Component deps={[true]} />)
+  expect(selectorCallCount).toBe(1)
+
+  rerender(<Component deps={[true]} />)
+  expect(selectorCallCount).toBe(1)
+
+  rerender(<Component deps={[false]} />)
+  expect(selectorCallCount).toBe(2)
+})
+
+it('can update state without updating dependencies', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+
+  function Component() {
+    const { value } = useStore(state => state, [])
+    return <div>value: {value}</div>
+  }
+
+  const { getByText } = render(<Component />)
+  await waitForElement(() => getByText('value: 0'))
+
+  act(() => {
+    setState({ value: 1 })
+  })
+  await waitForElement(() => getByText('value: 1'))
+})","-import React, { useEffect } from 'react'
+import React from 'react'
+import { act } from 'react-dom/test-utils'
-it('updates the store', () => {
-  expect.assertions(2)
-
+it('updates the store', async () => {
-  let renderCount = 0
-    renderCount++
-
-    useEffect(dec, [])
-
-    if (renderCount === 1) {
-      expect(count).toBe(1)
-    } else {
-      expect(count).toBe(0)
-    }
-
-    return <div>{count}</div>
+    React.useEffect(dec, [])
+    return <div>count: {count}</div>
-  render(<Counter />)
+  const { getByText } = render(<Counter />)
+
+  await waitForElement(() => getByText('count: 0'))
+
+it('can update the selector even when the store does not change', async () => {
+  const [useStore] = create(() => ({
+    one: 'one',
+    two: 'two',
+  }))
+
+  function Component({ selector }) {
+    return <div>{useStore(selector)}</div>
+  }
+
+  const { getByText, rerender } = render(<Component selector={s => s.one} />)
+  await waitForElement(() => getByText('one'))
+
+  rerender(<Component selector={s => s.two} />)
+  await waitForElement(() => getByText('two'))
+})
+
+it('can pass optional dependencies to restrict selector calls', () => {
+  const [useStore] = create(() => ({}))
+  let selectorCallCount = 0
+
+  function Component({ deps }) {
+    useStore(() => {
+      selectorCallCount++
+    }, deps)
+    return <div>{selectorCallCount}</div>
+  }
+
+  const { rerender } = render(<Component deps={[true]} />)
+  expect(selectorCallCount).toBe(1)
+
+  rerender(<Component deps={[true]} />)
+  expect(selectorCallCount).toBe(1)
+
+  rerender(<Component deps={[false]} />)
+  expect(selectorCallCount).toBe(2)
+})
+
+it('can update state without updating dependencies', async () => {
+  const [useStore, { setState }] = create(() => ({ value: 0 }))
+
+  function Component() {
+    const { value } = useStore(state => state, [])
+    return <div>value: {value}</div>
+  }
+
+  const { getByText } = render(<Component />)
+  await waitForElement(() => getByText('value: 0'))
+
+  act(() => {
+    setState({ value: 1 })
+  })
+  await waitForElement(() => getByText('value: 1'))
+})"
pmndrs_zustand,ce8d7f03c1e2544dfd3f718bb6d1ecbacdeaba97,"Merge pull request #16 from JeremyRH/master  Update refs in useEffect, add more tests, fix pre-commit lint",.size-snapshot.json,,"-    ""bundled"": 2298,
-    ""minified"": 910,
-    ""gzipped"": 483,
+    ""bundled"": 2417,
+    ""minified"": 898,
+    ""gzipped"": 470,
-    ""bundled"": 2763,
-    ""minified"": 1146,
-    ""gzipped"": 545
+    ""bundled"": 2888,
+    ""minified"": 1140,
+    ""gzipped"": 540","-    ""bundled"": 2298,
-    ""minified"": 910,
-    ""gzipped"": 483,
+    ""bundled"": 2417,
+    ""minified"": 898,
+    ""gzipped"": 470,
-    ""bundled"": 2763,
-    ""minified"": 1146,
-    ""gzipped"": 545
+    ""bundled"": 2888,
+    ""minified"": 1140,
+    ""gzipped"": 540"
pmndrs_zustand,ce8d7f03c1e2544dfd3f718bb6d1ecbacdeaba97,"Merge pull request #16 from JeremyRH/master  Update refs in useEffect, add more tests, fix pre-commit lint",package.json,,"-    ""*.{js,}"": [
+    ""*.{js,ts,tsx}"": [","-    ""*.{js,}"": [
+    ""*.{js,ts,tsx}"": ["
pmndrs_zustand,ce8d7f03c1e2544dfd3f718bb6d1ecbacdeaba97,"Merge pull request #16 from JeremyRH/master  Update refs in useEffect, add more tests, fix pre-commit lint",src/index.ts,,"-    if (refs.stateSlice !== stateSlice) refs.stateSlice = stateSlice
-    if (refs.selectState !== selectState) refs.selectState = selectState
+    // Update refs when needed and only after view has been updated
+    React.useEffect(() => {
+      refs.stateSlice = stateSlice
+      refs.selectState = selectState
+    }, [stateSlice, selectState])
+    // Subscribe/unsubscribe to the store only on mount/unmount","-    if (refs.stateSlice !== stateSlice) refs.stateSlice = stateSlice
-    if (refs.selectState !== selectState) refs.selectState = selectState
+    // Update refs when needed and only after view has been updated
+    React.useEffect(() => {
+      refs.stateSlice = stateSlice
+      refs.selectState = selectState
+    }, [stateSlice, selectState])
+    // Subscribe/unsubscribe to the store only on mount/unmount"
pmndrs_zustand,ce8d7f03c1e2544dfd3f718bb6d1ecbacdeaba97,"Merge pull request #16 from JeremyRH/master  Update refs in useEffect, add more tests, fix pre-commit lint",tests/test.tsx,,"+
+it('can get the store', () => {
+  const [, { getState }] = create((set, get) => ({
+    value: 1,
+    getState1: get,
+    getState2: () => getState(),
+  }))
+
+  expect(getState().getState1().value).toBe(1)
+  expect(getState().getState2().value).toBe(1)
+})
+
+it('can set the store', () => {
+  const [, { getState, setState }] = create(set => ({
+    value: 1,
+    setState1: set,
+    setState2: newState => setState(newState),
+  }))
+
+  getState().setState1({ ...getState(), value: 2 })
+  expect(getState().value).toBe(2)
+  getState().setState2({ ...getState(), value: 3 })
+  expect(getState().value).toBe(3)
+})
+
+it('can subscribe to the store', () => {
+  expect.assertions(2)
+
+  const [, { setState, subscribe }] = create(() => ({ value: 1 }))
+
+  const unsub1 = subscribe(newState => {
+    expect(newState.value).toBe(2)
+    unsub1()
+  })
+  const unsub2 = subscribe(newState => {
+    expect(newState.value).toBe(2)
+    unsub2()
+  })
+
+  setState({ value: 2 })
+})
+
+it('can destroy the store', () => {
+  const [, { destroy, getState, setState, subscribe }] = create(() => ({
+    value: 1,
+  }))
+
+  subscribe(() => {
+    throw new Error('did not clear listener on destroy')
+  })
+  destroy()
+
+  // should this throw?
+  setState({ value: 2 })
+  expect(getState().value).toEqual(2)
+})","+
+it('can get the store', () => {
+  const [, { getState }] = create((set, get) => ({
+    value: 1,
+    getState1: get,
+    getState2: () => getState(),
+  }))
+
+  expect(getState().getState1().value).toBe(1)
+  expect(getState().getState2().value).toBe(1)
+})
+
+it('can set the store', () => {
+  const [, { getState, setState }] = create(set => ({
+    value: 1,
+    setState1: set,
+    setState2: newState => setState(newState),
+  }))
+
+  getState().setState1({ ...getState(), value: 2 })
+  expect(getState().value).toBe(2)
+  getState().setState2({ ...getState(), value: 3 })
+  expect(getState().value).toBe(3)
+})
+
+it('can subscribe to the store', () => {
+  expect.assertions(2)
+
+  const [, { setState, subscribe }] = create(() => ({ value: 1 }))
+
+  const unsub1 = subscribe(newState => {
+    expect(newState.value).toBe(2)
+    unsub1()
+  })
+  const unsub2 = subscribe(newState => {
+    expect(newState.value).toBe(2)
+    unsub2()
+  })
+
+  setState({ value: 2 })
+})
+
+it('can destroy the store', () => {
+  const [, { destroy, getState, setState, subscribe }] = create(() => ({
+    value: 1,
+  }))
+
+  subscribe(() => {
+    throw new Error('did not clear listener on destroy')
+  })
+  destroy()
+
+  // should this throw?
+  setState({ value: 2 })
+  expect(getState().value).toEqual(2)
+})"
pmndrs_zustand,c29568a1ceb3409a9b0c09882b5e88ff553f826e,resolve merge conflict,.size-snapshot.json,,"-  ""dist/index.js"": {
-    ""bundled"": 1877,
-    ""minified"": 829,
-    ""gzipped"": 394,
+  ""dist/esm/index.js"": {
+    ""bundled"": 2298,
+    ""minified"": 910,
+    ""gzipped"": 483,
-  ""dist/index.cjs.js"": {
-    ""bundled"": 2665,
-    ""minified"": 1184,
-    ""gzipped"": 469
+  ""dist/cjs/index.js"": {
+    ""bundled"": 2763,
+    ""minified"": 1146,
+    ""gzipped"": 545","-  ""dist/index.js"": {
-    ""bundled"": 1877,
-    ""minified"": 829,
-    ""gzipped"": 394,
+  ""dist/esm/index.js"": {
+    ""bundled"": 2298,
+    ""minified"": 910,
+    ""gzipped"": 483,
-  ""dist/index.cjs.js"": {
-    ""bundled"": 2665,
-    ""minified"": 1184,
-    ""gzipped"": 469
+  ""dist/cjs/index.js"": {
+    ""bundled"": 2763,
+    ""minified"": 1146,
+    ""gzipped"": 545"
pmndrs_zustand,c29568a1ceb3409a9b0c09882b5e88ff553f826e,resolve merge conflict,package.json,"-  ""version"": ""0.0.5"",
+  ""version"": ""0.0.6"",","-  ""version"": ""0.0.5"",
+  ""version"": ""0.1.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
+  ""main"": ""dist/cjs/index.js"",
+  ""module"": ""dist/esm/index.js"",
+  ""files"": [
+    ""dist/**""
+  ],
-    ""prepare"": ""npm run build"",
+    ""prepare"": ""npm run build --scripts-prepend-node-path"",
-      ""src/**/*.js"",
-      ""tests/**/*.js""
+      ""src/**/*.{js,ts,tsx}"",
+      ""tests/**/*.{js,ts,tsx}""
-    ""@babel/core"": ""7.3.4"",
-    ""@babel/plugin-transform-modules-commonjs"": ""7.2.0"",
-    ""@babel/plugin-transform-parameters"": ""7.3.3"",
-    ""@babel/plugin-transform-runtime"": ""7.3.4"",
-    ""@babel/plugin-transform-template-literals"": ""7.2.0"",
-    ""@babel/preset-env"": ""7.3.4"",
-    ""@babel/preset-react"": ""7.0.0"",
-    ""@babel/preset-typescript"": ""^7.3.3"",
+    ""@babel/core"": ""^7.4.3"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.3.0"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
+    ""@babel/preset-env"": ""^7.4.3"",
+    ""@types/jest"": ""^24.0.11"",
+    ""@types/react"": ""^16.8.13"",
-    ""prettier"": ""^1.16.4"",
+    ""prettier"": ""^1.17.0"",
-    ""rollup"": ""^1.9.0"",
+    ""rollup"": ""^1.10.0"",
-    ""rollup-plugin-node-resolve"": ""^4.2.1"",
+    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""typescript"": ""^3.4.2""
+    ""rollup-plugin-typescript2"": ""^0.20.1"",
+    ""typescript"": ""^3.4.3""","-  ""version"": ""0.0.5"",
+  ""version"": ""0.1.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
+  ""main"": ""dist/cjs/index.js"",
+  ""module"": ""dist/esm/index.js"",
+  ""files"": [
+    ""dist/**""
+  ],
-    ""prepare"": ""npm run build"",
+    ""prepare"": ""npm run build --scripts-prepend-node-path"",
-      ""src/**/*.js"",
-      ""tests/**/*.js""
+      ""src/**/*.{js,ts,tsx}"",
+      ""tests/**/*.{js,ts,tsx}""
-    ""@babel/core"": ""7.3.4"",
-    ""@babel/plugin-transform-modules-commonjs"": ""7.2.0"",
-    ""@babel/plugin-transform-parameters"": ""7.3.3"",
-    ""@babel/plugin-transform-runtime"": ""7.3.4"",
-    ""@babel/plugin-transform-template-literals"": ""7.2.0"",
-    ""@babel/preset-env"": ""7.3.4"",
-    ""@babel/preset-react"": ""7.0.0"",
-    ""@babel/preset-typescript"": ""^7.3.3"",
+    ""@babel/core"": ""^7.4.3"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.3.0"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
+    ""@babel/preset-env"": ""^7.4.3"",
+    ""@types/jest"": ""^24.0.11"",
+    ""@types/react"": ""^16.8.13"",
-    ""prettier"": ""^1.16.4"",
+    ""prettier"": ""^1.17.0"",
-    ""rollup"": ""^1.9.0"",
+    ""rollup"": ""^1.10.0"",
-    ""rollup-plugin-node-resolve"": ""^4.2.1"",
+    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""typescript"": ""^3.4.2""
+    ""rollup-plugin-typescript2"": ""^0.20.1"",
+    ""typescript"": ""^3.4.3"""
pmndrs_zustand,c29568a1ceb3409a9b0c09882b5e88ff553f826e,resolve merge conflict,rollup.config.js,,"+import typescript from 'rollup-plugin-typescript2'
+const getBabelRc = require('./.babelrc.js')
-const extensions = ['.js', '.jsx', '.ts', '.tsx']
-const getBabelOptions = ({ useESModules }, targets) => ({
+const extensions = ['.js', '.ts', '.tsx']
+const getBabelOptions = targets => ({
-  exclude: '**/node_modules/**',
-  presets: [
-    ['@babel/preset-env', { loose: true, modules: false, targets }],
-    '@babel/preset-react',
-    '@babel/preset-typescript',
-  ],
+  ...getBabelRc({ env: v => v === 'production' }, targets),
-      output: { file: `dist/${out}.js`, format: 'esm' },
+      output: { file: `dist/esm/${out}.js`, format: 'esm' },
-        babel(
-          getBabelOptions({ useESModules: true }, 'last 2 chrome versions')
-        ),
+        typescript(),
+        babel(getBabelOptions('last 2 chrome versions')),
-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/cjs/${out}.js`, format: 'cjs' },
-        babel(getBabelOptions({ useESModules: false })),
+        typescript(),
+        babel(getBabelOptions()),
-export default [...createConfig('src/index', 'index')]
+export default [...createConfig('src/index.ts', 'index')]","+import typescript from 'rollup-plugin-typescript2'
+const getBabelRc = require('./.babelrc.js')
-const extensions = ['.js', '.jsx', '.ts', '.tsx']
-const getBabelOptions = ({ useESModules }, targets) => ({
+const extensions = ['.js', '.ts', '.tsx']
+const getBabelOptions = targets => ({
-  exclude: '**/node_modules/**',
-  presets: [
-    ['@babel/preset-env', { loose: true, modules: false, targets }],
-    '@babel/preset-react',
-    '@babel/preset-typescript',
-  ],
+  ...getBabelRc({ env: v => v === 'production' }, targets),
-      output: { file: `dist/${out}.js`, format: 'esm' },
+      output: { file: `dist/esm/${out}.js`, format: 'esm' },
-        babel(
-          getBabelOptions({ useESModules: true }, 'last 2 chrome versions')
-        ),
+        typescript(),
+        babel(getBabelOptions('last 2 chrome versions')),
-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/cjs/${out}.js`, format: 'cjs' },
-        babel(getBabelOptions({ useESModules: false })),
+        typescript(),
+        babel(getBabelOptions()),
-export default [...createConfig('src/index', 'index')]
+export default [...createConfig('src/index.ts', 'index')]"
pmndrs_zustand,5e6b5d61866da05b0c706f05d827369154f4cb6d,Merge pull request #12 from JeremyRH/master  Convert to TypeScript,.size-snapshot.json,,"-  ""dist/index.js"": {
-    ""bundled"": 1877,
-    ""minified"": 829,
-    ""gzipped"": 394,
+  ""dist/esm/index.js"": {
+    ""bundled"": 2298,
+    ""minified"": 910,
+    ""gzipped"": 483,
-  ""dist/index.cjs.js"": {
-    ""bundled"": 2665,
-    ""minified"": 1184,
-    ""gzipped"": 469
+  ""dist/cjs/index.js"": {
+    ""bundled"": 2763,
+    ""minified"": 1146,
+    ""gzipped"": 545","-  ""dist/index.js"": {
-    ""bundled"": 1877,
-    ""minified"": 829,
-    ""gzipped"": 394,
+  ""dist/esm/index.js"": {
+    ""bundled"": 2298,
+    ""minified"": 910,
+    ""gzipped"": 483,
-  ""dist/index.cjs.js"": {
-    ""bundled"": 2665,
-    ""minified"": 1184,
-    ""gzipped"": 469
+  ""dist/cjs/index.js"": {
+    ""bundled"": 2763,
+    ""minified"": 1146,
+    ""gzipped"": 545"
pmndrs_zustand,5e6b5d61866da05b0c706f05d827369154f4cb6d,Merge pull request #12 from JeremyRH/master  Convert to TypeScript,package.json,,"-  ""version"": ""0.0.5"",
+  ""version"": ""0.1.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
+  ""main"": ""dist/cjs/index.js"",
+  ""module"": ""dist/esm/index.js"",
+  ""files"": [
+    ""dist/**""
+  ],
-    ""prepare"": ""npm run build"",
+    ""prepare"": ""npm run build --scripts-prepend-node-path"",
-      ""src/**/*.js"",
-      ""tests/**/*.js""
+      ""src/**/*.{js,ts,tsx}"",
+      ""tests/**/*.{js,ts,tsx}""
-    ""@babel/core"": ""7.3.4"",
-    ""@babel/plugin-transform-modules-commonjs"": ""7.2.0"",
-    ""@babel/plugin-transform-parameters"": ""7.3.3"",
-    ""@babel/plugin-transform-runtime"": ""7.3.4"",
-    ""@babel/plugin-transform-template-literals"": ""7.2.0"",
-    ""@babel/preset-env"": ""7.3.4"",
-    ""@babel/preset-react"": ""7.0.0"",
-    ""@babel/preset-typescript"": ""^7.3.3"",
+    ""@babel/core"": ""^7.4.3"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.3.0"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
+    ""@babel/preset-env"": ""^7.4.3"",
+    ""@types/jest"": ""^24.0.11"",
+    ""@types/react"": ""^16.8.13"",
-    ""prettier"": ""^1.16.4"",
+    ""prettier"": ""^1.17.0"",
-    ""rollup"": ""^1.9.0"",
+    ""rollup"": ""^1.10.0"",
-    ""rollup-plugin-node-resolve"": ""^4.2.1"",
+    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""typescript"": ""^3.4.2""
+    ""rollup-plugin-typescript2"": ""^0.20.1"",
+    ""typescript"": ""^3.4.3""","-  ""version"": ""0.0.5"",
+  ""version"": ""0.1.0"",
-  ""main"": ""dist/index.cjs.js"",
-  ""module"": ""dist/index.js"",
+  ""main"": ""dist/cjs/index.js"",
+  ""module"": ""dist/esm/index.js"",
+  ""files"": [
+    ""dist/**""
+  ],
-    ""prepare"": ""npm run build"",
+    ""prepare"": ""npm run build --scripts-prepend-node-path"",
-      ""src/**/*.js"",
-      ""tests/**/*.js""
+      ""src/**/*.{js,ts,tsx}"",
+      ""tests/**/*.{js,ts,tsx}""
-    ""@babel/core"": ""7.3.4"",
-    ""@babel/plugin-transform-modules-commonjs"": ""7.2.0"",
-    ""@babel/plugin-transform-parameters"": ""7.3.3"",
-    ""@babel/plugin-transform-runtime"": ""7.3.4"",
-    ""@babel/plugin-transform-template-literals"": ""7.2.0"",
-    ""@babel/preset-env"": ""7.3.4"",
-    ""@babel/preset-react"": ""7.0.0"",
-    ""@babel/preset-typescript"": ""^7.3.3"",
+    ""@babel/core"": ""^7.4.3"",
+    ""@babel/plugin-transform-modules-commonjs"": ""^7.4.3"",
+    ""@babel/plugin-transform-react-jsx"": ""^7.3.0"",
+    ""@babel/plugin-transform-typescript"": ""^7.4.0"",
+    ""@babel/preset-env"": ""^7.4.3"",
+    ""@types/jest"": ""^24.0.11"",
+    ""@types/react"": ""^16.8.13"",
-    ""prettier"": ""^1.16.4"",
+    ""prettier"": ""^1.17.0"",
-    ""rollup"": ""^1.9.0"",
+    ""rollup"": ""^1.10.0"",
-    ""rollup-plugin-node-resolve"": ""^4.2.1"",
+    ""rollup-plugin-node-resolve"": ""^4.2.3"",
-    ""typescript"": ""^3.4.2""
+    ""rollup-plugin-typescript2"": ""^0.20.1"",
+    ""typescript"": ""^3.4.3"""
pmndrs_zustand,5e6b5d61866da05b0c706f05d827369154f4cb6d,Merge pull request #12 from JeremyRH/master  Convert to TypeScript,rollup.config.js,,"+import typescript from 'rollup-plugin-typescript2'
+const getBabelRc = require('./.babelrc.js')
-const extensions = ['.js', '.jsx', '.ts', '.tsx']
-const getBabelOptions = ({ useESModules }, targets) => ({
+const extensions = ['.js', '.ts', '.tsx']
+const getBabelOptions = targets => ({
-  exclude: '**/node_modules/**',
-  presets: [
-    ['@babel/preset-env', { loose: true, modules: false, targets }],
-    '@babel/preset-react',
-    '@babel/preset-typescript',
-  ],
+  ...getBabelRc({ env: v => v === 'production' }, targets),
-      output: { file: `dist/${out}.js`, format: 'esm' },
+      output: { file: `dist/esm/${out}.js`, format: 'esm' },
-        babel(
-          getBabelOptions({ useESModules: true }, 'last 2 chrome versions')
-        ),
+        typescript(),
+        babel(getBabelOptions('last 2 chrome versions')),
-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/cjs/${out}.js`, format: 'cjs' },
-        babel(getBabelOptions({ useESModules: false })),
+        typescript(),
+        babel(getBabelOptions()),
-export default [...createConfig('src/index', 'index')]
+export default [...createConfig('src/index.ts', 'index')]","+import typescript from 'rollup-plugin-typescript2'
+const getBabelRc = require('./.babelrc.js')
-const extensions = ['.js', '.jsx', '.ts', '.tsx']
-const getBabelOptions = ({ useESModules }, targets) => ({
+const extensions = ['.js', '.ts', '.tsx']
+const getBabelOptions = targets => ({
-  exclude: '**/node_modules/**',
-  presets: [
-    ['@babel/preset-env', { loose: true, modules: false, targets }],
-    '@babel/preset-react',
-    '@babel/preset-typescript',
-  ],
+  ...getBabelRc({ env: v => v === 'production' }, targets),
-      output: { file: `dist/${out}.js`, format: 'esm' },
+      output: { file: `dist/esm/${out}.js`, format: 'esm' },
-        babel(
-          getBabelOptions({ useESModules: true }, 'last 2 chrome versions')
-        ),
+        typescript(),
+        babel(getBabelOptions('last 2 chrome versions')),
-      output: { file: `dist/${out}.cjs.js`, format: 'cjs' },
+      output: { file: `dist/cjs/${out}.js`, format: 'cjs' },
-        babel(getBabelOptions({ useESModules: false })),
+        typescript(),
+        babel(getBabelOptions()),
-export default [...createConfig('src/index', 'index')]
+export default [...createConfig('src/index.ts', 'index')]"
pmndrs_zustand,1394c366c0ab21f15005e24378ff8d435553cbcc,Merge pull request #8 from Dudeonyx/master  Switched to a better battle tested shallowEquality check,.size-snapshot.json,,"-    ""bundled"": 1904,
-    ""minified"": 852,
-    ""gzipped"": 408,
+    ""bundled"": 1877,
+    ""minified"": 829,
+    ""gzipped"": 394,
-    ""bundled"": 2692,
-    ""minified"": 1207,
-    ""gzipped"": 482
+    ""bundled"": 2665,
+    ""minified"": 1184,
+    ""gzipped"": 469","-    ""bundled"": 1904,
-    ""minified"": 852,
-    ""gzipped"": 408,
+    ""bundled"": 1877,
+    ""minified"": 829,
+    ""gzipped"": 394,
-    ""bundled"": 2692,
-    ""minified"": 1207,
-    ""gzipped"": 482
+    ""bundled"": 2665,
+    ""minified"": 1184,
+    ""gzipped"": 469"
pmndrs_zustand,1394c366c0ab21f15005e24378ff8d435553cbcc,Merge pull request #8 from Dudeonyx/master  Switched to a better battle tested shallowEquality check,src/index.js,,"-          // If state is not equal from the get go and not an atomic then shallow equal it
-          if (sliceRef.current !== selected && selected === Object(selected)) {
-            selected = Object.entries(selected).reduce(
-              (acc, [key, value]) =>
-                sliceRef.current[key] !== value
-                  ? Object.assign({}, acc, { [key]: value })
-                  : acc,
-              sliceRef.current
-            )
-          }
-          if (sliceRef.current !== selected) set(() => selected)
+          if (!shallowEqual(sliceRef.current, selected)) set(() => selected)
+
+const hasOwn = Object.prototype.hasOwnProperty
+function is(x, y) {
+  if (x === y) {
+    return x !== 0 || y !== 0 || 1 / x === 1 / y
+  } else {
+    return x !== x && y !== y
+  }
+}
+function shallowEqual(objA, objB) {
+  if (is(objA, objB)) {
+    return true
+  }
+  if (
+    typeof objA !== 'object' ||
+    objA === null ||
+    typeof objB !== 'object' ||
+    objB === null
+  ) {
+    return false
+  }
+  const keysA = Object.keys(objA)
+  const keysB = Object.keys(objB)
+  if (keysA.length !== keysB.length) {
+    return false
+  }
+  for (let i = 0; i < keysA.length; i++) {
+    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
+      return false
+    }
+  }
+  return true
+}","-          // If state is not equal from the get go and not an atomic then shallow equal it
-          if (sliceRef.current !== selected && selected === Object(selected)) {
-            selected = Object.entries(selected).reduce(
-              (acc, [key, value]) =>
-                sliceRef.current[key] !== value
-                  ? Object.assign({}, acc, { [key]: value })
-                  : acc,
-              sliceRef.current
-            )
-          }
-          if (sliceRef.current !== selected) set(() => selected)
+          if (!shallowEqual(sliceRef.current, selected)) set(() => selected)
+
+const hasOwn = Object.prototype.hasOwnProperty
+function is(x, y) {
+  if (x === y) {
+    return x !== 0 || y !== 0 || 1 / x === 1 / y
+  } else {
+    return x !== x && y !== y
+  }
+}
+function shallowEqual(objA, objB) {
+  if (is(objA, objB)) {
+    return true
+  }
+  if (
+    typeof objA !== 'object' ||
+    objA === null ||
+    typeof objB !== 'object' ||
+    objB === null
+  ) {
+    return false
+  }
+  const keysA = Object.keys(objA)
+  const keysB = Object.keys(objB)
+  if (keysA.length !== keysB.length) {
+    return false
+  }
+  for (let i = 0; i < keysA.length; i++) {
+    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
+      return false
+    }
+  }
+  return true
+}"
pmndrs_zustand,1394c366c0ab21f15005e24378ff8d435553cbcc,Merge pull request #8 from Dudeonyx/master  Switched to a better battle tested shallowEquality check,tests/test.js,,"-import React, { useEffect } from 'react'
+import React, { useEffect, useRef } from 'react'
+
+    const renderCount = useRef(0)
-
-    expect(count).toBe(1)
+    useEffect(() => {
+      if (renderCount.current === 0) {
+        expect(count).toBe(1)
+      } else if (renderCount.current >= 1) {
+        expect(count).toBe(0)
+      }
+    })
+    useEffect(() => void ++renderCount.current)","-import React, { useEffect } from 'react'
+import React, { useEffect, useRef } from 'react'
+
+    const renderCount = useRef(0)
-
-    expect(count).toBe(1)
+    useEffect(() => {
+      if (renderCount.current === 0) {
+        expect(count).toBe(1)
+      } else if (renderCount.current >= 1) {
+        expect(count).toBe(0)
+      }
+    })
+    useEffect(() => void ++renderCount.current)"
