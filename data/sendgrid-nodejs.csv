repo,commit,commit_msg,file,left_diff,right_diff,merged_diff
sendgrid_sendgrid-nodejs,a724ae65881710bfbdd3d8d5769b2e42bfb402b7,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/eventwebhook/src/eventwebhook.d.ts,,"-import {PublicKey} from ""starkbank-ecdsa"";
+// From starkbank-ecdsa, minimal interface of PublicKey
+declare class PublicKey {
+  toString(encode?: boolean): string;
+  static fromPem(pem: string): PublicKey;
+  static fromDer(der: string): PublicKey;
+  static fromString(key: string): PublicKey;
+}","-import {PublicKey} from ""starkbank-ecdsa"";
+// From starkbank-ecdsa, minimal interface of PublicKey
+declare class PublicKey {
+  toString(encode?: boolean): string;
+  static fromPem(pem: string): PublicKey;
+  static fromDer(der: string): PublicKey;
+  static fromString(key: string): PublicKey;
+}"
sendgrid_sendgrid-nodejs,a724ae65881710bfbdd3d8d5769b2e42bfb402b7,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/mail.d.ts,,"+    enable?: boolean;
+  };
+  bypassSpamManagement?: {
+    enable?: boolean;
+  };
+  bypassBounceManagement?: {
+    enable?: boolean;
+  };
+  bypassUnsubscribeManagement?: {","+    enable?: boolean;
+  };
+  bypassSpamManagement?: {
+    enable?: boolean;
+  };
+  bypassBounceManagement?: {
+    enable?: boolean;
+  };
+  bypassUnsubscribeManagement?: {"
sendgrid_sendgrid-nodejs,a724ae65881710bfbdd3d8d5769b2e42bfb402b7,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/helpers/validate-settings.js,,"+      bypassSpamManagement,
+      bypassBounceManagement,
+      bypassUnsubscribeManagement,
+    validate(bypassSpamManagement, 'bypassSpamManagement', 'enable', 'boolean');
+    validate(bypassBounceManagement, 'bypassBounceManagement', 'enable', 'boolean');
+    validate(bypassUnsubscribeManagement, 'bypassUnsubscribeManagement', 'enable', 'boolean');","+      bypassSpamManagement,
+      bypassBounceManagement,
+      bypassUnsubscribeManagement,
+    validate(bypassSpamManagement, 'bypassSpamManagement', 'enable', 'boolean');
+    validate(bypassBounceManagement, 'bypassBounceManagement', 'enable', 'boolean');
+    validate(bypassUnsubscribeManagement, 'bypassUnsubscribeManagement', 'enable', 'boolean');"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,lerna.json,,"-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",","-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"","
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/client/package.json,,"-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""axios"": ""^0.21.4""
+    ""@sendgrid/helpers"": ""^7.6.2"",
+    ""axios"": ""^0.26.0""","-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""axios"": ""^0.21.4""
+    ""@sendgrid/helpers"": ""^7.6.2"",
+    ""axios"": ""^0.26.0"""
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/client/src/client.spec.js,,"-            value: '#'.repeat(1024 * 1024 * 25), // 25 MB,
+            value: '#'.repeat(1024 * 1024 * 10), // 10 MB,
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {","-            value: '#'.repeat(1024 * 1024 * 25), // 25 MB,
+            value: '#'.repeat(1024 * 1024 * 10), // 10 MB,
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/contact-importer/package.json,,"-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.7"",
+    ""@sendgrid/client"": ""^7.6.2"",","-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.7"",
+    ""@sendgrid/client"": ""^7.6.2"","
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/eventwebhook/src/eventwebhook.d.ts,,"-import {PublicKey} from ""starkbank-ecdsa"";
+// From starkbank-ecdsa, minimal interface of PublicKey
+declare class PublicKey {
+  toString(encode?: boolean): string;
+  static fromPem(pem: string): PublicKey;
+  static fromDer(der: string): PublicKey;
+  static fromString(key: string): PublicKey;
+}","-import {PublicKey} from ""starkbank-ecdsa"";
+// From starkbank-ecdsa, minimal interface of PublicKey
+declare class PublicKey {
+  toString(encode?: boolean): string;
+  static fromPem(pem: string): PublicKey;
+  static fromDer(der: string): PublicKey;
+  static fromString(key: string): PublicKey;
+}"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/mail.d.ts,,"+
+  replyToList?: EmailJSON | EmailJSON[],
+  reply_to_list?: EmailJSON[];
-}
+
+  /**
+   * Set reply_to_list header from given data
+   */
+  setReplyToList(replyToList: EmailJSON[]): void;
+}","+
+  replyToList?: EmailJSON | EmailJSON[],
+  reply_to_list?: EmailJSON[];
-}
+
+  /**
+   * Set reply_to_list header from given data
+   */
+  setReplyToList(replyToList: EmailJSON[]): void;
+}"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/mail.js,,"-      hideWarnings,
+      hideWarnings, replyToList,
+    this.setReplyToList(replyToList);
-      trackingSettings,
+      trackingSettings, replyToList,
+    if(typeof replyToList !== 'undefined') {
+      json.replyToList = replyToList;
+    }
+
+  /**
+   * Set the replyToList from email body
+   */
+   setReplyToList(replyToList) {
+    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {
+      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {
+        throw new Error('Expected each replyTo to contain an `email` string');
+      }
+      this.replyToList = replyToList;
+    }
+  }","-      hideWarnings,
+      hideWarnings, replyToList,
+    this.setReplyToList(replyToList);
-      trackingSettings,
+      trackingSettings, replyToList,
+    if(typeof replyToList !== 'undefined') {
+      json.replyToList = replyToList;
+    }
+
+  /**
+   * Set the replyToList from email body
+   */
+   setReplyToList(replyToList) {
+    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {
+      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {
+        throw new Error('Expected each replyTo to contain an `email` string');
+      }
+      this.replyToList = replyToList;
+    }
+  }"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/mail.spec.js,,"+
+  describe('set replyToList to set multiple reply-to', () => {
+    let data;
+
+    this.beforeEach(() => {
+      data = {
+        to: 'send-to@example.org',
+        from: 'sender@example.org',
+        subject: 'test replyToList',
+        category: 'test',
+        text: 'Testing replyToList settings',
+        html: '<p>Testing replyToList settings</p>',
+      };
+    });
+
+    it('should set the replyToList', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1',
+          'email': 'test_user1@example.org'
+        },
+        {
+          'email': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      const mail = new Mail(data);
+
+      expect(mail.replyToList)
+        .to.be.deep.equal(replyToList);
+    });
+
+    it('should throw error for incorrect replyToList format', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1'
+        },
+        {
+          'email_data': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      expect(() => new Mail(data))
+        .to.throw('Expected each replyTo to contain an `email` string');
+    });
+
+    it('should throw error for as replyToList is not an array', () => {
+      let replyToList = {
+        'name': 'Test User1',
+        'email': 'test_user1@example.org'
+      };
+      data.replyToList = replyToList;
+      expect(() => new Mail(data))
+        .to.throw('Array expected for`replyToList`');
+    });
+  });","+
+  describe('set replyToList to set multiple reply-to', () => {
+    let data;
+
+    this.beforeEach(() => {
+      data = {
+        to: 'send-to@example.org',
+        from: 'sender@example.org',
+        subject: 'test replyToList',
+        category: 'test',
+        text: 'Testing replyToList settings',
+        html: '<p>Testing replyToList settings</p>',
+      };
+    });
+
+    it('should set the replyToList', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1',
+          'email': 'test_user1@example.org'
+        },
+        {
+          'email': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      const mail = new Mail(data);
+
+      expect(mail.replyToList)
+        .to.be.deep.equal(replyToList);
+    });
+
+    it('should throw error for incorrect replyToList format', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1'
+        },
+        {
+          'email_data': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      expect(() => new Mail(data))
+        .to.throw('Expected each replyTo to contain an `email` string');
+    });
+
+    it('should throw error for as replyToList is not an array', () => {
+      let replyToList = {
+        'name': 'Test User1',
+        'email': 'test_user1@example.org'
+      };
+      data.replyToList = replyToList;
+      expect(() => new Mail(data))
+        .to.throw('Array expected for`replyToList`');
+    });
+  });"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/personalization.d.ts,,"+  from?: EmailData,
+  from?: EmailJSON;
+
+  /**
+   * Set from
+   */
+  setFrom(from: EmailData): void;","+  from?: EmailData,
+  from?: EmailJSON;
+
+  /**
+   * Set from
+   */
+  setFrom(from: EmailData): void;"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/personalization.js,,"-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    this.setFrom(from);
+   * Set from
+   * */
+  setFrom(from) {
+    if (typeof from === 'undefined') {
+      return;
+    }
+    this.from = EmailAddress.create(from);
+  }
+
+  /**
-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    if (typeof from !== 'undefined') {
+      json.from = from;
+    }","-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    this.setFrom(from);
+   * Set from
+   * */
+  setFrom(from) {
+    if (typeof from === 'undefined') {
+      return;
+    }
+    this.from = EmailAddress.create(from);
+  }
+
+  /**
-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    if (typeof from !== 'undefined') {
+      json.from = from;
+    }"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/personalization_specs/from-data.spec.js,,"+      from: 'from@example.org',
+      expect(p.from.email).to.equal('from@example.org');","+      from: 'from@example.org',
+      expect(p.from.email).to.equal('from@example.org');"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/classes/personalization_specs/to-json.spec.js,,"+    });
+    it('should set the from field', function() {
+      p.setFrom('testfrom@example.org');
+      const json = p.toJSON();
+      expect(json).to.have.property('from');
+      expect(json.from).to.be.an.instanceof(EmailAddress);
+      expect(json.from.email).to.equal('testfrom@example.org');","+    });
+    it('should set the from field', function() {
+      p.setFrom('testfrom@example.org');
+      const json = p.toJSON();
+      expect(json).to.have.property('from');
+      expect(json.from).to.be.an.instanceof(EmailAddress);
+      expect(json.from.email).to.equal('testfrom@example.org');"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/helpers/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"","
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/inbound-mail-parser/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
+    ""@sendgrid/helpers"": ""^7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
+    ""@sendgrid/helpers"": ""^7.6.2"","
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/mail/package.json,,"-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.7"",
-    ""@sendgrid/helpers"": ""^7.4.6""
+    ""@sendgrid/client"": ""^7.6.2"",
+    ""@sendgrid/helpers"": ""^7.6.2""","-  ""version"": ""7.4.7"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.7"",
-    ""@sendgrid/helpers"": ""^7.4.6""
+    ""@sendgrid/client"": ""^7.6.2"",
+    ""@sendgrid/helpers"": ""^7.6.2"""
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,packages/mail/src/mail.spec.js,,"-  sgClient.setDefaultHeader('X-Mock', 200);
+  sgClient.setDefaultHeader('X-Mock', 202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
+
+  it('should send email with correct replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+
+  it('should throw error with wrong replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = {
+      ""name"": ""Support Test Team"",
+      ""email"": ""support.test@example.org""
+    };
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if any record in replyToList is without email', () => {
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if both replyTo and replyToList are mentioned', () => {
+    data[""replyTo""] = {
+        ""name"": ""Manual Tester"",
+        ""email"": ""manual.test@example.org""
+      };
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","-  sgClient.setDefaultHeader('X-Mock', 200);
+  sgClient.setDefaultHeader('X-Mock', 202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
+
+  it('should send email with correct replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+
+  it('should throw error with wrong replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = {
+      ""name"": ""Support Test Team"",
+      ""email"": ""support.test@example.org""
+    };
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if any record in replyToList is without email', () => {
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if both replyTo and replyToList are mentioned', () => {
+    data[""replyTo""] = {
+        ""name"": ""Manual Tester"",
+        ""email"": ""manual.test@example.org""
+      };
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,test/files.spec.js,,"-  it('should have ./.travis.yml file', function() {
-    assert(fileExists('.travis.yml'));
-  });
-
-  it('should have ./.codeclimate.yml file', function() {
-    assert(fileExists('.codeclimate.yml'));
+  it('should have ./.github/workflows/test-and-deploy file', function() {
+    assert(fileExists('.github/workflows/test-and-deploy.yml'));","-  it('should have ./.travis.yml file', function() {
-    assert(fileExists('.travis.yml'));
-  });
-
-  it('should have ./.codeclimate.yml file', function() {
-    assert(fileExists('.codeclimate.yml'));
+  it('should have ./.github/workflows/test-and-deploy file', function() {
+    assert(fileExists('.github/workflows/test-and-deploy.yml'));"
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,test/typescript/helpers.ts,,"+    from: ""somebody@example.org"",","+    from: ""somebody@example.org"","
sendgrid_sendgrid-nodejs,1529a599f48a654c2cd43722423a10580e5f2693,Merge branch 'main' into snyk-fix-21569f887026e99ccc6b2993e37097bb,test/typescript/mail.ts,,"+// Test setClient() method
+sgMail.setClient(new Client());
+
-
-// Test setClient() method
-sgMail.setClient(new Client());","+// Test setClient() method
+sgMail.setClient(new Client());
+
-
-// Test setClient() method
-sgMail.setClient(new Client());"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,lerna.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"","
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/client/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""axios"": ""^0.21.1""
+    ""@sendgrid/helpers"": ""^7.6.2"",
+    ""axios"": ""^0.26.0""","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""axios"": ""^0.21.1""
+    ""@sendgrid/helpers"": ""^7.6.2"",
+    ""axios"": ""^0.26.0"""
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/client/src/client.spec.js,,"-            value: '#'.repeat(1024 * 1024 * 25), // 25 MB,
+            value: '#'.repeat(1024 * 1024 * 10), // 10 MB,
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {","-            value: '#'.repeat(1024 * 1024 * 25), // 25 MB,
+            value: '#'.repeat(1024 * 1024 * 10), // 10 MB,
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {
-  it('should have the correct response code', () => {
+  xit('should have the correct response code', () => {"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/contact-importer/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.6"",
+    ""@sendgrid/client"": ""^7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.6"",
+    ""@sendgrid/client"": ""^7.6.2"","
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/mail.d.ts,,"+
+  replyToList?: EmailJSON | EmailJSON[],
+  reply_to_list?: EmailJSON[];
-}
+
+  /**
+   * Set reply_to_list header from given data
+   */
+  setReplyToList(replyToList: EmailJSON[]): void;
+}","+
+  replyToList?: EmailJSON | EmailJSON[],
+  reply_to_list?: EmailJSON[];
-}
+
+  /**
+   * Set reply_to_list header from given data
+   */
+  setReplyToList(replyToList: EmailJSON[]): void;
+}"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/mail.js,,"-      hideWarnings,
+      hideWarnings, replyToList,
+    this.setReplyToList(replyToList);
-      trackingSettings,
+      trackingSettings, replyToList,
+    if(typeof replyToList !== 'undefined') {
+      json.replyToList = replyToList;
+    }
+
+  /**
+   * Set the replyToList from email body
+   */
+   setReplyToList(replyToList) {
+    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {
+      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {
+        throw new Error('Expected each replyTo to contain an `email` string');
+      }
+      this.replyToList = replyToList;
+    }
+  }","-      hideWarnings,
+      hideWarnings, replyToList,
+    this.setReplyToList(replyToList);
-      trackingSettings,
+      trackingSettings, replyToList,
+    if(typeof replyToList !== 'undefined') {
+      json.replyToList = replyToList;
+    }
+
+  /**
+   * Set the replyToList from email body
+   */
+   setReplyToList(replyToList) {
+    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {
+      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {
+        throw new Error('Expected each replyTo to contain an `email` string');
+      }
+      this.replyToList = replyToList;
+    }
+  }"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/mail.spec.js,,"+
+  describe('set replyToList to set multiple reply-to', () => {
+    let data;
+
+    this.beforeEach(() => {
+      data = {
+        to: 'send-to@example.org',
+        from: 'sender@example.org',
+        subject: 'test replyToList',
+        category: 'test',
+        text: 'Testing replyToList settings',
+        html: '<p>Testing replyToList settings</p>',
+      };
+    });
+
+    it('should set the replyToList', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1',
+          'email': 'test_user1@example.org'
+        },
+        {
+          'email': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      const mail = new Mail(data);
+
+      expect(mail.replyToList)
+        .to.be.deep.equal(replyToList);
+    });
+
+    it('should throw error for incorrect replyToList format', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1'
+        },
+        {
+          'email_data': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      expect(() => new Mail(data))
+        .to.throw('Expected each replyTo to contain an `email` string');
+    });
+
+    it('should throw error for as replyToList is not an array', () => {
+      let replyToList = {
+        'name': 'Test User1',
+        'email': 'test_user1@example.org'
+      };
+      data.replyToList = replyToList;
+      expect(() => new Mail(data))
+        .to.throw('Array expected for`replyToList`');
+    });
+  });","+
+  describe('set replyToList to set multiple reply-to', () => {
+    let data;
+
+    this.beforeEach(() => {
+      data = {
+        to: 'send-to@example.org',
+        from: 'sender@example.org',
+        subject: 'test replyToList',
+        category: 'test',
+        text: 'Testing replyToList settings',
+        html: '<p>Testing replyToList settings</p>',
+      };
+    });
+
+    it('should set the replyToList', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1',
+          'email': 'test_user1@example.org'
+        },
+        {
+          'email': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      const mail = new Mail(data);
+
+      expect(mail.replyToList)
+        .to.be.deep.equal(replyToList);
+    });
+
+    it('should throw error for incorrect replyToList format', () => {
+      let replyToList = [
+        {
+          'name': 'Test User1'
+        },
+        {
+          'email_data': 'test_user2@example.org'
+        }
+      ];
+      data.replyToList = replyToList;
+
+      expect(() => new Mail(data))
+        .to.throw('Expected each replyTo to contain an `email` string');
+    });
+
+    it('should throw error for as replyToList is not an array', () => {
+      let replyToList = {
+        'name': 'Test User1',
+        'email': 'test_user1@example.org'
+      };
+      data.replyToList = replyToList;
+      expect(() => new Mail(data))
+        .to.throw('Array expected for`replyToList`');
+    });
+  });"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/personalization.d.ts,,"+  from?: EmailData,
+  from?: EmailJSON;
+
+  /**
+   * Set from
+   */
+  setFrom(from: EmailData): void;","+  from?: EmailData,
+  from?: EmailJSON;
+
+  /**
+   * Set from
+   */
+  setFrom(from: EmailData): void;"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/personalization.js,,"-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    this.setFrom(from);
+   * Set from
+   * */
+  setFrom(from) {
+    if (typeof from === 'undefined') {
+      return;
+    }
+    this.from = EmailAddress.create(from);
+  }
+
+  /**
-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    if (typeof from !== 'undefined') {
+      json.from = from;
+    }","-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    this.setFrom(from);
+   * Set from
+   * */
+  setFrom(from) {
+    if (typeof from === 'undefined') {
+      return;
+    }
+    this.from = EmailAddress.create(from);
+  }
+
+  /**
-      to, cc, bcc, subject, headers, customArgs, sendAt,
+      to, from, cc, bcc, subject, headers, customArgs, sendAt,
+    if (typeof from !== 'undefined') {
+      json.from = from;
+    }"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/personalization_specs/from-data.spec.js,,"+      from: 'from@example.org',
+      expect(p.from.email).to.equal('from@example.org');","+      from: 'from@example.org',
+      expect(p.from.email).to.equal('from@example.org');"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/personalization_specs/to-json.spec.js,,"+    });
+    it('should set the from field', function() {
+      p.setFrom('testfrom@example.org');
+      const json = p.toJSON();
+      expect(json).to.have.property('from');
+      expect(json.from).to.be.an.instanceof(EmailAddress);
+      expect(json.from.email).to.equal('testfrom@example.org');","+    });
+    it('should set the from field', function() {
+      p.setFrom('testfrom@example.org');
+      const json = p.toJSON();
+      expect(json).to.have.property('from');
+      expect(json.from).to.be.an.instanceof(EmailAddress);
+      expect(json.from.email).to.equal('testfrom@example.org');"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"","
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/inbound-mail-parser/package.json,"-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""mailparser"": ""^2.3.4""
+    ""mailparser"": ""^3.3.0"",
+    ""@sendgrid/helpers"": ""^7.4.6""","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
+    ""@sendgrid/helpers"": ""^7.6.2"",","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/helpers"": ""^7.4.6"",
-    ""mailparser"": ""^2.3.4""
+    ""@sendgrid/helpers"": ""^7.6.2"",
+    ""mailparser"": ""^3.3.0"","
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/mail/package.json,,"-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.6""
+    ""@sendgrid/client"": ""^7.6.2"",
+    ""@sendgrid/helpers"": ""^7.6.2""","-  ""version"": ""7.4.6"",
+  ""version"": ""7.6.2"",
-    ""@sendgrid/client"": ""^7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.6""
+    ""@sendgrid/client"": ""^7.6.2"",
+    ""@sendgrid/helpers"": ""^7.6.2"""
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/mail/src/mail.spec.js,,"-  sgClient.setDefaultHeader('X-Mock', 200);
+  sgClient.setDefaultHeader('X-Mock', 202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
+
+  it('should send email with correct replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+
+  it('should throw error with wrong replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = {
+      ""name"": ""Support Test Team"",
+      ""email"": ""support.test@example.org""
+    };
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if any record in replyToList is without email', () => {
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if both replyTo and replyToList are mentioned', () => {
+    data[""replyTo""] = {
+        ""name"": ""Manual Tester"",
+        ""email"": ""manual.test@example.org""
+      };
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","-  sgClient.setDefaultHeader('X-Mock', 200);
+  sgClient.setDefaultHeader('X-Mock', 202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
-    sgClient.setDefaultHeader('X-Mock', 201);
+    sgClient.setDefaultHeader('X-Mock', 202);
-        expect(response.statusCode).to.equal(201);
+        expect(response.statusCode).to.equal(202);
+
+  it('should send email with correct replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+
+  it('should throw error with wrong replyToList format', () => {
+    sgClient.setDefaultHeader('X-Mock', 202);
+    data[""replyToList""] = {
+      ""name"": ""Support Test Team"",
+      ""email"": ""support.test@example.org""
+    };
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if any record in replyToList is without email', () => {
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });
+
+  it('should throw error if both replyTo and replyToList are mentioned', () => {
+    data[""replyTo""] = {
+        ""name"": ""Manual Tester"",
+        ""email"": ""manual.test@example.org""
+      };
+    data[""replyToList""] = [
+      {
+        ""name"": ""Test Team"",
+        ""email"": ""test@example.org""
+      },
+      {
+        ""name"": ""Support Test Team"",
+        ""email"": ""support.test@example.org""
+      }
+    ];
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,test/files.spec.js,,"-  it('should have ./.travis.yml file', function() {
-    assert(fileExists('.travis.yml'));
-  });
-
-  it('should have ./.codeclimate.yml file', function() {
-    assert(fileExists('.codeclimate.yml'));
+  it('should have ./.github/workflows/test-and-deploy file', function() {
+    assert(fileExists('.github/workflows/test-and-deploy.yml'));","-  it('should have ./.travis.yml file', function() {
-    assert(fileExists('.travis.yml'));
-  });
-
-  it('should have ./.codeclimate.yml file', function() {
-    assert(fileExists('.codeclimate.yml'));
+  it('should have ./.github/workflows/test-and-deploy file', function() {
+    assert(fileExists('.github/workflows/test-and-deploy.yml'));"
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,test/typescript/helpers.ts,,"+    from: ""somebody@example.org"",","+    from: ""somebody@example.org"","
sendgrid_sendgrid-nodejs,76a6f8ed46dc674cacad619e5cdb04c597c8a6cd,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,test/typescript/mail.ts,,"+// Test setClient() method
+sgMail.setClient(new Client());
+
-
-// Test setClient() method
-sgMail.setClient(new Client());","+// Test setClient() method
+sgMail.setClient(new Client());
+
-
-// Test setClient() method
-sgMail.setClient(new Client());"
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,lerna.json,,"-  ""version"": ""7.4.5"",
+  ""version"": ""7.4.6"",","-  ""version"": ""7.4.5"",
+  ""version"": ""7.4.6"","
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/client/package.json,,"-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.3"",
+    ""@sendgrid/helpers"": ""^7.4.6"",","-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.3"",
+    ""@sendgrid/helpers"": ""^7.4.6"","
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/contact-importer/package.json,,"-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/client"": ""^7.4.3"",
+    ""@sendgrid/client"": ""^7.4.6"",","-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/client"": ""^7.4.3"",
+    ""@sendgrid/client"": ""^7.4.6"","
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/package.json,,"-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",","-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"","
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/inbound-mail-parser/package.json,"-    ""mailparser"": ""^2.3.4""
+    ""mailparser"": ""^3.3.0""","-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.3"",
+    ""@sendgrid/helpers"": ""^7.4.6"",","-  ""version"": ""7.4.3"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/helpers"": ""^7.4.3"",
-    ""mailparser"": ""^2.3.4""
+    ""mailparser"": ""^3.3.0""
+    ""@sendgrid/helpers"": ""^7.4.6"","
sendgrid_sendgrid-nodejs,bef8c63079aefb217ba7383448336229c7c87f44,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/mail/package.json,,"-  ""version"": ""7.4.5"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/client"": ""^7.4.3"",
-    ""@sendgrid/helpers"": ""^7.4.3""
+    ""@sendgrid/client"": ""^7.4.6"",
+    ""@sendgrid/helpers"": ""^7.4.6""","-  ""version"": ""7.4.5"",
+  ""version"": ""7.4.6"",
-    ""@sendgrid/client"": ""^7.4.3"",
-    ""@sendgrid/helpers"": ""^7.4.3""
+    ""@sendgrid/client"": ""^7.4.6"",
+    ""@sendgrid/helpers"": ""^7.4.6"""
sendgrid_sendgrid-nodejs,fd22a8fabcfca549feca17ce1ab7639e2086d103,Merge branch 'main' into snyk-fix-42bc938344358ff81bfef2c7e6b66219,packages/helpers/classes/attachment.d.ts,,"-export default class Attachment {
+export default class Attachment implements AttachmentData {
+  content: string;
+  filename: string;
+  type?: string;
+  disposition?: string;
+  contentId?: string;
+","-export default class Attachment {
+export default class Attachment implements AttachmentData {
+  content: string;
+  filename: string;
+  type?: string;
+  disposition?: string;
+  contentId?: string;
+"
sendgrid_sendgrid-nodejs,96f2c7aae6af22d2ec74afb391ba0a2d8892f49e,Merge branch 'ghost-validate-mail-helper-types',packages/helpers/classes/mail.js,,"+const {validateMailSettings, validateTrackingSettings} = require('../helpers/validate-settings');
+    if (typeof from !== 'object' || typeof from.email !== 'string') {
+      throw new Error('String or address object expected for `from`');
+    }
+    if (typeof replyTo !== 'object' || typeof replyTo.email !== 'string') {
+      throw new Error('String or address object expected for `replyTo`');
+    }
+    if (typeof asm.groupId !== 'number') {
+      throw new Error('Expected `asm` to include an integer in its `groupId` field');
+    }
+    if (asm.groupsToDisplay &&
+      (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {
+      throw new Error('Array of integers expected for `asm.groupsToDisplay`');
+    }
-    if (!Array.isArray(personalizations)) {
-      throw new Error('Array expected for `personalizations`');
+    if (!Array.isArray(personalizations) ||
+      !personalizations.every(personalization => typeof personalization === 'object')) {
+      throw new Error('Array of objects expected for `personalizations`');
+    if (!content.every(contentField => typeof contentField === 'object')) {
+      throw new Error('Expected each entry in `content` to be an object');
+    }
+    if (!content.every(contentField => typeof contentField.type === 'string')) {
+      throw new Error('Expected each `content` entry to contain a `type` string');
+    }
+    if (!content.every(contentField => typeof contentField.value === 'string')) {
+      throw new Error('Expected each `content` entry to contain a `value` string');
+    }
+    if (!attachments.every(attachment => typeof attachment.content === 'string')) {
+      throw new Error('Expected each attachment to contain a `content` string');
+    }
+    if (!attachments.every(attachment => typeof attachment.filename === 'string')) {
+      throw new Error('Expected each attachment to contain a `filename` string');
+    }
+    if (!attachments.every(attachment => attachment.type && typeof attachment.type === 'string')) {
+      throw new Error('Expected the attachment\'s `type` field to be a string');
+    }
+    if (!attachments.every(attachment => attachment.disposition && typeof attachment.disposition === 'string')) {
+      throw new Error('Expected the attachment\'s `disposition` field to be a string');
+    }
-    if (typeof settings !== 'object') {
-      throw new Error('Object expected for `trackingSettings`');
-    }
+    validateTrackingSettings(settings);
-    if (typeof settings !== 'object') {
-      throw new Error('Object expected for `mailSettings`');
-    }
+    validateMailSettings(settings);","+const {validateMailSettings, validateTrackingSettings} = require('../helpers/validate-settings');
+    if (typeof from !== 'object' || typeof from.email !== 'string') {
+      throw new Error('String or address object expected for `from`');
+    }
+    if (typeof replyTo !== 'object' || typeof replyTo.email !== 'string') {
+      throw new Error('String or address object expected for `replyTo`');
+    }
+    if (typeof asm.groupId !== 'number') {
+      throw new Error('Expected `asm` to include an integer in its `groupId` field');
+    }
+    if (asm.groupsToDisplay &&
+      (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {
+      throw new Error('Array of integers expected for `asm.groupsToDisplay`');
+    }
-    if (!Array.isArray(personalizations)) {
-      throw new Error('Array expected for `personalizations`');
+    if (!Array.isArray(personalizations) ||
+      !personalizations.every(personalization => typeof personalization === 'object')) {
+      throw new Error('Array of objects expected for `personalizations`');
+    if (!content.every(contentField => typeof contentField === 'object')) {
+      throw new Error('Expected each entry in `content` to be an object');
+    }
+    if (!content.every(contentField => typeof contentField.type === 'string')) {
+      throw new Error('Expected each `content` entry to contain a `type` string');
+    }
+    if (!content.every(contentField => typeof contentField.value === 'string')) {
+      throw new Error('Expected each `content` entry to contain a `value` string');
+    }
+    if (!attachments.every(attachment => typeof attachment.content === 'string')) {
+      throw new Error('Expected each attachment to contain a `content` string');
+    }
+    if (!attachments.every(attachment => typeof attachment.filename === 'string')) {
+      throw new Error('Expected each attachment to contain a `filename` string');
+    }
+    if (!attachments.every(attachment => attachment.type && typeof attachment.type === 'string')) {
+      throw new Error('Expected the attachment\'s `type` field to be a string');
+    }
+    if (!attachments.every(attachment => attachment.disposition && typeof attachment.disposition === 'string')) {
+      throw new Error('Expected the attachment\'s `disposition` field to be a string');
+    }
-    if (typeof settings !== 'object') {
-      throw new Error('Object expected for `trackingSettings`');
-    }
+    validateTrackingSettings(settings);
-    if (typeof settings !== 'object') {
-      throw new Error('Object expected for `mailSettings`');
-    }
+    validateMailSettings(settings);"
sendgrid_sendgrid-nodejs,e55c1237db63606375199ea79e15b26d04f2c9be,Merge branch 'digitalica-master',packages/helpers/classes/attachment.spec.js,,"-      filePath: path.resolve(path.join(__dirname, '/attachment.js')),
+      filePath: path.join(__dirname, '/attachment.js'),","-      filePath: path.resolve(path.join(__dirname, '/attachment.js')),
+      filePath: path.join(__dirname, '/attachment.js'),"
sendgrid_sendgrid-nodejs,dba7f7bb02c62caa2d33617ca36ea09089a42eeb,Merge branch 'master' of https://github.com/digitalica/sendgrid-nodejs into digitalica-master,packages/helpers/classes/attachment.spec.js,"-      attachment.setContent(""Just a string."");
+      attachment.setContent('Just a string.');
-          filePath: ''
+          filePath: '',
-    attachment.setContent(new Buffer(""Hello World\n""));
+    attachment.setContent(new Buffer('Hello World\n'));
-      filePath: path.resolve(__dirname + '/attachment.js')
+      filePath: path.resolve(path.join(__dirname, '/attachment.js')),","-      filePath: path.resolve(__dirname + '/attachment.js')
+      filePath: path.join(__dirname, '/attachment.js'),","-      attachment.setContent(""Just a string."");
+      attachment.setContent('Just a string.');
-          filePath: ''
+          filePath: '',
-    attachment.setContent(new Buffer(""Hello World\n""));
+    attachment.setContent(new Buffer('Hello World\n'));
-      filePath: path.resolve(__dirname + '/attachment.js')
+      filePath: path.join(__dirname, '/attachment.js'),"
sendgrid_sendgrid-nodejs,7488fa538169340657971840e6eb34618e54754e,"Merge pull request #943 from NickFoden/update-url-in-warning  Update url in ""DYNAMIC_TEMPLATE_CHAR_WARNING"" to point to a working current link",packages/helpers/constants/index.js,,"-See https://sendgrid.com/docs/ui/sending-email/using-handlebars/ for more information.`;
+See https://sendgrid.com/docs/for-developers/sending-email/using-handlebars/ for more information.`;
-  DYNAMIC_TEMPLATE_CHAR_WARNING,
+  DYNAMIC_TEMPLATE_CHAR_WARNING","-See https://sendgrid.com/docs/ui/sending-email/using-handlebars/ for more information.`;
+See https://sendgrid.com/docs/for-developers/sending-email/using-handlebars/ for more information.`;
-  DYNAMIC_TEMPLATE_CHAR_WARNING,
+  DYNAMIC_TEMPLATE_CHAR_WARNING"
sendgrid_sendgrid-nodejs,47b6a5cd583cc10544ac19434419bdda5272b107,Merge pull request #939 from burantino/fix-personalizations-dynamic-bug  Fix personalizations dynamic bug,packages/helpers/classes/mail.js,,"-    else if (personalization.dynamicTemplateData) {
+    else if (!this.isDynamic && personalization.dynamicTemplateData) {","-    else if (personalization.dynamicTemplateData) {
+    else if (!this.isDynamic && personalization.dynamicTemplateData) {"
sendgrid_sendgrid-nodejs,47b6a5cd583cc10544ac19434419bdda5272b107,Merge pull request #939 from burantino/fix-personalizations-dynamic-bug  Fix personalizations dynamic bug,packages/helpers/classes/personalization.d.ts,,"-  dynamicTemplateData?: { [key: string]: string; };
+  dynamicTemplateData?: { [key: string]: any; };
-  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: any }): void;","-  dynamicTemplateData?: { [key: string]: string; };
+  dynamicTemplateData?: { [key: string]: any; };
-  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: any }): void;"
sendgrid_sendgrid-nodejs,47b6a5cd583cc10544ac19434419bdda5272b107,Merge pull request #939 from burantino/fix-personalizations-dynamic-bug  Fix personalizations dynamic bug,test/typescript/helpers.ts,,"-    subject: ""Hello Some One""
+    subject: ""Hello Some One"",
+    dynamicTemplateData: {
+        translations: {
+            hello: ""Привет!""
+        },
+        count: 1
+    }","-    subject: ""Hello Some One""
+    subject: ""Hello Some One"",
+    dynamicTemplateData: {
+        translations: {
+            hello: ""Привет!""
+        },
+        count: 1
+    }"
sendgrid_sendgrid-nodejs,c914d7120db5ac53499156f74bc365ac4716691a,Merge pull request #935 from chrisamador/issue-#899  Fixed deepmerge module export naming issue,packages/helpers/classes/personalization.js,,"-const merge = require('deepmerge');
+const deepMerge = require('deepmerge');
-    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+    this.dynamicTemplateData = deepMerge(dynamicTemplateData, this.dynamicTemplateData);","-const merge = require('deepmerge');
+const deepMerge = require('deepmerge');
-    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+    this.dynamicTemplateData = deepMerge(dynamicTemplateData, this.dynamicTemplateData);"
sendgrid_sendgrid-nodejs,ed4ec8dacb62ff27fb90ac8d81f3a7dd104f9814,Merge pull request #898 from peterkuiper/issue-#894  Added setTimeout method to the MailService class,packages/mail/src/classes/mail-service.js,,"+  }
+
+  /**
+   * Set client timeout
+   */
+  setTimeout(timeout) {
+    if (typeof timeout === 'undefined') {
+      return;
+    }
+
+    this.client.setDefaultRequest('timeout', timeout);","+  }
+
+  /**
+   * Set client timeout
+   */
+  setTimeout(timeout) {
+    if (typeof timeout === 'undefined') {
+      return;
+    }
+
+    this.client.setDefaultRequest('timeout', timeout);"
sendgrid_sendgrid-nodejs,f07d7f5c3a48ea42565b24b732d7e9f3349ce549,Merge pull request #932 from albertor24/hide-warnings  Allows hiding warnings,packages/helpers/classes/mail.d.ts,,"+
+  hideWarnings?: boolean,
+   * Set hide warnings
+   */
+  setHideWarnings(hide: boolean): void;
+
+  /**","+
+  hideWarnings?: boolean,
+   * Set hide warnings
+   */
+  setHideWarnings(hide: boolean): void;
+
+  /**"
sendgrid_sendgrid-nodejs,f07d7f5c3a48ea42565b24b732d7e9f3349ce549,Merge pull request #932 from albertor24/hide-warnings  Allows hiding warnings,packages/helpers/classes/mail.js,,"+    this.hideWarnings = false;
+      hideWarnings,
+    this.setHideWarnings(hideWarnings);
-    Object.values(dynamicTemplateData).forEach(value => {
-      if (/['""&]/.test(value)) {
-        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
-      }
-    });
+    if (!this.hideWarnings) {
+      Object.values(dynamicTemplateData).forEach(value => {
+        if (/['""&]/.test(value)) {
+          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+        }
+      });
+    }
+  }
+
+  /**
+   * Set hide warnings
+   */
+  setHideWarnings(hide) {
+    if (typeof hide === 'undefined') {
+      return;
+    }
+    if (typeof hide !== 'boolean') {
+      throw new Error('Boolean expected for `hideWarnings`');
+    }
+    this.hideWarnings = hide;","+    this.hideWarnings = false;
+      hideWarnings,
+    this.setHideWarnings(hideWarnings);
-    Object.values(dynamicTemplateData).forEach(value => {
-      if (/['""&]/.test(value)) {
-        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
-      }
-    });
+    if (!this.hideWarnings) {
+      Object.values(dynamicTemplateData).forEach(value => {
+        if (/['""&]/.test(value)) {
+          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+        }
+      });
+    }
+  }
+
+  /**
+   * Set hide warnings
+   */
+  setHideWarnings(hide) {
+    if (typeof hide === 'undefined') {
+      return;
+    }
+    if (typeof hide !== 'boolean') {
+      throw new Error('Boolean expected for `hideWarnings`');
+    }
+    this.hideWarnings = hide;"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,examples/webhooks-docker/app.js,,"-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))","-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,examples/webhooks-docker/package.json,,"-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"",","-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"","
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,lerna.json,,"-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0""","-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0"""
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,package.json,,"-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid""","-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid"""
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/client/package.json,,"-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""@types/request"": ""^2.0.3"",
+    ""@sendgrid/helpers"": ""^6.4.0"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3""","-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""@types/request"": ""^2.0.3"",
+    ""@sendgrid/helpers"": ""^6.4.0"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3"""
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/client/src/classes/client.js,,"- * SendGrid REST Client
+ * Twilio SendGrid REST Client","- * SendGrid REST Client
+ * Twilio SendGrid REST Client"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/contact-importer/package.json,,"-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/contact-importer/src/importer.js,,"-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid.","-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid."
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/contact-importer/src/importer.spec.js,,"-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance.","-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance."
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/helpers/package.json,,"-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/inbound-mail-parser/package.json,,"-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.js,,"- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook","- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.spec.js,,"-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',","-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/mail/package.json,,"-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0""","-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"""
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/subscription-widget/app.json,,"-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]","-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]"
sendgrid_sendgrid-nodejs,156297db552767cce71b215907bd859f1e474bb1,Merge branch 'master' into master,packages/subscription-widget/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"",","-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"","
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,examples/webhooks-docker/app.js,,"-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))","-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))"
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,examples/webhooks-docker/package.json,,"-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"",","-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"","
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,lerna.json,,"-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0""","-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0"""
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,package.json,,"-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid""","-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid"""
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/client/package.json,,"-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""@types/request"": ""^2.0.3"",
+    ""@sendgrid/helpers"": ""^6.4.0"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3""","-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""@types/request"": ""^2.0.3"",
+    ""@sendgrid/helpers"": ""^6.4.0"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3"""
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/client/src/classes/client.js,,"- * SendGrid REST Client
+ * Twilio SendGrid REST Client","- * SendGrid REST Client
+ * Twilio SendGrid REST Client"
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/contact-importer/package.json,,"-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/contact-importer/src/importer.js,,"-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid.","-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid."
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/contact-importer/src/importer.spec.js,,"-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance.","-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance."
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/helpers/package.json,,"-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/inbound-mail-parser/package.json,,"-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/inbound-mail-parser/src/parser.js,,"- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook","- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook"
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/inbound-mail-parser/src/parser.spec.js,,"-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',","-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',"
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/mail/package.json,,"-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0""","-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"""
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/subscription-widget/app.json,,"-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]","-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]"
sendgrid_sendgrid-nodejs,692e9f5248efddb9b3f90a1d0f3da85fa036587c,Merge remote-tracking branch 'upstream/master' into issue-#894,packages/subscription-widget/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"",","-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"","
sendgrid_sendgrid-nodejs,8912bd017843a2b5642b78859e0f6a9e25537ed7,Merge pull request #908 from SPARTAN563/master  fix #906: Move @types dependencies to devDependencies for client,packages/client/package.json,,"-    ""@types/request"": ""^2.0.3"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3""","-    ""@types/request"": ""^2.0.3"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3"""
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,examples/webhooks-docker/app.js,,"-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))","-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))"
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,examples/webhooks-docker/package.json,,"-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"",","-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"","
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,lerna.json,,"-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0""","-  ""version"": ""6.3.1""
+  ""version"": ""6.4.0"""
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,package.json,,"-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid""","-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid"""
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/client/package.json,"-    ""@types/request"": ""^2.0.3"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3""","-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS API client"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""@types/request"": ""^2.0.3"",
+    ""@sendgrid/helpers"": ""^6.4.0"",
+  },
+  ""devDependencies"": {
+    ""@types/request"": ""^2.0.3"""
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/client/src/classes/client.js,,"- * SendGrid REST Client
+ * Twilio SendGrid REST Client","- * SendGrid REST Client
+ * Twilio SendGrid REST Client"
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/contact-importer/package.json,,"-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS contact importer"",
-  ""version"": ""6.2.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/client"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/contact-importer/src/importer.js,,"-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid.","-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid."
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/contact-importer/src/importer.spec.js,,"-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance.","-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance."
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/helpers/package.json,,"-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS internal helpers"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/inbound-mail-parser/package.json,,"-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"",","-  ""description"": ""SendGrid NodeJS inbound mail parser"",
-  ""version"": ""6.3.0"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"","
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.js,,"- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook","- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook"
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.spec.js,,"-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',","-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',"
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/mail/package.json,,"-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0""","-  ""description"": ""SendGrid NodeJS mail service"",
-  ""version"": ""6.3.1"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
+  ""version"": ""6.4.0"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""@sendgrid/client"": ""^6.3.0"",
-    ""@sendgrid/helpers"": ""^6.3.0""
+    ""@sendgrid/client"": ""^6.4.0"",
+    ""@sendgrid/helpers"": ""^6.4.0"""
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/subscription-widget/app.json,,"-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]","-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]"
sendgrid_sendgrid-nodejs,61f74bd2b48581285740e5009b353e9e006afb37,Merge branch 'master' into master,packages/subscription-widget/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"",","-  ""version"": ""6.2.1"",
+  ""version"": ""6.4.0"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,examples/webhooks-docker/app.js,,"-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))","-app.listen(port, () => console.log(`SendGrid webhook listener started on port ${port}!`))
+app.listen(port, () => console.log(`Twilio SendGrid webhook listener started on port ${port}!`))"
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,examples/webhooks-docker/package.json,,"-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"",","-  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""description"": ""A containter to capture webhook data from Twilio SendGrid inbound parse"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,package.json,,"-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid""","-  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""description"": ""![Twilio SendGrid Logo](https://github.com/sendgrid/sendgrid-python/raw/master/twilio_sendgrid_logo.png)"",
-  ""author"": ""SendGrid""
+  ""author"": ""Twilio SendGrid"""
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/client/package.json,,"-  ""description"": ""SendGrid NodeJS API client"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS API client"",
+  ""description"": ""Twilio SendGrid NodeJS API client"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/client/src/classes/client.js,,"- * SendGrid REST Client
+ * Twilio SendGrid REST Client","- * SendGrid REST Client
+ * Twilio SendGrid REST Client"
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/contact-importer/package.json,,"-  ""description"": ""SendGrid NodeJS contact importer"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS contact importer"",
+  ""description"": ""Twilio SendGrid NodeJS contact importer"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/contact-importer/src/importer.js,,"-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid.","-   * Send a batch of contacts to SendGrid.
+   * Send a batch of contacts to Twilio SendGrid."
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/contact-importer/src/importer.spec.js,,"-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance.","-    // Create a new SendGrid instance.
+    // Create a new Twilio SendGrid instance."
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/helpers/package.json,,"-  ""description"": ""SendGrid NodeJS internal helpers"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS internal helpers"",
+  ""description"": ""Twilio SendGrid NodeJS internal helpers"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/inbound-mail-parser/package.json,,"-  ""description"": ""SendGrid NodeJS inbound mail parser"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS inbound mail parser"",
+  ""description"": ""Twilio SendGrid NodeJS inbound mail parser"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/inbound-mail-parser/src/parser.js,,"- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook","- * @return {Object} A SendGrid Attachment object with the file data
+ * @return {Object} A Twilio SendGrid Attachment object with the file data
- * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ * Simple class that parses data received from the Twilio SendGrid Inbound Parse Webhook"
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/inbound-mail-parser/src/parser.spec.js,,"-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',","-          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello Twilio SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello Twilio SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',"
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/mail/package.json,,"-  ""description"": ""SendGrid NodeJS mail service"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"",","-  ""description"": ""SendGrid NodeJS mail service"",
+  ""description"": ""Twilio SendGrid NodeJS mail service"",
-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""Twilio SendGrid <dx@sendgrid.com> (sendgrid.com)"","
sendgrid_sendgrid-nodejs,44abcd99b5acf933a7b2f4a2c2e4c42c4e8abb94,Merge pull request #925 from sendgrid/twilio  Twilio Branding and SMS update,packages/subscription-widget/app.json,,"-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]","-  ""keywords"": [""email"", ""SendGrid""]
+  ""keywords"": [""email"", ""SendGrid"", ""Twilio""]"
sendgrid_sendgrid-nodejs,fc1cb691dbf6896132a94c0802c17cdffb7e8e4b,Merge pull request #812 from valtlfelipe/fix-parser  Fix parser constructor error when passing payload,packages/inbound-mail-parser/src/parser.d.ts,,+  payload?: {};,+  payload?: {};
sendgrid_sendgrid-nodejs,fc1cb691dbf6896132a94c0802c17cdffb7e8e4b,Merge pull request #812 from valtlfelipe/fix-parser  Fix parser constructor error when passing payload,packages/inbound-mail-parser/src/parser.js,"-}
+};","-    this.payload = request.body || {};
+    this.payload = request.body || request.payload || {};","-}
+};
-    this.payload = request.body || {};
+    this.payload = request.body || request.payload || {};"
sendgrid_sendgrid-nodejs,fc1cb691dbf6896132a94c0802c17cdffb7e8e4b,Merge pull request #812 from valtlfelipe/fix-parser  Fix parser constructor error when passing payload,packages/inbound-mail-parser/src/parser.spec.js,"-        expect(email).to.be.null;
+        expect(email).to.be.null();","+    it('should return the key values specified in the config from the body', () => {
+      const config = {
+        keys: ['to', 'from'],
+      };
+      const request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+
-        body: {
+        payload: {","+    it('should return the key values specified in the config from the body', () => {
+      const config = {
+        keys: ['to', 'from'],
+      };
+      const request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+
-        body: {
+        payload: {
-        expect(email).to.be.null;
+        expect(email).to.be.null();"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,license.spec.js,,"-const fs = require(""fs"");
+const fs = require('fs');
-    const currentYear= (new Date()).getFullYear();
+    const currentYear = (new Date()).getFullYear();","-const fs = require(""fs"");
+const fs = require('fs');
-    const currentYear= (new Date()).getFullYear();
+    const currentYear = (new Date()).getFullYear();"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/client/src/client.spec.js,,"-  'limit': 1
-};
+    'limit': 1,
+  };
-  ""ips"": [
-    {
-      ""ip"": ""192.168.1.1""
-    }, 
-    {
-      ""ip"": ""192.*.*.*""
-    }, 
-    {
-      ""ip"": ""192.168.1.3/32""
-    }
-  ]
-};
+    'ips': [
+      {
+        'ip': '192.168.1.1',
+      },
+      {
+        'ip': '192.*.*.*',
+      },
+      {
+        'ip': '192.168.1.3/32',
+      },
+    ],
+  };
-  ""ids"": [
-    1, 
-    2, 
-    3
-  ]
-};
+    'ids': [
+      1,
+      2,
+      3,
+    ],
+  };
-  ""email_to"": ""example@example.com"", 
-  ""frequency"": ""daily"", 
-  ""type"": ""stats_notification""
-};
+    'email_to': 'example@example.com',
+    'frequency': 'daily',
+    'type': 'stats_notification',
+  };
-  ""email_to"": ""example@example.com""
-};
+    'email_to': 'example@example.com',
+  };
-  ""name"": ""My API Key"", 
-  ""sample"": ""data"", 
-  ""scopes"": [
-    ""mail.send"", 
-    ""alerts.create"", 
-    ""alerts.read""
-  ]
-};
+    'name': 'My API Key',
+    'sample': 'data',
+    'scopes': [
+      'mail.send',
+      'alerts.create',
+      'alerts.read',
+    ],
+  };
-  'limit': 1
-};
+    'limit': 1,
+  };
-  ""name"": ""A New Hope"", 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.update""
-  ]
-};
+    'name': 'A New Hope',
+    'scopes': [
+      'user.profile.read',
+      'user.profile.update',
+    ],
+  };
-  ""name"": ""A New Hope""
-};
+    'name': 'A New Hope',
+  };
-  ""description"": ""Suggestions for products our users might like."", 
-  ""is_default"": true, 
-  ""name"": ""Product Suggestions""
-};
+    'description': 'Suggestions for products our users might like.',
+    'is_default': true,
+    'name': 'Product Suggestions',
+  };
-  'id': 1
-};
+    'id': 1,
+  };
-  ""description"": ""Suggestions for items our users might like."", 
-  ""id"": 103, 
-  ""name"": ""Item Suggestions""
-};
+    'description': 'Suggestions for items our users might like.',
+    'id': 103,
+    'name': 'Item Suggestions',
+  };
-  ""recipient_emails"": [
-    ""test1@example.com"", 
-    ""test2@example.com""
-  ]
-};
+    'recipient_emails': [
+      'test1@example.com',
+      'test2@example.com',
+    ],
+  };
-  ""recipient_emails"": [
-    ""exists1@example.com"", 
-    ""exists2@example.com"", 
-    ""doesnotexists@example.com""
-  ]
-};
+    'recipient_emails': [
+      'exists1@example.com',
+      'exists2@example.com',
+      'doesnotexists@example.com',
+    ],
+  };
-  ""recipient_emails"": [
-    ""test1@example.com"", 
-    ""test2@example.com""
-  ]
-};
+    'recipient_emails': [
+      'test1@example.com',
+      'test2@example.com',
+    ],
+  };
-  'aggregated_by': 'day', 
-  'browsers': 'test_string', 
-  'end_date': '2016-04-01', 
-  'limit': 'test_string', 
-  'offset': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'browsers': 'test_string',
+    'end_date': '2016-04-01',
+    'limit': 'test_string',
+    'offset': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""categories"": [
-    ""spring line""
-  ], 
-  ""custom_unsubscribe_url"": """", 
-  ""html_content"": ""<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>"", 
-  ""ip_pool"": ""marketing"", 
-  ""list_ids"": [
-    110, 
-    124
-  ], 
-  ""plain_content"": ""Check out our spring line!"", 
-  ""segment_ids"": [
-    110
-  ], 
-  ""sender_id"": 124451, 
-  ""subject"": ""New Products for Spring!"", 
-  ""suppression_group_id"": 42, 
-  ""title"": ""March Newsletter""
-};
+    'categories': [
+      'spring line',
+    ],
+    'custom_unsubscribe_url': '',
+    'html_content': '<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>',
+    'ip_pool': 'marketing',
+    'list_ids': [
+      110,
+      124,
+    ],
+    'plain_content': 'Check out our spring line!',
+    'segment_ids': [
+      110,
+    ],
+    'sender_id': 124451,
+    'subject': 'New Products for Spring!',
+    'suppression_group_id': 42,
+    'title': 'March Newsletter',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""categories"": [
-    ""summer line""
-  ], 
-  ""html_content"": ""<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>"", 
-  ""plain_content"": ""Check out our summer line!"", 
-  ""subject"": ""New Products for Summer!"", 
-  ""title"": ""May Newsletter""
-};
+    'categories': [
+      'summer line',
+    ],
+    'html_content': '<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>',
+    'plain_content': 'Check out our summer line!',
+    'subject': 'New Products for Summer!',
+    'title': 'May Newsletter',
+  };
-  ""send_at"": 1489771528
-};
+    'send_at': 1489771528,
+  };
-  ""send_at"": 1489451436
-};
+    'send_at': 1489451436,
+  };
-  ""to"": ""your.email@example.com""
-};
+    'to': 'your.email@example.com',
+  };
-  'category': 'test_string', 
-  'limit': 1, 
-  'offset': 1
-};
+    'category': 'test_string',
+    'limit': 1,
+    'offset': 1,
+  };
-  'aggregated_by': 'day', 
-  'categories': 'test_string', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'categories': 'test_string',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'start_date': '2016-01-01',
+  };
-  ""name"": ""pet"", 
-  ""type"": ""text""
-};
+    'name': 'pet',
+    'type': 'text',
+  };
-  ""name"": ""your list name""
-};
+    'name': 'your list name',
+  };
-  1, 
-  2, 
-  3, 
-  4
-];
+    1,
+    2,
+    3,
+    4,
+  ];
-  'delete_contacts': 'true'
-};
+    'delete_contacts': 'true',
+  };
-  ""name"": ""newlistname""
-};
+    'name': 'newlistname',
+  };
-  'list_id': 1
-};
+    'list_id': 1,
+  };
-  'list_id': 1
-};
+    'list_id': 1,
+  };
-  ""recipient_id1"", 
-  ""recipient_id2""
-];
+    'recipient_id1',
+    'recipient_id2',
+  ];
-  'list_id': 1, 
-  'page': 1, 
-  'page_size': 1
-};
+    'list_id': 1,
+    'page': 1,
+    'page_size': 1,
+  };
-  'list_id': 1, 
-  'recipient_id': 1
-};
+    'list_id': 1,
+    'recipient_id': 1,
+  };
-  {
-    ""age"": 25, 
-    ""email"": ""example@example.com"", 
-    ""first_name"": """", 
-    ""last_name"": ""User""
-  }, 
-  {
-    ""age"": 25, 
-    ""email"": ""example2@example.com"", 
-    ""first_name"": ""Example"", 
-    ""last_name"": ""User""
-  }
-];
+    {
+      'age': 25,
+      'email': 'example@example.com',
+      'first_name': '',
+      'last_name': 'User',
+    },
+    {
+      'age': 25,
+      'email': 'example2@example.com',
+      'first_name': 'Example',
+      'last_name': 'User',
+    },
+  ];
-  ""recipient_id1"", 
-  ""recipient_id2""
-];
+    'recipient_id1',
+    'recipient_id2',
+  ];
-  'page': 1, 
-  'page_size': 1
-};
+    'page': 1,
+    'page_size': 1,
+  };
-  {
-    ""email"": ""jones@example.com"", 
-    ""first_name"": ""Guy"", 
-    ""last_name"": ""Jones""
-  }
-];
+    {
+      'email': 'jones@example.com',
+      'first_name': 'Guy',
+      'last_name': 'Jones',
+    },
+  ];
-  '{field_name}': 'test_string'
-};
+    '{field_name}': 'test_string',
+  };
-  ""conditions"": [
-    {
-      ""and_or"": """", 
-      ""field"": ""last_name"", 
-      ""operator"": ""eq"", 
-      ""value"": ""Miller""
-    }, 
-    {
-      ""and_or"": ""and"", 
-      ""field"": ""last_clicked"", 
-      ""operator"": ""gt"", 
-      ""value"": ""01/02/2015""
-    }, 
-    {
-      ""and_or"": ""or"", 
-      ""field"": ""clicks.campaign_identifier"", 
-      ""operator"": ""eq"", 
-      ""value"": ""513""
-    }
-  ], 
-  ""list_id"": 4, 
-  ""name"": ""Last Name Miller""
-};
+    'conditions': [
+      {
+        'and_or': '',
+        'field': 'last_name',
+        'operator': 'eq',
+        'value': 'Miller',
+      },
+      {
+        'and_or': 'and',
+        'field': 'last_clicked',
+        'operator': 'gt',
+        'value': '01/02/2015',
+      },
+      {
+        'and_or': 'or',
+        'field': 'clicks.campaign_identifier',
+        'operator': 'eq',
+        'value': '513',
+      },
+    ],
+    'list_id': 4,
+    'name': 'Last Name Miller',
+  };
-  'delete_contacts': 'true'
-};
+    'delete_contacts': 'true',
+  };
-  ""conditions"": [
-    {
-      ""and_or"": """", 
-      ""field"": ""last_name"", 
-      ""operator"": ""eq"", 
-      ""value"": ""Miller""
-    }
-  ], 
-  ""list_id"": 5, 
-  ""name"": ""The Millers""
-};
+    'conditions': [
+      {
+        'and_or': '',
+        'field': 'last_name',
+        'operator': 'eq',
+        'value': 'Miller',
+      },
+    ],
+    'list_id': 5,
+    'name': 'The Millers',
+  };
-  'segment_id': 'test_string'
-};
+    'segment_id': 'test_string',
+  };
-  'segment_id': 1
-};
+    'segment_id': 1,
+  };
-  'page': 1, 
-  'page_size': 1
-};
+    'page': 1,
+    'page_size': 1,
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'country': 'US', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'country': 'US',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  ""count"": 90323478, 
-  ""subusers"": [
-    ""subuser1"", 
-    ""subuser2""
-  ], 
-  ""user_can_send"": true, 
-  ""warmup"": true
-};
+    'count': 90323478,
+    'subusers': [
+      'subuser1',
+      'subuser2',
+    ],
+    'user_can_send': true,
+    'warmup': true,
+  };
-  'exclude_whitelabels': 'true', 
-  'ip': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'subuser': 'test_string'
-};
+    'exclude_whitelabels': 'true',
+    'ip': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'subuser': 'test_string',
+  };
-  ""name"": ""marketing""
-};
+    'name': 'marketing',
+  };
-  ""name"": ""new_pool_name""
-};
+    'name': 'new_pool_name',
+  };
-  ""ip"": ""0.0.0.0""
-};
+    'ip': '0.0.0.0',
+  };
-  ""ip"": ""0.0.0.0""
-};
+    'ip': '0.0.0.0',
+  };
-  ""content"": [
-    {
-      ""type"": ""text/html"", 
-      ""value"": ""<html><p>Hello, world!</p></html>""
-    }
-  ], 
-  ""from"": {
-    ""email"": ""sam.smith@example.com"", 
-    ""name"": ""Sam Smith""
-  }, 
-  ""personalizations"": [
-    {
-      ""subject"": ""Hello, World!"", 
-      ""to"": [
-        {
-          ""email"": ""john.doe@example.com"", 
-          ""name"": ""John Doe""
-        }
-      ]
-    }
-  ], 
-  ""reply_to"": {
-    ""email"": ""sam.smith@example.com"", 
-    ""name"": ""Sam Smith""
-  }, 
-  ""subject"": ""Hello, World!""
-};
+    'content': [
+      {
+        'type': 'text/html',
+        'value': '<html><p>Hello, world!</p></html>',
+      },
+    ],
+    'from': {
+      'email': 'sam.smith@example.com',
+      'name': 'Sam Smith',
+    },
+    'personalizations': [
+      {
+        'subject': 'Hello, World!',
+        'to': [
+          {
+            'email': 'john.doe@example.com',
+            'name': 'John Doe',
+          },
+        ],
+      },
+    ],
+    'reply_to': {
+      'email': 'sam.smith@example.com',
+      'name': 'Sam Smith',
+    },
+    'subject': 'Hello, World!',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enabled"": true, 
-  ""list"": [
-    ""email1@example.com"", 
-    ""example.com""
-  ]
-};
+    'enabled': true,
+    'list': [
+      'email1@example.com',
+      'example.com',
+    ],
+  };
-  ""email"": ""email@example.com"", 
-  ""enabled"": false
-};
+    'email': 'email@example.com',
+    'enabled': false,
+  };
-  ""enabled"": true, 
-  ""hard_bounces"": 5, 
-  ""soft_bounces"": 5
-};
+    'enabled': true,
+    'hard_bounces': 5,
+    'soft_bounces': 5,
+  };
-  ""enabled"": true, 
-  ""html_content"": ""..."", 
-  ""plain_content"": ""...""
-};
+    'enabled': true,
+    'html_content': '...',
+    'plain_content': '...',
+  };
-  ""email"": ""example@example.com"", 
-  ""enabled"": true
-};
+    'email': 'example@example.com',
+    'enabled': true,
+  };
-  ""email"": """", 
-  ""enabled"": false
-};
+    'email': '',
+    'enabled': false,
+  };
-  ""enabled"": false
-};
+    'enabled': false,
+  };
-  ""enabled"": true, 
-  ""max_score"": 5, 
-  ""url"": ""url""
-};
+    'enabled': true,
+    'max_score': 5,
+    'url': 'url',
+  };
-  ""enabled"": true, 
-  ""html_content"": ""<% body %>""
-};
+    'enabled': true,
+    'html_content': '<% body %>',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'mailbox_providers': 'test_string', 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'mailbox_providers': 'test_string',
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enable_subuser_statistics"": true, 
-  ""enabled"": true, 
-  ""license_key"": """"
-};
+    'enable_subuser_statistics': true,
+    'enabled': true,
+    'license_key': '',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""address"": ""123 Elm St."", 
-  ""address_2"": ""Apt. 456"", 
-  ""city"": ""Denver"", 
-  ""country"": ""United States"", 
-  ""from"": {
-    ""email"": ""from@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""nickname"": ""My Sender ID"", 
-  ""reply_to"": {
-    ""email"": ""replyto@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""state"": ""Colorado"", 
-  ""zip"": ""80202""
-};
+    'address': '123 Elm St.',
+    'address_2': 'Apt. 456',
+    'city': 'Denver',
+    'country': 'United States',
+    'from': {
+      'email': 'from@example.com',
+      'name': 'Example INC',
+    },
+    'nickname': 'My Sender ID',
+    'reply_to': {
+      'email': 'replyto@example.com',
+      'name': 'Example INC',
+    },
+    'state': 'Colorado',
+    'zip': '80202',
+  };
-  ""address"": ""123 Elm St."", 
-  ""address_2"": ""Apt. 456"", 
-  ""city"": ""Denver"", 
-  ""country"": ""United States"", 
-  ""from"": {
-    ""email"": ""from@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""nickname"": ""My Sender ID"", 
-  ""reply_to"": {
-    ""email"": ""replyto@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""state"": ""Colorado"", 
-  ""zip"": ""80202""
-};
+    'address': '123 Elm St.',
+    'address_2': 'Apt. 456',
+    'city': 'Denver',
+    'country': 'United States',
+    'from': {
+      'email': 'from@example.com',
+      'name': 'Example INC',
+    },
+    'nickname': 'My Sender ID',
+    'reply_to': {
+      'email': 'replyto@example.com',
+      'name': 'Example INC',
+    },
+    'state': 'Colorado',
+    'zip': '80202',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  ""email"": ""John@example.com"", 
-  ""ips"": [
-    ""1.1.1.1"", 
-    ""2.2.2.2""
-  ], 
-  ""password"": ""johns_password"", 
-  ""username"": ""John@example.com""
-};
+    'email': 'John@example.com',
+    'ips': [
+      '1.1.1.1',
+      '2.2.2.2',
+    ],
+    'password': 'johns_password',
+    'username': 'John@example.com',
+  };
-  'limit': 1, 
-  'offset': 1, 
-  'username': 'test_string'
-};
+    'limit': 1,
+    'offset': 1,
+    'username': 'test_string',
+  };
-  'usernames': 'test_string'
-};
+    'usernames': 'test_string',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01', 
-  'subusers': 'test_string'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+    'subusers': 'test_string',
+  };
-  'date': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'subuser': 'test_string'
-};
+    'date': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'subuser': 'test_string',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""disabled"": false
-};
+    'disabled': false,
+  };
-  ""127.0.0.1""
-];
+    '127.0.0.1',
+  ];
-  ""email"": ""example@example.com"", 
-  ""frequency"": 500
-};
+    'email': 'example@example.com',
+    'frequency': 500,
+  };
-  ""email"": ""example@example.com"", 
-  ""frequency"": 50000
-};
+    'email': 'example@example.com',
+    'frequency': 50000,
+  };
-  'date': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string'
-};
+    'date': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""delete_all"": true, 
-  ""emails"": [
-    ""example@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': true,
+    'emails': [
+      'example@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'start_time': 1,
+  };
-  'email_address': 'example@example.com'
-};
+    'email_address': 'example@example.com',
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""email"": ""teammate1@example.com"", 
-  ""is_admin"": false, 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.update""
-  ]
-};
+    'email': 'teammate1@example.com',
+    'is_admin': false,
+    'scopes': [
+      'user.profile.read',
+      'user.profile.update',
+    ],
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""is_admin"": false, 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.edit""
-  ]
-};
+    'is_admin': false,
+    'scopes': [
+      'user.profile.read',
+      'user.profile.edit',
+    ],
+  };
-  ""name"": ""example_name""
-};
+    'name': 'example_name',
+  };
-  ""name"": ""new_example_name""
-};
+    'name': 'new_example_name',
+  };
-  ""active"": 1, 
-  ""html_content"": ""<%body%>"", 
-  ""name"": ""example_version_name"", 
-  ""plain_content"": ""<%body%>"", 
-  ""subject"": ""<%subject%>"", 
-  ""template_id"": ""ddb96bbc-9b92-425e-8979-99464621b543""
-};
+    'active': 1,
+    'html_content': '<%body%>',
+    'name': 'example_version_name',
+    'plain_content': '<%body%>',
+    'subject': '<%subject%>',
+    'template_id': 'ddb96bbc-9b92-425e-8979-99464621b543',
+  };
-  ""active"": 1, 
-  ""html_content"": ""<%body%>"", 
-  ""name"": ""updated_example_name"", 
-  ""plain_content"": ""<%body%>"", 
-  ""subject"": ""<%subject%>""
-};
+    'active': 1,
+    'html_content': '<%body%>',
+    'name': 'updated_example_name',
+    'plain_content': '<%body%>',
+    'subject': '<%subject%>',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enabled"": true
-};
+    'enabled': true,
+  };
-  ""enabled"": true, 
-  ""utm_campaign"": ""website"", 
-  ""utm_content"": """", 
-  ""utm_medium"": ""email"", 
-  ""utm_source"": ""sendgrid.com"", 
-  ""utm_term"": """"
-};
+    'enabled': true,
+    'utm_campaign': 'website',
+    'utm_content': '',
+    'utm_medium': 'email',
+    'utm_source': 'sendgrid.com',
+    'utm_term': '',
+  };
-  ""enabled"": true
-};
+    'enabled': true,
+  };
-  ""enabled"": true, 
-  ""html_content"": ""html content"", 
-  ""landing"": ""landing page html"", 
-  ""plain_content"": ""text content"", 
-  ""replace"": ""replacement tag"", 
-  ""url"": ""url""
-};
+    'enabled': true,
+    'html_content': 'html content',
+    'landing': 'landing page html',
+    'plain_content': 'text content',
+    'replace': 'replacement tag',
+    'url': 'url',
+  };
-  ""email"": ""example@example.com""
-};
+    'email': 'example@example.com',
+  };
-  ""new_password"": ""new_password"", 
-  ""old_password"": ""old_password""
-};
+    'new_password': 'new_password',
+    'old_password': 'old_password',
+  };
-  ""city"": ""Orange"", 
-  ""first_name"": ""Example"", 
-  ""last_name"": ""User""
-};
+    'city': 'Orange',
+    'first_name': 'Example',
+    'last_name': 'User',
+  };
-  ""batch_id"": ""YOUR_BATCH_ID"", 
-  ""status"": ""pause""
-};
+    'batch_id': 'YOUR_BATCH_ID',
+    'status': 'pause',
+  };
-  ""status"": ""pause""
-};
+    'status': 'pause',
+  };
-  ""require_tls"": true, 
-  ""require_valid_cert"": false
-};
+    'require_tls': true,
+    'require_valid_cert': false,
+  };
-  ""username"": ""test_username""
-};
+    'username': 'test_username',
+  };
-  ""bounce"": true, 
-  ""click"": true, 
-  ""deferred"": true, 
-  ""delivered"": true, 
-  ""dropped"": true, 
-  ""enabled"": true, 
-  ""group_resubscribe"": true, 
-  ""group_unsubscribe"": true, 
-  ""open"": true, 
-  ""processed"": true, 
-  ""spam_report"": true, 
-  ""unsubscribe"": true, 
-  ""url"": ""url""
-};
+    'bounce': true,
+    'click': true,
+    'deferred': true,
+    'delivered': true,
+    'dropped': true,
+    'enabled': true,
+    'group_resubscribe': true,
+    'group_unsubscribe': true,
+    'open': true,
+    'processed': true,
+    'spam_report': true,
+    'unsubscribe': true,
+    'url': 'url',
+  };
-  ""url"": ""url""
-};
+    'url': 'url',
+  };
-  ""hostname"": ""myhostname.com"", 
-  ""send_raw"": false, 
-  ""spam_check"": true, 
-  ""url"": ""http://email.myhosthame.com""
-};
+    'hostname': 'myhostname.com',
+    'send_raw': false,
+    'spam_check': true,
+    'url': 'http://email.myhosthame.com',
+  };
-  ""send_raw"": true, 
-  ""spam_check"": false, 
-  ""url"": ""http://newdomain.com/parse""
-};
+    'send_raw': true,
+    'spam_check': false,
+    'url': 'http://newdomain.com/parse',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 'test_string', 
-  'offset': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 'test_string',
+    'offset': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""automatic_security"": false, 
-  ""custom_spf"": true, 
-  ""default"": true, 
-  ""domain"": ""example.com"", 
-  ""ips"": [
-    ""192.168.1.1"", 
-    ""192.168.1.2""
-  ], 
-  ""subdomain"": ""news"", 
-  ""username"": ""john@example.com""
-};
+    'automatic_security': false,
+    'custom_spf': true,
+    'default': true,
+    'domain': 'example.com',
+    'ips': [
+      '192.168.1.1',
+      '192.168.1.2',
+    ],
+    'subdomain': 'news',
+    'username': 'john@example.com',
+  };
-  'domain': 'test_string', 
-  'exclude_subusers': 'true', 
-  'limit': 1, 
-  'offset': 1, 
-  'username': 'test_string'
-};
+    'domain': 'test_string',
+    'exclude_subusers': 'true',
+    'limit': 1,
+    'offset': 1,
+    'username': 'test_string',
+  };
-  ""custom_spf"": true, 
-  ""default"": false
-};
+    'custom_spf': true,
+    'default': false,
+  };
-  ""username"": ""jane@example.com""
-};
+    'username': 'jane@example.com',
+  };
-  ""ip"": ""192.168.0.1""
-};
+    'ip': '192.168.0.1',
+  };
-  ""domain"": ""example.com"", 
-  ""ip"": ""192.168.1.1"", 
-  ""subdomain"": ""email""
-};
+    'domain': 'example.com',
+    'ip': '192.168.1.1',
+    'subdomain': 'email',
+  };
-  'ip': 'test_string', 
-  'limit': 1, 
-  'offset': 1
-};
+    'ip': 'test_string',
+    'limit': 1,
+    'offset': 1,
+  };
-  ""default"": true, 
-  ""domain"": ""example.com"", 
-  ""subdomain"": ""mail""
-};
+    'default': true,
+    'domain': 'example.com',
+    'subdomain': 'mail',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  'limit': 1
-};
+    'limit': 1,
+  };
-  'domain': 'test_string'
-};
+    'domain': 'test_string',
+  };
-  'username': 'test_string'
-};
+    'username': 'test_string',
+  };
-  'username': 'test_string'
-};
+    'username': 'test_string',
+  };
-  ""default"": true
-};
+    'default': true,
+  };
-  ""username"": ""jane@example.com""
-};
+    'username': 'jane@example.com',
+  };
-","-  'limit': 1
-};
+    'limit': 1,
+  };
-  ""ips"": [
-    {
-      ""ip"": ""192.168.1.1""
-    }, 
-    {
-      ""ip"": ""192.*.*.*""
-    }, 
-    {
-      ""ip"": ""192.168.1.3/32""
-    }
-  ]
-};
+    'ips': [
+      {
+        'ip': '192.168.1.1',
+      },
+      {
+        'ip': '192.*.*.*',
+      },
+      {
+        'ip': '192.168.1.3/32',
+      },
+    ],
+  };
-  ""ids"": [
-    1, 
-    2, 
-    3
-  ]
-};
+    'ids': [
+      1,
+      2,
+      3,
+    ],
+  };
-  ""email_to"": ""example@example.com"", 
-  ""frequency"": ""daily"", 
-  ""type"": ""stats_notification""
-};
+    'email_to': 'example@example.com',
+    'frequency': 'daily',
+    'type': 'stats_notification',
+  };
-  ""email_to"": ""example@example.com""
-};
+    'email_to': 'example@example.com',
+  };
-  ""name"": ""My API Key"", 
-  ""sample"": ""data"", 
-  ""scopes"": [
-    ""mail.send"", 
-    ""alerts.create"", 
-    ""alerts.read""
-  ]
-};
+    'name': 'My API Key',
+    'sample': 'data',
+    'scopes': [
+      'mail.send',
+      'alerts.create',
+      'alerts.read',
+    ],
+  };
-  'limit': 1
-};
+    'limit': 1,
+  };
-  ""name"": ""A New Hope"", 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.update""
-  ]
-};
+    'name': 'A New Hope',
+    'scopes': [
+      'user.profile.read',
+      'user.profile.update',
+    ],
+  };
-  ""name"": ""A New Hope""
-};
+    'name': 'A New Hope',
+  };
-  ""description"": ""Suggestions for products our users might like."", 
-  ""is_default"": true, 
-  ""name"": ""Product Suggestions""
-};
+    'description': 'Suggestions for products our users might like.',
+    'is_default': true,
+    'name': 'Product Suggestions',
+  };
-  'id': 1
-};
+    'id': 1,
+  };
-  ""description"": ""Suggestions for items our users might like."", 
-  ""id"": 103, 
-  ""name"": ""Item Suggestions""
-};
+    'description': 'Suggestions for items our users might like.',
+    'id': 103,
+    'name': 'Item Suggestions',
+  };
-  ""recipient_emails"": [
-    ""test1@example.com"", 
-    ""test2@example.com""
-  ]
-};
+    'recipient_emails': [
+      'test1@example.com',
+      'test2@example.com',
+    ],
+  };
-  ""recipient_emails"": [
-    ""exists1@example.com"", 
-    ""exists2@example.com"", 
-    ""doesnotexists@example.com""
-  ]
-};
+    'recipient_emails': [
+      'exists1@example.com',
+      'exists2@example.com',
+      'doesnotexists@example.com',
+    ],
+  };
-  ""recipient_emails"": [
-    ""test1@example.com"", 
-    ""test2@example.com""
-  ]
-};
+    'recipient_emails': [
+      'test1@example.com',
+      'test2@example.com',
+    ],
+  };
-  'aggregated_by': 'day', 
-  'browsers': 'test_string', 
-  'end_date': '2016-04-01', 
-  'limit': 'test_string', 
-  'offset': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'browsers': 'test_string',
+    'end_date': '2016-04-01',
+    'limit': 'test_string',
+    'offset': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""categories"": [
-    ""spring line""
-  ], 
-  ""custom_unsubscribe_url"": """", 
-  ""html_content"": ""<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>"", 
-  ""ip_pool"": ""marketing"", 
-  ""list_ids"": [
-    110, 
-    124
-  ], 
-  ""plain_content"": ""Check out our spring line!"", 
-  ""segment_ids"": [
-    110
-  ], 
-  ""sender_id"": 124451, 
-  ""subject"": ""New Products for Spring!"", 
-  ""suppression_group_id"": 42, 
-  ""title"": ""March Newsletter""
-};
+    'categories': [
+      'spring line',
+    ],
+    'custom_unsubscribe_url': '',
+    'html_content': '<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>',
+    'ip_pool': 'marketing',
+    'list_ids': [
+      110,
+      124,
+    ],
+    'plain_content': 'Check out our spring line!',
+    'segment_ids': [
+      110,
+    ],
+    'sender_id': 124451,
+    'subject': 'New Products for Spring!',
+    'suppression_group_id': 42,
+    'title': 'March Newsletter',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""categories"": [
-    ""summer line""
-  ], 
-  ""html_content"": ""<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>"", 
-  ""plain_content"": ""Check out our summer line!"", 
-  ""subject"": ""New Products for Summer!"", 
-  ""title"": ""May Newsletter""
-};
+    'categories': [
+      'summer line',
+    ],
+    'html_content': '<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>',
+    'plain_content': 'Check out our summer line!',
+    'subject': 'New Products for Summer!',
+    'title': 'May Newsletter',
+  };
-  ""send_at"": 1489771528
-};
+    'send_at': 1489771528,
+  };
-  ""send_at"": 1489451436
-};
+    'send_at': 1489451436,
+  };
-  ""to"": ""your.email@example.com""
-};
+    'to': 'your.email@example.com',
+  };
-  'category': 'test_string', 
-  'limit': 1, 
-  'offset': 1
-};
+    'category': 'test_string',
+    'limit': 1,
+    'offset': 1,
+  };
-  'aggregated_by': 'day', 
-  'categories': 'test_string', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'categories': 'test_string',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'start_date': '2016-01-01',
+  };
-  ""name"": ""pet"", 
-  ""type"": ""text""
-};
+    'name': 'pet',
+    'type': 'text',
+  };
-  ""name"": ""your list name""
-};
+    'name': 'your list name',
+  };
-  1, 
-  2, 
-  3, 
-  4
-];
+    1,
+    2,
+    3,
+    4,
+  ];
-  'delete_contacts': 'true'
-};
+    'delete_contacts': 'true',
+  };
-  ""name"": ""newlistname""
-};
+    'name': 'newlistname',
+  };
-  'list_id': 1
-};
+    'list_id': 1,
+  };
-  'list_id': 1
-};
+    'list_id': 1,
+  };
-  ""recipient_id1"", 
-  ""recipient_id2""
-];
+    'recipient_id1',
+    'recipient_id2',
+  ];
-  'list_id': 1, 
-  'page': 1, 
-  'page_size': 1
-};
+    'list_id': 1,
+    'page': 1,
+    'page_size': 1,
+  };
-  'list_id': 1, 
-  'recipient_id': 1
-};
+    'list_id': 1,
+    'recipient_id': 1,
+  };
-  {
-    ""age"": 25, 
-    ""email"": ""example@example.com"", 
-    ""first_name"": """", 
-    ""last_name"": ""User""
-  }, 
-  {
-    ""age"": 25, 
-    ""email"": ""example2@example.com"", 
-    ""first_name"": ""Example"", 
-    ""last_name"": ""User""
-  }
-];
+    {
+      'age': 25,
+      'email': 'example@example.com',
+      'first_name': '',
+      'last_name': 'User',
+    },
+    {
+      'age': 25,
+      'email': 'example2@example.com',
+      'first_name': 'Example',
+      'last_name': 'User',
+    },
+  ];
-  ""recipient_id1"", 
-  ""recipient_id2""
-];
+    'recipient_id1',
+    'recipient_id2',
+  ];
-  'page': 1, 
-  'page_size': 1
-};
+    'page': 1,
+    'page_size': 1,
+  };
-  {
-    ""email"": ""jones@example.com"", 
-    ""first_name"": ""Guy"", 
-    ""last_name"": ""Jones""
-  }
-];
+    {
+      'email': 'jones@example.com',
+      'first_name': 'Guy',
+      'last_name': 'Jones',
+    },
+  ];
-  '{field_name}': 'test_string'
-};
+    '{field_name}': 'test_string',
+  };
-  ""conditions"": [
-    {
-      ""and_or"": """", 
-      ""field"": ""last_name"", 
-      ""operator"": ""eq"", 
-      ""value"": ""Miller""
-    }, 
-    {
-      ""and_or"": ""and"", 
-      ""field"": ""last_clicked"", 
-      ""operator"": ""gt"", 
-      ""value"": ""01/02/2015""
-    }, 
-    {
-      ""and_or"": ""or"", 
-      ""field"": ""clicks.campaign_identifier"", 
-      ""operator"": ""eq"", 
-      ""value"": ""513""
-    }
-  ], 
-  ""list_id"": 4, 
-  ""name"": ""Last Name Miller""
-};
+    'conditions': [
+      {
+        'and_or': '',
+        'field': 'last_name',
+        'operator': 'eq',
+        'value': 'Miller',
+      },
+      {
+        'and_or': 'and',
+        'field': 'last_clicked',
+        'operator': 'gt',
+        'value': '01/02/2015',
+      },
+      {
+        'and_or': 'or',
+        'field': 'clicks.campaign_identifier',
+        'operator': 'eq',
+        'value': '513',
+      },
+    ],
+    'list_id': 4,
+    'name': 'Last Name Miller',
+  };
-  'delete_contacts': 'true'
-};
+    'delete_contacts': 'true',
+  };
-  ""conditions"": [
-    {
-      ""and_or"": """", 
-      ""field"": ""last_name"", 
-      ""operator"": ""eq"", 
-      ""value"": ""Miller""
-    }
-  ], 
-  ""list_id"": 5, 
-  ""name"": ""The Millers""
-};
+    'conditions': [
+      {
+        'and_or': '',
+        'field': 'last_name',
+        'operator': 'eq',
+        'value': 'Miller',
+      },
+    ],
+    'list_id': 5,
+    'name': 'The Millers',
+  };
-  'segment_id': 'test_string'
-};
+    'segment_id': 'test_string',
+  };
-  'segment_id': 1
-};
+    'segment_id': 1,
+  };
-  'page': 1, 
-  'page_size': 1
-};
+    'page': 1,
+    'page_size': 1,
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'aggregated_by': 'day', 
-  'country': 'US', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'country': 'US',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  ""count"": 90323478, 
-  ""subusers"": [
-    ""subuser1"", 
-    ""subuser2""
-  ], 
-  ""user_can_send"": true, 
-  ""warmup"": true
-};
+    'count': 90323478,
+    'subusers': [
+      'subuser1',
+      'subuser2',
+    ],
+    'user_can_send': true,
+    'warmup': true,
+  };
-  'exclude_whitelabels': 'true', 
-  'ip': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'subuser': 'test_string'
-};
+    'exclude_whitelabels': 'true',
+    'ip': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'subuser': 'test_string',
+  };
-  ""name"": ""marketing""
-};
+    'name': 'marketing',
+  };
-  ""name"": ""new_pool_name""
-};
+    'name': 'new_pool_name',
+  };
-  ""ip"": ""0.0.0.0""
-};
+    'ip': '0.0.0.0',
+  };
-  ""ip"": ""0.0.0.0""
-};
+    'ip': '0.0.0.0',
+  };
-  ""content"": [
-    {
-      ""type"": ""text/html"", 
-      ""value"": ""<html><p>Hello, world!</p></html>""
-    }
-  ], 
-  ""from"": {
-    ""email"": ""sam.smith@example.com"", 
-    ""name"": ""Sam Smith""
-  }, 
-  ""personalizations"": [
-    {
-      ""subject"": ""Hello, World!"", 
-      ""to"": [
-        {
-          ""email"": ""john.doe@example.com"", 
-          ""name"": ""John Doe""
-        }
-      ]
-    }
-  ], 
-  ""reply_to"": {
-    ""email"": ""sam.smith@example.com"", 
-    ""name"": ""Sam Smith""
-  }, 
-  ""subject"": ""Hello, World!""
-};
+    'content': [
+      {
+        'type': 'text/html',
+        'value': '<html><p>Hello, world!</p></html>',
+      },
+    ],
+    'from': {
+      'email': 'sam.smith@example.com',
+      'name': 'Sam Smith',
+    },
+    'personalizations': [
+      {
+        'subject': 'Hello, World!',
+        'to': [
+          {
+            'email': 'john.doe@example.com',
+            'name': 'John Doe',
+          },
+        ],
+      },
+    ],
+    'reply_to': {
+      'email': 'sam.smith@example.com',
+      'name': 'Sam Smith',
+    },
+    'subject': 'Hello, World!',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enabled"": true, 
-  ""list"": [
-    ""email1@example.com"", 
-    ""example.com""
-  ]
-};
+    'enabled': true,
+    'list': [
+      'email1@example.com',
+      'example.com',
+    ],
+  };
-  ""email"": ""email@example.com"", 
-  ""enabled"": false
-};
+    'email': 'email@example.com',
+    'enabled': false,
+  };
-  ""enabled"": true, 
-  ""hard_bounces"": 5, 
-  ""soft_bounces"": 5
-};
+    'enabled': true,
+    'hard_bounces': 5,
+    'soft_bounces': 5,
+  };
-  ""enabled"": true, 
-  ""html_content"": ""..."", 
-  ""plain_content"": ""...""
-};
+    'enabled': true,
+    'html_content': '...',
+    'plain_content': '...',
+  };
-  ""email"": ""example@example.com"", 
-  ""enabled"": true
-};
+    'email': 'example@example.com',
+    'enabled': true,
+  };
-  ""email"": """", 
-  ""enabled"": false
-};
+    'email': '',
+    'enabled': false,
+  };
-  ""enabled"": false
-};
+    'enabled': false,
+  };
-  ""enabled"": true, 
-  ""max_score"": 5, 
-  ""url"": ""url""
-};
+    'enabled': true,
+    'max_score': 5,
+    'url': 'url',
+  };
-  ""enabled"": true, 
-  ""html_content"": ""<% body %>""
-};
+    'enabled': true,
+    'html_content': '<% body %>',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'mailbox_providers': 'test_string', 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'mailbox_providers': 'test_string',
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enable_subuser_statistics"": true, 
-  ""enabled"": true, 
-  ""license_key"": """"
-};
+    'enable_subuser_statistics': true,
+    'enabled': true,
+    'license_key': '',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""address"": ""123 Elm St."", 
-  ""address_2"": ""Apt. 456"", 
-  ""city"": ""Denver"", 
-  ""country"": ""United States"", 
-  ""from"": {
-    ""email"": ""from@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""nickname"": ""My Sender ID"", 
-  ""reply_to"": {
-    ""email"": ""replyto@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""state"": ""Colorado"", 
-  ""zip"": ""80202""
-};
+    'address': '123 Elm St.',
+    'address_2': 'Apt. 456',
+    'city': 'Denver',
+    'country': 'United States',
+    'from': {
+      'email': 'from@example.com',
+      'name': 'Example INC',
+    },
+    'nickname': 'My Sender ID',
+    'reply_to': {
+      'email': 'replyto@example.com',
+      'name': 'Example INC',
+    },
+    'state': 'Colorado',
+    'zip': '80202',
+  };
-  ""address"": ""123 Elm St."", 
-  ""address_2"": ""Apt. 456"", 
-  ""city"": ""Denver"", 
-  ""country"": ""United States"", 
-  ""from"": {
-    ""email"": ""from@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""nickname"": ""My Sender ID"", 
-  ""reply_to"": {
-    ""email"": ""replyto@example.com"", 
-    ""name"": ""Example INC""
-  }, 
-  ""state"": ""Colorado"", 
-  ""zip"": ""80202""
-};
+    'address': '123 Elm St.',
+    'address_2': 'Apt. 456',
+    'city': 'Denver',
+    'country': 'United States',
+    'from': {
+      'email': 'from@example.com',
+      'name': 'Example INC',
+    },
+    'nickname': 'My Sender ID',
+    'reply_to': {
+      'email': 'replyto@example.com',
+      'name': 'Example INC',
+    },
+    'state': 'Colorado',
+    'zip': '80202',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+  };
-  ""email"": ""John@example.com"", 
-  ""ips"": [
-    ""1.1.1.1"", 
-    ""2.2.2.2""
-  ], 
-  ""password"": ""johns_password"", 
-  ""username"": ""John@example.com""
-};
+    'email': 'John@example.com',
+    'ips': [
+      '1.1.1.1',
+      '2.2.2.2',
+    ],
+    'password': 'johns_password',
+    'username': 'John@example.com',
+  };
-  'limit': 1, 
-  'offset': 1, 
-  'username': 'test_string'
-};
+    'limit': 1,
+    'offset': 1,
+    'username': 'test_string',
+  };
-  'usernames': 'test_string'
-};
+    'usernames': 'test_string',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'start_date': '2016-01-01', 
-  'subusers': 'test_string'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'start_date': '2016-01-01',
+    'subusers': 'test_string',
+  };
-  'date': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'subuser': 'test_string'
-};
+    'date': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'subuser': 'test_string',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""disabled"": false
-};
+    'disabled': false,
+  };
-  ""127.0.0.1""
-];
+    '127.0.0.1',
+  ];
-  ""email"": ""example@example.com"", 
-  ""frequency"": 500
-};
+    'email': 'example@example.com',
+    'frequency': 500,
+  };
-  ""email"": ""example@example.com"", 
-  ""frequency"": 50000
-};
+    'email': 'example@example.com',
+    'frequency': 50000,
+  };
-  'date': 'test_string', 
-  'limit': 1, 
-  'offset': 1, 
-  'sort_by_direction': 'asc', 
-  'sort_by_metric': 'test_string'
-};
+    'date': 'test_string',
+    'limit': 1,
+    'offset': 1,
+    'sort_by_direction': 'asc',
+    'sort_by_metric': 'test_string',
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""delete_all"": true, 
-  ""emails"": [
-    ""example@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': true,
+    'emails': [
+      'example@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'start_time': 1,
+  };
-  'email_address': 'example@example.com'
-};
+    'email_address': 'example@example.com',
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""delete_all"": false, 
-  ""emails"": [
-    ""example1@example.com"", 
-    ""example2@example.com""
-  ]
-};
+    'delete_all': false,
+    'emails': [
+      'example1@example.com',
+      'example2@example.com',
+    ],
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  'end_time': 1, 
-  'limit': 1, 
-  'offset': 1, 
-  'start_time': 1
-};
+    'end_time': 1,
+    'limit': 1,
+    'offset': 1,
+    'start_time': 1,
+  };
-  ""email"": ""teammate1@example.com"", 
-  ""is_admin"": false, 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.update""
-  ]
-};
+    'email': 'teammate1@example.com',
+    'is_admin': false,
+    'scopes': [
+      'user.profile.read',
+      'user.profile.update',
+    ],
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""is_admin"": false, 
-  ""scopes"": [
-    ""user.profile.read"", 
-    ""user.profile.edit""
-  ]
-};
+    'is_admin': false,
+    'scopes': [
+      'user.profile.read',
+      'user.profile.edit',
+    ],
+  };
-  ""name"": ""example_name""
-};
+    'name': 'example_name',
+  };
-  ""name"": ""new_example_name""
-};
+    'name': 'new_example_name',
+  };
-  ""active"": 1, 
-  ""html_content"": ""<%body%>"", 
-  ""name"": ""example_version_name"", 
-  ""plain_content"": ""<%body%>"", 
-  ""subject"": ""<%subject%>"", 
-  ""template_id"": ""ddb96bbc-9b92-425e-8979-99464621b543""
-};
+    'active': 1,
+    'html_content': '<%body%>',
+    'name': 'example_version_name',
+    'plain_content': '<%body%>',
+    'subject': '<%subject%>',
+    'template_id': 'ddb96bbc-9b92-425e-8979-99464621b543',
+  };
-  ""active"": 1, 
-  ""html_content"": ""<%body%>"", 
-  ""name"": ""updated_example_name"", 
-  ""plain_content"": ""<%body%>"", 
-  ""subject"": ""<%subject%>""
-};
+    'active': 1,
+    'html_content': '<%body%>',
+    'name': 'updated_example_name',
+    'plain_content': '<%body%>',
+    'subject': '<%subject%>',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  ""enabled"": true
-};
+    'enabled': true,
+  };
-  ""enabled"": true, 
-  ""utm_campaign"": ""website"", 
-  ""utm_content"": """", 
-  ""utm_medium"": ""email"", 
-  ""utm_source"": ""sendgrid.com"", 
-  ""utm_term"": """"
-};
+    'enabled': true,
+    'utm_campaign': 'website',
+    'utm_content': '',
+    'utm_medium': 'email',
+    'utm_source': 'sendgrid.com',
+    'utm_term': '',
+  };
-  ""enabled"": true
-};
+    'enabled': true,
+  };
-  ""enabled"": true, 
-  ""html_content"": ""html content"", 
-  ""landing"": ""landing page html"", 
-  ""plain_content"": ""text content"", 
-  ""replace"": ""replacement tag"", 
-  ""url"": ""url""
-};
+    'enabled': true,
+    'html_content': 'html content',
+    'landing': 'landing page html',
+    'plain_content': 'text content',
+    'replace': 'replacement tag',
+    'url': 'url',
+  };
-  ""email"": ""example@example.com""
-};
+    'email': 'example@example.com',
+  };
-  ""new_password"": ""new_password"", 
-  ""old_password"": ""old_password""
-};
+    'new_password': 'new_password',
+    'old_password': 'old_password',
+  };
-  ""city"": ""Orange"", 
-  ""first_name"": ""Example"", 
-  ""last_name"": ""User""
-};
+    'city': 'Orange',
+    'first_name': 'Example',
+    'last_name': 'User',
+  };
-  ""batch_id"": ""YOUR_BATCH_ID"", 
-  ""status"": ""pause""
-};
+    'batch_id': 'YOUR_BATCH_ID',
+    'status': 'pause',
+  };
-  ""status"": ""pause""
-};
+    'status': 'pause',
+  };
-  ""require_tls"": true, 
-  ""require_valid_cert"": false
-};
+    'require_tls': true,
+    'require_valid_cert': false,
+  };
-  ""username"": ""test_username""
-};
+    'username': 'test_username',
+  };
-  ""bounce"": true, 
-  ""click"": true, 
-  ""deferred"": true, 
-  ""delivered"": true, 
-  ""dropped"": true, 
-  ""enabled"": true, 
-  ""group_resubscribe"": true, 
-  ""group_unsubscribe"": true, 
-  ""open"": true, 
-  ""processed"": true, 
-  ""spam_report"": true, 
-  ""unsubscribe"": true, 
-  ""url"": ""url""
-};
+    'bounce': true,
+    'click': true,
+    'deferred': true,
+    'delivered': true,
+    'dropped': true,
+    'enabled': true,
+    'group_resubscribe': true,
+    'group_unsubscribe': true,
+    'open': true,
+    'processed': true,
+    'spam_report': true,
+    'unsubscribe': true,
+    'url': 'url',
+  };
-  ""url"": ""url""
-};
+    'url': 'url',
+  };
-  ""hostname"": ""myhostname.com"", 
-  ""send_raw"": false, 
-  ""spam_check"": true, 
-  ""url"": ""http://email.myhosthame.com""
-};
+    'hostname': 'myhostname.com',
+    'send_raw': false,
+    'spam_check': true,
+    'url': 'http://email.myhosthame.com',
+  };
-  ""send_raw"": true, 
-  ""spam_check"": false, 
-  ""url"": ""http://newdomain.com/parse""
-};
+    'send_raw': true,
+    'spam_check': false,
+    'url': 'http://newdomain.com/parse',
+  };
-  'aggregated_by': 'day', 
-  'end_date': '2016-04-01', 
-  'limit': 'test_string', 
-  'offset': 'test_string', 
-  'start_date': '2016-01-01'
-};
+    'aggregated_by': 'day',
+    'end_date': '2016-04-01',
+    'limit': 'test_string',
+    'offset': 'test_string',
+    'start_date': '2016-01-01',
+  };
-  ""automatic_security"": false, 
-  ""custom_spf"": true, 
-  ""default"": true, 
-  ""domain"": ""example.com"", 
-  ""ips"": [
-    ""192.168.1.1"", 
-    ""192.168.1.2""
-  ], 
-  ""subdomain"": ""news"", 
-  ""username"": ""john@example.com""
-};
+    'automatic_security': false,
+    'custom_spf': true,
+    'default': true,
+    'domain': 'example.com',
+    'ips': [
+      '192.168.1.1',
+      '192.168.1.2',
+    ],
+    'subdomain': 'news',
+    'username': 'john@example.com',
+  };
-  'domain': 'test_string', 
-  'exclude_subusers': 'true', 
-  'limit': 1, 
-  'offset': 1, 
-  'username': 'test_string'
-};
+    'domain': 'test_string',
+    'exclude_subusers': 'true',
+    'limit': 1,
+    'offset': 1,
+    'username': 'test_string',
+  };
-  ""custom_spf"": true, 
-  ""default"": false
-};
+    'custom_spf': true,
+    'default': false,
+  };
-  ""username"": ""jane@example.com""
-};
+    'username': 'jane@example.com',
+  };
-  ""ip"": ""192.168.0.1""
-};
+    'ip': '192.168.0.1',
+  };
-  ""domain"": ""example.com"", 
-  ""ip"": ""192.168.1.1"", 
-  ""subdomain"": ""email""
-};
+    'domain': 'example.com',
+    'ip': '192.168.1.1',
+    'subdomain': 'email',
+  };
-  'ip': 'test_string', 
-  'limit': 1, 
-  'offset': 1
-};
+    'ip': 'test_string',
+    'limit': 1,
+    'offset': 1,
+  };
-  ""default"": true, 
-  ""domain"": ""example.com"", 
-  ""subdomain"": ""mail""
-};
+    'default': true,
+    'domain': 'example.com',
+    'subdomain': 'mail',
+  };
-  'limit': 1, 
-  'offset': 1
-};
+    'limit': 1,
+    'offset': 1,
+  };
-  'limit': 1
-};
+    'limit': 1,
+  };
-  'domain': 'test_string'
-};
+    'domain': 'test_string',
+  };
-  'username': 'test_string'
-};
+    'username': 'test_string',
+  };
-  'username': 'test_string'
-};
+    'username': 'test_string',
+  };
-  ""default"": true
-};
+    'default': true,
+  };
-  ""username"": ""jane@example.com""
-};
+    'username': 'jane@example.com',
+  };
-"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/attachment.js,,"-      filePath
+      filePath,
-    } else if (content instanceof Buffer && content.toString !== undefined) {
+    }
+    else if (content instanceof Buffer && content.toString !== undefined) {
-      if (this.disposition == 'attachment') {
+      if (this.disposition === 'attachment') {","-      filePath
+      filePath,
-    } else if (content instanceof Buffer && content.toString !== undefined) {
+    }
+    else if (content instanceof Buffer && content.toString !== undefined) {
-      if (this.disposition == 'attachment') {
+      if (this.disposition === 'attachment') {"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/attachment.spec.js,,"-      attachment.setContent(""Just a string."");
+      attachment.setContent('Just a string.');
-          filePath: ''
+          filePath: '',
-    attachment.setContent(new Buffer(""Hello World\n""));
+    attachment.setContent(new Buffer('Hello World\n'));
-      filePath: path.resolve(__dirname + '/attachment.js')
+      filePath: path.resolve(path.join(__dirname, '/attachment.js')),","-      attachment.setContent(""Just a string."");
+      attachment.setContent('Just a string.');
-          filePath: ''
+          filePath: '',
-    attachment.setContent(new Buffer(""Hello World\n""));
+    attachment.setContent(new Buffer('Hello World\n'));
-      filePath: path.resolve(__dirname + '/attachment.js')
+      filePath: path.resolve(path.join(__dirname, '/attachment.js')),"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/email-address.js,,"-	/**
+  /**
-	/**
+  /**","-	/**
+  /**
-	/**
+  /**"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/personalization_specs/reverse-merge-dynamic_teplate_data.spec.js,,"-describe('Personalization', function () {
+describe('Personalization', function() {
-  beforeEach(function () {
+  beforeEach(function() {
-  describe('deepMergeDynamicTemplateData()', function () {
-    it('should reverse merge dynamicTemplateData', function () {
+  describe('deepMergeDynamicTemplateData()', function() {
+    it('should reverse merge dynamicTemplateData', function() {
-    it('should not overwrite existing keys', function () {
+    it('should not overwrite existing keys', function() {
-    it('should work without prior dynamicTemplateData', function () {
+    it('should work without prior dynamicTemplateData', function() {
-    it('should throw an error for invalid input', function () {
-      expect(function () {
+    it('should throw an error for invalid input', function() {
+      expect(function() {
-    it('should accept no input', function () {
-      expect(function () {
+    it('should accept no input', function() {
+      expect(function() {","-describe('Personalization', function () {
+describe('Personalization', function() {
-  beforeEach(function () {
+  beforeEach(function() {
-  describe('deepMergeDynamicTemplateData()', function () {
-    it('should reverse merge dynamicTemplateData', function () {
+  describe('deepMergeDynamicTemplateData()', function() {
+    it('should reverse merge dynamicTemplateData', function() {
-    it('should not overwrite existing keys', function () {
+    it('should not overwrite existing keys', function() {
-    it('should work without prior dynamicTemplateData', function () {
+    it('should work without prior dynamicTemplateData', function() {
-    it('should throw an error for invalid input', function () {
-      expect(function () {
+    it('should throw an error for invalid input', function() {
+      expect(function() {
-    it('should accept no input', function () {
-      expect(function () {
+    it('should accept no input', function() {
+      expect(function() {"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/personalization_specs/set-subject.spec.js,,"- describe('Personalization', function() {
+describe('Personalization', function() {","- describe('Personalization', function() {
+describe('Personalization', function() {"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function () {
+describe('Personalization', function() {
-  beforeEach(function () {
+  beforeEach(function() {
-  describe('toJSON()', function () {
-    beforeEach(function () {
+  describe('toJSON()', function() {
+    beforeEach(function() {
-    it('should always have the to field', function () {
+    it('should always have the to field', function() {
-    it('should set the cc field', function () {
+    it('should set the cc field', function() {
-    it('should set the bcc field', function () {
+    it('should set the bcc field', function() {
-    it('should set the headers field', function () {
+    it('should set the headers field', function() {
-    it('should set the custom_args field', function () {
+    it('should set the custom_args field', function() {
-    it('should set the substitutions field', function () {
+    it('should set the substitutions field', function() {
-    it('should apply wrappers to the substitutions', function () {
+    it('should apply wrappers to the substitutions', function() {
-    it('should set the dynamicTemplateData field', function () {
+    it('should set the dynamicTemplateData field', function() {
-    it('should set the subject field', function () {
+    it('should set the subject field', function() {
-    it('should set the send_at field', function () {
+    it('should set the send_at field', function() {","-describe('Personalization', function () {
+describe('Personalization', function() {
-  beforeEach(function () {
+  beforeEach(function() {
-  describe('toJSON()', function () {
-    beforeEach(function () {
+  describe('toJSON()', function() {
+    beforeEach(function() {
-    it('should always have the to field', function () {
+    it('should always have the to field', function() {
-    it('should set the cc field', function () {
+    it('should set the cc field', function() {
-    it('should set the bcc field', function () {
+    it('should set the bcc field', function() {
-    it('should set the headers field', function () {
+    it('should set the headers field', function() {
-    it('should set the custom_args field', function () {
+    it('should set the custom_args field', function() {
-    it('should set the substitutions field', function () {
+    it('should set the substitutions field', function() {
-    it('should apply wrappers to the substitutions', function () {
+    it('should apply wrappers to the substitutions', function() {
-    it('should set the dynamicTemplateData field', function () {
+    it('should set the dynamicTemplateData field', function() {
-    it('should set the subject field', function () {
+    it('should set the subject field', function() {
-    it('should set the send_at field', function () {
+    it('should set the send_at field', function() {"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/statistics.js,,"-            endDate,
-            aggregatedBy,
-        } = data;
+      endDate,
+      aggregatedBy,
+    } = data;","-            endDate,
-            aggregatedBy,
-        } = data;
+      endDate,
+      aggregatedBy,
+    } = data;"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/classes/statistics.spec.js,,"-    //Test data
+  //Test data","-    //Test data
+  //Test data"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/helpers/html-to-plain-text.js,,"-  let text = html.replace(/(<([^>]+)>)/g, """");
-  text = text.replace(/\s+/g,' ')
-  return text
-}
+  let text = html.replace(/(<([^>]+)>)/g, '');
+  text = text.replace(/\s+/g, ' ');
+  return text;
+};","-  let text = html.replace(/(<([^>]+)>)/g, """");
-  text = text.replace(/\s+/g,' ')
-  return text
-}
+  let text = html.replace(/(<([^>]+)>)/g, '');
+  text = text.replace(/\s+/g, ' ');
+  return text;
+};"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/helpers/html-to-plain-text.spec.js,,"-    //Test string with one html tag
-    const html1 = '<p>Hello world</p>';
-  
-    //Test string with nested html tags
-    const html2 = '<div><p>Hello <b>World!</b></p></div>';
-  
-    //Test string with html tag with attributes
-    const html3 = '<div class=""test-class"">Hello World!</div>';
-  
-    //Tests
-    it('should strip out html tags', function() {
-      expect(convertHTML2PlainString(html1)).to.be.equal('Hello world');
-    });
-    it('should strip out nested html tags', function() {
-      expect(convertHTML2PlainString(html2)).to.be.equal('Hello World!');
-    });
-    it('should strip out html tags with attributes', function() {
-      expect(convertHTML2PlainString(html3)).to.be.equal('Hello World!');
-    });
+  //Test string with one html tag
+  const html1 = '<p>Hello world</p>';
+
+  //Test string with nested html tags
+  const html2 = '<div><p>Hello <b>World!</b></p></div>';
+
+  //Test string with html tag with attributes
+  const html3 = '<div class=""test-class"">Hello World!</div>';
+
+  //Tests
+  it('should strip out html tags', function() {
+    expect(convertHTML2PlainString(html1)).to.be.equal('Hello world');
+  });
+  it('should strip out nested html tags', function() {
+    expect(convertHTML2PlainString(html2)).to.be.equal('Hello World!');
+  });
+  it('should strip out html tags with attributes', function() {
+    expect(convertHTML2PlainString(html3)).to.be.equal('Hello World!');
+  });","-    //Test string with one html tag
-    const html1 = '<p>Hello world</p>';
-  
-    //Test string with nested html tags
-    const html2 = '<div><p>Hello <b>World!</b></p></div>';
-  
-    //Test string with html tag with attributes
-    const html3 = '<div class=""test-class"">Hello World!</div>';
-  
-    //Tests
-    it('should strip out html tags', function() {
-      expect(convertHTML2PlainString(html1)).to.be.equal('Hello world');
-    });
-    it('should strip out nested html tags', function() {
-      expect(convertHTML2PlainString(html2)).to.be.equal('Hello World!');
-    });
-    it('should strip out html tags with attributes', function() {
-      expect(convertHTML2PlainString(html3)).to.be.equal('Hello World!');
-    });
+  //Test string with one html tag
+  const html1 = '<p>Hello world</p>';
+
+  //Test string with nested html tags
+  const html2 = '<div><p>Hello <b>World!</b></p></div>';
+
+  //Test string with html tag with attributes
+  const html3 = '<div class=""test-class"">Hello World!</div>';
+
+  //Tests
+  it('should strip out html tags', function() {
+    expect(convertHTML2PlainString(html1)).to.be.equal('Hello world');
+  });
+  it('should strip out nested html tags', function() {
+    expect(convertHTML2PlainString(html2)).to.be.equal('Hello World!');
+  });
+  it('should strip out html tags with attributes', function() {
+    expect(convertHTML2PlainString(html3)).to.be.equal('Hello World!');
+  });"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/helpers/merge-data-deep.js,,"-        if (!(key in base))
+        if (!(key in base)) {
-        else
+        }
+        else {
-      } else {
+        }
+      }
+      else {
-}
+};","-        if (!(key in base))
+        if (!(key in base)) {
-        else
+        }
+        else {
-      } else {
+        }
+      }
+      else {
-}
+};"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/helpers/helpers/merge-data-deep.spec.js,,"-describe('mergeDataDeep', function () {
+describe('mergeDataDeep', function() {
-  it('should merge the two objects', function () {
+  it('should merge the two objects', function() {
-  it('should throw on invalid input', function () {
-    expect(function () {
+  it('should throw on invalid input', function() {
+    expect(function() {
-    expect(function () {
+    expect(function() {
-  it('should overwrite arrays', function () {
+  it('should overwrite arrays', function() {","-describe('mergeDataDeep', function () {
+describe('mergeDataDeep', function() {
-  it('should merge the two objects', function () {
+  it('should merge the two objects', function() {
-  it('should throw on invalid input', function () {
-    expect(function () {
+  it('should throw on invalid input', function() {
+    expect(function() {
-    expect(function () {
+    expect(function() {
-  it('should overwrite arrays', function () {
+  it('should overwrite arrays', function() {"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/inbound-mail-parser/src/parser.js,,"-}
+};","-}
+};"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/subscription-widget/server/router.js,,"-	app.get('/', function(req, res) { res.sendFile(path.join(__dirname, '/static/index.html')) });
-	app.get('/success', function(req, res) { res.sendFile(path.join(__dirname, '/static/success.html')) });
-	app.post('/confirmEmail', ContactList.sendConfirmation);
-	app.post('/signup', ContactList.addUser);
-}
+  app.get('/', function(req, res) {
+    res.sendFile(path.join(__dirname, '/static/index.html'));
+  });
+  app.get('/success', function(req, res) {
+    res.sendFile(path.join(__dirname, '/static/success.html'));
+  });
+  app.post('/confirmEmail', ContactList.sendConfirmation);
+  app.post('/signup', ContactList.addUser);
+};","-	app.get('/', function(req, res) { res.sendFile(path.join(__dirname, '/static/index.html')) });
-	app.get('/success', function(req, res) { res.sendFile(path.join(__dirname, '/static/success.html')) });
-	app.post('/confirmEmail', ContactList.sendConfirmation);
-	app.post('/signup', ContactList.addUser);
-}
+  app.get('/', function(req, res) {
+    res.sendFile(path.join(__dirname, '/static/index.html'));
+  });
+  app.get('/success', function(req, res) {
+    res.sendFile(path.join(__dirname, '/static/success.html'));
+  });
+  app.post('/confirmEmail', ContactList.sendConfirmation);
+  app.post('/signup', ContactList.addUser);
+};"
sendgrid_sendgrid-nodejs,27017878e4c1ef59e70bd1e0f6be9f5f1903af7e,Merge pull request #855 from sendgrid/lint-fix  Linter Fixes,packages/subscription-widget/settings.js,,"-exports.senderEmail = ""sender@example.com"";
-exports.senderName = ""Sender Name"";
+exports.senderEmail = 'sender@example.com';
+exports.senderName = 'Sender Name';
-exports.notificationEmail = ""admin@example.com"";
+exports.notificationEmail = 'admin@example.com';","-exports.senderEmail = ""sender@example.com"";
-exports.senderName = ""Sender Name"";
+exports.senderEmail = 'sender@example.com';
+exports.senderName = 'Sender Name';
-exports.notificationEmail = ""admin@example.com"";
+exports.notificationEmail = 'admin@example.com';"
sendgrid_sendgrid-nodejs,5587afba25de1e3088b4192d98fbb91a670a47d4,Merge pull request #505 from spelcaster/i504  Attachment helper for base64 encoding,packages/helpers/classes/attachment.js,,"+const fs = require('fs');
+const path = require('path');
-    const {content, filename, type, disposition, contentId} = data;
+    const {
+      content,
+      filename,
+      type,
+      disposition,
+      contentId,
+      filePath
+    } = data;
+
+    if ((typeof content !== 'undefined') && (typeof filePath !== 'undefined')) {
+      throw new Error(
+        `The props 'content' and 'filePath' cannot be used together.`
+      );
+    }
-    this.setContent(content);
+    this.setContent(filePath ? this.readFile(filePath) : content);
+  }
+
+  /**
+   * Read a file and return its content as base64
+   */
+  readFile(filePath) {
+    return fs.readFileSync(path.resolve(filePath));
-    if (typeof content === 'string') {      
+    if (typeof content === 'string') {
-    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      return;
+    } else if (content instanceof Buffer && content.toString !== undefined) {
-    } else {
-      throw new Error('`content` expected to be either Buffer or string');
+
+      if (this.disposition == 'attachment') {
+        this.content = content.toString('base64');
+      }
+
+      return;
-    return;    
+    throw new Error('`content` expected to be either Buffer or string');
+  }
+
+  /**
+   * Set content
+   */
+  setFileContent(content) {
+    if (content instanceof Buffer && content.toString !== undefined) {
+      this.content = content.toString('base64');
+      return;
+    }
+
+    throw new Error('`content` expected to be Buffer');","+const fs = require('fs');
+const path = require('path');
-    const {content, filename, type, disposition, contentId} = data;
+    const {
+      content,
+      filename,
+      type,
+      disposition,
+      contentId,
+      filePath
+    } = data;
+
+    if ((typeof content !== 'undefined') && (typeof filePath !== 'undefined')) {
+      throw new Error(
+        `The props 'content' and 'filePath' cannot be used together.`
+      );
+    }
-    this.setContent(content);
+    this.setContent(filePath ? this.readFile(filePath) : content);
+  }
+
+  /**
+   * Read a file and return its content as base64
+   */
+  readFile(filePath) {
+    return fs.readFileSync(path.resolve(filePath));
-    if (typeof content === 'string') {      
+    if (typeof content === 'string') {
-    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      return;
+    } else if (content instanceof Buffer && content.toString !== undefined) {
-    } else {
-      throw new Error('`content` expected to be either Buffer or string');
+
+      if (this.disposition == 'attachment') {
+        this.content = content.toString('base64');
+      }
+
+      return;
-    return;    
+    throw new Error('`content` expected to be either Buffer or string');
+  }
+
+  /**
+   * Set content
+   */
+  setFileContent(content) {
+    if (content instanceof Buffer && content.toString !== undefined) {
+      this.content = content.toString('base64');
+      return;
+    }
+
+    throw new Error('`content` expected to be Buffer');"
sendgrid_sendgrid-nodejs,5587afba25de1e3088b4192d98fbb91a670a47d4,Merge pull request #505 from spelcaster/i504  Attachment helper for base64 encoding,packages/helpers/classes/attachment.spec.js,,"+const path = require('path');
-    it('should set string as content', function() {      
+    it('should set string as content', function() {
-    it('should convert stream to string and set as content', function() {      
+    it('should convert stream to string and set as content', function() {
-    it('should not allow setting content of wrong type', function() {      
+    it('should not allow setting content of wrong type', function() {
+  //Constructor
+  describe('constructor(data)', function() {
+    it('should not accept both content and filePath', function() {
+      expect(function() {
+        attachment = new Attachment({
+          filename: 'attachment.txt',
+          type: 'plain/text',
+          disposition: 'attachment',
+          contentId: 'myattachment',
+          content: '',
+          filePath: ''
+        });
+      }).to.throw(Error);
+    });
+  });
+
+//Set content
+describe('setContent()', function() {
+  let attachment;
+
+  beforeEach(function() {
+    attachment = new Attachment({
+      filename: 'attachment.txt',
+      type: 'plain/text',
+      disposition: 'attachment',
+      contentId: 'myattachment',
+      content: 'SGVsbG8gV29ybGQK',
+    });
+  });
+
+  it('should set the given value', function() {
+    expect(attachment.content).to.equal('SGVsbG8gV29ybGQK');
+  });
+
+  it('should accept a buffer', function() {
+    attachment.setContent(new Buffer(""Hello World\n""));
+    expect(attachment.content).to.equal('SGVsbG8gV29ybGQK');
+  });
+
+  it('should accept a raw file', function() {
+    attachment = new Attachment({
+      filename: 'attachment.txt',
+      type: 'plain/text',
+      disposition: 'attachment',
+      contentId: 'myattachment',
+      filePath: path.resolve(__dirname + '/attachment.js')
+    });
+
+    expect(attachment.content).to.be.a('string');
+  });
+});","+const path = require('path');
-    it('should set string as content', function() {      
+    it('should set string as content', function() {
-    it('should convert stream to string and set as content', function() {      
+    it('should convert stream to string and set as content', function() {
-    it('should not allow setting content of wrong type', function() {      
+    it('should not allow setting content of wrong type', function() {
+  //Constructor
+  describe('constructor(data)', function() {
+    it('should not accept both content and filePath', function() {
+      expect(function() {
+        attachment = new Attachment({
+          filename: 'attachment.txt',
+          type: 'plain/text',
+          disposition: 'attachment',
+          contentId: 'myattachment',
+          content: '',
+          filePath: ''
+        });
+      }).to.throw(Error);
+    });
+  });
+
+//Set content
+describe('setContent()', function() {
+  let attachment;
+
+  beforeEach(function() {
+    attachment = new Attachment({
+      filename: 'attachment.txt',
+      type: 'plain/text',
+      disposition: 'attachment',
+      contentId: 'myattachment',
+      content: 'SGVsbG8gV29ybGQK',
+    });
+  });
+
+  it('should set the given value', function() {
+    expect(attachment.content).to.equal('SGVsbG8gV29ybGQK');
+  });
+
+  it('should accept a buffer', function() {
+    attachment.setContent(new Buffer(""Hello World\n""));
+    expect(attachment.content).to.equal('SGVsbG8gV29ybGQK');
+  });
+
+  it('should accept a raw file', function() {
+    attachment = new Attachment({
+      filename: 'attachment.txt',
+      type: 'plain/text',
+      disposition: 'attachment',
+      contentId: 'myattachment',
+      filePath: path.resolve(__dirname + '/attachment.js')
+    });
+
+    expect(attachment.content).to.be.a('string');
+  });
+});"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,.esdoc.json,,"+    ""excludes"": [""node_modules""],","+    ""excludes"": [""node_modules""],"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,lerna.json,,"-  ""version"": ""6.2.1""
+  ""version"": ""6.3.1""","-  ""version"": ""6.2.1""
+  ""version"": ""6.3.1"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,package-lock.json,,"+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
-      ""version"": ""5.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.1.1.tgz"",
-      ""integrity"": ""sha512-vOk6uEMctu0vQrvuSqFdJyqj1Q0S5VTDL79qtjo+DhRr+1mmaD+tluFSCZqhvi/JUhXSzoZN2BhtstaPEeE8cw=="",
-      ""dev"": true
+      ""version"": ""5.6.2"",
+      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.6.2.tgz"",
+      ""integrity"": ""sha512-zUzo1E5dI2Ey8+82egfnttyMlMZ2y0D8xOCO3PNPPlYXpl8NZvF6Qk9L9BEtJs+43FqEmfBViDqc5d1ckRDguw=="",
+      ""dev"": true
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""version"": ""4.11.8"",
-      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz"",
-      ""integrity"": ""sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY="",
+      ""version"": ""5.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+      ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
-        ""json-stable-stringify"": ""1.0.1""
+        ""fast-deep-equal"": ""1.1.0"",
+        ""fast-json-stable-stringify"": ""2.0.0"",
+        ""json-schema-traverse"": ""0.3.1""
-      ""version"": ""1.5.1"",
-      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz"",
-      ""integrity"": ""sha1-MU3QpLM2j609/NxU7eYXG4htrzw="",
+      ""version"": ""2.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-2.1.1.tgz"",
+      ""integrity"": ""sha1-YXmX/F9gV2iUxDX5QNgZ4TW4B2I="",
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz"",
-      ""integrity"": ""sha1-06ioOzGapneTZisT52HHkRQiMG4="",
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.1.0.tgz"",
+      ""integrity"": ""sha512-UgAb8H9D41AQnu/PbWlCofQVcnV4Gs2bBJi9eZPxfU/hgglFh3SMDMENRIqdr7H6XFnXdoknctFByVsCOotTVw=="",
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz"",
-      ""integrity"": ""sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc="",
-      ""dev"": true,
-      ""requires"": {
-        ""restore-cursor"": ""1.0.1""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz"",
+      ""integrity"": ""sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU="",
+      ""dev"": true,
+      ""requires"": {
+        ""restore-cursor"": ""2.0.0""
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
-    ""d"": {
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/d/-/d-1.0.0.tgz"",
-      ""integrity"": ""sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8="",
-      ""dev"": true,
-      ""requires"": {
-        ""es5-ext"": ""0.10.29""
-      }
-    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
-        ""is-path-in-cwd"": ""1.0.0"",
+        ""is-path-in-cwd"": ""1.0.1"",
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.0.0.tgz"",
-      ""integrity"": ""sha1-xz2NKQnSIpHhoAejlYBNqLZl/mM="",
-      ""dev"": true,
-      ""requires"": {
-        ""esutils"": ""2.0.2"",
-        ""isarray"": ""1.0.0""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz"",
+      ""integrity"": ""sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw=="",
+      ""dev"": true,
+      ""requires"": {
+        ""esutils"": ""2.0.2""
+      }
+    },
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    },
-    ""es5-ext"": {
-      ""version"": ""0.10.29"",
-      ""resolved"": ""https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.29.tgz"",
-      ""integrity"": ""sha512-KXla9NXo5sdaEkGSmbFPYgjH6m75kxsthL6GDRSug/Y2OiMoYm0I9giL39j4cgmaFmAbkIFJ6gG+SGKnLSmOvA=="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-iterator"": {
-      ""version"": ""2.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.1.tgz"",
-      ""integrity"": ""sha1-jjGcnwRTv1ddN0lAplWSDlnKVRI="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-map"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz"",
-      ""integrity"": ""sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-set"": ""0.1.5"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-set"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz"",
-      ""integrity"": ""sha1-0rPsXU2ADO2BjbU40ol02wpzzLE="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-symbol"": {
-      ""version"": ""3.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz"",
-      ""integrity"": ""sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
-    },
-    ""es6-weak-map"": {
-      ""version"": ""2.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.2.tgz"",
-      ""integrity"": ""sha1-XjqzIlH/0VOKH45f+hNXdy+S2W8="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
-    },
-    ""escope"": {
-      ""version"": ""3.6.0"",
-      ""resolved"": ""https://registry.npmjs.org/escope/-/escope-3.6.0.tgz"",
-      ""integrity"": ""sha1-4Bl16BJ4GhY6ba392AOY3GTIicM="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-map"": ""0.1.5"",
-        ""es6-weak-map"": ""2.0.2"",
-        ""esrecurse"": ""4.2.0"",
-        ""estraverse"": ""4.2.0""
-      }
-    },
-    ""eslint"": {
-      ""version"": ""3.19.0"",
-      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-3.19.0.tgz"",
-      ""integrity"": ""sha1-yPxiAcf0DdCJQbh8CFdnOGpnmsw="",
-      ""dev"": true,
-      ""requires"": {
-        ""babel-code-frame"": ""6.26.0"",
-        ""chalk"": ""1.1.3"",
-        ""concat-stream"": ""1.6.0"",
-        ""debug"": ""2.6.8"",
-        ""doctrine"": ""2.0.0"",
-        ""escope"": ""3.6.0"",
-        ""espree"": ""3.5.0"",
-        ""esquery"": ""1.0.0"",
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
+    },
+    ""eslint"": {
+      ""version"": ""4.19.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-4.19.1.tgz"",
+      ""integrity"": ""sha512-bT3/1x1EbZB7phzYu7vCr1v3ONuzDtX8WjuM9c0iYxe+cq+pwcKEoQjl7zd3RpC6YOLgnSy3cTN58M2jcoPDIQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""babel-code-frame"": ""6.26.0"",
+        ""chalk"": ""2.4.1"",
+        ""concat-stream"": ""1.6.0"",
+        ""cross-spawn"": ""5.1.0"",
+        ""debug"": ""3.1.0"",
+        ""doctrine"": ""2.1.0"",
+        ""eslint-scope"": ""3.7.1"",
+        ""eslint-visitor-keys"": ""1.0.0"",
+        ""espree"": ""3.5.4"",
+        ""esquery"": ""1.0.1"",
+        ""esutils"": ""2.0.2"",
+        ""functional-red-black-tree"": ""1.0.1"",
-        ""globals"": ""9.18.0"",
-        ""ignore"": ""3.3.3"",
+        ""globals"": ""11.5.0"",
+        ""ignore"": ""3.3.8"",
-        ""inquirer"": ""0.12.0"",
-        ""is-my-json-valid"": ""2.16.1"",
-        ""is-resolvable"": ""1.0.0"",
+        ""inquirer"": ""3.3.0"",
+        ""is-resolvable"": ""1.1.0"",
-        ""json-stable-stringify"": ""1.0.1"",
+        ""json-stable-stringify-without-jsonify"": ""1.0.1"",
+        ""minimatch"": ""3.0.4"",
-        ""pluralize"": ""1.2.1"",
-        ""progress"": ""1.1.8"",
+        ""pluralize"": ""7.0.0"",
+        ""progress"": ""2.0.0"",
+        ""regexpp"": ""1.1.0"",
-        ""shelljs"": ""0.7.8"",
-        ""strip-bom"": ""3.0.0"",
+        ""semver"": ""5.4.1"",
+        ""strip-ansi"": ""4.0.0"",
-        ""table"": ""3.8.3"",
-        ""text-table"": ""0.2.0"",
-        ""user-home"": ""2.0.0""
+        ""table"": ""4.0.2"",
+        ""text-table"": ""0.2.0""
-        ""user-home"": {
-          ""version"": ""2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz"",
-          ""integrity"": ""sha1-nHC/2Babwdy/SGBODwS4tJzenp8="",
-          ""dev"": true,
-          ""requires"": {
-            ""os-homedir"": ""1.0.2""
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""debug"": {
+          ""version"": ""3.1.0"",
+          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-3.1.0.tgz"",
+          ""integrity"": ""sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ms"": ""2.0.0""
+          }
+        },
+        ""globals"": {
+          ""version"": ""11.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/globals/-/globals-11.5.0.tgz"",
+          ""integrity"": ""sha512-hYyf+kI8dm3nORsiiXUQigOU62hDLfJ9G01uyGMxhc6BKsircrUhC4uJPQPUSuq2GrTmiiEt7ewxlMdBewfmKQ=="",
+          ""dev"": true
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+    ""eslint-scope"": {
+      ""version"": ""3.7.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-scope/-/eslint-scope-3.7.1.tgz"",
+      ""integrity"": ""sha1-PWPD7f2gLgbgGkUq2IyqzHzctug="",
+      ""dev"": true,
+      ""requires"": {
+        ""esrecurse"": ""4.2.1"",
+        ""estraverse"": ""4.2.0""
+      }
+    },
+    ""eslint-visitor-keys"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz"",
+      ""integrity"": ""sha512-qzm/XxIbxm/FHyH341ZrbnMUpe+5Bocte9xkmFMzPMjRaZMcXww+MpBptFvtU+79L362nqiLhekCxCxDPaUMBQ=="",
+      ""dev"": true
+    },
-      ""version"": ""3.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.0.tgz"",
-      ""integrity"": ""sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0="",
-      ""dev"": true,
-      ""requires"": {
-        ""acorn"": ""5.1.1"",
+      ""version"": ""3.5.4"",
+      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.4.tgz"",
+      ""integrity"": ""sha512-yAcIQxtmMiB/jL32dzEp2enBeidsB7xWPLNiw3IIkpVds1P+h7qF9YwJq1yUNzp2OKXgAprs4F61ih66UsoD1A=="",
+      ""dev"": true,
+      ""requires"": {
+        ""acorn"": ""5.6.2"",
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz"",
-      ""integrity"": ""sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.1.tgz"",
+      ""integrity"": ""sha512-SmiyZ5zIWH9VM+SRUReLS5Q8a7GxtRdxEBVZpm98rJM7Sb+A9DVCndXfkeFUd3byderg+EbDkfnevfCwynWaNA=="",
-      ""version"": ""4.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz"",
-      ""integrity"": ""sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM="",
-      ""dev"": true,
-      ""requires"": {
-        ""estraverse"": ""4.2.0"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz"",
+      ""integrity"": ""sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""estraverse"": ""4.2.0""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
-    },
-    ""event-emitter"": {
-      ""version"": ""0.3.5"",
-      ""resolved"": ""https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz"",
-      ""integrity"": ""sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
-    ""exit-hook"": {
-      ""version"": ""1.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz"",
-      ""integrity"": ""sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g="",
-      ""dev"": true
-    },
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ=""
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I=""
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
-      ""version"": ""1.7.0"",
-      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-1.7.0.tgz"",
-      ""integrity"": ""sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4="",
-      ""dev"": true,
-      ""requires"": {
-        ""escape-string-regexp"": ""1.0.5"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-2.0.0.tgz"",
+      ""integrity"": ""sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI="",
+      ""dev"": true,
+      ""requires"": {
+        ""escape-string-regexp"": ""1.0.5""
-        ""flat-cache"": ""1.2.2"",
+        ""flat-cache"": ""1.3.0"",
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.2.2.tgz"",
-      ""integrity"": ""sha1-+oZxTnLCHbiGAXYezy9VXRq8a5Y="",
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.3.0.tgz"",
+      ""integrity"": ""sha1-0wMLMrOBVPTjt+nHCfSQ9++XxIE="",
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
+    ""functional-red-black-tree"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz"",
+      ""integrity"": ""sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="",
+      ""dev"": true
+    },
-    ""generate-function"": {
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz"",
-      ""integrity"": ""sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ="",
-      ""dev"": true
-    },
-    ""generate-object-property"": {
-      ""version"": ""1.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz"",
-      ""integrity"": ""sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-property"": ""1.0.2""
-      }
-    },
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""version"": ""3.3.3"",
-      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.3.tgz"",
-      ""integrity"": ""sha1-QyNS5XrM2HqzEQ6C0/6g5HgSFW0="",
+      ""version"": ""3.3.8"",
+      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.8.tgz"",
+      ""integrity"": ""sha512-pUh+xUQQhQzevjRHHFqqcTy0/dP/kS9I8HSrUydhihjuD09W6ldVWFtIrwhXdUJHis3i2rZNqEHpZH/cbinFbg=="",
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""version"": ""0.12.0"",
-      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-0.12.0.tgz"",
-      ""integrity"": ""sha1-HvK/1jUE3wvHV4X/+MLEHfEvB34="",
-      ""dev"": true,
-      ""requires"": {
-        ""ansi-escapes"": ""1.4.0"",
-        ""ansi-regex"": ""2.1.1"",
-        ""chalk"": ""1.1.3"",
-        ""cli-cursor"": ""1.0.2"",
+      ""version"": ""3.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-3.3.0.tgz"",
+      ""integrity"": ""sha512-h+xtnyk4EwKvFWHrUYsWErEVR+igKtLdchu+o0Z1RL7VU/jVMFbYir2bp6bAj8efFNxWqHX0dIss6fJQ+/+qeQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ansi-escapes"": ""3.1.0"",
+        ""chalk"": ""2.4.1"",
+        ""cli-cursor"": ""2.1.0"",
-        ""figures"": ""1.7.0"",
+        ""external-editor"": ""2.0.4"",
+        ""figures"": ""2.0.0"",
-        ""readline2"": ""1.0.1"",
-        ""run-async"": ""0.1.0"",
-        ""rx-lite"": ""3.1.2"",
-        ""string-width"": ""1.0.2"",
-        ""strip-ansi"": ""3.0.1"",
+        ""mute-stream"": ""0.0.7"",
+        ""run-async"": ""2.3.0"",
+        ""rx-lite"": ""4.0.8"",
+        ""rx-lite-aggregates"": ""4.0.8"",
+        ""string-width"": ""2.1.1"",
+        ""strip-ansi"": ""4.0.0"",
-      }
-    },
-    ""interpret"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/interpret/-/interpret-1.0.3.tgz"",
-      ""integrity"": ""sha1-y8NcYu7uc/Gat7EKgBURQBr8D5A="",
-      ""dev"": true
+      },
+      ""dependencies"": {
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        },
+        ""rx-lite"": {
+          ""version"": ""4.0.8"",
+          ""resolved"": ""https://registry.npmjs.org/rx-lite/-/rx-lite-4.0.8.tgz"",
+          ""integrity"": ""sha1-Cx4Rr4vESDbwSmQH6S2kJGe3lEQ="",
+          ""dev"": true
+        },
+        ""string-width"": {
+          ""version"": ""2.1.1"",
+          ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz"",
+          ""integrity"": ""sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw=="",
+          ""dev"": true,
+          ""requires"": {
+            ""is-fullwidth-code-point"": ""2.0.0"",
+            ""strip-ansi"": ""4.0.0""
+          }
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+        }
+      }
-      ""dev"": true,
-      ""dev"": true,
-    ""is-my-json-valid"": {
-      ""version"": ""2.16.1"",
-      ""resolved"": ""https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.16.1.tgz"",
-      ""integrity"": ""sha512-ochPsqWS1WXj8ZnMIV0vnNXooaMhp7cyL4FMSIPKTtnV0Ha/T19G2b9kkhcNsabV9bxYkze7/aLZJb/bYuFduQ=="",
-      ""dev"": true,
-      ""requires"": {
-        ""generate-function"": ""2.0.0"",
-        ""generate-object-property"": ""1.2.0"",
-        ""jsonpointer"": ""4.0.1"",
-        ""xtend"": ""4.0.1""
-      }
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz"",
-      ""integrity"": ""sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-path-inside"": ""1.0.0""
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.1.tgz"",
+      ""integrity"": ""sha512-FjV1RTW48E7CWM7eE/J2NJvAEEVektecDBVBE5Hh3nM1Jd0kvhHtX68Pr3xsDf857xt3Y4AkwVULK1Vku62aaQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-path-inside"": ""1.0.1""
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.0.tgz"",
-      ""integrity"": ""sha1-/AbloWg/vaE95mev9xe7wQpI838="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.1.tgz"",
+      ""integrity"": ""sha1-jvW33lBDej/cprToZe96pVy0gDY="",
-    ""is-property"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz"",
-      ""integrity"": ""sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="",
-      ""dev"": true
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz"",
-      ""integrity"": ""sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI="",
-      ""dev"": true,
-      ""requires"": {
-        ""tryit"": ""1.0.3""
-      }
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.1.0.tgz"",
+      ""integrity"": ""sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg=="",
+      ""dev"": true
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
-    },
-    ""json-stable-stringify"": {
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=""
+    },
+    ""json-stable-stringify-without-jsonify"": {
-      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz"",
-      ""integrity"": ""sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonify"": ""0.0.0""
-      }
+      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz"",
+      ""integrity"": ""sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE="",
+      ""dev"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""jsonify"": {
-      ""version"": ""0.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz"",
-      ""integrity"": ""sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="",
-      ""dev"": true
-    },
-    ""jsonpointer"": {
-      ""version"": ""4.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz"",
-      ""integrity"": ""sha1-T9kss04OnbPInIYi7PUfm5eMbLk="",
-      ""dev"": true
-    },
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
-      ""version"": ""0.0.5"",
-      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.5.tgz"",
-      ""integrity"": ""sha1-j7+rsKmKJT0xhDMfno3rc3L6xsA="",
+      ""version"": ""0.0.7"",
+      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz"",
+      ""integrity"": ""sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s="",
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""version"": ""1.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz"",
-      ""integrity"": ""sha1-ofeDj4MUxRbwXs78vEzP4EtO14k="",
-      ""dev"": true
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz"",
+      ""integrity"": ""sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ="",
+      ""dev"": true,
+      ""requires"": {
+        ""mimic-fn"": ""1.1.0""
+      }
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""version"": ""1.2.1"",
-      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-1.2.1.tgz"",
-      ""integrity"": ""sha1-0aIUg/0iu0HlihL6NCGCMUCJfEU="",
+      ""version"": ""7.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-7.0.0.tgz"",
+      ""integrity"": ""sha512-ARhBOdzS3e41FbkW/XWrTEtukqqLoK5+Z/4UeDaLuSW+39JPeFgs4gCGqsrJHVZX0fUrx//4OF0K1CUGwlIFow=="",
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
-      ""version"": ""1.1.8"",
-      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-1.1.8.tgz"",
-      ""integrity"": ""sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74="",
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-2.0.0.tgz"",
+      ""integrity"": ""sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8="",
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-    ""readline2"": {
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/readline2/-/readline2-1.0.1.tgz"",
-      ""integrity"": ""sha1-QQWWCP/BVHV7cV2ZidGZ/783LjU="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""mute-stream"": ""0.0.5""
-      }
-    },
-    ""rechoir"": {
-      ""version"": ""0.6.2"",
-      ""resolved"": ""https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz"",
-      ""integrity"": ""sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q="",
-      ""dev"": true,
-      ""requires"": {
-        ""resolve"": ""1.4.0""
-      }
-    },
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
+    },
+    ""regexpp"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz"",
+      ""integrity"": ""sha512-LOPw8FpgdQF9etWMaAfG/WRthIdXJGYp4mJ2Jgn/2lpkbod9jPn0t9UqN7AxBOKNfzRbYyVfgc7Vk4t/MpnXgw=="",
+      ""dev"": true
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-    ""resolve"": {
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/resolve/-/resolve-1.4.0.tgz"",
-      ""integrity"": ""sha512-aW7sVKPufyHqOmyyLzg/J+8606v5nevBgaliIlV7nUpVMsDnoBGV/cbSLNjZAg9q0Cfd/+easKVKQ8vOu8fn1Q=="",
-      ""dev"": true,
-      ""requires"": {
-        ""path-parse"": ""1.0.5""
-      }
-    },
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz"",
-      ""integrity"": ""sha1-NGYfRohjJ/7SmRR5FSJS35LapUE="",
-      ""dev"": true,
-      ""requires"": {
-        ""exit-hook"": ""1.1.1"",
-        ""onetime"": ""1.1.0""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz"",
+      ""integrity"": ""sha1-n37ih/gv0ybU/RYpI9YhKe7g368="",
+      ""dev"": true,
+      ""requires"": {
+        ""onetime"": ""2.0.1"",
+        ""signal-exit"": ""3.0.2""
-      ""version"": ""0.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-0.1.0.tgz"",
-      ""integrity"": ""sha1-yK1KXhEGYeQCp9IbUw4AnyX444k="",
-      ""dev"": true,
-      ""requires"": {
-        ""once"": ""1.4.0""
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz"",
+      ""integrity"": ""sha1-A3GrSuC91yDUFm19/aZP96RFpsA="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-promise"": ""2.1.0""
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    },
-    },
-    ""shelljs"": {
-      ""version"": ""0.7.8"",
-      ""resolved"": ""https://registry.npmjs.org/shelljs/-/shelljs-0.7.8.tgz"",
-      ""integrity"": ""sha1-3svPh0sNHl+3LhSxZKloMEjprLM="",
-      ""dev"": true,
-      ""requires"": {
-        ""glob"": ""7.1.2"",
-        ""interpret"": ""1.0.3"",
-        ""rechoir"": ""0.6.2""
-      }
-      ""version"": ""0.0.4"",
-      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz"",
-      ""integrity"": ""sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU="",
-      ""dev"": true
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-1.0.0.tgz"",
+      ""integrity"": ""sha512-POqxBK6Lb3q6s047D/XsDVNPnF9Dl8JSaqe9h9lURl0OdNqy/ujDrOiIHtsqXMGbWWTIomRzAMaTyawAU//Reg=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-fullwidth-code-point"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        }
+      }
+    },
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
-      ""version"": ""3.8.3"",
-      ""resolved"": ""https://registry.npmjs.org/table/-/table-3.8.3.tgz"",
-      ""integrity"": ""sha1-K7xULw/amGGnVdOUf+/Ys/UThV8="",
-      ""dev"": true,
-      ""requires"": {
-        ""ajv"": ""4.11.8"",
-        ""ajv-keywords"": ""1.5.1"",
-        ""chalk"": ""1.1.3"",
+      ""version"": ""4.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/table/-/table-4.0.2.tgz"",
+      ""integrity"": ""sha512-UUkEAPdSGxtRpiV9ozJ5cMTtYiqz7Ni1OGqLXRCynrvzdtR1p+cfOWe2RJLwvUG8hNanaSRjecIqwOjqeatDsA=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""ajv-keywords"": ""2.1.1"",
+        ""chalk"": ""2.4.1"",
-        ""slice-ansi"": ""0.0.4"",
+        ""slice-ansi"": ""1.0.0"",
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
-    },
-    ""tryit"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz"",
-      ""integrity"": ""sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    },
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },","+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
-      ""version"": ""5.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.1.1.tgz"",
-      ""integrity"": ""sha512-vOk6uEMctu0vQrvuSqFdJyqj1Q0S5VTDL79qtjo+DhRr+1mmaD+tluFSCZqhvi/JUhXSzoZN2BhtstaPEeE8cw=="",
-      ""dev"": true
+      ""version"": ""5.6.2"",
+      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.6.2.tgz"",
+      ""integrity"": ""sha512-zUzo1E5dI2Ey8+82egfnttyMlMZ2y0D8xOCO3PNPPlYXpl8NZvF6Qk9L9BEtJs+43FqEmfBViDqc5d1ckRDguw=="",
+      ""dev"": true
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""version"": ""4.11.8"",
-      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz"",
-      ""integrity"": ""sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY="",
+      ""version"": ""5.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+      ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
-        ""json-stable-stringify"": ""1.0.1""
+        ""fast-deep-equal"": ""1.1.0"",
+        ""fast-json-stable-stringify"": ""2.0.0"",
+        ""json-schema-traverse"": ""0.3.1""
-      ""version"": ""1.5.1"",
-      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz"",
-      ""integrity"": ""sha1-MU3QpLM2j609/NxU7eYXG4htrzw="",
+      ""version"": ""2.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-2.1.1.tgz"",
+      ""integrity"": ""sha1-YXmX/F9gV2iUxDX5QNgZ4TW4B2I="",
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz"",
-      ""integrity"": ""sha1-06ioOzGapneTZisT52HHkRQiMG4="",
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.1.0.tgz"",
+      ""integrity"": ""sha512-UgAb8H9D41AQnu/PbWlCofQVcnV4Gs2bBJi9eZPxfU/hgglFh3SMDMENRIqdr7H6XFnXdoknctFByVsCOotTVw=="",
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz"",
-      ""integrity"": ""sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc="",
-      ""dev"": true,
-      ""requires"": {
-        ""restore-cursor"": ""1.0.1""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz"",
+      ""integrity"": ""sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU="",
+      ""dev"": true,
+      ""requires"": {
+        ""restore-cursor"": ""2.0.0""
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
-    ""d"": {
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/d/-/d-1.0.0.tgz"",
-      ""integrity"": ""sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8="",
-      ""dev"": true,
-      ""requires"": {
-        ""es5-ext"": ""0.10.29""
-      }
-    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
-        ""is-path-in-cwd"": ""1.0.0"",
+        ""is-path-in-cwd"": ""1.0.1"",
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.0.0.tgz"",
-      ""integrity"": ""sha1-xz2NKQnSIpHhoAejlYBNqLZl/mM="",
-      ""dev"": true,
-      ""requires"": {
-        ""esutils"": ""2.0.2"",
-        ""isarray"": ""1.0.0""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz"",
+      ""integrity"": ""sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw=="",
+      ""dev"": true,
+      ""requires"": {
+        ""esutils"": ""2.0.2""
+      }
+    },
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    },
-    ""es5-ext"": {
-      ""version"": ""0.10.29"",
-      ""resolved"": ""https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.29.tgz"",
-      ""integrity"": ""sha512-KXla9NXo5sdaEkGSmbFPYgjH6m75kxsthL6GDRSug/Y2OiMoYm0I9giL39j4cgmaFmAbkIFJ6gG+SGKnLSmOvA=="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-iterator"": {
-      ""version"": ""2.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.1.tgz"",
-      ""integrity"": ""sha1-jjGcnwRTv1ddN0lAplWSDlnKVRI="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-map"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz"",
-      ""integrity"": ""sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-set"": ""0.1.5"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-set"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz"",
-      ""integrity"": ""sha1-0rPsXU2ADO2BjbU40ol02wpzzLE="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-symbol"": {
-      ""version"": ""3.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz"",
-      ""integrity"": ""sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
-    },
-    ""es6-weak-map"": {
-      ""version"": ""2.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.2.tgz"",
-      ""integrity"": ""sha1-XjqzIlH/0VOKH45f+hNXdy+S2W8="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
-    },
-    ""escope"": {
-      ""version"": ""3.6.0"",
-      ""resolved"": ""https://registry.npmjs.org/escope/-/escope-3.6.0.tgz"",
-      ""integrity"": ""sha1-4Bl16BJ4GhY6ba392AOY3GTIicM="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-map"": ""0.1.5"",
-        ""es6-weak-map"": ""2.0.2"",
-        ""esrecurse"": ""4.2.0"",
-        ""estraverse"": ""4.2.0""
-      }
-    },
-    ""eslint"": {
-      ""version"": ""3.19.0"",
-      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-3.19.0.tgz"",
-      ""integrity"": ""sha1-yPxiAcf0DdCJQbh8CFdnOGpnmsw="",
-      ""dev"": true,
-      ""requires"": {
-        ""babel-code-frame"": ""6.26.0"",
-        ""chalk"": ""1.1.3"",
-        ""concat-stream"": ""1.6.0"",
-        ""debug"": ""2.6.8"",
-        ""doctrine"": ""2.0.0"",
-        ""escope"": ""3.6.0"",
-        ""espree"": ""3.5.0"",
-        ""esquery"": ""1.0.0"",
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
+    },
+    ""eslint"": {
+      ""version"": ""4.19.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-4.19.1.tgz"",
+      ""integrity"": ""sha512-bT3/1x1EbZB7phzYu7vCr1v3ONuzDtX8WjuM9c0iYxe+cq+pwcKEoQjl7zd3RpC6YOLgnSy3cTN58M2jcoPDIQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""babel-code-frame"": ""6.26.0"",
+        ""chalk"": ""2.4.1"",
+        ""concat-stream"": ""1.6.0"",
+        ""cross-spawn"": ""5.1.0"",
+        ""debug"": ""3.1.0"",
+        ""doctrine"": ""2.1.0"",
+        ""eslint-scope"": ""3.7.1"",
+        ""eslint-visitor-keys"": ""1.0.0"",
+        ""espree"": ""3.5.4"",
+        ""esquery"": ""1.0.1"",
+        ""esutils"": ""2.0.2"",
+        ""functional-red-black-tree"": ""1.0.1"",
-        ""globals"": ""9.18.0"",
-        ""ignore"": ""3.3.3"",
+        ""globals"": ""11.5.0"",
+        ""ignore"": ""3.3.8"",
-        ""inquirer"": ""0.12.0"",
-        ""is-my-json-valid"": ""2.16.1"",
-        ""is-resolvable"": ""1.0.0"",
+        ""inquirer"": ""3.3.0"",
+        ""is-resolvable"": ""1.1.0"",
-        ""json-stable-stringify"": ""1.0.1"",
+        ""json-stable-stringify-without-jsonify"": ""1.0.1"",
+        ""minimatch"": ""3.0.4"",
-        ""pluralize"": ""1.2.1"",
-        ""progress"": ""1.1.8"",
+        ""pluralize"": ""7.0.0"",
+        ""progress"": ""2.0.0"",
+        ""regexpp"": ""1.1.0"",
-        ""shelljs"": ""0.7.8"",
-        ""strip-bom"": ""3.0.0"",
+        ""semver"": ""5.4.1"",
+        ""strip-ansi"": ""4.0.0"",
-        ""table"": ""3.8.3"",
-        ""text-table"": ""0.2.0"",
-        ""user-home"": ""2.0.0""
+        ""table"": ""4.0.2"",
+        ""text-table"": ""0.2.0""
-        ""user-home"": {
-          ""version"": ""2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz"",
-          ""integrity"": ""sha1-nHC/2Babwdy/SGBODwS4tJzenp8="",
-          ""dev"": true,
-          ""requires"": {
-            ""os-homedir"": ""1.0.2""
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""debug"": {
+          ""version"": ""3.1.0"",
+          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-3.1.0.tgz"",
+          ""integrity"": ""sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ms"": ""2.0.0""
+          }
+        },
+        ""globals"": {
+          ""version"": ""11.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/globals/-/globals-11.5.0.tgz"",
+          ""integrity"": ""sha512-hYyf+kI8dm3nORsiiXUQigOU62hDLfJ9G01uyGMxhc6BKsircrUhC4uJPQPUSuq2GrTmiiEt7ewxlMdBewfmKQ=="",
+          ""dev"": true
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+    ""eslint-scope"": {
+      ""version"": ""3.7.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-scope/-/eslint-scope-3.7.1.tgz"",
+      ""integrity"": ""sha1-PWPD7f2gLgbgGkUq2IyqzHzctug="",
+      ""dev"": true,
+      ""requires"": {
+        ""esrecurse"": ""4.2.1"",
+        ""estraverse"": ""4.2.0""
+      }
+    },
+    ""eslint-visitor-keys"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz"",
+      ""integrity"": ""sha512-qzm/XxIbxm/FHyH341ZrbnMUpe+5Bocte9xkmFMzPMjRaZMcXww+MpBptFvtU+79L362nqiLhekCxCxDPaUMBQ=="",
+      ""dev"": true
+    },
-      ""version"": ""3.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.0.tgz"",
-      ""integrity"": ""sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0="",
-      ""dev"": true,
-      ""requires"": {
-        ""acorn"": ""5.1.1"",
+      ""version"": ""3.5.4"",
+      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.4.tgz"",
+      ""integrity"": ""sha512-yAcIQxtmMiB/jL32dzEp2enBeidsB7xWPLNiw3IIkpVds1P+h7qF9YwJq1yUNzp2OKXgAprs4F61ih66UsoD1A=="",
+      ""dev"": true,
+      ""requires"": {
+        ""acorn"": ""5.6.2"",
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz"",
-      ""integrity"": ""sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.1.tgz"",
+      ""integrity"": ""sha512-SmiyZ5zIWH9VM+SRUReLS5Q8a7GxtRdxEBVZpm98rJM7Sb+A9DVCndXfkeFUd3byderg+EbDkfnevfCwynWaNA=="",
-      ""version"": ""4.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz"",
-      ""integrity"": ""sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM="",
-      ""dev"": true,
-      ""requires"": {
-        ""estraverse"": ""4.2.0"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz"",
+      ""integrity"": ""sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""estraverse"": ""4.2.0""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
-    },
-    ""event-emitter"": {
-      ""version"": ""0.3.5"",
-      ""resolved"": ""https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz"",
-      ""integrity"": ""sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
-    ""exit-hook"": {
-      ""version"": ""1.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz"",
-      ""integrity"": ""sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g="",
-      ""dev"": true
-    },
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ=""
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I=""
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
-      ""version"": ""1.7.0"",
-      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-1.7.0.tgz"",
-      ""integrity"": ""sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4="",
-      ""dev"": true,
-      ""requires"": {
-        ""escape-string-regexp"": ""1.0.5"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-2.0.0.tgz"",
+      ""integrity"": ""sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI="",
+      ""dev"": true,
+      ""requires"": {
+        ""escape-string-regexp"": ""1.0.5""
-        ""flat-cache"": ""1.2.2"",
+        ""flat-cache"": ""1.3.0"",
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.2.2.tgz"",
-      ""integrity"": ""sha1-+oZxTnLCHbiGAXYezy9VXRq8a5Y="",
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.3.0.tgz"",
+      ""integrity"": ""sha1-0wMLMrOBVPTjt+nHCfSQ9++XxIE="",
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
+    ""functional-red-black-tree"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz"",
+      ""integrity"": ""sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="",
+      ""dev"": true
+    },
-    ""generate-function"": {
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz"",
-      ""integrity"": ""sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ="",
-      ""dev"": true
-    },
-    ""generate-object-property"": {
-      ""version"": ""1.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz"",
-      ""integrity"": ""sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-property"": ""1.0.2""
-      }
-    },
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""version"": ""3.3.3"",
-      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.3.tgz"",
-      ""integrity"": ""sha1-QyNS5XrM2HqzEQ6C0/6g5HgSFW0="",
+      ""version"": ""3.3.8"",
+      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.8.tgz"",
+      ""integrity"": ""sha512-pUh+xUQQhQzevjRHHFqqcTy0/dP/kS9I8HSrUydhihjuD09W6ldVWFtIrwhXdUJHis3i2rZNqEHpZH/cbinFbg=="",
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""version"": ""0.12.0"",
-      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-0.12.0.tgz"",
-      ""integrity"": ""sha1-HvK/1jUE3wvHV4X/+MLEHfEvB34="",
-      ""dev"": true,
-      ""requires"": {
-        ""ansi-escapes"": ""1.4.0"",
-        ""ansi-regex"": ""2.1.1"",
-        ""chalk"": ""1.1.3"",
-        ""cli-cursor"": ""1.0.2"",
+      ""version"": ""3.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-3.3.0.tgz"",
+      ""integrity"": ""sha512-h+xtnyk4EwKvFWHrUYsWErEVR+igKtLdchu+o0Z1RL7VU/jVMFbYir2bp6bAj8efFNxWqHX0dIss6fJQ+/+qeQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ansi-escapes"": ""3.1.0"",
+        ""chalk"": ""2.4.1"",
+        ""cli-cursor"": ""2.1.0"",
-        ""figures"": ""1.7.0"",
+        ""external-editor"": ""2.0.4"",
+        ""figures"": ""2.0.0"",
-        ""readline2"": ""1.0.1"",
-        ""run-async"": ""0.1.0"",
-        ""rx-lite"": ""3.1.2"",
-        ""string-width"": ""1.0.2"",
-        ""strip-ansi"": ""3.0.1"",
+        ""mute-stream"": ""0.0.7"",
+        ""run-async"": ""2.3.0"",
+        ""rx-lite"": ""4.0.8"",
+        ""rx-lite-aggregates"": ""4.0.8"",
+        ""string-width"": ""2.1.1"",
+        ""strip-ansi"": ""4.0.0"",
-      }
-    },
-    ""interpret"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/interpret/-/interpret-1.0.3.tgz"",
-      ""integrity"": ""sha1-y8NcYu7uc/Gat7EKgBURQBr8D5A="",
-      ""dev"": true
+      },
+      ""dependencies"": {
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        },
+        ""rx-lite"": {
+          ""version"": ""4.0.8"",
+          ""resolved"": ""https://registry.npmjs.org/rx-lite/-/rx-lite-4.0.8.tgz"",
+          ""integrity"": ""sha1-Cx4Rr4vESDbwSmQH6S2kJGe3lEQ="",
+          ""dev"": true
+        },
+        ""string-width"": {
+          ""version"": ""2.1.1"",
+          ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz"",
+          ""integrity"": ""sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw=="",
+          ""dev"": true,
+          ""requires"": {
+            ""is-fullwidth-code-point"": ""2.0.0"",
+            ""strip-ansi"": ""4.0.0""
+          }
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+        }
+      }
-      ""dev"": true,
-      ""dev"": true,
-    ""is-my-json-valid"": {
-      ""version"": ""2.16.1"",
-      ""resolved"": ""https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.16.1.tgz"",
-      ""integrity"": ""sha512-ochPsqWS1WXj8ZnMIV0vnNXooaMhp7cyL4FMSIPKTtnV0Ha/T19G2b9kkhcNsabV9bxYkze7/aLZJb/bYuFduQ=="",
-      ""dev"": true,
-      ""requires"": {
-        ""generate-function"": ""2.0.0"",
-        ""generate-object-property"": ""1.2.0"",
-        ""jsonpointer"": ""4.0.1"",
-        ""xtend"": ""4.0.1""
-      }
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz"",
-      ""integrity"": ""sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-path-inside"": ""1.0.0""
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.1.tgz"",
+      ""integrity"": ""sha512-FjV1RTW48E7CWM7eE/J2NJvAEEVektecDBVBE5Hh3nM1Jd0kvhHtX68Pr3xsDf857xt3Y4AkwVULK1Vku62aaQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-path-inside"": ""1.0.1""
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.0.tgz"",
-      ""integrity"": ""sha1-/AbloWg/vaE95mev9xe7wQpI838="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.1.tgz"",
+      ""integrity"": ""sha1-jvW33lBDej/cprToZe96pVy0gDY="",
-    ""is-property"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz"",
-      ""integrity"": ""sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="",
-      ""dev"": true
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz"",
-      ""integrity"": ""sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI="",
-      ""dev"": true,
-      ""requires"": {
-        ""tryit"": ""1.0.3""
-      }
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.1.0.tgz"",
+      ""integrity"": ""sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg=="",
+      ""dev"": true
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
-    },
-    ""json-stable-stringify"": {
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=""
+    },
+    ""json-stable-stringify-without-jsonify"": {
-      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz"",
-      ""integrity"": ""sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonify"": ""0.0.0""
-      }
+      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz"",
+      ""integrity"": ""sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE="",
+      ""dev"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""jsonify"": {
-      ""version"": ""0.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz"",
-      ""integrity"": ""sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="",
-      ""dev"": true
-    },
-    ""jsonpointer"": {
-      ""version"": ""4.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz"",
-      ""integrity"": ""sha1-T9kss04OnbPInIYi7PUfm5eMbLk="",
-      ""dev"": true
-    },
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
-      ""version"": ""0.0.5"",
-      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.5.tgz"",
-      ""integrity"": ""sha1-j7+rsKmKJT0xhDMfno3rc3L6xsA="",
+      ""version"": ""0.0.7"",
+      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz"",
+      ""integrity"": ""sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s="",
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""version"": ""1.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz"",
-      ""integrity"": ""sha1-ofeDj4MUxRbwXs78vEzP4EtO14k="",
-      ""dev"": true
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz"",
+      ""integrity"": ""sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ="",
+      ""dev"": true,
+      ""requires"": {
+        ""mimic-fn"": ""1.1.0""
+      }
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""version"": ""1.2.1"",
-      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-1.2.1.tgz"",
-      ""integrity"": ""sha1-0aIUg/0iu0HlihL6NCGCMUCJfEU="",
+      ""version"": ""7.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-7.0.0.tgz"",
+      ""integrity"": ""sha512-ARhBOdzS3e41FbkW/XWrTEtukqqLoK5+Z/4UeDaLuSW+39JPeFgs4gCGqsrJHVZX0fUrx//4OF0K1CUGwlIFow=="",
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
-      ""version"": ""1.1.8"",
-      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-1.1.8.tgz"",
-      ""integrity"": ""sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74="",
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-2.0.0.tgz"",
+      ""integrity"": ""sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8="",
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-    ""readline2"": {
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/readline2/-/readline2-1.0.1.tgz"",
-      ""integrity"": ""sha1-QQWWCP/BVHV7cV2ZidGZ/783LjU="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""mute-stream"": ""0.0.5""
-      }
-    },
-    ""rechoir"": {
-      ""version"": ""0.6.2"",
-      ""resolved"": ""https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz"",
-      ""integrity"": ""sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q="",
-      ""dev"": true,
-      ""requires"": {
-        ""resolve"": ""1.4.0""
-      }
-    },
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
+    },
+    ""regexpp"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz"",
+      ""integrity"": ""sha512-LOPw8FpgdQF9etWMaAfG/WRthIdXJGYp4mJ2Jgn/2lpkbod9jPn0t9UqN7AxBOKNfzRbYyVfgc7Vk4t/MpnXgw=="",
+      ""dev"": true
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-    ""resolve"": {
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/resolve/-/resolve-1.4.0.tgz"",
-      ""integrity"": ""sha512-aW7sVKPufyHqOmyyLzg/J+8606v5nevBgaliIlV7nUpVMsDnoBGV/cbSLNjZAg9q0Cfd/+easKVKQ8vOu8fn1Q=="",
-      ""dev"": true,
-      ""requires"": {
-        ""path-parse"": ""1.0.5""
-      }
-    },
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz"",
-      ""integrity"": ""sha1-NGYfRohjJ/7SmRR5FSJS35LapUE="",
-      ""dev"": true,
-      ""requires"": {
-        ""exit-hook"": ""1.1.1"",
-        ""onetime"": ""1.1.0""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz"",
+      ""integrity"": ""sha1-n37ih/gv0ybU/RYpI9YhKe7g368="",
+      ""dev"": true,
+      ""requires"": {
+        ""onetime"": ""2.0.1"",
+        ""signal-exit"": ""3.0.2""
-      ""version"": ""0.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-0.1.0.tgz"",
-      ""integrity"": ""sha1-yK1KXhEGYeQCp9IbUw4AnyX444k="",
-      ""dev"": true,
-      ""requires"": {
-        ""once"": ""1.4.0""
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz"",
+      ""integrity"": ""sha1-A3GrSuC91yDUFm19/aZP96RFpsA="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-promise"": ""2.1.0""
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    },
-    },
-    ""shelljs"": {
-      ""version"": ""0.7.8"",
-      ""resolved"": ""https://registry.npmjs.org/shelljs/-/shelljs-0.7.8.tgz"",
-      ""integrity"": ""sha1-3svPh0sNHl+3LhSxZKloMEjprLM="",
-      ""dev"": true,
-      ""requires"": {
-        ""glob"": ""7.1.2"",
-        ""interpret"": ""1.0.3"",
-        ""rechoir"": ""0.6.2""
-      }
-      ""version"": ""0.0.4"",
-      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz"",
-      ""integrity"": ""sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU="",
-      ""dev"": true
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-1.0.0.tgz"",
+      ""integrity"": ""sha512-POqxBK6Lb3q6s047D/XsDVNPnF9Dl8JSaqe9h9lURl0OdNqy/ujDrOiIHtsqXMGbWWTIomRzAMaTyawAU//Reg=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-fullwidth-code-point"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        }
+      }
+    },
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
-      ""version"": ""3.8.3"",
-      ""resolved"": ""https://registry.npmjs.org/table/-/table-3.8.3.tgz"",
-      ""integrity"": ""sha1-K7xULw/amGGnVdOUf+/Ys/UThV8="",
-      ""dev"": true,
-      ""requires"": {
-        ""ajv"": ""4.11.8"",
-        ""ajv-keywords"": ""1.5.1"",
-        ""chalk"": ""1.1.3"",
+      ""version"": ""4.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/table/-/table-4.0.2.tgz"",
+      ""integrity"": ""sha512-UUkEAPdSGxtRpiV9ozJ5cMTtYiqz7Ni1OGqLXRCynrvzdtR1p+cfOWe2RJLwvUG8hNanaSRjecIqwOjqeatDsA=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""ajv-keywords"": ""2.1.1"",
+        ""chalk"": ""2.4.1"",
-        ""slice-ansi"": ""0.0.4"",
+        ""slice-ansi"": ""1.0.0"",
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
-    },
-    ""tryit"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz"",
-      ""integrity"": ""sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    },
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,package.json,,"-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""doc"": ""esdoc"",","-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""doc"": ""esdoc"","
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/client/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0""","-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/client/src/classes/client.js,,"- * Sendgrid REST Client
+ * SendGrid REST Client","- * Sendgrid REST Client
+ * SendGrid REST Client"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/contact-importer/package.json,,"+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0""","+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/contact-importer/src/importer.js,,"-   * Send a batch of contacts to Sendgrid.
+   * Send a batch of contacts to SendGrid.
-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {","-   * Send a batch of contacts to Sendgrid.
+   * Send a batch of contacts to SendGrid.
-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/contact-importer/src/importer.spec.js,,"-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {","-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/attachment.js,,"-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;    
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;    
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/email-address.js,,"-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;","-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/email-address.spec.js,,"+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');","+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/index.js,,"+const Statistics = require('./statistics');
+  Statistics,","+const Statistics = require('./statistics');
+  Statistics,"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/mail.d.ts,,"+  dynamicTemplateData?: { [key: string]: any },","+  dynamicTemplateData?: { [key: string]: any },"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/mail.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    }
+    else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    }
+    else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    }
+    else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    }
+    else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/mail.spec.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });","-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/helpers/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.2.1"",
-    ""mailparser"": ""^0.6.1""
+    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""mailparser"": ""^2.3.4""","-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.2.1"",
-    ""mailparser"": ""^0.6.1""
+    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""mailparser"": ""^2.3.4"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/inbound-mail-parser/src/parser.spec.js,,"-        expect(email).to.be.null;
+        expect(email).to.be.null();","-        expect(email).to.be.null;
+        expect(email).to.be.null();"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/mail/package.json,,"-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.1"",
-    ""@sendgrid/client"": ""^6.2.1"",
-    ""@sendgrid/helpers"": ""^6.2.1""
+    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.3.0""","-  ""version"": ""6.2.1"",
+  ""version"": ""6.3.1"",
-    ""@sendgrid/client"": ""^6.2.1"",
-    ""@sendgrid/helpers"": ""^6.2.1""
+    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.3.0"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/mail/src/classes/mail-service.js,,"-    //Set client and initialize substitution wrappers
+    //Set client, initialize substitution wrappers and secret rules
+    //filter
+    this.secretRules = [];
+  }
+
+  /**
+   * Set secret rules for filtering the e-mail content
+   */
+  setSecretRules(rules) {
+    if (!(rules instanceof Array)) {
+      rules = [rules];
+    }
+
+    const tmpRules = rules.map(function(rule) {
+      const ruleType = typeof rule;
+
+      if (ruleType === 'string') {
+        return {
+          pattern: new RegExp(rule),
+        };
+      }
+      else if (ruleType === 'object') {
+        // normalize rule object
+        if (rule instanceof RegExp) {
+          rule = {
+            pattern: rule,
+          };
+        }
+        else if (rule.hasOwnProperty('pattern')
+          && (typeof rule.pattern === 'string')
+        ) {
+          rule.pattern = new RegExp(rule.pattern);
+        }
+
+        try {
+          // test if rule.pattern is a valid regex
+          rule.pattern.test('');
+          return rule;
+        }
+        catch (err) {
+          // continue regardless of error
+        }
+      }
+    });
+
+    this.secretRules = tmpRules.filter(function(val) {
+      return val;
+    });
+  }
+
+  /**
+   * Check if the e-mail is safe to be sent
+   */
+  filterSecrets(body) {
+    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {
+      return;
+    }
+
+    const self = this;
+
+    body.content.forEach(function(data) {
+      self.secretRules.forEach(function(rule) {
+        if (rule.hasOwnProperty('pattern')
+          && !rule.pattern.test(data.value)
+        ) {
+          return;
+        }
+
+        let message = `The pattern '${rule.pattern}'`;
+
+        if (rule.name) {
+          message += `identified by '${rule.name}'`;
+        }
+
+        message += ` was found in the Mail content!`;
+
+        throw new Error(message);
+      });
+    });
+
+      //Filters the Mail body to avoid sensitive content leakage
+      this.filterSecrets(body);
+        // eslint-disable-next-line callback-return","-    //Set client and initialize substitution wrappers
+    //Set client, initialize substitution wrappers and secret rules
+    //filter
+    this.secretRules = [];
+  }
+
+  /**
+   * Set secret rules for filtering the e-mail content
+   */
+  setSecretRules(rules) {
+    if (!(rules instanceof Array)) {
+      rules = [rules];
+    }
+
+    const tmpRules = rules.map(function(rule) {
+      const ruleType = typeof rule;
+
+      if (ruleType === 'string') {
+        return {
+          pattern: new RegExp(rule),
+        };
+      }
+      else if (ruleType === 'object') {
+        // normalize rule object
+        if (rule instanceof RegExp) {
+          rule = {
+            pattern: rule,
+          };
+        }
+        else if (rule.hasOwnProperty('pattern')
+          && (typeof rule.pattern === 'string')
+        ) {
+          rule.pattern = new RegExp(rule.pattern);
+        }
+
+        try {
+          // test if rule.pattern is a valid regex
+          rule.pattern.test('');
+          return rule;
+        }
+        catch (err) {
+          // continue regardless of error
+        }
+      }
+    });
+
+    this.secretRules = tmpRules.filter(function(val) {
+      return val;
+    });
+  }
+
+  /**
+   * Check if the e-mail is safe to be sent
+   */
+  filterSecrets(body) {
+    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {
+      return;
+    }
+
+    const self = this;
+
+    body.content.forEach(function(data) {
+      self.secretRules.forEach(function(rule) {
+        if (rule.hasOwnProperty('pattern')
+          && !rule.pattern.test(data.value)
+        ) {
+          return;
+        }
+
+        let message = `The pattern '${rule.pattern}'`;
+
+        if (rule.name) {
+          message += `identified by '${rule.name}'`;
+        }
+
+        message += ` was found in the Mail content!`;
+
+        throw new Error(message);
+      });
+    });
+
+      //Filters the Mail body to avoid sensitive content leakage
+      this.filterSecrets(body);
+        // eslint-disable-next-line callback-return"
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/subscription-widget/package.json,,"-    ""node"": ""4.1.1""
+    ""node"": "">=6.0.0""","-    ""node"": ""4.1.1""
+    ""node"": "">=6.0.0"""
sendgrid_sendgrid-nodejs,9c8d69c29bec0d785d3755b52f3f76769ce259bc,Merge branch 'master' into feature/sandbox,packages/subscription-widget/server/controllers/contact_list_controller.js,,"-	const subject = ""Please Confirm Your Email Address"";
-	const url = formatUrl(Settings.url) + '/success';
-	const link = ""<a href='"" + url + ""'>this link</a>""
-	const mailText = ""Thanks for signing up! Click "" + link + "" to sign up!  This link will be active for 24 hours."";
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: reqBody.email,
-	        }
-	      ],
-	      subject: subject,
-	      custom_args: {
-	      	type: optIn,
-	      	time_sent: String(Date.now()),
-	      },
-	      substitutions: {
-	      	link_insert: link
-	      }
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ]
-	}
-
-	const templateId = Settings.templateId;
-	if (templateId) emailBody.template_id = templateId;
-
-	for (key in reqBody) {
-		emailBody.personalizations[0].custom_args[key] = reqBody[key];
-	}
-
-	return emailBody;
+  const subject = 'Please Confirm Your Email Address';
+  const url = formatUrl(Settings.url) + '/success';
+  const link = '<a href=\'' + url + '\'>this link</a>';
+  const mailText = 'Thanks for signing up! Click ' + link + ' to sign up!  This link will be active for 24 hours.';
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: reqBody.email,
+          },
+        ],
+        subject: subject,
+        custom_args: {
+          type: optIn,
+          time_sent: String(Date.now()),
+        },
+        substitutions: {
+          link_insert: link,
+        },
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  const templateId = Settings.templateId;
+  if (templateId) {
+    emailBody.template_id = templateId;
+  }
+
+  for (key in reqBody) {
+    if ({}.hasOwnProperty.call(reqBody, key)) {
+      emailBody.personalizations[0].custom_args[key] = reqBody[key];
+    }
+  }
+
+  return emailBody;
-	const subject = ""New email signup"";
-	const mailText = ""A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>"" + reqBody.first_name + "" "" + reqBody.last_name + ""<br/><b>Email: </b>"" + reqBody.email;
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: Settings.notificationEmail,
-	        }
-	      ],
-	      subject: subject
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ],
-	}
-
-	return emailBody;
+  const subject = 'New email signup';
+  const mailText = 'A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>' + reqBody.first_name + ' ' + reqBody.last_name + '<br/><b>Email: </b>' + reqBody.email;
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: Settings.notificationEmail,
+          },
+        ],
+        subject: subject,
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  return emailBody;
-	var request = sg.emptyRequest({
-		method: 'POST',
-		path: '/v3/mail/send',
-		body: prepareConfirmationEmail(req.body)
-	});
-
-	sg.API(request, function(error, response) {
-		if (error) {
-			console.log('Error response received');
-		}
-
-		if (response.statusCode >= 200 && response.statusCode < 300) {
-			res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
-		} else {
-			res.sendFile(path.join(__dirname, '../static/error.html'));
-		}
-	});
-}
+  var request = sg.emptyRequest({
+    method: 'POST',
+    path: '/v3/mail/send',
+    body: prepareConfirmationEmail(req.body),
+  });
+
+  sg.API(request, function(error, response) {
+    if (error) {
+      console.log('Error response received');
+    }
+
+    if (response.statusCode >= 200 && response.statusCode < 300) {
+      res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
+    }
+    else {
+      res.sendFile(path.join(__dirname, '../static/error.html'));
+    }
+  });
+};
-	addUserToList(req.body[0], function() {
-		//send notification about the new signup
-		if (Settings.sendNotification) {
-			console.log(""Sending notification"");
-
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/mail/send',
-				body: prepareNotificationEmail(req.body[0])
-			});
-
-			sg.API(request, function(error, response) {
-				if (error) {
-					console.log('Error sending notification');
-				}
-			});
-		}
-
-		res.sendStatus(200);
-	});
-}
+  addUserToList(req.body[0], function() {
+    //send notification about the new signup
+    if (Settings.sendNotification) {
+      console.log('Sending notification');
+
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/mail/send',
+        body: prepareNotificationEmail(req.body[0]),
+      });
+
+      sg.API(request, function(error, response) {
+        if (error) {
+          console.log('Error sending notification');
+        }
+      });
+    }
+
+    res.sendStatus(200);
+  });
+};
-	console.log(emailBody);
-
-	var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
-		'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
-
-	var customFields = [{}];
-	var customFieldArr = [];
-
-	for (key in emailBody) {
-		if (!stringInArray(key, ignoreFields)) {
-			customFields[0][key] = emailBody[key];
-			if (key != 'email' && key != 'first_name' && key != 'last_name') {
-				customFieldArr.push(key);
-			}
-		}
-	}
-
-	checkAndAddCustomFields(customFieldArr, function() {
-		const emailType = emailBody.type;
-		const timestamp = parseInt(emailBody.time_sent);
-		const listId = Settings.listId;
-		const secondsInDay = 86400;
-		const timeElapsed = (Date.now() - timestamp) / 1000;
-
-		// Confirm email type is opt in and link has been clicked within 1 day
-		if (emailType == optIn && timeElapsed < secondsInDay) {
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/contactdb/recipients',
-				body: customFields
-			});
-
-			sg.API(request, function(error, response) {
-		    	if (listId) {
-					var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
-					var request = sg.emptyRequest({
-						method: 'POST',
-						path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
-						body: customFields
-					});
-					sg.API(request, function(error, response) {
-				    	console.log(response.statusCode)
-				    	console.log(response.body)
-				    	console.log(response.headers)
-
-						callback();
-					});
-				} else {
-					callback();
-				}
-			});
-		} else {
-			callback();
-		}
-	});
+  console.log(emailBody);
+
+  var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
+    'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
+
+  var customFields = [{}];
+  var customFieldArr = [];
+
+  for (key in emailBody) {
+    if (!stringInArray(key, ignoreFields)) {
+      customFields[0][key] = emailBody[key];
+      if (key !== 'email' && key !== 'first_name' && key !== 'last_name') {
+        customFieldArr.push(key);
+      }
+    }
+  }
+
+  checkAndAddCustomFields(customFieldArr, function() {
+    const emailType = emailBody.type;
+    const timestamp = parseInt(emailBody.time_sent, 10);
+    const listId = Settings.listId;
+    const secondsInDay = 86400;
+    const timeElapsed = (Date.now() - timestamp) / 1000;
+
+    // Confirm email type is opt in and link has been clicked within 1 day
+    if (emailType === optIn && timeElapsed < secondsInDay) {
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/contactdb/recipients',
+        body: customFields,
+      });
+
+      sg.API(request, function(error, response) {
+        if (listId) {
+          var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
+          var request = sg.emptyRequest({
+            method: 'POST',
+            path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
+            body: customFields,
+          });
+          sg.API(request, function(error, response) {
+            console.log(response.statusCode);
+            console.log(response.body);
+            console.log(response.headers);
+
+            callback();
+          });
+        }
+        else {
+          return callback();
+        }
+      });
+    }
+    else {
+      return callback();
+    }
+  });
-	var request = sg.emptyRequest({
-		method: 'GET',
-		path: '/v3/contactdb/custom_fields',
-	});
-
-	sg.API(request, function(error, response) {
-    	console.log(response.statusCode)
-    	console.log(response.body)
-    	console.log(response.headers)
-
-    	var existingCustomFields = JSON.parse(response.body);
-		var fieldsToCreate = [];
-
-		submittedFields.map((submittedField) => {
-			var fieldExists = false;
-			existingCustomFields.custom_fields.map((field) => {
-				if (submittedField == field.name) {
-					fieldExists = true;
-				}
-			});
-			if (!fieldExists) {
-				fieldsToCreate.push(submittedField)
-			}
-		});
-
-		if (fieldsToCreate.length == 0) {
-			callback();
-		} else {
-			fieldsToCreate.map((fieldsToCreate) => {
-				var body = { name: fieldsToCreate, type: 'text' };
-
-				var request = sg.emptyRequest({
-					method: 'POST',
-					path: '/v3/contactdb/custom_fields',
-					body: body
-				});
-
-				sg.API(request, function(error, response) {
-			    	callback();
-			    });
-			});
-		}
-
+  var request = sg.emptyRequest({
+    method: 'GET',
+    path: '/v3/contactdb/custom_fields',
+  });
+
+  sg.API(request, function(error, response) {
+    console.log(response.statusCode);
+    console.log(response.body);
+    console.log(response.headers);
+
+    var existingCustomFields = JSON.parse(response.body);
+    var fieldsToCreate = [];
+
+    submittedFields.map((submittedField) => {
+      var fieldExists = false;
+      existingCustomFields.custom_fields.map((field) => {
+        if (submittedField === field.name) {
+          fieldExists = true;
+        }
+      });
+      if (!fieldExists) {
+        fieldsToCreate.push(submittedField);
+      }
+
+    if (fieldsToCreate.length === 0) {
+      return callback();
+    }
+    else {
+      fieldsToCreate.map((fieldsToCreate) => {
+        var body = { name: fieldsToCreate, type: 'text' };
+
+        var request = sg.emptyRequest({
+          method: 'POST',
+          path: '/v3/contactdb/custom_fields',
+          body: body,
+        });
+
+        sg.API(request, function(error, response) {
+          callback();
+        });
+      });
+    }
+
+  });
-	if (url.substr(-1) == '/') {
-		return url.substring(0, url.length - 1);
-	}
-	return url;
+  if (url.substr(-1) === '/') {
+    return url.substring(0, url.length - 1);
+  }
+  return url;
-	var isInArray = false;
-	array.map((item) => {
-		if (string == item) {
-			isInArray = true;
-		}
-	});
-	return isInArray;
-}
+  var isInArray = false;
+  array.map((item) => {
+    if (string === item) {
+      isInArray = true;
+    }
+  });
+  return isInArray;
+}","-	const subject = ""Please Confirm Your Email Address"";
-	const url = formatUrl(Settings.url) + '/success';
-	const link = ""<a href='"" + url + ""'>this link</a>""
-	const mailText = ""Thanks for signing up! Click "" + link + "" to sign up!  This link will be active for 24 hours."";
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: reqBody.email,
-	        }
-	      ],
-	      subject: subject,
-	      custom_args: {
-	      	type: optIn,
-	      	time_sent: String(Date.now()),
-	      },
-	      substitutions: {
-	      	link_insert: link
-	      }
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ]
-	}
-
-	const templateId = Settings.templateId;
-	if (templateId) emailBody.template_id = templateId;
-
-	for (key in reqBody) {
-		emailBody.personalizations[0].custom_args[key] = reqBody[key];
-	}
-
-	return emailBody;
+  const subject = 'Please Confirm Your Email Address';
+  const url = formatUrl(Settings.url) + '/success';
+  const link = '<a href=\'' + url + '\'>this link</a>';
+  const mailText = 'Thanks for signing up! Click ' + link + ' to sign up!  This link will be active for 24 hours.';
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: reqBody.email,
+          },
+        ],
+        subject: subject,
+        custom_args: {
+          type: optIn,
+          time_sent: String(Date.now()),
+        },
+        substitutions: {
+          link_insert: link,
+        },
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  const templateId = Settings.templateId;
+  if (templateId) {
+    emailBody.template_id = templateId;
+  }
+
+  for (key in reqBody) {
+    if ({}.hasOwnProperty.call(reqBody, key)) {
+      emailBody.personalizations[0].custom_args[key] = reqBody[key];
+    }
+  }
+
+  return emailBody;
-	const subject = ""New email signup"";
-	const mailText = ""A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>"" + reqBody.first_name + "" "" + reqBody.last_name + ""<br/><b>Email: </b>"" + reqBody.email;
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: Settings.notificationEmail,
-	        }
-	      ],
-	      subject: subject
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ],
-	}
-
-	return emailBody;
+  const subject = 'New email signup';
+  const mailText = 'A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>' + reqBody.first_name + ' ' + reqBody.last_name + '<br/><b>Email: </b>' + reqBody.email;
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: Settings.notificationEmail,
+          },
+        ],
+        subject: subject,
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  return emailBody;
-	var request = sg.emptyRequest({
-		method: 'POST',
-		path: '/v3/mail/send',
-		body: prepareConfirmationEmail(req.body)
-	});
-
-	sg.API(request, function(error, response) {
-		if (error) {
-			console.log('Error response received');
-		}
-
-		if (response.statusCode >= 200 && response.statusCode < 300) {
-			res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
-		} else {
-			res.sendFile(path.join(__dirname, '../static/error.html'));
-		}
-	});
-}
+  var request = sg.emptyRequest({
+    method: 'POST',
+    path: '/v3/mail/send',
+    body: prepareConfirmationEmail(req.body),
+  });
+
+  sg.API(request, function(error, response) {
+    if (error) {
+      console.log('Error response received');
+    }
+
+    if (response.statusCode >= 200 && response.statusCode < 300) {
+      res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
+    }
+    else {
+      res.sendFile(path.join(__dirname, '../static/error.html'));
+    }
+  });
+};
-	addUserToList(req.body[0], function() {
-		//send notification about the new signup
-		if (Settings.sendNotification) {
-			console.log(""Sending notification"");
-
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/mail/send',
-				body: prepareNotificationEmail(req.body[0])
-			});
-
-			sg.API(request, function(error, response) {
-				if (error) {
-					console.log('Error sending notification');
-				}
-			});
-		}
-
-		res.sendStatus(200);
-	});
-}
+  addUserToList(req.body[0], function() {
+    //send notification about the new signup
+    if (Settings.sendNotification) {
+      console.log('Sending notification');
+
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/mail/send',
+        body: prepareNotificationEmail(req.body[0]),
+      });
+
+      sg.API(request, function(error, response) {
+        if (error) {
+          console.log('Error sending notification');
+        }
+      });
+    }
+
+    res.sendStatus(200);
+  });
+};
-	console.log(emailBody);
-
-	var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
-		'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
-
-	var customFields = [{}];
-	var customFieldArr = [];
-
-	for (key in emailBody) {
-		if (!stringInArray(key, ignoreFields)) {
-			customFields[0][key] = emailBody[key];
-			if (key != 'email' && key != 'first_name' && key != 'last_name') {
-				customFieldArr.push(key);
-			}
-		}
-	}
-
-	checkAndAddCustomFields(customFieldArr, function() {
-		const emailType = emailBody.type;
-		const timestamp = parseInt(emailBody.time_sent);
-		const listId = Settings.listId;
-		const secondsInDay = 86400;
-		const timeElapsed = (Date.now() - timestamp) / 1000;
-
-		// Confirm email type is opt in and link has been clicked within 1 day
-		if (emailType == optIn && timeElapsed < secondsInDay) {
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/contactdb/recipients',
-				body: customFields
-			});
-
-			sg.API(request, function(error, response) {
-		    	if (listId) {
-					var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
-					var request = sg.emptyRequest({
-						method: 'POST',
-						path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
-						body: customFields
-					});
-					sg.API(request, function(error, response) {
-				    	console.log(response.statusCode)
-				    	console.log(response.body)
-				    	console.log(response.headers)
-
-						callback();
-					});
-				} else {
-					callback();
-				}
-			});
-		} else {
-			callback();
-		}
-	});
+  console.log(emailBody);
+
+  var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
+    'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
+
+  var customFields = [{}];
+  var customFieldArr = [];
+
+  for (key in emailBody) {
+    if (!stringInArray(key, ignoreFields)) {
+      customFields[0][key] = emailBody[key];
+      if (key !== 'email' && key !== 'first_name' && key !== 'last_name') {
+        customFieldArr.push(key);
+      }
+    }
+  }
+
+  checkAndAddCustomFields(customFieldArr, function() {
+    const emailType = emailBody.type;
+    const timestamp = parseInt(emailBody.time_sent, 10);
+    const listId = Settings.listId;
+    const secondsInDay = 86400;
+    const timeElapsed = (Date.now() - timestamp) / 1000;
+
+    // Confirm email type is opt in and link has been clicked within 1 day
+    if (emailType === optIn && timeElapsed < secondsInDay) {
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/contactdb/recipients',
+        body: customFields,
+      });
+
+      sg.API(request, function(error, response) {
+        if (listId) {
+          var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
+          var request = sg.emptyRequest({
+            method: 'POST',
+            path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
+            body: customFields,
+          });
+          sg.API(request, function(error, response) {
+            console.log(response.statusCode);
+            console.log(response.body);
+            console.log(response.headers);
+
+            callback();
+          });
+        }
+        else {
+          return callback();
+        }
+      });
+    }
+    else {
+      return callback();
+    }
+  });
-	var request = sg.emptyRequest({
-		method: 'GET',
-		path: '/v3/contactdb/custom_fields',
-	});
-
-	sg.API(request, function(error, response) {
-    	console.log(response.statusCode)
-    	console.log(response.body)
-    	console.log(response.headers)
-
-    	var existingCustomFields = JSON.parse(response.body);
-		var fieldsToCreate = [];
-
-		submittedFields.map((submittedField) => {
-			var fieldExists = false;
-			existingCustomFields.custom_fields.map((field) => {
-				if (submittedField == field.name) {
-					fieldExists = true;
-				}
-			});
-			if (!fieldExists) {
-				fieldsToCreate.push(submittedField)
-			}
-		});
-
-		if (fieldsToCreate.length == 0) {
-			callback();
-		} else {
-			fieldsToCreate.map((fieldsToCreate) => {
-				var body = { name: fieldsToCreate, type: 'text' };
-
-				var request = sg.emptyRequest({
-					method: 'POST',
-					path: '/v3/contactdb/custom_fields',
-					body: body
-				});
-
-				sg.API(request, function(error, response) {
-			    	callback();
-			    });
-			});
-		}
-
+  var request = sg.emptyRequest({
+    method: 'GET',
+    path: '/v3/contactdb/custom_fields',
+  });
+
+  sg.API(request, function(error, response) {
+    console.log(response.statusCode);
+    console.log(response.body);
+    console.log(response.headers);
+
+    var existingCustomFields = JSON.parse(response.body);
+    var fieldsToCreate = [];
+
+    submittedFields.map((submittedField) => {
+      var fieldExists = false;
+      existingCustomFields.custom_fields.map((field) => {
+        if (submittedField === field.name) {
+          fieldExists = true;
+        }
+      });
+      if (!fieldExists) {
+        fieldsToCreate.push(submittedField);
+      }
+
+    if (fieldsToCreate.length === 0) {
+      return callback();
+    }
+    else {
+      fieldsToCreate.map((fieldsToCreate) => {
+        var body = { name: fieldsToCreate, type: 'text' };
+
+        var request = sg.emptyRequest({
+          method: 'POST',
+          path: '/v3/contactdb/custom_fields',
+          body: body,
+        });
+
+        sg.API(request, function(error, response) {
+          callback();
+        });
+      });
+    }
+
+  });
-	if (url.substr(-1) == '/') {
-		return url.substring(0, url.length - 1);
-	}
-	return url;
+  if (url.substr(-1) === '/') {
+    return url.substring(0, url.length - 1);
+  }
+  return url;
-	var isInArray = false;
-	array.map((item) => {
-		if (string == item) {
-			isInArray = true;
-		}
-	});
-	return isInArray;
-}
+  var isInArray = false;
+  array.map((item) => {
+    if (string === item) {
+      isInArray = true;
+    }
+  });
+  return isInArray;
+}"
sendgrid_sendgrid-nodejs,91e893f9d9feb380fd9f6d611d4720f782ed09d9,Merge pull request #824 from tony-ho/fix-travis-build  Fix Travis CI build failures on master,packages/mail/src/classes/mail-service.js,,"-    const tmpRules = rules.map(function (rule) {
+    const tmpRules = rules.map(function(rule) {
-          pattern: new RegExp(rule)
+          pattern: new RegExp(rule),
-      } else if (ruleType === 'object') {
+      }
+      else if (ruleType === 'object') {
-            pattern: rule
-          }
-        } else if (rule.hasOwnProperty('pattern')
+            pattern: rule,
+          };
+        }
+        else if (rule.hasOwnProperty('pattern')
-            rule.pattern = new RegExp(rule.pattern);
+          rule.pattern = new RegExp(rule.pattern);
-          return rule
-        } catch (err) {
+          return rule;
+        }
+        catch (err) {
+          // continue regardless of error
-    this.secretRules = tmpRules.filter(function (val) {
+    this.secretRules = tmpRules.filter(function(val) {
-    body.content.forEach(function (data) {
-      self.secretRules.forEach(function (rule) {
+    body.content.forEach(function(data) {
+      self.secretRules.forEach(function(rule) {","-    const tmpRules = rules.map(function (rule) {
+    const tmpRules = rules.map(function(rule) {
-          pattern: new RegExp(rule)
+          pattern: new RegExp(rule),
-      } else if (ruleType === 'object') {
+      }
+      else if (ruleType === 'object') {
-            pattern: rule
-          }
-        } else if (rule.hasOwnProperty('pattern')
+            pattern: rule,
+          };
+        }
+        else if (rule.hasOwnProperty('pattern')
-            rule.pattern = new RegExp(rule.pattern);
+          rule.pattern = new RegExp(rule.pattern);
-          return rule
-        } catch (err) {
+          return rule;
+        }
+        catch (err) {
+          // continue regardless of error
-    this.secretRules = tmpRules.filter(function (val) {
+    this.secretRules = tmpRules.filter(function(val) {
-    body.content.forEach(function (data) {
-      self.secretRules.forEach(function (rule) {
+    body.content.forEach(function(data) {
+      self.secretRules.forEach(function(rule) {"
sendgrid_sendgrid-nodejs,57b4e7b752911dad8173bd258d1ce5168f336d33,Merge pull request #804 from aroach/event-webhook-docker  Event webhook docker,examples/webhooks-docker/routes/inbound-parse.js,,"+const express = require('express')
+const router = express.Router()
+const formidable = require('express-formidable')
+
+router.use(formidable())
+
+router.post('/', (req, res) => {
+    console.log('---------- START RECEIVED WEBHOOK DATA ----------')
+    // Email data comes in as a form.  Using express-formidable to 
+    // handle the form data.  Form fields are available in req.fields
+    // Below, extracting the from and text.
+    // You can take this data and do something more interesting with it
+    // such as sending it to a database.
+    // Attachments are stored in /tmp based on the default configuration
+    // of the formidable middleware.
+    // console.log(req.fields)
+    console.log()
+    console.log('HEADERS: ' + req.fields.headers)
+    console.log()
+    console.log('DKIM: ' + req.fields.dkim)
+    console.log()
+    console.log('CONTENT-IDS: ' + req.fields[""content-ids""])
+    console.log()
+    console.log('TO: ' + req.fields.to)
+    console.log()
+    console.log('HTML: ' + req.fields.html)
+    console.log()
+    console.log('FROM: ' + req.fields.from)
+    console.log()
+    console.log('SENDER-IP: ' + req.fields.sender_ip)
+    console.log()
+    console.log('SPAM-REPORT: ' + req.fields.spam_report)
+    console.log()
+    console.log('ENVELOPE: ' + req.fields.envelope)
+    console.log()
+    console.log('ATTACHMENTS: ' + req.fields.attachments)
+    console.log()
+    console.log('SPAM-SCORE: ' + req.fields.spam_score)
+    console.log()
+    console.log('ATTACHMENT-INFO: ' + req.fields[""attachment-info""])
+    console.log()
+    console.log('CHARSETS: ' + req.fields.charsets)
+    console.log()
+    console.log('SPF: ' + req.fields.SPF)
+    console.log()
+    console.log('MESSAGE TEXT: ' + req.fields.text)
+    console.log()
+    console.log('---------- END RECEIVED WEBHOOK DATA ----------')
+
+    res.sendStatus(200)
+})
+
+module.exports = router","+const express = require('express')
+const router = express.Router()
+const formidable = require('express-formidable')
+
+router.use(formidable())
+
+router.post('/', (req, res) => {
+    console.log('---------- START RECEIVED WEBHOOK DATA ----------')
+    // Email data comes in as a form.  Using express-formidable to 
+    // handle the form data.  Form fields are available in req.fields
+    // Below, extracting the from and text.
+    // You can take this data and do something more interesting with it
+    // such as sending it to a database.
+    // Attachments are stored in /tmp based on the default configuration
+    // of the formidable middleware.
+    // console.log(req.fields)
+    console.log()
+    console.log('HEADERS: ' + req.fields.headers)
+    console.log()
+    console.log('DKIM: ' + req.fields.dkim)
+    console.log()
+    console.log('CONTENT-IDS: ' + req.fields[""content-ids""])
+    console.log()
+    console.log('TO: ' + req.fields.to)
+    console.log()
+    console.log('HTML: ' + req.fields.html)
+    console.log()
+    console.log('FROM: ' + req.fields.from)
+    console.log()
+    console.log('SENDER-IP: ' + req.fields.sender_ip)
+    console.log()
+    console.log('SPAM-REPORT: ' + req.fields.spam_report)
+    console.log()
+    console.log('ENVELOPE: ' + req.fields.envelope)
+    console.log()
+    console.log('ATTACHMENTS: ' + req.fields.attachments)
+    console.log()
+    console.log('SPAM-SCORE: ' + req.fields.spam_score)
+    console.log()
+    console.log('ATTACHMENT-INFO: ' + req.fields[""attachment-info""])
+    console.log()
+    console.log('CHARSETS: ' + req.fields.charsets)
+    console.log()
+    console.log('SPF: ' + req.fields.SPF)
+    console.log()
+    console.log('MESSAGE TEXT: ' + req.fields.text)
+    console.log()
+    console.log('---------- END RECEIVED WEBHOOK DATA ----------')
+
+    res.sendStatus(200)
+})
+
+module.exports = router"
sendgrid_sendgrid-nodejs,57b4e7b752911dad8173bd258d1ce5168f336d33,Merge pull request #804 from aroach/event-webhook-docker  Event webhook docker,examples/webhooks-docker/package-lock.json,,"+{
+  ""name"": ""inbound-parse-docker"",
+  ""version"": ""1.0.0"",
+  ""lockfileVersion"": 1,
+  ""requires"": true,
+  ""dependencies"": {
+    ""accepts"": {
+      ""version"": ""1.3.5"",
+      ""resolved"": ""https://registry.npmjs.org/accepts/-/accepts-1.3.5.tgz"",
+      ""integrity"": ""sha1-63d99gEXI6OxTopywIBcjoZ0a9I="",
+      ""requires"": {
+        ""mime-types"": ""~2.1.18"",
+        ""negotiator"": ""0.6.1""
+      }
+    },
+    ""array-flatten"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz"",
+      ""integrity"": ""sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=""
+    },
+    ""body-parser"": {
+      ""version"": ""1.18.3"",
+      ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz"",
+      ""integrity"": ""sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ="",
+      ""requires"": {
+        ""bytes"": ""3.0.0"",
+        ""content-type"": ""~1.0.4"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""http-errors"": ""~1.6.3"",
+        ""iconv-lite"": ""0.4.23"",
+        ""on-finished"": ""~2.3.0"",
+        ""qs"": ""6.5.2"",
+        ""raw-body"": ""2.3.3"",
+        ""type-is"": ""~1.6.16""
+      },
+      ""dependencies"": {
+        ""qs"": {
+          ""version"": ""6.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.2.tgz"",
+          ""integrity"": ""sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==""
+        }
+      }
+    },
+    ""bytes"": {
+      ""version"": ""3.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz"",
+      ""integrity"": ""sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=""
+    },
+    ""content-disposition"": {
+      ""version"": ""0.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz"",
+      ""integrity"": ""sha1-DPaLud318r55YcOoUXjLhdunjLQ=""
+    },
+    ""content-type"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz"",
+      ""integrity"": ""sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==""
+    },
+    ""cookie"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz"",
+      ""integrity"": ""sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=""
+    },
+    ""cookie-signature"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz"",
+      ""integrity"": ""sha1-4wOogrNCzD7oylE6eZmXNNqzriw=""
+    },
+    ""debug"": {
+      ""version"": ""2.6.9"",
+      ""resolved"": ""https://registry.npmjs.org/debug/-/debug-2.6.9.tgz"",
+      ""integrity"": ""sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA=="",
+      ""requires"": {
+        ""ms"": ""2.0.0""
+      }
+    },
+    ""depd"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/depd/-/depd-1.1.2.tgz"",
+      ""integrity"": ""sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=""
+    },
+    ""destroy"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz"",
+      ""integrity"": ""sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=""
+    },
+    ""ee-first"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz"",
+      ""integrity"": ""sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=""
+    },
+    ""encodeurl"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz"",
+      ""integrity"": ""sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=""
+    },
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
+    ""etag"": {
+      ""version"": ""1.8.1"",
+      ""resolved"": ""https://registry.npmjs.org/etag/-/etag-1.8.1.tgz"",
+      ""integrity"": ""sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=""
+    },
+    ""express"": {
+      ""version"": ""4.16.3"",
+      ""resolved"": ""http://registry.npmjs.org/express/-/express-4.16.3.tgz"",
+      ""integrity"": ""sha1-avilAjUNsyRuzEvs9rWjTSL37VM="",
+      ""requires"": {
+        ""accepts"": ""~1.3.5"",
+        ""array-flatten"": ""1.1.1"",
+        ""body-parser"": ""1.18.2"",
+        ""content-disposition"": ""0.5.2"",
+        ""content-type"": ""~1.0.4"",
+        ""cookie"": ""0.3.1"",
+        ""cookie-signature"": ""1.0.6"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""finalhandler"": ""1.1.1"",
+        ""fresh"": ""0.5.2"",
+        ""merge-descriptors"": ""1.0.1"",
+        ""methods"": ""~1.1.2"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.2"",
+        ""path-to-regexp"": ""0.1.7"",
+        ""proxy-addr"": ""~2.0.3"",
+        ""qs"": ""6.5.1"",
+        ""range-parser"": ""~1.2.0"",
+        ""safe-buffer"": ""5.1.1"",
+        ""send"": ""0.16.2"",
+        ""serve-static"": ""1.13.2"",
+        ""setprototypeof"": ""1.1.0"",
+        ""statuses"": ""~1.4.0"",
+        ""type-is"": ""~1.6.16"",
+        ""utils-merge"": ""1.0.1"",
+        ""vary"": ""~1.1.2""
+      },
+      ""dependencies"": {
+        ""body-parser"": {
+          ""version"": ""1.18.2"",
+          ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.18.2.tgz"",
+          ""integrity"": ""sha1-h2eKGdhLR9hZuDGZvVm84iKxBFQ="",
+          ""requires"": {
+            ""bytes"": ""3.0.0"",
+            ""content-type"": ""~1.0.4"",
+            ""debug"": ""2.6.9"",
+            ""depd"": ""~1.1.1"",
+            ""http-errors"": ""~1.6.2"",
+            ""iconv-lite"": ""0.4.19"",
+            ""on-finished"": ""~2.3.0"",
+            ""qs"": ""6.5.1"",
+            ""raw-body"": ""2.3.2"",
+            ""type-is"": ""~1.6.15""
+          }
+        },
+        ""iconv-lite"": {
+          ""version"": ""0.4.19"",
+          ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.19.tgz"",
+          ""integrity"": ""sha512-oTZqweIP51xaGPI4uPa56/Pri/480R+mo7SeU+YETByQNhDG55ycFyNLIgta9vXhILrxXDmF7ZGhqZIcuN0gJQ==""
+        },
+        ""raw-body"": {
+          ""version"": ""2.3.2"",
+          ""resolved"": ""https://registry.npmjs.org/raw-body/-/raw-body-2.3.2.tgz"",
+          ""integrity"": ""sha1-vNYMd9Prk83gBQKVw/N5OJvIj4k="",
+          ""requires"": {
+            ""bytes"": ""3.0.0"",
+            ""http-errors"": ""1.6.2"",
+            ""iconv-lite"": ""0.4.19"",
+            ""unpipe"": ""1.0.0""
+          },
+          ""dependencies"": {
+            ""depd"": {
+              ""version"": ""1.1.1"",
+              ""resolved"": ""https://registry.npmjs.org/depd/-/depd-1.1.1.tgz"",
+              ""integrity"": ""sha1-V4O04cRZ8G+lyif5kfPQbnoxA1k=""
+            },
+            ""http-errors"": {
+              ""version"": ""1.6.2"",
+              ""resolved"": ""https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz"",
+              ""integrity"": ""sha1-CgAsyFcHGSp+eUbO7cERVfYOxzY="",
+              ""requires"": {
+                ""depd"": ""1.1.1"",
+                ""inherits"": ""2.0.3"",
+                ""setprototypeof"": ""1.0.3"",
+                ""statuses"": "">= 1.3.1 < 2""
+              }
+            },
+            ""setprototypeof"": {
+              ""version"": ""1.0.3"",
+              ""resolved"": ""https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz"",
+              ""integrity"": ""sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ=""
+            }
+          }
+        }
+      }
+    },
+    ""express-formidable"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/express-formidable/-/express-formidable-1.0.0.tgz"",
+      ""integrity"": ""sha1-3JIvBFUTIyJFip7BowHYkbP/yo0="",
+      ""requires"": {
+        ""formidable"": ""^1.0.17""
+      }
+    },
+    ""finalhandler"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""http://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz"",
+      ""integrity"": ""sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.2"",
+        ""statuses"": ""~1.4.0"",
+        ""unpipe"": ""~1.0.0""
+      }
+    },
+    ""formidable"": {
+      ""version"": ""1.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/formidable/-/formidable-1.2.1.tgz"",
+      ""integrity"": ""sha512-Fs9VRguL0gqGHkXS5GQiMCr1VhZBxz0JnJs4JmMp/2jL18Fmbzvv7vOFRU+U8TBkHEE/CX1qDXzJplVULgsLeg==""
+    },
+    ""forwarded"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz"",
+      ""integrity"": ""sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ=""
+    },
+    ""fresh"": {
+      ""version"": ""0.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz"",
+      ""integrity"": ""sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=""
+    },
+    ""http-errors"": {
+      ""version"": ""1.6.3"",
+      ""resolved"": ""http://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz"",
+      ""integrity"": ""sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0="",
+      ""requires"": {
+        ""depd"": ""~1.1.2"",
+        ""inherits"": ""2.0.3"",
+        ""setprototypeof"": ""1.1.0"",
+        ""statuses"": "">= 1.4.0 < 2""
+      }
+    },
+    ""iconv-lite"": {
+      ""version"": ""0.4.23"",
+      ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz"",
+      ""integrity"": ""sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA=="",
+      ""requires"": {
+        ""safer-buffer"": "">= 2.1.2 < 3""
+      }
+    },
+    ""inherits"": {
+      ""version"": ""2.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz"",
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
+    },
+    ""ipaddr.js"": {
+      ""version"": ""1.8.0"",
+      ""resolved"": ""https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.8.0.tgz"",
+      ""integrity"": ""sha1-6qM9bd16zo9/b+DJygRA5wZzix4=""
+    },
+    ""media-typer"": {
+      ""version"": ""0.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz"",
+      ""integrity"": ""sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=""
+    },
+    ""merge-descriptors"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz"",
+      ""integrity"": ""sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=""
+    },
+    ""methods"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/methods/-/methods-1.1.2.tgz"",
+      ""integrity"": ""sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=""
+    },
+    ""mime"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/mime/-/mime-1.4.1.tgz"",
+      ""integrity"": ""sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==""
+    },
+    ""mime-db"": {
+      ""version"": ""1.36.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.36.0.tgz"",
+      ""integrity"": ""sha512-L+xvyD9MkoYMXb1jAmzI/lWYAxAMCPvIBSWur0PZ5nOf5euahRLVqH//FKW9mWp2lkqUgYiXPgkzfMUFi4zVDw==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.20"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.20.tgz"",
+      ""integrity"": ""sha512-HrkrPaP9vGuWbLK1B1FfgAkbqNjIuy4eHlIYnFi7kamZyLLrGlo2mpcx0bBmNpKqBtYtAfGbodDddIgddSJC2A=="",
+      ""requires"": {
+        ""mime-db"": ""~1.36.0""
+      }
+    },
+    ""ms"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/ms/-/ms-2.0.0.tgz"",
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    },
+    ""negotiator"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz"",
+      ""integrity"": ""sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk=""
+    },
+    ""on-finished"": {
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz"",
+      ""integrity"": ""sha1-IPEzZIGwg811M3mSoWlxqi2QaUc="",
+      ""requires"": {
+        ""ee-first"": ""1.1.1""
+      }
+    },
+    ""parseurl"": {
+      ""version"": ""1.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz"",
+      ""integrity"": ""sha1-/CidTtiZMRlGDBViUyYs3I3mW/M=""
+    },
+    ""path-to-regexp"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz"",
+      ""integrity"": ""sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=""
+    },
+    ""proxy-addr"": {
+      ""version"": ""2.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.4.tgz"",
+      ""integrity"": ""sha512-5erio2h9jp5CHGwcybmxmVqHmnCBZeewlfJ0pex+UW7Qny7OOZXTtH56TGNyBizkgiOwhJtMKrVzDTeKcySZwA=="",
+      ""requires"": {
+        ""forwarded"": ""~0.1.2"",
+        ""ipaddr.js"": ""1.8.0""
+      }
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A==""
+    },
+    ""range-parser"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz"",
+      ""integrity"": ""sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4=""
+    },
+    ""raw-body"": {
+      ""version"": ""2.3.3"",
+      ""resolved"": ""https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz"",
+      ""integrity"": ""sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw=="",
+      ""requires"": {
+        ""bytes"": ""3.0.0"",
+        ""http-errors"": ""1.6.3"",
+        ""iconv-lite"": ""0.4.23"",
+        ""unpipe"": ""1.0.0""
+      }
+    },
+    ""safe-buffer"": {
+      ""version"": ""5.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz"",
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""safer-buffer"": {
+      ""version"": ""2.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz"",
+      ""integrity"": ""sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==""
+    },
+    ""send"": {
+      ""version"": ""0.16.2"",
+      ""resolved"": ""https://registry.npmjs.org/send/-/send-0.16.2.tgz"",
+      ""integrity"": ""sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""destroy"": ""~1.0.4"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""fresh"": ""0.5.2"",
+        ""http-errors"": ""~1.6.2"",
+        ""mime"": ""1.4.1"",
+        ""ms"": ""2.0.0"",
+        ""on-finished"": ""~2.3.0"",
+        ""range-parser"": ""~1.2.0"",
+        ""statuses"": ""~1.4.0""
+      }
+    },
+    ""serve-static"": {
+      ""version"": ""1.13.2"",
+      ""resolved"": ""https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz"",
+      ""integrity"": ""sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw=="",
+      ""requires"": {
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""parseurl"": ""~1.3.2"",
+        ""send"": ""0.16.2""
+      }
+    },
+    ""setprototypeof"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz"",
+      ""integrity"": ""sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==""
+    },
+    ""statuses"": {
+      ""version"": ""1.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz"",
+      ""integrity"": ""sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==""
+    },
+    ""type-is"": {
+      ""version"": ""1.6.16"",
+      ""resolved"": ""https://registry.npmjs.org/type-is/-/type-is-1.6.16.tgz"",
+      ""integrity"": ""sha512-HRkVv/5qY2G6I8iab9cI7v1bOIdhm94dVjQCPFElW9W+3GeDOSHmy2EBYe4VTApuzolPcmgFTN3ftVJRKR2J9Q=="",
+      ""requires"": {
+        ""media-typer"": ""0.3.0"",
+        ""mime-types"": ""~2.1.18""
+      }
+    },
+    ""unpipe"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz"",
+      ""integrity"": ""sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=""
+    },
+    ""utils-merge"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz"",
+      ""integrity"": ""sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=""
+    },
+    ""vary"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/vary/-/vary-1.1.2.tgz"",
+      ""integrity"": ""sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=""
+    }
+  }
+}","+{
+  ""name"": ""inbound-parse-docker"",
+  ""version"": ""1.0.0"",
+  ""lockfileVersion"": 1,
+  ""requires"": true,
+  ""dependencies"": {
+    ""accepts"": {
+      ""version"": ""1.3.5"",
+      ""resolved"": ""https://registry.npmjs.org/accepts/-/accepts-1.3.5.tgz"",
+      ""integrity"": ""sha1-63d99gEXI6OxTopywIBcjoZ0a9I="",
+      ""requires"": {
+        ""mime-types"": ""~2.1.18"",
+        ""negotiator"": ""0.6.1""
+      }
+    },
+    ""array-flatten"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz"",
+      ""integrity"": ""sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=""
+    },
+    ""body-parser"": {
+      ""version"": ""1.18.3"",
+      ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.18.3.tgz"",
+      ""integrity"": ""sha1-WykhmP/dVTs6DyDe0FkrlWlVyLQ="",
+      ""requires"": {
+        ""bytes"": ""3.0.0"",
+        ""content-type"": ""~1.0.4"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""http-errors"": ""~1.6.3"",
+        ""iconv-lite"": ""0.4.23"",
+        ""on-finished"": ""~2.3.0"",
+        ""qs"": ""6.5.2"",
+        ""raw-body"": ""2.3.3"",
+        ""type-is"": ""~1.6.16""
+      },
+      ""dependencies"": {
+        ""qs"": {
+          ""version"": ""6.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.2.tgz"",
+          ""integrity"": ""sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==""
+        }
+      }
+    },
+    ""bytes"": {
+      ""version"": ""3.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz"",
+      ""integrity"": ""sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=""
+    },
+    ""content-disposition"": {
+      ""version"": ""0.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz"",
+      ""integrity"": ""sha1-DPaLud318r55YcOoUXjLhdunjLQ=""
+    },
+    ""content-type"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz"",
+      ""integrity"": ""sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==""
+    },
+    ""cookie"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz"",
+      ""integrity"": ""sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=""
+    },
+    ""cookie-signature"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz"",
+      ""integrity"": ""sha1-4wOogrNCzD7oylE6eZmXNNqzriw=""
+    },
+    ""debug"": {
+      ""version"": ""2.6.9"",
+      ""resolved"": ""https://registry.npmjs.org/debug/-/debug-2.6.9.tgz"",
+      ""integrity"": ""sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA=="",
+      ""requires"": {
+        ""ms"": ""2.0.0""
+      }
+    },
+    ""depd"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/depd/-/depd-1.1.2.tgz"",
+      ""integrity"": ""sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=""
+    },
+    ""destroy"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz"",
+      ""integrity"": ""sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=""
+    },
+    ""ee-first"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz"",
+      ""integrity"": ""sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=""
+    },
+    ""encodeurl"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz"",
+      ""integrity"": ""sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=""
+    },
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
+    ""etag"": {
+      ""version"": ""1.8.1"",
+      ""resolved"": ""https://registry.npmjs.org/etag/-/etag-1.8.1.tgz"",
+      ""integrity"": ""sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=""
+    },
+    ""express"": {
+      ""version"": ""4.16.3"",
+      ""resolved"": ""http://registry.npmjs.org/express/-/express-4.16.3.tgz"",
+      ""integrity"": ""sha1-avilAjUNsyRuzEvs9rWjTSL37VM="",
+      ""requires"": {
+        ""accepts"": ""~1.3.5"",
+        ""array-flatten"": ""1.1.1"",
+        ""body-parser"": ""1.18.2"",
+        ""content-disposition"": ""0.5.2"",
+        ""content-type"": ""~1.0.4"",
+        ""cookie"": ""0.3.1"",
+        ""cookie-signature"": ""1.0.6"",
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""finalhandler"": ""1.1.1"",
+        ""fresh"": ""0.5.2"",
+        ""merge-descriptors"": ""1.0.1"",
+        ""methods"": ""~1.1.2"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.2"",
+        ""path-to-regexp"": ""0.1.7"",
+        ""proxy-addr"": ""~2.0.3"",
+        ""qs"": ""6.5.1"",
+        ""range-parser"": ""~1.2.0"",
+        ""safe-buffer"": ""5.1.1"",
+        ""send"": ""0.16.2"",
+        ""serve-static"": ""1.13.2"",
+        ""setprototypeof"": ""1.1.0"",
+        ""statuses"": ""~1.4.0"",
+        ""type-is"": ""~1.6.16"",
+        ""utils-merge"": ""1.0.1"",
+        ""vary"": ""~1.1.2""
+      },
+      ""dependencies"": {
+        ""body-parser"": {
+          ""version"": ""1.18.2"",
+          ""resolved"": ""https://registry.npmjs.org/body-parser/-/body-parser-1.18.2.tgz"",
+          ""integrity"": ""sha1-h2eKGdhLR9hZuDGZvVm84iKxBFQ="",
+          ""requires"": {
+            ""bytes"": ""3.0.0"",
+            ""content-type"": ""~1.0.4"",
+            ""debug"": ""2.6.9"",
+            ""depd"": ""~1.1.1"",
+            ""http-errors"": ""~1.6.2"",
+            ""iconv-lite"": ""0.4.19"",
+            ""on-finished"": ""~2.3.0"",
+            ""qs"": ""6.5.1"",
+            ""raw-body"": ""2.3.2"",
+            ""type-is"": ""~1.6.15""
+          }
+        },
+        ""iconv-lite"": {
+          ""version"": ""0.4.19"",
+          ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.19.tgz"",
+          ""integrity"": ""sha512-oTZqweIP51xaGPI4uPa56/Pri/480R+mo7SeU+YETByQNhDG55ycFyNLIgta9vXhILrxXDmF7ZGhqZIcuN0gJQ==""
+        },
+        ""raw-body"": {
+          ""version"": ""2.3.2"",
+          ""resolved"": ""https://registry.npmjs.org/raw-body/-/raw-body-2.3.2.tgz"",
+          ""integrity"": ""sha1-vNYMd9Prk83gBQKVw/N5OJvIj4k="",
+          ""requires"": {
+            ""bytes"": ""3.0.0"",
+            ""http-errors"": ""1.6.2"",
+            ""iconv-lite"": ""0.4.19"",
+            ""unpipe"": ""1.0.0""
+          },
+          ""dependencies"": {
+            ""depd"": {
+              ""version"": ""1.1.1"",
+              ""resolved"": ""https://registry.npmjs.org/depd/-/depd-1.1.1.tgz"",
+              ""integrity"": ""sha1-V4O04cRZ8G+lyif5kfPQbnoxA1k=""
+            },
+            ""http-errors"": {
+              ""version"": ""1.6.2"",
+              ""resolved"": ""https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz"",
+              ""integrity"": ""sha1-CgAsyFcHGSp+eUbO7cERVfYOxzY="",
+              ""requires"": {
+                ""depd"": ""1.1.1"",
+                ""inherits"": ""2.0.3"",
+                ""setprototypeof"": ""1.0.3"",
+                ""statuses"": "">= 1.3.1 < 2""
+              }
+            },
+            ""setprototypeof"": {
+              ""version"": ""1.0.3"",
+              ""resolved"": ""https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz"",
+              ""integrity"": ""sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ=""
+            }
+          }
+        }
+      }
+    },
+    ""express-formidable"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/express-formidable/-/express-formidable-1.0.0.tgz"",
+      ""integrity"": ""sha1-3JIvBFUTIyJFip7BowHYkbP/yo0="",
+      ""requires"": {
+        ""formidable"": ""^1.0.17""
+      }
+    },
+    ""finalhandler"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""http://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz"",
+      ""integrity"": ""sha512-Y1GUDo39ez4aHAw7MysnUD5JzYX+WaIj8I57kO3aEPT1fFRL4sr7mjei97FgnwhAyyzRYmQZaTHb2+9uZ1dPtg=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""on-finished"": ""~2.3.0"",
+        ""parseurl"": ""~1.3.2"",
+        ""statuses"": ""~1.4.0"",
+        ""unpipe"": ""~1.0.0""
+      }
+    },
+    ""formidable"": {
+      ""version"": ""1.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/formidable/-/formidable-1.2.1.tgz"",
+      ""integrity"": ""sha512-Fs9VRguL0gqGHkXS5GQiMCr1VhZBxz0JnJs4JmMp/2jL18Fmbzvv7vOFRU+U8TBkHEE/CX1qDXzJplVULgsLeg==""
+    },
+    ""forwarded"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz"",
+      ""integrity"": ""sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ=""
+    },
+    ""fresh"": {
+      ""version"": ""0.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz"",
+      ""integrity"": ""sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=""
+    },
+    ""http-errors"": {
+      ""version"": ""1.6.3"",
+      ""resolved"": ""http://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz"",
+      ""integrity"": ""sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0="",
+      ""requires"": {
+        ""depd"": ""~1.1.2"",
+        ""inherits"": ""2.0.3"",
+        ""setprototypeof"": ""1.1.0"",
+        ""statuses"": "">= 1.4.0 < 2""
+      }
+    },
+    ""iconv-lite"": {
+      ""version"": ""0.4.23"",
+      ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.23.tgz"",
+      ""integrity"": ""sha512-neyTUVFtahjf0mB3dZT77u+8O0QB89jFdnBkd5P1JgYPbPaia3gXXOVL2fq8VyU2gMMD7SaN7QukTB/pmXYvDA=="",
+      ""requires"": {
+        ""safer-buffer"": "">= 2.1.2 < 3""
+      }
+    },
+    ""inherits"": {
+      ""version"": ""2.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz"",
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
+    },
+    ""ipaddr.js"": {
+      ""version"": ""1.8.0"",
+      ""resolved"": ""https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.8.0.tgz"",
+      ""integrity"": ""sha1-6qM9bd16zo9/b+DJygRA5wZzix4=""
+    },
+    ""media-typer"": {
+      ""version"": ""0.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz"",
+      ""integrity"": ""sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=""
+    },
+    ""merge-descriptors"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz"",
+      ""integrity"": ""sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=""
+    },
+    ""methods"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/methods/-/methods-1.1.2.tgz"",
+      ""integrity"": ""sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=""
+    },
+    ""mime"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/mime/-/mime-1.4.1.tgz"",
+      ""integrity"": ""sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==""
+    },
+    ""mime-db"": {
+      ""version"": ""1.36.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.36.0.tgz"",
+      ""integrity"": ""sha512-L+xvyD9MkoYMXb1jAmzI/lWYAxAMCPvIBSWur0PZ5nOf5euahRLVqH//FKW9mWp2lkqUgYiXPgkzfMUFi4zVDw==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.20"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.20.tgz"",
+      ""integrity"": ""sha512-HrkrPaP9vGuWbLK1B1FfgAkbqNjIuy4eHlIYnFi7kamZyLLrGlo2mpcx0bBmNpKqBtYtAfGbodDddIgddSJC2A=="",
+      ""requires"": {
+        ""mime-db"": ""~1.36.0""
+      }
+    },
+    ""ms"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/ms/-/ms-2.0.0.tgz"",
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    },
+    ""negotiator"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz"",
+      ""integrity"": ""sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk=""
+    },
+    ""on-finished"": {
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz"",
+      ""integrity"": ""sha1-IPEzZIGwg811M3mSoWlxqi2QaUc="",
+      ""requires"": {
+        ""ee-first"": ""1.1.1""
+      }
+    },
+    ""parseurl"": {
+      ""version"": ""1.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz"",
+      ""integrity"": ""sha1-/CidTtiZMRlGDBViUyYs3I3mW/M=""
+    },
+    ""path-to-regexp"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz"",
+      ""integrity"": ""sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=""
+    },
+    ""proxy-addr"": {
+      ""version"": ""2.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.4.tgz"",
+      ""integrity"": ""sha512-5erio2h9jp5CHGwcybmxmVqHmnCBZeewlfJ0pex+UW7Qny7OOZXTtH56TGNyBizkgiOwhJtMKrVzDTeKcySZwA=="",
+      ""requires"": {
+        ""forwarded"": ""~0.1.2"",
+        ""ipaddr.js"": ""1.8.0""
+      }
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A==""
+    },
+    ""range-parser"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz"",
+      ""integrity"": ""sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4=""
+    },
+    ""raw-body"": {
+      ""version"": ""2.3.3"",
+      ""resolved"": ""https://registry.npmjs.org/raw-body/-/raw-body-2.3.3.tgz"",
+      ""integrity"": ""sha512-9esiElv1BrZoI3rCDuOuKCBRbuApGGaDPQfjSflGxdy4oyzqghxu6klEkkVIvBje+FF0BX9coEv8KqW6X/7njw=="",
+      ""requires"": {
+        ""bytes"": ""3.0.0"",
+        ""http-errors"": ""1.6.3"",
+        ""iconv-lite"": ""0.4.23"",
+        ""unpipe"": ""1.0.0""
+      }
+    },
+    ""safe-buffer"": {
+      ""version"": ""5.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz"",
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""safer-buffer"": {
+      ""version"": ""2.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz"",
+      ""integrity"": ""sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==""
+    },
+    ""send"": {
+      ""version"": ""0.16.2"",
+      ""resolved"": ""https://registry.npmjs.org/send/-/send-0.16.2.tgz"",
+      ""integrity"": ""sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw=="",
+      ""requires"": {
+        ""debug"": ""2.6.9"",
+        ""depd"": ""~1.1.2"",
+        ""destroy"": ""~1.0.4"",
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""etag"": ""~1.8.1"",
+        ""fresh"": ""0.5.2"",
+        ""http-errors"": ""~1.6.2"",
+        ""mime"": ""1.4.1"",
+        ""ms"": ""2.0.0"",
+        ""on-finished"": ""~2.3.0"",
+        ""range-parser"": ""~1.2.0"",
+        ""statuses"": ""~1.4.0""
+      }
+    },
+    ""serve-static"": {
+      ""version"": ""1.13.2"",
+      ""resolved"": ""https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz"",
+      ""integrity"": ""sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw=="",
+      ""requires"": {
+        ""encodeurl"": ""~1.0.2"",
+        ""escape-html"": ""~1.0.3"",
+        ""parseurl"": ""~1.3.2"",
+        ""send"": ""0.16.2""
+      }
+    },
+    ""setprototypeof"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz"",
+      ""integrity"": ""sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==""
+    },
+    ""statuses"": {
+      ""version"": ""1.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz"",
+      ""integrity"": ""sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==""
+    },
+    ""type-is"": {
+      ""version"": ""1.6.16"",
+      ""resolved"": ""https://registry.npmjs.org/type-is/-/type-is-1.6.16.tgz"",
+      ""integrity"": ""sha512-HRkVv/5qY2G6I8iab9cI7v1bOIdhm94dVjQCPFElW9W+3GeDOSHmy2EBYe4VTApuzolPcmgFTN3ftVJRKR2J9Q=="",
+      ""requires"": {
+        ""media-typer"": ""0.3.0"",
+        ""mime-types"": ""~2.1.18""
+      }
+    },
+    ""unpipe"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz"",
+      ""integrity"": ""sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=""
+    },
+    ""utils-merge"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz"",
+      ""integrity"": ""sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=""
+    },
+    ""vary"": {
+      ""version"": ""1.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/vary/-/vary-1.1.2.tgz"",
+      ""integrity"": ""sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=""
+    }
+  }
+}"
sendgrid_sendgrid-nodejs,57b4e7b752911dad8173bd258d1ce5168f336d33,Merge pull request #804 from aroach/event-webhook-docker  Event webhook docker,examples/webhooks-docker/package.json,,"+{
+  ""name"": ""inbound-parse-docker"",
+  ""version"": ""1.0.0"",
+  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""main"": ""app.js"",
+  ""dependencies"": {
+    ""body-parser"": ""^1.18.3"",
+    ""express"": ""^4.16.3"",
+    ""express-formidable"": ""^1.0.0""
+  },
+  ""devDependencies"": {},
+  ""scripts"": {
+    ""start"": ""node app.js"",
+    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+  },
+  ""author"": ""Ashley Roach <aroach@gmail.com>"",
+  ""license"": ""MIT""
+}","+{
+  ""name"": ""inbound-parse-docker"",
+  ""version"": ""1.0.0"",
+  ""description"": ""A containter to capture webhook data from SendGrid inbound parse"",
+  ""main"": ""app.js"",
+  ""dependencies"": {
+    ""body-parser"": ""^1.18.3"",
+    ""express"": ""^4.16.3"",
+    ""express-formidable"": ""^1.0.0""
+  },
+  ""devDependencies"": {},
+  ""scripts"": {
+    ""start"": ""node app.js"",
+    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+  },
+  ""author"": ""Ashley Roach <aroach@gmail.com>"",
+  ""license"": ""MIT""
+}"
sendgrid_sendgrid-nodejs,0bdab102f358f3d21826d5fa802c4636de10c175,"Merge pull request #809 from aslafy-z/patch-5  Properly capitalize ""SendGrid"" brand",packages/client/src/classes/client.js,,"- * Sendgrid REST Client
+ * SendGrid REST Client","- * Sendgrid REST Client
+ * SendGrid REST Client"
sendgrid_sendgrid-nodejs,0bdab102f358f3d21826d5fa802c4636de10c175,"Merge pull request #809 from aslafy-z/patch-5  Properly capitalize ""SendGrid"" brand",packages/contact-importer/src/importer.js,"-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {","-   * Send a batch of contacts to Sendgrid.
+   * Send a batch of contacts to SendGrid.","-   * Send a batch of contacts to Sendgrid.
+   * Send a batch of contacts to SendGrid.
-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,lerna.json,,"-  ""version"": ""6.1.3""
+  ""version"": ""6.3.1""","-  ""version"": ""6.1.3""
+  ""version"": ""6.3.1"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,package-lock.json,,"+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
-      ""version"": ""5.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.1.1.tgz"",
-      ""integrity"": ""sha512-vOk6uEMctu0vQrvuSqFdJyqj1Q0S5VTDL79qtjo+DhRr+1mmaD+tluFSCZqhvi/JUhXSzoZN2BhtstaPEeE8cw=="",
-      ""dev"": true
+      ""version"": ""5.6.2"",
+      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.6.2.tgz"",
+      ""integrity"": ""sha512-zUzo1E5dI2Ey8+82egfnttyMlMZ2y0D8xOCO3PNPPlYXpl8NZvF6Qk9L9BEtJs+43FqEmfBViDqc5d1ckRDguw=="",
+      ""dev"": true
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""version"": ""4.11.8"",
-      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz"",
-      ""integrity"": ""sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY="",
+      ""version"": ""5.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+      ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
-        ""json-stable-stringify"": ""1.0.1""
+        ""fast-deep-equal"": ""1.1.0"",
+        ""fast-json-stable-stringify"": ""2.0.0"",
+        ""json-schema-traverse"": ""0.3.1""
-      ""version"": ""1.5.1"",
-      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz"",
-      ""integrity"": ""sha1-MU3QpLM2j609/NxU7eYXG4htrzw="",
+      ""version"": ""2.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-2.1.1.tgz"",
+      ""integrity"": ""sha1-YXmX/F9gV2iUxDX5QNgZ4TW4B2I="",
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz"",
-      ""integrity"": ""sha1-06ioOzGapneTZisT52HHkRQiMG4="",
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.1.0.tgz"",
+      ""integrity"": ""sha512-UgAb8H9D41AQnu/PbWlCofQVcnV4Gs2bBJi9eZPxfU/hgglFh3SMDMENRIqdr7H6XFnXdoknctFByVsCOotTVw=="",
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz"",
-      ""integrity"": ""sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc="",
-      ""dev"": true,
-      ""requires"": {
-        ""restore-cursor"": ""1.0.1""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz"",
+      ""integrity"": ""sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU="",
+      ""dev"": true,
+      ""requires"": {
+        ""restore-cursor"": ""2.0.0""
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
-    ""d"": {
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/d/-/d-1.0.0.tgz"",
-      ""integrity"": ""sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8="",
-      ""dev"": true,
-      ""requires"": {
-        ""es5-ext"": ""0.10.29""
-      }
-    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
-        ""is-path-in-cwd"": ""1.0.0"",
+        ""is-path-in-cwd"": ""1.0.1"",
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.0.0.tgz"",
-      ""integrity"": ""sha1-xz2NKQnSIpHhoAejlYBNqLZl/mM="",
-      ""dev"": true,
-      ""requires"": {
-        ""esutils"": ""2.0.2"",
-        ""isarray"": ""1.0.0""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz"",
+      ""integrity"": ""sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw=="",
+      ""dev"": true,
+      ""requires"": {
+        ""esutils"": ""2.0.2""
+      }
+    },
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    },
-    ""es5-ext"": {
-      ""version"": ""0.10.29"",
-      ""resolved"": ""https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.29.tgz"",
-      ""integrity"": ""sha512-KXla9NXo5sdaEkGSmbFPYgjH6m75kxsthL6GDRSug/Y2OiMoYm0I9giL39j4cgmaFmAbkIFJ6gG+SGKnLSmOvA=="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-iterator"": {
-      ""version"": ""2.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.1.tgz"",
-      ""integrity"": ""sha1-jjGcnwRTv1ddN0lAplWSDlnKVRI="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-map"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz"",
-      ""integrity"": ""sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-set"": ""0.1.5"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-set"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz"",
-      ""integrity"": ""sha1-0rPsXU2ADO2BjbU40ol02wpzzLE="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-symbol"": {
-      ""version"": ""3.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz"",
-      ""integrity"": ""sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
-    },
-    ""es6-weak-map"": {
-      ""version"": ""2.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.2.tgz"",
-      ""integrity"": ""sha1-XjqzIlH/0VOKH45f+hNXdy+S2W8="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
-    },
-    ""escope"": {
-      ""version"": ""3.6.0"",
-      ""resolved"": ""https://registry.npmjs.org/escope/-/escope-3.6.0.tgz"",
-      ""integrity"": ""sha1-4Bl16BJ4GhY6ba392AOY3GTIicM="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-map"": ""0.1.5"",
-        ""es6-weak-map"": ""2.0.2"",
-        ""esrecurse"": ""4.2.0"",
-        ""estraverse"": ""4.2.0""
-      }
-    },
-    ""eslint"": {
-      ""version"": ""3.19.0"",
-      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-3.19.0.tgz"",
-      ""integrity"": ""sha1-yPxiAcf0DdCJQbh8CFdnOGpnmsw="",
-      ""dev"": true,
-      ""requires"": {
-        ""babel-code-frame"": ""6.26.0"",
-        ""chalk"": ""1.1.3"",
-        ""concat-stream"": ""1.6.0"",
-        ""debug"": ""2.6.8"",
-        ""doctrine"": ""2.0.0"",
-        ""escope"": ""3.6.0"",
-        ""espree"": ""3.5.0"",
-        ""esquery"": ""1.0.0"",
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
+    },
+    ""eslint"": {
+      ""version"": ""4.19.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-4.19.1.tgz"",
+      ""integrity"": ""sha512-bT3/1x1EbZB7phzYu7vCr1v3ONuzDtX8WjuM9c0iYxe+cq+pwcKEoQjl7zd3RpC6YOLgnSy3cTN58M2jcoPDIQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""babel-code-frame"": ""6.26.0"",
+        ""chalk"": ""2.4.1"",
+        ""concat-stream"": ""1.6.0"",
+        ""cross-spawn"": ""5.1.0"",
+        ""debug"": ""3.1.0"",
+        ""doctrine"": ""2.1.0"",
+        ""eslint-scope"": ""3.7.1"",
+        ""eslint-visitor-keys"": ""1.0.0"",
+        ""espree"": ""3.5.4"",
+        ""esquery"": ""1.0.1"",
+        ""esutils"": ""2.0.2"",
+        ""functional-red-black-tree"": ""1.0.1"",
-        ""globals"": ""9.18.0"",
-        ""ignore"": ""3.3.3"",
+        ""globals"": ""11.5.0"",
+        ""ignore"": ""3.3.8"",
-        ""inquirer"": ""0.12.0"",
-        ""is-my-json-valid"": ""2.16.1"",
-        ""is-resolvable"": ""1.0.0"",
+        ""inquirer"": ""3.3.0"",
+        ""is-resolvable"": ""1.1.0"",
-        ""json-stable-stringify"": ""1.0.1"",
+        ""json-stable-stringify-without-jsonify"": ""1.0.1"",
+        ""minimatch"": ""3.0.4"",
-        ""pluralize"": ""1.2.1"",
-        ""progress"": ""1.1.8"",
+        ""pluralize"": ""7.0.0"",
+        ""progress"": ""2.0.0"",
+        ""regexpp"": ""1.1.0"",
-        ""shelljs"": ""0.7.8"",
-        ""strip-bom"": ""3.0.0"",
+        ""semver"": ""5.4.1"",
+        ""strip-ansi"": ""4.0.0"",
-        ""table"": ""3.8.3"",
-        ""text-table"": ""0.2.0"",
-        ""user-home"": ""2.0.0""
+        ""table"": ""4.0.2"",
+        ""text-table"": ""0.2.0""
-        ""user-home"": {
-          ""version"": ""2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz"",
-          ""integrity"": ""sha1-nHC/2Babwdy/SGBODwS4tJzenp8="",
-          ""dev"": true,
-          ""requires"": {
-            ""os-homedir"": ""1.0.2""
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""debug"": {
+          ""version"": ""3.1.0"",
+          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-3.1.0.tgz"",
+          ""integrity"": ""sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ms"": ""2.0.0""
+          }
+        },
+        ""globals"": {
+          ""version"": ""11.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/globals/-/globals-11.5.0.tgz"",
+          ""integrity"": ""sha512-hYyf+kI8dm3nORsiiXUQigOU62hDLfJ9G01uyGMxhc6BKsircrUhC4uJPQPUSuq2GrTmiiEt7ewxlMdBewfmKQ=="",
+          ""dev"": true
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+    ""eslint-scope"": {
+      ""version"": ""3.7.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-scope/-/eslint-scope-3.7.1.tgz"",
+      ""integrity"": ""sha1-PWPD7f2gLgbgGkUq2IyqzHzctug="",
+      ""dev"": true,
+      ""requires"": {
+        ""esrecurse"": ""4.2.1"",
+        ""estraverse"": ""4.2.0""
+      }
+    },
+    ""eslint-visitor-keys"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz"",
+      ""integrity"": ""sha512-qzm/XxIbxm/FHyH341ZrbnMUpe+5Bocte9xkmFMzPMjRaZMcXww+MpBptFvtU+79L362nqiLhekCxCxDPaUMBQ=="",
+      ""dev"": true
+    },
-      ""version"": ""3.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.0.tgz"",
-      ""integrity"": ""sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0="",
-      ""dev"": true,
-      ""requires"": {
-        ""acorn"": ""5.1.1"",
+      ""version"": ""3.5.4"",
+      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.4.tgz"",
+      ""integrity"": ""sha512-yAcIQxtmMiB/jL32dzEp2enBeidsB7xWPLNiw3IIkpVds1P+h7qF9YwJq1yUNzp2OKXgAprs4F61ih66UsoD1A=="",
+      ""dev"": true,
+      ""requires"": {
+        ""acorn"": ""5.6.2"",
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz"",
-      ""integrity"": ""sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.1.tgz"",
+      ""integrity"": ""sha512-SmiyZ5zIWH9VM+SRUReLS5Q8a7GxtRdxEBVZpm98rJM7Sb+A9DVCndXfkeFUd3byderg+EbDkfnevfCwynWaNA=="",
-      ""version"": ""4.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz"",
-      ""integrity"": ""sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM="",
-      ""dev"": true,
-      ""requires"": {
-        ""estraverse"": ""4.2.0"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz"",
+      ""integrity"": ""sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""estraverse"": ""4.2.0""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
-    },
-    ""event-emitter"": {
-      ""version"": ""0.3.5"",
-      ""resolved"": ""https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz"",
-      ""integrity"": ""sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
-    ""exit-hook"": {
-      ""version"": ""1.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz"",
-      ""integrity"": ""sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g="",
-      ""dev"": true
-    },
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ=""
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I=""
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
-      ""version"": ""1.7.0"",
-      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-1.7.0.tgz"",
-      ""integrity"": ""sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4="",
-      ""dev"": true,
-      ""requires"": {
-        ""escape-string-regexp"": ""1.0.5"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-2.0.0.tgz"",
+      ""integrity"": ""sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI="",
+      ""dev"": true,
+      ""requires"": {
+        ""escape-string-regexp"": ""1.0.5""
-        ""flat-cache"": ""1.2.2"",
+        ""flat-cache"": ""1.3.0"",
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.2.2.tgz"",
-      ""integrity"": ""sha1-+oZxTnLCHbiGAXYezy9VXRq8a5Y="",
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.3.0.tgz"",
+      ""integrity"": ""sha1-0wMLMrOBVPTjt+nHCfSQ9++XxIE="",
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
+    ""functional-red-black-tree"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz"",
+      ""integrity"": ""sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="",
+      ""dev"": true
+    },
-    ""generate-function"": {
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz"",
-      ""integrity"": ""sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ="",
-      ""dev"": true
-    },
-    ""generate-object-property"": {
-      ""version"": ""1.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz"",
-      ""integrity"": ""sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-property"": ""1.0.2""
-      }
-    },
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""version"": ""3.3.3"",
-      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.3.tgz"",
-      ""integrity"": ""sha1-QyNS5XrM2HqzEQ6C0/6g5HgSFW0="",
+      ""version"": ""3.3.8"",
+      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.8.tgz"",
+      ""integrity"": ""sha512-pUh+xUQQhQzevjRHHFqqcTy0/dP/kS9I8HSrUydhihjuD09W6ldVWFtIrwhXdUJHis3i2rZNqEHpZH/cbinFbg=="",
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""version"": ""0.12.0"",
-      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-0.12.0.tgz"",
-      ""integrity"": ""sha1-HvK/1jUE3wvHV4X/+MLEHfEvB34="",
-      ""dev"": true,
-      ""requires"": {
-        ""ansi-escapes"": ""1.4.0"",
-        ""ansi-regex"": ""2.1.1"",
-        ""chalk"": ""1.1.3"",
-        ""cli-cursor"": ""1.0.2"",
+      ""version"": ""3.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-3.3.0.tgz"",
+      ""integrity"": ""sha512-h+xtnyk4EwKvFWHrUYsWErEVR+igKtLdchu+o0Z1RL7VU/jVMFbYir2bp6bAj8efFNxWqHX0dIss6fJQ+/+qeQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ansi-escapes"": ""3.1.0"",
+        ""chalk"": ""2.4.1"",
+        ""cli-cursor"": ""2.1.0"",
-        ""figures"": ""1.7.0"",
+        ""external-editor"": ""2.0.4"",
+        ""figures"": ""2.0.0"",
-        ""readline2"": ""1.0.1"",
-        ""run-async"": ""0.1.0"",
-        ""rx-lite"": ""3.1.2"",
-        ""string-width"": ""1.0.2"",
-        ""strip-ansi"": ""3.0.1"",
+        ""mute-stream"": ""0.0.7"",
+        ""run-async"": ""2.3.0"",
+        ""rx-lite"": ""4.0.8"",
+        ""rx-lite-aggregates"": ""4.0.8"",
+        ""string-width"": ""2.1.1"",
+        ""strip-ansi"": ""4.0.0"",
-      }
-    },
-    ""interpret"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/interpret/-/interpret-1.0.3.tgz"",
-      ""integrity"": ""sha1-y8NcYu7uc/Gat7EKgBURQBr8D5A="",
-      ""dev"": true
+      },
+      ""dependencies"": {
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        },
+        ""rx-lite"": {
+          ""version"": ""4.0.8"",
+          ""resolved"": ""https://registry.npmjs.org/rx-lite/-/rx-lite-4.0.8.tgz"",
+          ""integrity"": ""sha1-Cx4Rr4vESDbwSmQH6S2kJGe3lEQ="",
+          ""dev"": true
+        },
+        ""string-width"": {
+          ""version"": ""2.1.1"",
+          ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz"",
+          ""integrity"": ""sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw=="",
+          ""dev"": true,
+          ""requires"": {
+            ""is-fullwidth-code-point"": ""2.0.0"",
+            ""strip-ansi"": ""4.0.0""
+          }
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+        }
+      }
-      ""dev"": true,
-      ""dev"": true,
-    ""is-my-json-valid"": {
-      ""version"": ""2.16.1"",
-      ""resolved"": ""https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.16.1.tgz"",
-      ""integrity"": ""sha512-ochPsqWS1WXj8ZnMIV0vnNXooaMhp7cyL4FMSIPKTtnV0Ha/T19G2b9kkhcNsabV9bxYkze7/aLZJb/bYuFduQ=="",
-      ""dev"": true,
-      ""requires"": {
-        ""generate-function"": ""2.0.0"",
-        ""generate-object-property"": ""1.2.0"",
-        ""jsonpointer"": ""4.0.1"",
-        ""xtend"": ""4.0.1""
-      }
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz"",
-      ""integrity"": ""sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-path-inside"": ""1.0.0""
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.1.tgz"",
+      ""integrity"": ""sha512-FjV1RTW48E7CWM7eE/J2NJvAEEVektecDBVBE5Hh3nM1Jd0kvhHtX68Pr3xsDf857xt3Y4AkwVULK1Vku62aaQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-path-inside"": ""1.0.1""
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.0.tgz"",
-      ""integrity"": ""sha1-/AbloWg/vaE95mev9xe7wQpI838="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.1.tgz"",
+      ""integrity"": ""sha1-jvW33lBDej/cprToZe96pVy0gDY="",
-    ""is-property"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz"",
-      ""integrity"": ""sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="",
-      ""dev"": true
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz"",
-      ""integrity"": ""sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI="",
-      ""dev"": true,
-      ""requires"": {
-        ""tryit"": ""1.0.3""
-      }
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.1.0.tgz"",
+      ""integrity"": ""sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg=="",
+      ""dev"": true
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
-    },
-    ""json-stable-stringify"": {
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=""
+    },
+    ""json-stable-stringify-without-jsonify"": {
-      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz"",
-      ""integrity"": ""sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonify"": ""0.0.0""
-      }
+      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz"",
+      ""integrity"": ""sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE="",
+      ""dev"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""jsonify"": {
-      ""version"": ""0.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz"",
-      ""integrity"": ""sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="",
-      ""dev"": true
-    },
-    ""jsonpointer"": {
-      ""version"": ""4.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz"",
-      ""integrity"": ""sha1-T9kss04OnbPInIYi7PUfm5eMbLk="",
-      ""dev"": true
-    },
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
-      ""version"": ""0.0.5"",
-      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.5.tgz"",
-      ""integrity"": ""sha1-j7+rsKmKJT0xhDMfno3rc3L6xsA="",
+      ""version"": ""0.0.7"",
+      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz"",
+      ""integrity"": ""sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s="",
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""version"": ""1.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz"",
-      ""integrity"": ""sha1-ofeDj4MUxRbwXs78vEzP4EtO14k="",
-      ""dev"": true
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz"",
+      ""integrity"": ""sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ="",
+      ""dev"": true,
+      ""requires"": {
+        ""mimic-fn"": ""1.1.0""
+      }
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""version"": ""1.2.1"",
-      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-1.2.1.tgz"",
-      ""integrity"": ""sha1-0aIUg/0iu0HlihL6NCGCMUCJfEU="",
+      ""version"": ""7.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-7.0.0.tgz"",
+      ""integrity"": ""sha512-ARhBOdzS3e41FbkW/XWrTEtukqqLoK5+Z/4UeDaLuSW+39JPeFgs4gCGqsrJHVZX0fUrx//4OF0K1CUGwlIFow=="",
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
-      ""version"": ""1.1.8"",
-      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-1.1.8.tgz"",
-      ""integrity"": ""sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74="",
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-2.0.0.tgz"",
+      ""integrity"": ""sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8="",
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-    ""readline2"": {
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/readline2/-/readline2-1.0.1.tgz"",
-      ""integrity"": ""sha1-QQWWCP/BVHV7cV2ZidGZ/783LjU="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""mute-stream"": ""0.0.5""
-      }
-    },
-    ""rechoir"": {
-      ""version"": ""0.6.2"",
-      ""resolved"": ""https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz"",
-      ""integrity"": ""sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q="",
-      ""dev"": true,
-      ""requires"": {
-        ""resolve"": ""1.4.0""
-      }
-    },
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
+    },
+    ""regexpp"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz"",
+      ""integrity"": ""sha512-LOPw8FpgdQF9etWMaAfG/WRthIdXJGYp4mJ2Jgn/2lpkbod9jPn0t9UqN7AxBOKNfzRbYyVfgc7Vk4t/MpnXgw=="",
+      ""dev"": true
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-    ""resolve"": {
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/resolve/-/resolve-1.4.0.tgz"",
-      ""integrity"": ""sha512-aW7sVKPufyHqOmyyLzg/J+8606v5nevBgaliIlV7nUpVMsDnoBGV/cbSLNjZAg9q0Cfd/+easKVKQ8vOu8fn1Q=="",
-      ""dev"": true,
-      ""requires"": {
-        ""path-parse"": ""1.0.5""
-      }
-    },
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz"",
-      ""integrity"": ""sha1-NGYfRohjJ/7SmRR5FSJS35LapUE="",
-      ""dev"": true,
-      ""requires"": {
-        ""exit-hook"": ""1.1.1"",
-        ""onetime"": ""1.1.0""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz"",
+      ""integrity"": ""sha1-n37ih/gv0ybU/RYpI9YhKe7g368="",
+      ""dev"": true,
+      ""requires"": {
+        ""onetime"": ""2.0.1"",
+        ""signal-exit"": ""3.0.2""
-      ""version"": ""0.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-0.1.0.tgz"",
-      ""integrity"": ""sha1-yK1KXhEGYeQCp9IbUw4AnyX444k="",
-      ""dev"": true,
-      ""requires"": {
-        ""once"": ""1.4.0""
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz"",
+      ""integrity"": ""sha1-A3GrSuC91yDUFm19/aZP96RFpsA="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-promise"": ""2.1.0""
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    },
-    },
-    ""shelljs"": {
-      ""version"": ""0.7.8"",
-      ""resolved"": ""https://registry.npmjs.org/shelljs/-/shelljs-0.7.8.tgz"",
-      ""integrity"": ""sha1-3svPh0sNHl+3LhSxZKloMEjprLM="",
-      ""dev"": true,
-      ""requires"": {
-        ""glob"": ""7.1.2"",
-        ""interpret"": ""1.0.3"",
-        ""rechoir"": ""0.6.2""
-      }
-      ""version"": ""0.0.4"",
-      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz"",
-      ""integrity"": ""sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU="",
-      ""dev"": true
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-1.0.0.tgz"",
+      ""integrity"": ""sha512-POqxBK6Lb3q6s047D/XsDVNPnF9Dl8JSaqe9h9lURl0OdNqy/ujDrOiIHtsqXMGbWWTIomRzAMaTyawAU//Reg=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-fullwidth-code-point"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        }
+      }
+    },
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
-      ""version"": ""3.8.3"",
-      ""resolved"": ""https://registry.npmjs.org/table/-/table-3.8.3.tgz"",
-      ""integrity"": ""sha1-K7xULw/amGGnVdOUf+/Ys/UThV8="",
-      ""dev"": true,
-      ""requires"": {
-        ""ajv"": ""4.11.8"",
-        ""ajv-keywords"": ""1.5.1"",
-        ""chalk"": ""1.1.3"",
+      ""version"": ""4.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/table/-/table-4.0.2.tgz"",
+      ""integrity"": ""sha512-UUkEAPdSGxtRpiV9ozJ5cMTtYiqz7Ni1OGqLXRCynrvzdtR1p+cfOWe2RJLwvUG8hNanaSRjecIqwOjqeatDsA=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""ajv-keywords"": ""2.1.1"",
+        ""chalk"": ""2.4.1"",
-        ""slice-ansi"": ""0.0.4"",
+        ""slice-ansi"": ""1.0.0"",
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
-    },
-    ""tryit"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz"",
-      ""integrity"": ""sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    },
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },","+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
-      ""version"": ""5.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.1.1.tgz"",
-      ""integrity"": ""sha512-vOk6uEMctu0vQrvuSqFdJyqj1Q0S5VTDL79qtjo+DhRr+1mmaD+tluFSCZqhvi/JUhXSzoZN2BhtstaPEeE8cw=="",
-      ""dev"": true
+      ""version"": ""5.6.2"",
+      ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-5.6.2.tgz"",
+      ""integrity"": ""sha512-zUzo1E5dI2Ey8+82egfnttyMlMZ2y0D8xOCO3PNPPlYXpl8NZvF6Qk9L9BEtJs+43FqEmfBViDqc5d1ckRDguw=="",
+      ""dev"": true
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""version"": ""4.11.8"",
-      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz"",
-      ""integrity"": ""sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY="",
+      ""version"": ""5.5.2"",
+      ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+      ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
-        ""json-stable-stringify"": ""1.0.1""
+        ""fast-deep-equal"": ""1.1.0"",
+        ""fast-json-stable-stringify"": ""2.0.0"",
+        ""json-schema-traverse"": ""0.3.1""
-      ""version"": ""1.5.1"",
-      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz"",
-      ""integrity"": ""sha1-MU3QpLM2j609/NxU7eYXG4htrzw="",
+      ""version"": ""2.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-2.1.1.tgz"",
+      ""integrity"": ""sha1-YXmX/F9gV2iUxDX5QNgZ4TW4B2I="",
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz"",
-      ""integrity"": ""sha1-06ioOzGapneTZisT52HHkRQiMG4="",
+      ""version"": ""3.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.1.0.tgz"",
+      ""integrity"": ""sha512-UgAb8H9D41AQnu/PbWlCofQVcnV4Gs2bBJi9eZPxfU/hgglFh3SMDMENRIqdr7H6XFnXdoknctFByVsCOotTVw=="",
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz"",
-      ""integrity"": ""sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc="",
-      ""dev"": true,
-      ""requires"": {
-        ""restore-cursor"": ""1.0.1""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz"",
+      ""integrity"": ""sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU="",
+      ""dev"": true,
+      ""requires"": {
+        ""restore-cursor"": ""2.0.0""
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
-    ""d"": {
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/d/-/d-1.0.0.tgz"",
-      ""integrity"": ""sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8="",
-      ""dev"": true,
-      ""requires"": {
-        ""es5-ext"": ""0.10.29""
-      }
-    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
-        ""is-path-in-cwd"": ""1.0.0"",
+        ""is-path-in-cwd"": ""1.0.1"",
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.0.0.tgz"",
-      ""integrity"": ""sha1-xz2NKQnSIpHhoAejlYBNqLZl/mM="",
-      ""dev"": true,
-      ""requires"": {
-        ""esutils"": ""2.0.2"",
-        ""isarray"": ""1.0.0""
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz"",
+      ""integrity"": ""sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw=="",
+      ""dev"": true,
+      ""requires"": {
+        ""esutils"": ""2.0.2""
+      }
+    },
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    },
-    ""es5-ext"": {
-      ""version"": ""0.10.29"",
-      ""resolved"": ""https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.29.tgz"",
-      ""integrity"": ""sha512-KXla9NXo5sdaEkGSmbFPYgjH6m75kxsthL6GDRSug/Y2OiMoYm0I9giL39j4cgmaFmAbkIFJ6gG+SGKnLSmOvA=="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-iterator"": {
-      ""version"": ""2.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.1.tgz"",
-      ""integrity"": ""sha1-jjGcnwRTv1ddN0lAplWSDlnKVRI="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-symbol"": ""3.1.1""
-      }
-    },
-    ""es6-map"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz"",
-      ""integrity"": ""sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-set"": ""0.1.5"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-set"": {
-      ""version"": ""0.1.5"",
-      ""resolved"": ""https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz"",
-      ""integrity"": ""sha1-0rPsXU2ADO2BjbU40ol02wpzzLE="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1"",
-        ""event-emitter"": ""0.3.5""
-      }
-    },
-    ""es6-symbol"": {
-      ""version"": ""3.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz"",
-      ""integrity"": ""sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
-    },
-    ""es6-weak-map"": {
-      ""version"": ""2.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.2.tgz"",
-      ""integrity"": ""sha1-XjqzIlH/0VOKH45f+hNXdy+S2W8="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29"",
-        ""es6-iterator"": ""2.0.1"",
-        ""es6-symbol"": ""3.1.1""
-      }
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
-    },
-    ""escope"": {
-      ""version"": ""3.6.0"",
-      ""resolved"": ""https://registry.npmjs.org/escope/-/escope-3.6.0.tgz"",
-      ""integrity"": ""sha1-4Bl16BJ4GhY6ba392AOY3GTIicM="",
-      ""dev"": true,
-      ""requires"": {
-        ""es6-map"": ""0.1.5"",
-        ""es6-weak-map"": ""2.0.2"",
-        ""esrecurse"": ""4.2.0"",
-        ""estraverse"": ""4.2.0""
-      }
-    },
-    ""eslint"": {
-      ""version"": ""3.19.0"",
-      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-3.19.0.tgz"",
-      ""integrity"": ""sha1-yPxiAcf0DdCJQbh8CFdnOGpnmsw="",
-      ""dev"": true,
-      ""requires"": {
-        ""babel-code-frame"": ""6.26.0"",
-        ""chalk"": ""1.1.3"",
-        ""concat-stream"": ""1.6.0"",
-        ""debug"": ""2.6.8"",
-        ""doctrine"": ""2.0.0"",
-        ""escope"": ""3.6.0"",
-        ""espree"": ""3.5.0"",
-        ""esquery"": ""1.0.0"",
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
+    },
+    ""eslint"": {
+      ""version"": ""4.19.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint/-/eslint-4.19.1.tgz"",
+      ""integrity"": ""sha512-bT3/1x1EbZB7phzYu7vCr1v3ONuzDtX8WjuM9c0iYxe+cq+pwcKEoQjl7zd3RpC6YOLgnSy3cTN58M2jcoPDIQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""babel-code-frame"": ""6.26.0"",
+        ""chalk"": ""2.4.1"",
+        ""concat-stream"": ""1.6.0"",
+        ""cross-spawn"": ""5.1.0"",
+        ""debug"": ""3.1.0"",
+        ""doctrine"": ""2.1.0"",
+        ""eslint-scope"": ""3.7.1"",
+        ""eslint-visitor-keys"": ""1.0.0"",
+        ""espree"": ""3.5.4"",
+        ""esquery"": ""1.0.1"",
+        ""esutils"": ""2.0.2"",
+        ""functional-red-black-tree"": ""1.0.1"",
-        ""globals"": ""9.18.0"",
-        ""ignore"": ""3.3.3"",
+        ""globals"": ""11.5.0"",
+        ""ignore"": ""3.3.8"",
-        ""inquirer"": ""0.12.0"",
-        ""is-my-json-valid"": ""2.16.1"",
-        ""is-resolvable"": ""1.0.0"",
+        ""inquirer"": ""3.3.0"",
+        ""is-resolvable"": ""1.1.0"",
-        ""json-stable-stringify"": ""1.0.1"",
+        ""json-stable-stringify-without-jsonify"": ""1.0.1"",
+        ""minimatch"": ""3.0.4"",
-        ""pluralize"": ""1.2.1"",
-        ""progress"": ""1.1.8"",
+        ""pluralize"": ""7.0.0"",
+        ""progress"": ""2.0.0"",
+        ""regexpp"": ""1.1.0"",
-        ""shelljs"": ""0.7.8"",
-        ""strip-bom"": ""3.0.0"",
+        ""semver"": ""5.4.1"",
+        ""strip-ansi"": ""4.0.0"",
-        ""table"": ""3.8.3"",
-        ""text-table"": ""0.2.0"",
-        ""user-home"": ""2.0.0""
+        ""table"": ""4.0.2"",
+        ""text-table"": ""0.2.0""
-        ""user-home"": {
-          ""version"": ""2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/user-home/-/user-home-2.0.0.tgz"",
-          ""integrity"": ""sha1-nHC/2Babwdy/SGBODwS4tJzenp8="",
-          ""dev"": true,
-          ""requires"": {
-            ""os-homedir"": ""1.0.2""
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""debug"": {
+          ""version"": ""3.1.0"",
+          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-3.1.0.tgz"",
+          ""integrity"": ""sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ms"": ""2.0.0""
+          }
+        },
+        ""globals"": {
+          ""version"": ""11.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/globals/-/globals-11.5.0.tgz"",
+          ""integrity"": ""sha512-hYyf+kI8dm3nORsiiXUQigOU62hDLfJ9G01uyGMxhc6BKsircrUhC4uJPQPUSuq2GrTmiiEt7ewxlMdBewfmKQ=="",
+          ""dev"": true
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+    ""eslint-scope"": {
+      ""version"": ""3.7.1"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-scope/-/eslint-scope-3.7.1.tgz"",
+      ""integrity"": ""sha1-PWPD7f2gLgbgGkUq2IyqzHzctug="",
+      ""dev"": true,
+      ""requires"": {
+        ""esrecurse"": ""4.2.1"",
+        ""estraverse"": ""4.2.0""
+      }
+    },
+    ""eslint-visitor-keys"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz"",
+      ""integrity"": ""sha512-qzm/XxIbxm/FHyH341ZrbnMUpe+5Bocte9xkmFMzPMjRaZMcXww+MpBptFvtU+79L362nqiLhekCxCxDPaUMBQ=="",
+      ""dev"": true
+    },
-      ""version"": ""3.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.0.tgz"",
-      ""integrity"": ""sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0="",
-      ""dev"": true,
-      ""requires"": {
-        ""acorn"": ""5.1.1"",
+      ""version"": ""3.5.4"",
+      ""resolved"": ""https://registry.npmjs.org/espree/-/espree-3.5.4.tgz"",
+      ""integrity"": ""sha512-yAcIQxtmMiB/jL32dzEp2enBeidsB7xWPLNiw3IIkpVds1P+h7qF9YwJq1yUNzp2OKXgAprs4F61ih66UsoD1A=="",
+      ""dev"": true,
+      ""requires"": {
+        ""acorn"": ""5.6.2"",
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz"",
-      ""integrity"": ""sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esquery/-/esquery-1.0.1.tgz"",
+      ""integrity"": ""sha512-SmiyZ5zIWH9VM+SRUReLS5Q8a7GxtRdxEBVZpm98rJM7Sb+A9DVCndXfkeFUd3byderg+EbDkfnevfCwynWaNA=="",
-      ""version"": ""4.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz"",
-      ""integrity"": ""sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM="",
-      ""dev"": true,
-      ""requires"": {
-        ""estraverse"": ""4.2.0"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz"",
+      ""integrity"": ""sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""estraverse"": ""4.2.0""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
-    },
-    ""event-emitter"": {
-      ""version"": ""0.3.5"",
-      ""resolved"": ""https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz"",
-      ""integrity"": ""sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk="",
-      ""dev"": true,
-      ""requires"": {
-        ""d"": ""1.0.0"",
-        ""es5-ext"": ""0.10.29""
-      }
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
-    ""exit-hook"": {
-      ""version"": ""1.1.1"",
-      ""resolved"": ""https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz"",
-      ""integrity"": ""sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g="",
-      ""dev"": true
-    },
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ=""
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I=""
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
-      ""version"": ""1.7.0"",
-      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-1.7.0.tgz"",
-      ""integrity"": ""sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4="",
-      ""dev"": true,
-      ""requires"": {
-        ""escape-string-regexp"": ""1.0.5"",
-        ""object-assign"": ""4.1.1""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/figures/-/figures-2.0.0.tgz"",
+      ""integrity"": ""sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI="",
+      ""dev"": true,
+      ""requires"": {
+        ""escape-string-regexp"": ""1.0.5""
-        ""flat-cache"": ""1.2.2"",
+        ""flat-cache"": ""1.3.0"",
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.2.2.tgz"",
-      ""integrity"": ""sha1-+oZxTnLCHbiGAXYezy9VXRq8a5Y="",
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/flat-cache/-/flat-cache-1.3.0.tgz"",
+      ""integrity"": ""sha1-0wMLMrOBVPTjt+nHCfSQ9++XxIE="",
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
+    ""functional-red-black-tree"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz"",
+      ""integrity"": ""sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc="",
+      ""dev"": true
+    },
-    ""generate-function"": {
-      ""version"": ""2.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-function/-/generate-function-2.0.0.tgz"",
-      ""integrity"": ""sha1-aFj+fAlpt9TpCTM3ZHrHn2DfvnQ="",
-      ""dev"": true
-    },
-    ""generate-object-property"": {
-      ""version"": ""1.2.0"",
-      ""resolved"": ""https://registry.npmjs.org/generate-object-property/-/generate-object-property-1.2.0.tgz"",
-      ""integrity"": ""sha1-nA4cQDCM6AT0eDYYuTf6iPmdUNA="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-property"": ""1.0.2""
-      }
-    },
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""version"": ""3.3.3"",
-      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.3.tgz"",
-      ""integrity"": ""sha1-QyNS5XrM2HqzEQ6C0/6g5HgSFW0="",
+      ""version"": ""3.3.8"",
+      ""resolved"": ""https://registry.npmjs.org/ignore/-/ignore-3.3.8.tgz"",
+      ""integrity"": ""sha512-pUh+xUQQhQzevjRHHFqqcTy0/dP/kS9I8HSrUydhihjuD09W6ldVWFtIrwhXdUJHis3i2rZNqEHpZH/cbinFbg=="",
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""version"": ""0.12.0"",
-      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-0.12.0.tgz"",
-      ""integrity"": ""sha1-HvK/1jUE3wvHV4X/+MLEHfEvB34="",
-      ""dev"": true,
-      ""requires"": {
-        ""ansi-escapes"": ""1.4.0"",
-        ""ansi-regex"": ""2.1.1"",
-        ""chalk"": ""1.1.3"",
-        ""cli-cursor"": ""1.0.2"",
+      ""version"": ""3.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/inquirer/-/inquirer-3.3.0.tgz"",
+      ""integrity"": ""sha512-h+xtnyk4EwKvFWHrUYsWErEVR+igKtLdchu+o0Z1RL7VU/jVMFbYir2bp6bAj8efFNxWqHX0dIss6fJQ+/+qeQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ansi-escapes"": ""3.1.0"",
+        ""chalk"": ""2.4.1"",
+        ""cli-cursor"": ""2.1.0"",
-        ""figures"": ""1.7.0"",
+        ""external-editor"": ""2.0.4"",
+        ""figures"": ""2.0.0"",
-        ""readline2"": ""1.0.1"",
-        ""run-async"": ""0.1.0"",
-        ""rx-lite"": ""3.1.2"",
-        ""string-width"": ""1.0.2"",
-        ""strip-ansi"": ""3.0.1"",
+        ""mute-stream"": ""0.0.7"",
+        ""run-async"": ""2.3.0"",
+        ""rx-lite"": ""4.0.8"",
+        ""rx-lite-aggregates"": ""4.0.8"",
+        ""string-width"": ""2.1.1"",
+        ""strip-ansi"": ""4.0.0"",
-      }
-    },
-    ""interpret"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/interpret/-/interpret-1.0.3.tgz"",
-      ""integrity"": ""sha1-y8NcYu7uc/Gat7EKgBURQBr8D5A="",
-      ""dev"": true
+      },
+      ""dependencies"": {
+        ""ansi-regex"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz"",
+          ""integrity"": ""sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="",
+          ""dev"": true
+        },
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        },
+        ""rx-lite"": {
+          ""version"": ""4.0.8"",
+          ""resolved"": ""https://registry.npmjs.org/rx-lite/-/rx-lite-4.0.8.tgz"",
+          ""integrity"": ""sha1-Cx4Rr4vESDbwSmQH6S2kJGe3lEQ="",
+          ""dev"": true
+        },
+        ""string-width"": {
+          ""version"": ""2.1.1"",
+          ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz"",
+          ""integrity"": ""sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw=="",
+          ""dev"": true,
+          ""requires"": {
+            ""is-fullwidth-code-point"": ""2.0.0"",
+            ""strip-ansi"": ""4.0.0""
+          }
+        },
+        ""strip-ansi"": {
+          ""version"": ""4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz"",
+          ""integrity"": ""sha1-qEeQIusaw2iocTibY1JixQXuNo8="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-regex"": ""3.0.0""
+          }
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+        }
+      }
-      ""dev"": true,
-      ""dev"": true,
-    ""is-my-json-valid"": {
-      ""version"": ""2.16.1"",
-      ""resolved"": ""https://registry.npmjs.org/is-my-json-valid/-/is-my-json-valid-2.16.1.tgz"",
-      ""integrity"": ""sha512-ochPsqWS1WXj8ZnMIV0vnNXooaMhp7cyL4FMSIPKTtnV0Ha/T19G2b9kkhcNsabV9bxYkze7/aLZJb/bYuFduQ=="",
-      ""dev"": true,
-      ""requires"": {
-        ""generate-function"": ""2.0.0"",
-        ""generate-object-property"": ""1.2.0"",
-        ""jsonpointer"": ""4.0.1"",
-        ""xtend"": ""4.0.1""
-      }
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz"",
-      ""integrity"": ""sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw="",
-      ""dev"": true,
-      ""requires"": {
-        ""is-path-inside"": ""1.0.0""
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.1.tgz"",
+      ""integrity"": ""sha512-FjV1RTW48E7CWM7eE/J2NJvAEEVektecDBVBE5Hh3nM1Jd0kvhHtX68Pr3xsDf857xt3Y4AkwVULK1Vku62aaQ=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-path-inside"": ""1.0.1""
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.0.tgz"",
-      ""integrity"": ""sha1-/AbloWg/vaE95mev9xe7wQpI838="",
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.1.tgz"",
+      ""integrity"": ""sha1-jvW33lBDej/cprToZe96pVy0gDY="",
-    ""is-property"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz"",
-      ""integrity"": ""sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="",
-      ""dev"": true
-    },
-      ""version"": ""1.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz"",
-      ""integrity"": ""sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI="",
-      ""dev"": true,
-      ""requires"": {
-        ""tryit"": ""1.0.3""
-      }
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.1.0.tgz"",
+      ""integrity"": ""sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg=="",
+      ""dev"": true
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
-    },
-    ""json-stable-stringify"": {
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=""
+    },
+    ""json-stable-stringify-without-jsonify"": {
-      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz"",
-      ""integrity"": ""sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonify"": ""0.0.0""
-      }
+      ""resolved"": ""https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz"",
+      ""integrity"": ""sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE="",
+      ""dev"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""jsonify"": {
-      ""version"": ""0.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz"",
-      ""integrity"": ""sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="",
-      ""dev"": true
-    },
-    ""jsonpointer"": {
-      ""version"": ""4.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/jsonpointer/-/jsonpointer-4.0.1.tgz"",
-      ""integrity"": ""sha1-T9kss04OnbPInIYi7PUfm5eMbLk="",
-      ""dev"": true
-    },
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
-      ""version"": ""0.0.5"",
-      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.5.tgz"",
-      ""integrity"": ""sha1-j7+rsKmKJT0xhDMfno3rc3L6xsA="",
+      ""version"": ""0.0.7"",
+      ""resolved"": ""https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz"",
+      ""integrity"": ""sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s="",
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""version"": ""1.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz"",
-      ""integrity"": ""sha1-ofeDj4MUxRbwXs78vEzP4EtO14k="",
-      ""dev"": true
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz"",
+      ""integrity"": ""sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ="",
+      ""dev"": true,
+      ""requires"": {
+        ""mimic-fn"": ""1.1.0""
+      }
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""version"": ""1.2.1"",
-      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-1.2.1.tgz"",
-      ""integrity"": ""sha1-0aIUg/0iu0HlihL6NCGCMUCJfEU="",
+      ""version"": ""7.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/pluralize/-/pluralize-7.0.0.tgz"",
+      ""integrity"": ""sha512-ARhBOdzS3e41FbkW/XWrTEtukqqLoK5+Z/4UeDaLuSW+39JPeFgs4gCGqsrJHVZX0fUrx//4OF0K1CUGwlIFow=="",
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
-      ""version"": ""1.1.8"",
-      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-1.1.8.tgz"",
-      ""integrity"": ""sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74="",
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/progress/-/progress-2.0.0.tgz"",
+      ""integrity"": ""sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8="",
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-    ""readline2"": {
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/readline2/-/readline2-1.0.1.tgz"",
-      ""integrity"": ""sha1-QQWWCP/BVHV7cV2ZidGZ/783LjU="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""mute-stream"": ""0.0.5""
-      }
-    },
-    ""rechoir"": {
-      ""version"": ""0.6.2"",
-      ""resolved"": ""https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz"",
-      ""integrity"": ""sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q="",
-      ""dev"": true,
-      ""requires"": {
-        ""resolve"": ""1.4.0""
-      }
-    },
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
+    },
+    ""regexpp"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/regexpp/-/regexpp-1.1.0.tgz"",
+      ""integrity"": ""sha512-LOPw8FpgdQF9etWMaAfG/WRthIdXJGYp4mJ2Jgn/2lpkbod9jPn0t9UqN7AxBOKNfzRbYyVfgc7Vk4t/MpnXgw=="",
+      ""dev"": true
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-    ""resolve"": {
-      ""version"": ""1.4.0"",
-      ""resolved"": ""https://registry.npmjs.org/resolve/-/resolve-1.4.0.tgz"",
-      ""integrity"": ""sha512-aW7sVKPufyHqOmyyLzg/J+8606v5nevBgaliIlV7nUpVMsDnoBGV/cbSLNjZAg9q0Cfd/+easKVKQ8vOu8fn1Q=="",
-      ""dev"": true,
-      ""requires"": {
-        ""path-parse"": ""1.0.5""
-      }
-    },
-      ""version"": ""1.0.1"",
-      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz"",
-      ""integrity"": ""sha1-NGYfRohjJ/7SmRR5FSJS35LapUE="",
-      ""dev"": true,
-      ""requires"": {
-        ""exit-hook"": ""1.1.1"",
-        ""onetime"": ""1.1.0""
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz"",
+      ""integrity"": ""sha1-n37ih/gv0ybU/RYpI9YhKe7g368="",
+      ""dev"": true,
+      ""requires"": {
+        ""onetime"": ""2.0.1"",
+        ""signal-exit"": ""3.0.2""
-      ""version"": ""0.1.0"",
-      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-0.1.0.tgz"",
-      ""integrity"": ""sha1-yK1KXhEGYeQCp9IbUw4AnyX444k="",
-      ""dev"": true,
-      ""requires"": {
-        ""once"": ""1.4.0""
+      ""version"": ""2.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz"",
+      ""integrity"": ""sha1-A3GrSuC91yDUFm19/aZP96RFpsA="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-promise"": ""2.1.0""
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    },
-    },
-    ""shelljs"": {
-      ""version"": ""0.7.8"",
-      ""resolved"": ""https://registry.npmjs.org/shelljs/-/shelljs-0.7.8.tgz"",
-      ""integrity"": ""sha1-3svPh0sNHl+3LhSxZKloMEjprLM="",
-      ""dev"": true,
-      ""requires"": {
-        ""glob"": ""7.1.2"",
-        ""interpret"": ""1.0.3"",
-        ""rechoir"": ""0.6.2""
-      }
-      ""version"": ""0.0.4"",
-      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz"",
-      ""integrity"": ""sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU="",
-      ""dev"": true
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/slice-ansi/-/slice-ansi-1.0.0.tgz"",
+      ""integrity"": ""sha512-POqxBK6Lb3q6s047D/XsDVNPnF9Dl8JSaqe9h9lURl0OdNqy/ujDrOiIHtsqXMGbWWTIomRzAMaTyawAU//Reg=="",
+      ""dev"": true,
+      ""requires"": {
+        ""is-fullwidth-code-point"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""is-fullwidth-code-point"": {
+          ""version"": ""2.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz"",
+          ""integrity"": ""sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="",
+          ""dev"": true
+        }
+      }
+    },
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
-      ""version"": ""3.8.3"",
-      ""resolved"": ""https://registry.npmjs.org/table/-/table-3.8.3.tgz"",
-      ""integrity"": ""sha1-K7xULw/amGGnVdOUf+/Ys/UThV8="",
-      ""dev"": true,
-      ""requires"": {
-        ""ajv"": ""4.11.8"",
-        ""ajv-keywords"": ""1.5.1"",
-        ""chalk"": ""1.1.3"",
+      ""version"": ""4.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/table/-/table-4.0.2.tgz"",
+      ""integrity"": ""sha512-UUkEAPdSGxtRpiV9ozJ5cMTtYiqz7Ni1OGqLXRCynrvzdtR1p+cfOWe2RJLwvUG8hNanaSRjecIqwOjqeatDsA=="",
+      ""dev"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""ajv-keywords"": ""2.1.1"",
+        ""chalk"": ""2.4.1"",
-        ""slice-ansi"": ""0.0.4"",
+        ""slice-ansi"": ""1.0.0"",
+        ""ansi-styles"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz"",
+          ""integrity"": ""sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA=="",
+          ""dev"": true,
+          ""requires"": {
+            ""color-convert"": ""1.9.0""
+          }
+        },
+        ""chalk"": {
+          ""version"": ""2.4.1"",
+          ""resolved"": ""https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz"",
+          ""integrity"": ""sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ=="",
+          ""dev"": true,
+          ""requires"": {
+            ""ansi-styles"": ""3.2.1"",
+            ""escape-string-regexp"": ""1.0.5"",
+            ""supports-color"": ""5.4.0""
+          }
+        },
+        ""has-flag"": {
+          ""version"": ""3.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz"",
+          ""integrity"": ""sha1-tdRU3CGZriJWmfNGfloH87lVuv0="",
+          ""dev"": true
+        },
+        },
+        ""supports-color"": {
+          ""version"": ""5.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/supports-color/-/supports-color-5.4.0.tgz"",
+          ""integrity"": ""sha512-zjaXglF5nnWpsq470jSv6P9DwPvgLkuapYmfDm3JWOm0vkNTVF2tI4UrN2r6jH1qM/uc/WtxYY1hYoA2dOKj5w=="",
+          ""dev"": true,
+          ""requires"": {
+            ""has-flag"": ""3.0.0""
+          }
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
-    },
-    ""tryit"": {
-      ""version"": ""1.0.3"",
-      ""resolved"": ""https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz"",
-      ""integrity"": ""sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    },
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,package.json,,"-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""doc"": ""esdoc"",
-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^4.0.1"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""doc"": ""esdoc"",
-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^4.0.1"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/client/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.3.0"",
-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/client/src/client.d.ts,,"-export = new Client()
+declare const client: Client & { Client: Client }
+export = client","-export = new Client()
+declare const client: Client & { Client: Client }
+export = client"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/client/src/client.js,,"-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');","-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.2.1"",
+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
+    ""debug"": ""^4.0.1"",","-  ""version"": ""6.1.0"",
+  ""version"": ""6.2.1"",
+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
+    ""debug"": ""^4.0.1"","
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/contact-importer/src/importer.js,,"-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker(task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch(context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
+
+    context.sg.request(request)
+      .then(([response]) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify(error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
-  };
+    return this.emit('success', result, batch);
+  }
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue() {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) {
+        return;
+      }
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue(batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker(task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch(context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
+
+    context.sg.request(request)
+      .then(([response]) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify(error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
-  };
+    return this.emit('success', result, batch);
+  }
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue() {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) {
+        return;
+      }
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue(batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/contact-importer/src/importer.spec.js,,"+const sendgrid = require('@sendgrid/client');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","+const sendgrid = require('@sendgrid/client');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/attachment.js,,"-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;    
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;    
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/email-address.d.ts,,"-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;","-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/email-address.js,,"-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;","-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/email-address.spec.js,,"+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');","+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/index.js,,"+const Statistics = require('./statistics');
+  Statistics,","+const Statistics = require('./statistics');
+  Statistics,"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/mail.d.ts,,"+  dynamicTemplateData?: { [key: string]: any },","+  dynamicTemplateData?: { [key: string]: any },"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/mail.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    }
+    else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    }
+    else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    }
+    else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    }
+    else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/mail.spec.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/helpers/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
-    ""mailparser"": ""^0.6.1""
+    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""mailparser"": ""^2.3.4""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.0"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
-    ""mailparser"": ""^0.6.1""
+    ""@sendgrid/helpers"": ""^6.3.0"",
+    ""mailparser"": ""^2.3.4"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/inbound-mail-parser/src/parser.spec.js,,"-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-        expect(email).to.be.null;
+        expect(email).to.be.null();
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {","-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-        expect(email).to.be.null;
+        expect(email).to.be.null();
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/mail/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.3.0""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.3.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.3.0"",
+    ""@sendgrid/helpers"": ""^6.3.0"""
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/mail/src/mail.d.ts,,"-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail","-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/mail/src/mail.js,,"+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance","+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance"
sendgrid_sendgrid-nodejs,f7ff3e5e22dc5037cf07ef74858079b2da6fc90c,Merge branch 'master' into slack-even-integrations,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,0220500cd54c44992099d0b06f3095a24c10befa,Merge pull request #502 from spelcaster/i496  Prevent secrets from sending in email,packages/mail/src/classes/mail-service.js,+        // eslint-disable-next-line callback-return,"-    //Set client and initialize substitution wrappers
+    //Set client, initialize substitution wrappers and secret rules
+    //filter
+    this.secretRules = [];
+  }
+
+  /**
+   * Set secret rules for filtering the e-mail content
+   */
+  setSecretRules(rules) {
+    if (!(rules instanceof Array)) {
+      rules = [rules];
+    }
+
+    const tmpRules = rules.map(function (rule) {
+      const ruleType = typeof rule;
+
+      if (ruleType === 'string') {
+        return {
+          pattern: new RegExp(rule)
+        };
+      } else if (ruleType === 'object') {
+        // normalize rule object
+        if (rule instanceof RegExp) {
+          rule = {
+            pattern: rule
+          }
+        } else if (rule.hasOwnProperty('pattern')
+          && (typeof rule.pattern === 'string')
+        ) {
+            rule.pattern = new RegExp(rule.pattern);
+        }
+
+        try {
+          // test if rule.pattern is a valid regex
+          rule.pattern.test('');
+          return rule
+        } catch (err) {
+        }
+      }
+    });
+
+    this.secretRules = tmpRules.filter(function (val) {
+      return val;
+    });
+  }
+
+  /**
+   * Check if the e-mail is safe to be sent
+   */
+  filterSecrets(body) {
+    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {
+      return;
+    }
+
+    const self = this;
+
+    body.content.forEach(function (data) {
+      self.secretRules.forEach(function (rule) {
+        if (rule.hasOwnProperty('pattern')
+          && !rule.pattern.test(data.value)
+        ) {
+          return;
+        }
+
+        let message = `The pattern '${rule.pattern}'`;
+
+        if (rule.name) {
+          message += `identified by '${rule.name}'`;
+        }
+
+        message += ` was found in the Mail content!`;
+
+        throw new Error(message);
+      });
+    });
+
+      //Filters the Mail body to avoid sensitive content leakage
+      this.filterSecrets(body);","-    //Set client and initialize substitution wrappers
+    //Set client, initialize substitution wrappers and secret rules
+    //filter
+    this.secretRules = [];
+  }
+
+  /**
+   * Set secret rules for filtering the e-mail content
+   */
+  setSecretRules(rules) {
+    if (!(rules instanceof Array)) {
+      rules = [rules];
+    }
+
+    const tmpRules = rules.map(function (rule) {
+      const ruleType = typeof rule;
+
+      if (ruleType === 'string') {
+        return {
+          pattern: new RegExp(rule)
+        };
+      } else if (ruleType === 'object') {
+        // normalize rule object
+        if (rule instanceof RegExp) {
+          rule = {
+            pattern: rule
+          }
+        } else if (rule.hasOwnProperty('pattern')
+          && (typeof rule.pattern === 'string')
+        ) {
+            rule.pattern = new RegExp(rule.pattern);
+        }
+
+        try {
+          // test if rule.pattern is a valid regex
+          rule.pattern.test('');
+          return rule
+        } catch (err) {
+        }
+      }
+    });
+
+    this.secretRules = tmpRules.filter(function (val) {
+      return val;
+    });
+  }
+
+  /**
+   * Check if the e-mail is safe to be sent
+   */
+  filterSecrets(body) {
+    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {
+      return;
+    }
+
+    const self = this;
+
+    body.content.forEach(function (data) {
+      self.secretRules.forEach(function (rule) {
+        if (rule.hasOwnProperty('pattern')
+          && !rule.pattern.test(data.value)
+        ) {
+          return;
+        }
+
+        let message = `The pattern '${rule.pattern}'`;
+
+        if (rule.name) {
+          message += `identified by '${rule.name}'`;
+        }
+
+        message += ` was found in the Mail content!`;
+
+        throw new Error(message);
+      });
+    });
+
+      //Filters the Mail body to avoid sensitive content leakage
+      this.filterSecrets(body);
+        // eslint-disable-next-line callback-return"
sendgrid_sendgrid-nodejs,d39313a98bbcf4bb4b10b86c15fe8500ba9a78a2,Merge pull request #522 from HeroProtagonist/comma-bug-#448  Comma bug in name #448,packages/helpers/classes/email-address.js,,"-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;","-    this.name = name;
+    // Wrap name in quotes to address API issue
+    // https://github.com/sendgrid/sendgrid-csharp/issues/268#issuecomment-232177443
+    const isQuoted = (name[0] === '\""') && (name[name.length - 1] === '\""');
+    const shouldQuote = name.includes(',') && !isQuoted;
+    this.name = shouldQuote ? `\""${name}\""` : name;"
sendgrid_sendgrid-nodejs,d39313a98bbcf4bb4b10b86c15fe8500ba9a78a2,Merge pull request #522 from HeroProtagonist/comma-bug-#448  Comma bug in name #448,packages/helpers/classes/email-address.spec.js,,"+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');","+    });
+
+    it('should wrap name in quotes if a comma is present', function() {
+      email.setName('Doe, John');
+      expect(email.name).to.equal('\""Doe, John\""');
+    });
+
+    it('should not double wrap in quotes', function() {
+      email.setName('\""Doe, John\""');
+      expect(email.name).to.equal('\""Doe, John\""');"
sendgrid_sendgrid-nodejs,43cc102aa25b1cd0bff52866de6f79ea8c2a9af8,Merge pull request #525 from devanp92/feature/stats  Add statistics helper class,packages/helpers/classes/index.js,,"+const Statistics = require('./statistics');
+  Statistics,","+const Statistics = require('./statistics');
+  Statistics,"
sendgrid_sendgrid-nodejs,ed163d99b1b44b6c84dca1d5c5957c1cd462cb06,Merge pull request #583 from adamreisnz/cleanup  Fix readme instructions and replace stray tab indentation by spaces,packages/helpers/classes/attachment.js,"-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;    
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */"
sendgrid_sendgrid-nodejs,7026ae519920c28d91ac04a615fb1ee1d4112be6,Merge pull request #767 from tony-ho/style-conformance  Add conformance to style standards,package.json,,"+    ""doc"": ""esdoc"",","+    ""doc"": ""esdoc"","
sendgrid_sendgrid-nodejs,7026ae519920c28d91ac04a615fb1ee1d4112be6,Merge pull request #767 from tony-ho/style-conformance  Add conformance to style standards,packages/inbound-mail-parser/src/parser.spec.js,,"-        expect(email).to.be.null;
+        expect(email).to.be.null();","-        expect(email).to.be.null;
+        expect(email).to.be.null();"
sendgrid_sendgrid-nodejs,7026ae519920c28d91ac04a615fb1ee1d4112be6,Merge pull request #767 from tony-ho/style-conformance  Add conformance to style standards,packages/mail/src/classes/mail-service.js,,+        // eslint-disable-next-line callback-return,+        // eslint-disable-next-line callback-return
sendgrid_sendgrid-nodejs,7026ae519920c28d91ac04a615fb1ee1d4112be6,Merge pull request #767 from tony-ho/style-conformance  Add conformance to style standards,packages/subscription-widget/server/controllers/contact_list_controller.js,,"-	const subject = ""Please Confirm Your Email Address"";
-	const url = formatUrl(Settings.url) + '/success';
-	const link = ""<a href='"" + url + ""'>this link</a>""
-	const mailText = ""Thanks for signing up! Click "" + link + "" to sign up!  This link will be active for 24 hours."";
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: reqBody.email,
-	        }
-	      ],
-	      subject: subject,
-	      custom_args: {
-	      	type: optIn,
-	      	time_sent: String(Date.now()),
-	      },
-	      substitutions: {
-	      	link_insert: link
-	      }
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ]
-	}
-
-	const templateId = Settings.templateId;
-	if (templateId) emailBody.template_id = templateId;
-
-	for (key in reqBody) {
-		emailBody.personalizations[0].custom_args[key] = reqBody[key];
-	}
-
-	return emailBody;
+  const subject = 'Please Confirm Your Email Address';
+  const url = formatUrl(Settings.url) + '/success';
+  const link = '<a href=\'' + url + '\'>this link</a>';
+  const mailText = 'Thanks for signing up! Click ' + link + ' to sign up!  This link will be active for 24 hours.';
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: reqBody.email,
+          },
+        ],
+        subject: subject,
+        custom_args: {
+          type: optIn,
+          time_sent: String(Date.now()),
+        },
+        substitutions: {
+          link_insert: link,
+        },
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  const templateId = Settings.templateId;
+  if (templateId) {
+    emailBody.template_id = templateId;
+  }
+
+  for (key in reqBody) {
+    if ({}.hasOwnProperty.call(reqBody, key)) {
+      emailBody.personalizations[0].custom_args[key] = reqBody[key];
+    }
+  }
+
+  return emailBody;
-	const subject = ""New email signup"";
-	const mailText = ""A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>"" + reqBody.first_name + "" "" + reqBody.last_name + ""<br/><b>Email: </b>"" + reqBody.email;
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: Settings.notificationEmail,
-	        }
-	      ],
-	      subject: subject
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ],
-	}
-
-	return emailBody;
+  const subject = 'New email signup';
+  const mailText = 'A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>' + reqBody.first_name + ' ' + reqBody.last_name + '<br/><b>Email: </b>' + reqBody.email;
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: Settings.notificationEmail,
+          },
+        ],
+        subject: subject,
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  return emailBody;
-	var request = sg.emptyRequest({
-		method: 'POST',
-		path: '/v3/mail/send',
-		body: prepareConfirmationEmail(req.body)
-	});
-
-	sg.API(request, function(error, response) {
-		if (error) {
-			console.log('Error response received');
-		}
-
-		if (response.statusCode >= 200 && response.statusCode < 300) {
-			res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
-		} else {
-			res.sendFile(path.join(__dirname, '../static/error.html'));
-		}
-	});
-}
+  var request = sg.emptyRequest({
+    method: 'POST',
+    path: '/v3/mail/send',
+    body: prepareConfirmationEmail(req.body),
+  });
+
+  sg.API(request, function(error, response) {
+    if (error) {
+      console.log('Error response received');
+    }
+
+    if (response.statusCode >= 200 && response.statusCode < 300) {
+      res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
+    }
+    else {
+      res.sendFile(path.join(__dirname, '../static/error.html'));
+    }
+  });
+};
-	addUserToList(req.body[0], function() {
-		//send notification about the new signup
-		if (Settings.sendNotification) {
-			console.log(""Sending notification"");
-
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/mail/send',
-				body: prepareNotificationEmail(req.body[0])
-			});
-
-			sg.API(request, function(error, response) {
-				if (error) {
-					console.log('Error sending notification');
-				}
-			});
-		}
-
-		res.sendStatus(200);
-	});
-}
+  addUserToList(req.body[0], function() {
+    //send notification about the new signup
+    if (Settings.sendNotification) {
+      console.log('Sending notification');
+
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/mail/send',
+        body: prepareNotificationEmail(req.body[0]),
+      });
+
+      sg.API(request, function(error, response) {
+        if (error) {
+          console.log('Error sending notification');
+        }
+      });
+    }
+
+    res.sendStatus(200);
+  });
+};
-	console.log(emailBody);
-
-	var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
-		'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
-
-	var customFields = [{}];
-	var customFieldArr = [];
-
-	for (key in emailBody) {
-		if (!stringInArray(key, ignoreFields)) {
-			customFields[0][key] = emailBody[key];
-			if (key != 'email' && key != 'first_name' && key != 'last_name') {
-				customFieldArr.push(key);
-			}
-		}
-	}
-
-	checkAndAddCustomFields(customFieldArr, function() {
-		const emailType = emailBody.type;
-		const timestamp = parseInt(emailBody.time_sent);
-		const listId = Settings.listId;
-		const secondsInDay = 86400;
-		const timeElapsed = (Date.now() - timestamp) / 1000;
-
-		// Confirm email type is opt in and link has been clicked within 1 day
-		if (emailType == optIn && timeElapsed < secondsInDay) {
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/contactdb/recipients',
-				body: customFields
-			});
-
-			sg.API(request, function(error, response) {
-		    	if (listId) {
-					var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
-					var request = sg.emptyRequest({
-						method: 'POST',
-						path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
-						body: customFields
-					});
-					sg.API(request, function(error, response) {
-				    	console.log(response.statusCode)
-				    	console.log(response.body)
-				    	console.log(response.headers)
-
-						callback();
-					});
-				} else {
-					callback();
-				}
-			});
-		} else {
-			callback();
-		}
-	});
+  console.log(emailBody);
+
+  var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
+    'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
+
+  var customFields = [{}];
+  var customFieldArr = [];
+
+  for (key in emailBody) {
+    if (!stringInArray(key, ignoreFields)) {
+      customFields[0][key] = emailBody[key];
+      if (key !== 'email' && key !== 'first_name' && key !== 'last_name') {
+        customFieldArr.push(key);
+      }
+    }
+  }
+
+  checkAndAddCustomFields(customFieldArr, function() {
+    const emailType = emailBody.type;
+    const timestamp = parseInt(emailBody.time_sent, 10);
+    const listId = Settings.listId;
+    const secondsInDay = 86400;
+    const timeElapsed = (Date.now() - timestamp) / 1000;
+
+    // Confirm email type is opt in and link has been clicked within 1 day
+    if (emailType === optIn && timeElapsed < secondsInDay) {
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/contactdb/recipients',
+        body: customFields,
+      });
+
+      sg.API(request, function(error, response) {
+        if (listId) {
+          var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
+          var request = sg.emptyRequest({
+            method: 'POST',
+            path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
+            body: customFields,
+          });
+          sg.API(request, function(error, response) {
+            console.log(response.statusCode);
+            console.log(response.body);
+            console.log(response.headers);
+
+            callback();
+          });
+        }
+        else {
+          return callback();
+        }
+      });
+    }
+    else {
+      return callback();
+    }
+  });
-	var request = sg.emptyRequest({
-		method: 'GET',
-		path: '/v3/contactdb/custom_fields',
-	});
-
-	sg.API(request, function(error, response) {
-    	console.log(response.statusCode)
-    	console.log(response.body)
-    	console.log(response.headers)
-
-    	var existingCustomFields = JSON.parse(response.body);
-		var fieldsToCreate = [];
-
-		submittedFields.map((submittedField) => {
-			var fieldExists = false;
-			existingCustomFields.custom_fields.map((field) => {
-				if (submittedField == field.name) {
-					fieldExists = true;
-				}
-			});
-			if (!fieldExists) {
-				fieldsToCreate.push(submittedField)
-			}
-		});
-
-		if (fieldsToCreate.length == 0) {
-			callback();
-		} else {
-			fieldsToCreate.map((fieldsToCreate) => {
-				var body = { name: fieldsToCreate, type: 'text' };
-
-				var request = sg.emptyRequest({
-					method: 'POST',
-					path: '/v3/contactdb/custom_fields',
-					body: body
-				});
-
-				sg.API(request, function(error, response) {
-			    	callback();
-			    });
-			});
-		}
-
+  var request = sg.emptyRequest({
+    method: 'GET',
+    path: '/v3/contactdb/custom_fields',
+  });
+
+  sg.API(request, function(error, response) {
+    console.log(response.statusCode);
+    console.log(response.body);
+    console.log(response.headers);
+
+    var existingCustomFields = JSON.parse(response.body);
+    var fieldsToCreate = [];
+
+    submittedFields.map((submittedField) => {
+      var fieldExists = false;
+      existingCustomFields.custom_fields.map((field) => {
+        if (submittedField === field.name) {
+          fieldExists = true;
+        }
+      });
+      if (!fieldExists) {
+        fieldsToCreate.push(submittedField);
+      }
+
+    if (fieldsToCreate.length === 0) {
+      return callback();
+    }
+    else {
+      fieldsToCreate.map((fieldsToCreate) => {
+        var body = { name: fieldsToCreate, type: 'text' };
+
+        var request = sg.emptyRequest({
+          method: 'POST',
+          path: '/v3/contactdb/custom_fields',
+          body: body,
+        });
+
+        sg.API(request, function(error, response) {
+          callback();
+        });
+      });
+    }
+
+  });
-	if (url.substr(-1) == '/') {
-		return url.substring(0, url.length - 1);
-	}
-	return url;
+  if (url.substr(-1) === '/') {
+    return url.substring(0, url.length - 1);
+  }
+  return url;
-	var isInArray = false;
-	array.map((item) => {
-		if (string == item) {
-			isInArray = true;
-		}
-	});
-	return isInArray;
-}
+  var isInArray = false;
+  array.map((item) => {
+    if (string === item) {
+      isInArray = true;
+    }
+  });
+  return isInArray;
+}","-	const subject = ""Please Confirm Your Email Address"";
-	const url = formatUrl(Settings.url) + '/success';
-	const link = ""<a href='"" + url + ""'>this link</a>""
-	const mailText = ""Thanks for signing up! Click "" + link + "" to sign up!  This link will be active for 24 hours."";
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: reqBody.email,
-	        }
-	      ],
-	      subject: subject,
-	      custom_args: {
-	      	type: optIn,
-	      	time_sent: String(Date.now()),
-	      },
-	      substitutions: {
-	      	link_insert: link
-	      }
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ]
-	}
-
-	const templateId = Settings.templateId;
-	if (templateId) emailBody.template_id = templateId;
-
-	for (key in reqBody) {
-		emailBody.personalizations[0].custom_args[key] = reqBody[key];
-	}
-
-	return emailBody;
+  const subject = 'Please Confirm Your Email Address';
+  const url = formatUrl(Settings.url) + '/success';
+  const link = '<a href=\'' + url + '\'>this link</a>';
+  const mailText = 'Thanks for signing up! Click ' + link + ' to sign up!  This link will be active for 24 hours.';
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: reqBody.email,
+          },
+        ],
+        subject: subject,
+        custom_args: {
+          type: optIn,
+          time_sent: String(Date.now()),
+        },
+        substitutions: {
+          link_insert: link,
+        },
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  const templateId = Settings.templateId;
+  if (templateId) {
+    emailBody.template_id = templateId;
+  }
+
+  for (key in reqBody) {
+    if ({}.hasOwnProperty.call(reqBody, key)) {
+      emailBody.personalizations[0].custom_args[key] = reqBody[key];
+    }
+  }
+
+  return emailBody;
-	const subject = ""New email signup"";
-	const mailText = ""A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>"" + reqBody.first_name + "" "" + reqBody.last_name + ""<br/><b>Email: </b>"" + reqBody.email;
-
-	var emailBody = {
-	  personalizations: [
-	    {
-	      to: [
-	        {
-	          email: Settings.notificationEmail,
-	        }
-	      ],
-	      subject: subject
-	    },
-	  ],
-	  from: {
-	    email: Settings.senderEmail,
-	    name: Settings.senderName,
-	  },
-	  content: [
-	    {
-	      type: ""text/html"",
-	      value: mailText,
-	    }
-	  ],
-	}
-
-	return emailBody;
+  const subject = 'New email signup';
+  const mailText = 'A new person just confirmed they would look to receive your emails via your email subscription widget.<br/><b>Name: </b>' + reqBody.first_name + ' ' + reqBody.last_name + '<br/><b>Email: </b>' + reqBody.email;
+
+  var emailBody = {
+    personalizations: [
+      {
+        to: [
+          {
+            email: Settings.notificationEmail,
+          },
+        ],
+        subject: subject,
+      },
+    ],
+    from: {
+      email: Settings.senderEmail,
+      name: Settings.senderName,
+    },
+    content: [
+      {
+        type: 'text/html',
+        value: mailText,
+      },
+    ],
+  };
+
+  return emailBody;
-	var request = sg.emptyRequest({
-		method: 'POST',
-		path: '/v3/mail/send',
-		body: prepareConfirmationEmail(req.body)
-	});
-
-	sg.API(request, function(error, response) {
-		if (error) {
-			console.log('Error response received');
-		}
-
-		if (response.statusCode >= 200 && response.statusCode < 300) {
-			res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
-		} else {
-			res.sendFile(path.join(__dirname, '../static/error.html'));
-		}
-	});
-}
+  var request = sg.emptyRequest({
+    method: 'POST',
+    path: '/v3/mail/send',
+    body: prepareConfirmationEmail(req.body),
+  });
+
+  sg.API(request, function(error, response) {
+    if (error) {
+      console.log('Error response received');
+    }
+
+    if (response.statusCode >= 200 && response.statusCode < 300) {
+      res.sendFile(path.join(__dirname, '../static/check-inbox.html'));
+    }
+    else {
+      res.sendFile(path.join(__dirname, '../static/error.html'));
+    }
+  });
+};
-	addUserToList(req.body[0], function() {
-		//send notification about the new signup
-		if (Settings.sendNotification) {
-			console.log(""Sending notification"");
-
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/mail/send',
-				body: prepareNotificationEmail(req.body[0])
-			});
-
-			sg.API(request, function(error, response) {
-				if (error) {
-					console.log('Error sending notification');
-				}
-			});
-		}
-
-		res.sendStatus(200);
-	});
-}
+  addUserToList(req.body[0], function() {
+    //send notification about the new signup
+    if (Settings.sendNotification) {
+      console.log('Sending notification');
+
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/mail/send',
+        body: prepareNotificationEmail(req.body[0]),
+      });
+
+      sg.API(request, function(error, response) {
+        if (error) {
+          console.log('Error sending notification');
+        }
+      });
+    }
+
+    res.sendStatus(200);
+  });
+};
-	console.log(emailBody);
-
-	var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
-		'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
-
-	var customFields = [{}];
-	var customFieldArr = [];
-
-	for (key in emailBody) {
-		if (!stringInArray(key, ignoreFields)) {
-			customFields[0][key] = emailBody[key];
-			if (key != 'email' && key != 'first_name' && key != 'last_name') {
-				customFieldArr.push(key);
-			}
-		}
-	}
-
-	checkAndAddCustomFields(customFieldArr, function() {
-		const emailType = emailBody.type;
-		const timestamp = parseInt(emailBody.time_sent);
-		const listId = Settings.listId;
-		const secondsInDay = 86400;
-		const timeElapsed = (Date.now() - timestamp) / 1000;
-
-		// Confirm email type is opt in and link has been clicked within 1 day
-		if (emailType == optIn && timeElapsed < secondsInDay) {
-			var request = sg.emptyRequest({
-				method: 'POST',
-				path: '/v3/contactdb/recipients',
-				body: customFields
-			});
-
-			sg.API(request, function(error, response) {
-		    	if (listId) {
-					var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
-					var request = sg.emptyRequest({
-						method: 'POST',
-						path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
-						body: customFields
-					});
-					sg.API(request, function(error, response) {
-				    	console.log(response.statusCode)
-				    	console.log(response.body)
-				    	console.log(response.headers)
-
-						callback();
-					});
-				} else {
-					callback();
-				}
-			});
-		} else {
-			callback();
-		}
-	});
+  console.log(emailBody);
+
+  var ignoreFields = ['ip', 'sg_event_id', 'sg_message_id', 'useragent', 'event',
+    'url_offset', 'time_sent', 'timestamp', 'url', 'type', 'smtp-id'];
+
+  var customFields = [{}];
+  var customFieldArr = [];
+
+  for (key in emailBody) {
+    if (!stringInArray(key, ignoreFields)) {
+      customFields[0][key] = emailBody[key];
+      if (key !== 'email' && key !== 'first_name' && key !== 'last_name') {
+        customFieldArr.push(key);
+      }
+    }
+  }
+
+  checkAndAddCustomFields(customFieldArr, function() {
+    const emailType = emailBody.type;
+    const timestamp = parseInt(emailBody.time_sent, 10);
+    const listId = Settings.listId;
+    const secondsInDay = 86400;
+    const timeElapsed = (Date.now() - timestamp) / 1000;
+
+    // Confirm email type is opt in and link has been clicked within 1 day
+    if (emailType === optIn && timeElapsed < secondsInDay) {
+      var request = sg.emptyRequest({
+        method: 'POST',
+        path: '/v3/contactdb/recipients',
+        body: customFields,
+      });
+
+      sg.API(request, function(error, response) {
+        if (listId) {
+          var contactID = JSON.parse(response.body.toString()).persisted_recipients[0];
+          var request = sg.emptyRequest({
+            method: 'POST',
+            path: '/v3/contactdb/lists/' + listId + '/recipients/' + contactID,
+            body: customFields,
+          });
+          sg.API(request, function(error, response) {
+            console.log(response.statusCode);
+            console.log(response.body);
+            console.log(response.headers);
+
+            callback();
+          });
+        }
+        else {
+          return callback();
+        }
+      });
+    }
+    else {
+      return callback();
+    }
+  });
-	var request = sg.emptyRequest({
-		method: 'GET',
-		path: '/v3/contactdb/custom_fields',
-	});
-
-	sg.API(request, function(error, response) {
-    	console.log(response.statusCode)
-    	console.log(response.body)
-    	console.log(response.headers)
-
-    	var existingCustomFields = JSON.parse(response.body);
-		var fieldsToCreate = [];
-
-		submittedFields.map((submittedField) => {
-			var fieldExists = false;
-			existingCustomFields.custom_fields.map((field) => {
-				if (submittedField == field.name) {
-					fieldExists = true;
-				}
-			});
-			if (!fieldExists) {
-				fieldsToCreate.push(submittedField)
-			}
-		});
-
-		if (fieldsToCreate.length == 0) {
-			callback();
-		} else {
-			fieldsToCreate.map((fieldsToCreate) => {
-				var body = { name: fieldsToCreate, type: 'text' };
-
-				var request = sg.emptyRequest({
-					method: 'POST',
-					path: '/v3/contactdb/custom_fields',
-					body: body
-				});
-
-				sg.API(request, function(error, response) {
-			    	callback();
-			    });
-			});
-		}
-
+  var request = sg.emptyRequest({
+    method: 'GET',
+    path: '/v3/contactdb/custom_fields',
+  });
+
+  sg.API(request, function(error, response) {
+    console.log(response.statusCode);
+    console.log(response.body);
+    console.log(response.headers);
+
+    var existingCustomFields = JSON.parse(response.body);
+    var fieldsToCreate = [];
+
+    submittedFields.map((submittedField) => {
+      var fieldExists = false;
+      existingCustomFields.custom_fields.map((field) => {
+        if (submittedField === field.name) {
+          fieldExists = true;
+        }
+      });
+      if (!fieldExists) {
+        fieldsToCreate.push(submittedField);
+      }
+
+    if (fieldsToCreate.length === 0) {
+      return callback();
+    }
+    else {
+      fieldsToCreate.map((fieldsToCreate) => {
+        var body = { name: fieldsToCreate, type: 'text' };
+
+        var request = sg.emptyRequest({
+          method: 'POST',
+          path: '/v3/contactdb/custom_fields',
+          body: body,
+        });
+
+        sg.API(request, function(error, response) {
+          callback();
+        });
+      });
+    }
+
+  });
-	if (url.substr(-1) == '/') {
-		return url.substring(0, url.length - 1);
-	}
-	return url;
+  if (url.substr(-1) === '/') {
+    return url.substring(0, url.length - 1);
+  }
+  return url;
-	var isInArray = false;
-	array.map((item) => {
-		if (string == item) {
-			isInArray = true;
-		}
-	});
-	return isInArray;
-}
+  var isInArray = false;
+  array.map((item) => {
+    if (string === item) {
+      isInArray = true;
+    }
+  });
+  return isInArray;
+}"
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/contact-importer/package.json,,"+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0""","+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0"""
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/contact-importer/src/importer.js,,"-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {","-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {"
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/contact-importer/src/importer.spec.js,,"-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {","-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {"
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/helpers/classes/mail.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+"
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/helpers/classes/mail.spec.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });"
sendgrid_sendgrid-nodejs,6653da8a0335ba6e803cd331e87ee93185129a0b,Merge branch 'master' into style-conformance,packages/inbound-mail-parser/package.json,,"-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4""","-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4"""
sendgrid_sendgrid-nodejs,ad57a0c8856b1d381c4f8db86f719429886ffa67,Merge pull request #770 from aslafy-z/patch-2  [contact-importer] Update to support @sendgrid/client v6.X,packages/contact-importer/package.json,,"+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0""","+    ""@sendgrid/client"": ""^6.3.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""sendgrid"": ""^5.2.3""
+    ""debug"": ""^4.0.1"",
+    ""lodash.chunk"": ""^4.2.0"""
sendgrid_sendgrid-nodejs,ad57a0c8856b1d381c4f8db86f719429886ffa67,Merge pull request #770 from aslafy-z/patch-2  [contact-importer] Update to support @sendgrid/client v6.X,packages/contact-importer/src/importer.js,,"-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {","-  _worker (task, callback) {
+  _worker(task, callback) {
-  _sendBatch (context, data, callback) {
+  _sendBatch(context, data, callback) {
-    const request = context.sg.emptyRequest();
-    request.method = 'POST';
-    request.path = '/v3/contactdb/recipients';
-    request.body = data;
+    const request = {
+      method: 'POST',
+      path: '/v3/contactdb/recipients',
+      body: data,
+    };
-    context.sg.API(request)
-      .then((response) => {
+    context.sg.request(request)
+      .then(([response]) => {
-  _notify (error, result, batch) {
+  _notify(error, result, batch) {
-  };
+  }
-  _setupQueue () {
+  _setupQueue() {
-      if (!this.pendingItems.length) return;
+      if (!this.pendingItems.length) {
+        return;
+      }
-  _pushToQueue (batch) {
+  _pushToQueue(batch) {"
sendgrid_sendgrid-nodejs,ad57a0c8856b1d381c4f8db86f719429886ffa67,Merge pull request #770 from aslafy-z/patch-2  [contact-importer] Update to support @sendgrid/client v6.X,packages/contact-importer/src/importer.spec.js,,"-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {","-const sendgrid = require('sendgrid');
+const sendgrid = require('@sendgrid/client');
-    const sg = sendgrid(API_KEY);
+    sendgrid.setApiKey(API_KEY);
-    this.contactImporter = new ContactImporter(sg, {
+    this.contactImporter = new ContactImporter(sendgrid, {"
sendgrid_sendgrid-nodejs,a41ea05b649297f214afb4c5c105bf0b791956f9,Merge branch 'master' into run-md-docs-through-grammerly,packages/helpers/classes/mail.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+"
sendgrid_sendgrid-nodejs,a41ea05b649297f214afb4c5c105bf0b791956f9,Merge branch 'master' into run-md-docs-through-grammerly,packages/helpers/classes/mail.spec.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });"
sendgrid_sendgrid-nodejs,a41ea05b649297f214afb4c5c105bf0b791956f9,Merge branch 'master' into run-md-docs-through-grammerly,packages/inbound-mail-parser/package.json,,"-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4""","-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4"""
sendgrid_sendgrid-nodejs,d6c8c75cacc17eba102acab3432d57ae852698fa,Merge pull request #793 from reedsa/template-escape-characters  Warn if dynamic template contains non-escaped character,packages/helpers/classes/mail.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
-      this.setDynamicTemplateData(dynamicTemplateData)
-    } else {
+      this.setDynamicTemplateData(dynamicTemplateData);
+    }
+    else {
-    } else if (personalization.dynamicTemplateData) {
+    }
+    else if (personalization.dynamicTemplateData) {
-    } else {
+    }
+    else {
+
+    // Check dynamic template for non-escaped characters and warn if found
+    Object.values(dynamicTemplateData).forEach(value => {
+      if (/['""&]/.test(value)) {
+        console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);
+      }
+    });
+"
sendgrid_sendgrid-nodejs,d6c8c75cacc17eba102acab3432d57ae852698fa,Merge pull request #793 from reedsa/template-escape-characters  Warn if dynamic template contains non-escaped character,packages/helpers/classes/mail.spec.js,,"+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });","+const { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');
+
+  describe('dynamic template handlebars substitutions', () => {
+    let logSpy, data;
+
+    beforeEach(() => {
+      logSpy = sinon.spy(console, 'warn');
+      data = {
+        to: 'recipient@example.org',
+        from: 'sender@example.org',
+        subject: 'Hello world',
+        text: 'Hello plain world!',
+        html: '<p>Hello HTML world!</p>',
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      };
+    });
+
+    afterEach(() => {
+      console.warn.restore();
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""\'"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates and \'Stuff\'',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped """""" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: '""Testing Templates"" and Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+
+    it('should log an error if template subject line contains improperly escaped ""&"" character', () => {
+      data = Object.assign(data, {
+        dynamicTemplateData: {
+          subject: 'Testing Templates & Stuff',
+        },
+      });
+
+      const mail = new Mail(data);
+
+      expect(logSpy.calledOnce).to.equal(true);
+      expect(logSpy.calledWith(DYNAMIC_TEMPLATE_CHAR_WARNING)).to.equal(true);
+    });
+  });"
sendgrid_sendgrid-nodejs,2f3e789f881b3c399594e11cf16b39dad7d89b24,Merge pull request #763 from aslafy-z/patch-1  [inbound-mail-parser] fix(deps): Update mailparser to 2.3.4,packages/inbound-mail-parser/package.json,,"-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4""","-    ""mailparser"": ""^0.6.1""
+    ""mailparser"": ""^2.3.4"""
sendgrid_sendgrid-nodejs,b354b46841400e78dd7d18798ac8e12bf884bd25,Merge pull request #716 from dyatko/patch-1  MailData must have dynamicTemplateData property,packages/helpers/classes/mail.d.ts,,"+  dynamicTemplateData?: { [key: string]: any },","+  dynamicTemplateData?: { [key: string]: any },"
sendgrid_sendgrid-nodejs,d49b78bb08f31d354f34cda1636d845dfae2d87e,Merge pull request #757 from GuyKh/patch-1  Upgrade request to 2.88.0 (latest) to address issue #661,packages/client/package.json,,"-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0""","-    ""request"": ""^2.81.0""
+    ""request"": ""^2.88.0"""
sendgrid_sendgrid-nodejs,bfc8451ba3b4ba491a55994b04dc61fe0757c034,Merge pull request #754 from rafaelalmeidatk/fix-subscription-widget-engines  Fix subscription-widget node engine version,packages/subscription-widget/package.json,,"-    ""node"": ""4.1.1""
+    ""node"": "">=6.0.0""","-    ""node"": ""4.1.1""
+    ""node"": "">=6.0.0"""
sendgrid_sendgrid-nodejs,0c83ae9a7151f466383df35a897a3426c5cdb06b,Merge pull request #514 from TunedMidja/fix_394  Fixes #394,packages/helpers/classes/attachment.js,,"-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;","-    if (typeof content === 'undefined') {
-      return;
+    //Duck type check toString on content if it's a Buffer as that's the method that will be called.
+    if (typeof content === 'string') {      
+      this.content = content;
+    } else if (content instanceof Buffer && content.toString !== undefined) {      
+      this.content = content.toString();
+    } else {
+      throw new Error('`content` expected to be either Buffer or string');
-    if (typeof content !== 'string') {
-      throw new Error('String expected for `content`');
-    }
-    this.content = content;
+
+    return;"
sendgrid_sendgrid-nodejs,65d587cccc67603e6d613ba5b733b141145829e8,Merge branch 'master' of https://github.com/sendgrid/sendgrid-nodejs,.esdoc.json,,"+    ""excludes"": [""node_modules""],","+    ""excludes"": [""node_modules""],"
sendgrid_sendgrid-nodejs,fe9c7a69a48e5acc5a4f64912841dd877bf6d27d,Merge pull request #610 from nitish24p/exclude-esdoc-node-modules  Exclude esdoc node modules,.esdoc.json,,"+    ""excludes"": [""node_modules""],","+    ""excludes"": [""node_modules""],"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,lerna.json,,"-  ""version"": ""6.1.6""
+  ""version"": ""6.2.1""","-  ""version"": ""6.1.6""
+  ""version"": ""6.2.1"""
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,package-lock.json,,"+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    },
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""estraverse"": ""4.2.0"",
+        ""esutils"": ""2.0.2"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="",
+      ""optional"": true
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""dev"": true,
-      ""dev"": true,
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="",
+      ""optional"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    },
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },","+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    },
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""estraverse"": ""4.2.0"",
+        ""esutils"": ""2.0.2"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="",
+      ""optional"": true
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""dev"": true,
-      ""dev"": true,
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="",
+      ""optional"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    },
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,package.json,,"-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"",","-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"","
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/client/package.json,,"-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.2.1"",","-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.2.1"","
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/client/src/client.d.ts,,"-export = new Client()
+declare const client: Client & { Client: Client }
+export = client","-export = new Client()
+declare const client: Client & { Client: Client }
+export = client"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/client/src/client.js,,"-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');","-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/contact-importer/package.json,,"-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",","-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"","
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/contact-importer/src/importer.spec.js,,"-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {","-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/email-address.d.ts,,"-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;","-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/mail.js,,"+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);","+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/mail.spec.js,,"+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });","+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });","-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/helpers/package.json,,"-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-    ""@sendgrid/helpers"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.2.1"",","-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-    ""@sendgrid/helpers"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.2.1"","
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/mail/package.json,,"-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.5""
+    ""@sendgrid/client"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.2.1""","-  ""version"": ""6.1.5"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.5""
+    ""@sendgrid/client"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.2.1"""
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/mail/src/mail.d.ts,,"-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail","-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/mail/src/mail.js,,"+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance","+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance"
sendgrid_sendgrid-nodejs,a551717d160ac83d759435ef85e46401da7ce42c,Merge branch 'master' into addLinksToContributing,packages/subscription-widget/package.json,,"-  ""version"": ""6.1.6"",
+  ""version"": ""6.2.1"",","-  ""version"": ""6.1.6"",
+  ""version"": ""6.2.1"","
sendgrid_sendgrid-nodejs,e465674eadc877e9d6309ecd83ba1f31ef28242b,"Merge pull request #666 from ctrimm/bug-moment-version-fix  Bumped the moment, chai-as-promised, and dirty-chai version in package.json",package-lock.json,,"+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    },
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""estraverse"": ""4.2.0"",
+        ""esutils"": ""2.0.2"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="",
+      ""optional"": true
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""dev"": true,
-      ""dev"": true,
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="",
+      ""optional"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    },
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },","+    ""JSONStream"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
+      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
+      ""dev"": true,
+      ""requires"": {
+        ""jsonparse"": ""1.3.1"",
+        ""through"": ""2.3.8""
+      }
+    },
+    ""abab"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/abab/-/abab-1.0.4.tgz"",
+      ""integrity"": ""sha1-X6rZwsB/YN12dw9xzwJbYqY8/U4="",
+      ""optional"": true
+    },
+    },
+    ""acorn-globals"": {
+      ""version"": ""1.0.9"",
+      ""resolved"": ""https://registry.npmjs.org/acorn-globals/-/acorn-globals-1.0.9.tgz"",
+      ""integrity"": ""sha1-VbtemGkVB7dFedBRNBMhfDgMVM8="",
+      ""optional"": true,
+      ""requires"": {
+        ""acorn"": ""2.7.0""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
-      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8="",
-      ""dev"": true
+      ""integrity"": ""sha1-w7M6te42DYbg5ijwRorn7yfWVN8=""
-      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="",
-      ""dev"": true
+      ""integrity"": ""sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=""
+    ""asn1"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz"",
+      ""integrity"": ""sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y="",
+      ""optional"": true
+    },
+    ""assert-plus"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz"",
+      ""integrity"": ""sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=""
+    },
-      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw="",
-      ""dev"": true
+      ""integrity"": ""sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=""
+      ""optional"": true
+    },
+    ""asynckit"": {
+      ""version"": ""0.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz"",
+      ""integrity"": ""sha1-x57Zf380y48robyXkLzDZkdLS3k="",
+      ""optional"": true
+    },
+    ""aws-sign2"": {
+      ""version"": ""0.7.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz"",
+      ""integrity"": ""sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg="",
+      ""optional"": true
+    },
+    ""aws4"": {
+      ""version"": ""1.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz"",
+      ""integrity"": ""sha1-g+9cqGCysy5KDe7e6MdxudtXRx4="",
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""dev"": true,
-      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==""
+    ""bcrypt-pbkdf"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz"",
+      ""integrity"": ""sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40="",
+      ""optional"": true,
+      ""requires"": {
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    },
+    ""boolbase"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz"",
+      ""integrity"": ""sha1-aN/1++YMUes3cl6p4+0xDcwed24=""
+    },
+    ""boom"": {
+      ""version"": ""4.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/boom/-/boom-4.3.1.tgz"",
+      ""integrity"": ""sha1-T4owBctKfjiJ90kDD9JbluAdLjE="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    ""caseless"": {
+      ""version"": ""0.12.0"",
+      ""resolved"": ""https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz"",
+      ""integrity"": ""sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""version"": ""6.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-6.0.0.tgz"",
-      ""integrity"": ""sha1-GgKkM6byTa+sY7nJb6FoTbGqjaY="",
+      ""version"": ""7.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/chai-as-promised/-/chai-as-promised-7.1.1.tgz"",
+      ""integrity"": ""sha512-azL6xMoi+uxu6z4rhWQ1jbdUhOMhis2PvscD/xjLqNMkv3BPPp2JyyuTHOrf9BOosGpNQ11v6BKv/g57RXbiaA=="",
-      ""dev"": true,
-      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII="",
-      ""dev"": true
+      ""integrity"": ""sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=""
+    },
+    ""cheerio"": {
+      ""version"": ""0.22.0"",
+      ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.22.0.tgz"",
+      ""integrity"": ""sha1-qbqoYKP5tZWmuBsahocxIe06Jp4="",
+      ""requires"": {
+        ""css-select"": ""1.2.0"",
+        ""dom-serializer"": ""0.1.0"",
+        ""entities"": ""1.1.1"",
+        ""htmlparser2"": ""3.9.2"",
+        ""lodash.assignin"": ""4.2.0"",
+        ""lodash.bind"": ""4.2.1"",
+        ""lodash.defaults"": ""4.2.0"",
+        ""lodash.filter"": ""4.6.0"",
+        ""lodash.flatten"": ""4.4.0"",
+        ""lodash.foreach"": ""4.5.0"",
+        ""lodash.map"": ""4.6.0"",
+        ""lodash.merge"": ""4.6.1"",
+        ""lodash.pick"": ""4.4.0"",
+        ""lodash.reduce"": ""4.6.0"",
+        ""lodash.reject"": ""4.6.0"",
+        ""lodash.some"": ""4.6.0""
+      }
-      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=""
+    ""color-logger"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/color-logger/-/color-logger-0.0.3.tgz"",
+      ""integrity"": ""sha1-2bIt0dlz4Waxi/MT+fSBu6TfIBg=""
+    },
+      }
+    },
+    ""combined-stream"": {
+      ""version"": ""1.0.6"",
+      ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.6.tgz"",
+      ""integrity"": ""sha1-cj599ugBrFYTETp+RFqbactjKBg="",
+      ""requires"": {
+        ""delayed-stream"": ""1.0.0""
+        ""JSONStream"": ""1.3.1"",
-        ""JSONStream"": ""1.3.1"",
+            ""JSONStream"": ""1.3.1"",
-            ""JSONStream"": ""1.3.1"",
-      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY="",
-      ""dev"": true
+      ""integrity"": ""sha1-VpwFCRi+ZIazg3VSAorgRmtxcIY=""
-      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="",
-      ""dev"": true
+      ""integrity"": ""sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=""
+    ""cryptiles"": {
+      ""version"": ""3.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz"",
+      ""integrity"": ""sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""5.2.0""
+      },
+      ""dependencies"": {
+        ""boom"": {
+          ""version"": ""5.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/boom/-/boom-5.2.0.tgz"",
+          ""integrity"": ""sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw=="",
+          ""optional"": true,
+          ""requires"": {
+            ""hoek"": ""4.2.1""
+          }
+        }
+      }
+    },
+    ""css-select"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz"",
+      ""integrity"": ""sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0"",
+        ""css-what"": ""2.1.0"",
+        ""domutils"": ""1.5.1"",
+        ""nth-check"": ""1.0.1""
+      }
+    },
+    ""css-what"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/css-what/-/css-what-2.1.0.tgz"",
+      ""integrity"": ""sha1-lGfQMsOM+u+58teVASUwYvh/ob0=""
+    },
+    ""cssom"": {
+      ""version"": ""0.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/cssom/-/cssom-0.3.2.tgz"",
+      ""integrity"": ""sha1-uANhcMefB6kP8vFuIihAJ6JDhIs=""
+    },
+    ""cssstyle"": {
+      ""version"": ""0.2.37"",
+      ""resolved"": ""https://registry.npmjs.org/cssstyle/-/cssstyle-0.2.37.tgz"",
+      ""integrity"": ""sha1-VBCXI0yyUTyDzu06zdwn/yeYfVQ="",
+      ""optional"": true,
+      ""requires"": {
+        ""cssom"": ""0.3.2""
+      }
+    },
+    ""dashdash"": {
+      ""version"": ""1.14.1"",
+      ""resolved"": ""https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz"",
+      ""integrity"": ""sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
+    },
-      ""dev"": true,
-      ""dev"": true,
-          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U="",
-          ""dev"": true
+          ""integrity"": ""sha1-RtDMhVOrt7E6NSsNbeov1Y8tm1U=""
-      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=""
+    ""delayed-stream"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz"",
+      ""integrity"": ""sha1-3zrhmayt+31ECqrgsp4icrJOxhk=""
+    },
-      ""dev"": true,
-      ""version"": ""1.2.2"",
-      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-1.2.2.tgz"",
-      ""integrity"": ""sha1-eEleYZY19/5EIZqkyDeEm/GDFC4="",
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/dirty-chai/-/dirty-chai-2.0.1.tgz"",
+      ""integrity"": ""sha512-ys79pWKvDMowIDEPC6Fig8d5THiC0DJ2gmTeGzVAoEH18J8OzLud0Jh7I9IWg3NSk8x2UocznUuFmfHCXYZx9w=="",
+    ""dom-serializer"": {
+      ""version"": ""0.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.1.0.tgz"",
+      ""integrity"": ""sha1-BzxpdUbOB4DOI75KKOKT5AvDDII="",
+      ""requires"": {
+        ""domelementtype"": ""1.1.3"",
+        ""entities"": ""1.1.1""
+      },
+      ""dependencies"": {
+        ""domelementtype"": {
+          ""version"": ""1.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz"",
+          ""integrity"": ""sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=""
+        }
+      }
+    },
+    ""domelementtype"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.0.tgz"",
+      ""integrity"": ""sha1-sXrtguirWeUt2cGbF1bg/BhyBMI=""
+    },
+    ""domhandler"": {
+      ""version"": ""2.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz"",
+      ""integrity"": ""sha1-iS5HAAqZvlW783dP/qBWHYh5wlk="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    ""domutils"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/domutils/-/domutils-1.5.1.tgz"",
+      ""integrity"": ""sha1-3NhIiib1Y9YQeeSMn3t+Mjc2gs8="",
+      ""requires"": {
+        ""dom-serializer"": ""0.1.0"",
+        ""domelementtype"": ""1.3.0""
+      }
+    },
+    },
+    ""ecc-jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU="",
+      ""optional"": true,
+      ""requires"": {
+        ""jsbn"": ""0.1.1""
+      }
+    },
+    ""entities"": {
+      ""version"": ""1.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.1.1.tgz"",
+      ""integrity"": ""sha1-blwtClYhtdra7O+AuQ7ftc13cvA=""
+    ""escape-html"": {
+      ""version"": ""1.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz"",
+      ""integrity"": ""sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=""
+    },
-      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=""
+    },
+    ""escodegen"": {
+      ""version"": ""1.9.1"",
+      ""resolved"": ""https://registry.npmjs.org/escodegen/-/escodegen-1.9.1.tgz"",
+      ""integrity"": ""sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q=="",
+      ""optional"": true,
+      ""requires"": {
+        ""esprima"": ""3.1.3"",
+        ""estraverse"": ""4.2.0"",
+        ""esutils"": ""2.0.2"",
+        ""optionator"": ""0.8.2"",
+        ""source-map"": ""0.6.1""
+      },
+      ""dependencies"": {
+        ""esprima"": {
+          ""version"": ""3.1.3"",
+          ""resolved"": ""https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz"",
+          ""integrity"": ""sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM="",
+          ""optional"": true
+        },
+        ""source-map"": {
+          ""version"": ""0.6.1"",
+          ""resolved"": ""https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz"",
+          ""integrity"": ""sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="",
+          ""optional"": true
+        }
+      }
+    },
+    ""esdoc"": {
+      ""version"": ""1.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc/-/esdoc-1.0.4.tgz"",
+      ""integrity"": ""sha512-Hy5sg0Lec4EDHVem3gFqNi+o6ZptivmaiHYacZhmn3hzLnHSMg2C1L0XTsDIcb4Cxd9aUnWdLAu6a6ghH/LLug=="",
+      ""requires"": {
+        ""babel-generator"": ""6.26.0"",
+        ""babel-traverse"": ""6.26.0"",
+        ""babylon"": ""6.18.0"",
+        ""cheerio"": ""0.22.0"",
+        ""color-logger"": ""0.0.3"",
+        ""escape-html"": ""1.0.3"",
+        ""fs-extra"": ""1.0.0"",
+        ""ice-cap"": ""0.0.4"",
+        ""marked"": ""0.3.6"",
+        ""minimist"": ""1.2.0"",
+        ""taffydb"": ""2.7.2""
+      },
+      ""dependencies"": {
+        ""fs-extra"": {
+          ""version"": ""1.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz"",
+          ""integrity"": ""sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11"",
+            ""jsonfile"": ""2.4.0"",
+            ""klaw"": ""1.3.1""
+          }
+        },
+        ""jsonfile"": {
+          ""version"": ""2.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz"",
+          ""integrity"": ""sha1-NzaitCi4e72gzIO1P6PWM6NcKug="",
+          ""requires"": {
+            ""graceful-fs"": ""4.1.11""
+          }
+        },
+        ""minimist"": {
+          ""version"": ""1.2.0"",
+          ""resolved"": ""https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz"",
+          ""integrity"": ""sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=""
+        }
+      }
+    },
+    ""esdoc-coverage-plugin"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-coverage-plugin/-/esdoc-coverage-plugin-1.1.0.tgz"",
+      ""integrity"": ""sha1-OGmGnNf4eJH5cmJXh2laKZrs5Fw=""
+    },
+    ""esdoc-type-inference-plugin"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/esdoc-type-inference-plugin/-/esdoc-type-inference-plugin-1.0.1.tgz"",
+      ""integrity"": ""sha1-qrynhkH5m9Hs5vMC8EW71jG+cvU=""
-      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM="",
-      ""dev"": true
+      ""integrity"": ""sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=""
-      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="",
-      ""dev"": true
+      ""integrity"": ""sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=""
+    ""extend"": {
+      ""version"": ""3.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/extend/-/extend-3.0.1.tgz"",
+      ""integrity"": ""sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ="",
+      ""optional"": true
+    },
+    ""extsprintf"": {
+      ""version"": ""1.3.0"",
+      ""resolved"": ""https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz"",
+      ""integrity"": ""sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=""
+    },
+    ""fast-deep-equal"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz"",
+      ""integrity"": ""sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ="",
+      ""optional"": true
+    },
+    ""fast-json-stable-stringify"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz"",
+      ""integrity"": ""sha1-1RQsDK7msRifh9OnYREGT4bIu/I="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc="",
-      ""dev"": true
+      ""integrity"": ""sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=""
+      }
+    },
+    ""forever-agent"": {
+      ""version"": ""0.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz"",
+      ""integrity"": ""sha1-+8cfDEGt6zf5bFd60e1C2P2sypE="",
+      ""optional"": true
+    },
+    ""form-data"": {
+      ""version"": ""2.3.2"",
+      ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-2.3.2.tgz"",
+      ""integrity"": ""sha1-SXBJi+YEwgwAXU9cI67NIda0kJk="",
+      ""optional"": true,
+      ""requires"": {
+        ""asynckit"": ""0.4.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""mime-types"": ""2.1.18""
-        ""string_decoder"": {
-          ""version"": ""1.0.1"",
-          ""bundled"": true,
-          ""dev"": true,
-          ""requires"": {
-            ""safe-buffer"": ""5.0.1""
-          }
-        },
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""1.0.1"",
+          ""bundled"": true,
+          ""dev"": true,
+          ""requires"": {
+            ""safe-buffer"": ""5.0.1""
-      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE="",
-      ""dev"": true
+      ""integrity"": ""sha1-6td0q+5y4gQJQzoGY2YCPdaIekE=""
+    },
+    ""getpass"": {
+      ""version"": ""0.1.7"",
+      ""resolved"": ""https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz"",
+      ""integrity"": ""sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0""
+      }
-      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="",
-      ""dev"": true
+      ""integrity"": ""sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==""
-      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=""
+    ""har-schema"": {
+      ""version"": ""2.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz"",
+      ""integrity"": ""sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI="",
+      ""optional"": true
+    },
+    ""har-validator"": {
+      ""version"": ""5.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz"",
+      ""integrity"": ""sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0="",
+      ""optional"": true,
+      ""requires"": {
+        ""ajv"": ""5.5.2"",
+        ""har-schema"": ""2.0.0""
+      },
+      ""dependencies"": {
+        ""ajv"": {
+          ""version"": ""5.5.2"",
+          ""resolved"": ""https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz"",
+          ""integrity"": ""sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU="",
+          ""optional"": true,
+          ""requires"": {
+            ""co"": ""4.6.0"",
+            ""fast-deep-equal"": ""1.1.0"",
+            ""fast-json-stable-stringify"": ""2.0.0"",
+            ""json-schema-traverse"": ""0.3.1""
+          }
+        }
+      }
+    },
-      ""dev"": true,
+    ""hawk"": {
+      ""version"": ""6.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz"",
+      ""integrity"": ""sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ=="",
+      ""optional"": true,
+      ""requires"": {
+        ""boom"": ""4.3.1"",
+        ""cryptiles"": ""3.1.2"",
+        ""hoek"": ""4.2.1"",
+        ""sntp"": ""2.1.0""
+      }
+    },
+    ""hoek"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz"",
+      ""integrity"": ""sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==""
+    },
+    ""htmlparser2"": {
+      ""version"": ""3.9.2"",
+      ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.9.2.tgz"",
+      ""integrity"": ""sha1-G9+HrMoPP55T+k/M6w9LTLsAszg="",
+      ""requires"": {
+        ""domelementtype"": ""1.3.0"",
+        ""domhandler"": ""2.4.1"",
+        ""domutils"": ""1.5.1"",
+        ""entities"": ""1.1.1"",
+        ""inherits"": ""2.0.3"",
+        ""readable-stream"": ""2.3.3""
+      }
+    },
+    ""http-signature"": {
+      ""version"": ""1.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz"",
+      ""integrity"": ""sha1-muzZJRFHcvPZW2WmCruPfBj7rOE="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""jsprim"": ""1.4.1"",
+        ""sshpk"": ""1.13.1""
+      }
+    },
+    ""ice-cap"": {
+      ""version"": ""0.0.4"",
+      ""resolved"": ""https://registry.npmjs.org/ice-cap/-/ice-cap-0.0.4.tgz"",
+      ""integrity"": ""sha1-im0xq0ysjUtW3k+pRt8zUlYbbhg="",
+      ""requires"": {
+        ""cheerio"": ""0.20.0"",
+        ""color-logger"": ""0.0.3""
+      },
+      ""dependencies"": {
+        ""cheerio"": {
+          ""version"": ""0.20.0"",
+          ""resolved"": ""https://registry.npmjs.org/cheerio/-/cheerio-0.20.0.tgz"",
+          ""integrity"": ""sha1-XHEPK6uVZTJyhCugHG6mGzVF7DU="",
+          ""requires"": {
+            ""css-select"": ""1.2.0"",
+            ""dom-serializer"": ""0.1.0"",
+            ""entities"": ""1.1.1"",
+            ""htmlparser2"": ""3.8.3"",
+            ""jsdom"": ""7.2.2"",
+            ""lodash"": ""4.17.4""
+          }
+        },
+        ""domhandler"": {
+          ""version"": ""2.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/domhandler/-/domhandler-2.3.0.tgz"",
+          ""integrity"": ""sha1-LeWaCCLVAn+r/28DLCsloqir5zg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0""
+          }
+        },
+        ""htmlparser2"": {
+          ""version"": ""3.8.3"",
+          ""resolved"": ""https://registry.npmjs.org/htmlparser2/-/htmlparser2-3.8.3.tgz"",
+          ""integrity"": ""sha1-mWwosZFRaovoZQGn15dX5ccMEGg="",
+          ""requires"": {
+            ""domelementtype"": ""1.3.0"",
+            ""domhandler"": ""2.3.0"",
+            ""domutils"": ""1.5.1"",
+            ""entities"": ""1.0.0"",
+            ""readable-stream"": ""1.1.14""
+          },
+          ""dependencies"": {
+            ""entities"": {
+              ""version"": ""1.0.0"",
+              ""resolved"": ""https://registry.npmjs.org/entities/-/entities-1.0.0.tgz"",
+              ""integrity"": ""sha1-sph6o4ITR/zeZCsk/fyeT7cSvyY=""
+            }
+          }
+        },
+        ""isarray"": {
+          ""version"": ""0.0.1"",
+          ""resolved"": ""https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz"",
+          ""integrity"": ""sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=""
+        },
+        ""readable-stream"": {
+          ""version"": ""1.1.14"",
+          ""resolved"": ""https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz"",
+          ""integrity"": ""sha1-fPTFTvZI44EwhMY23SB54WbAgdk="",
+          ""requires"": {
+            ""core-util-is"": ""1.0.2"",
+            ""inherits"": ""2.0.3"",
+            ""isarray"": ""0.0.1"",
+            ""string_decoder"": ""0.10.31""
+          }
+        },
+        ""string_decoder"": {
+          ""version"": ""0.10.31"",
+          ""resolved"": ""https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz"",
+          ""integrity"": ""sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=""
+        }
+      }
+    },
-      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="",
-      ""dev"": true
+      ""integrity"": ""sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=""
-      ""dev"": true,
-      ""dev"": true,
+    ""is-typedarray"": {
+      ""version"": ""1.0.0"",
+      ""resolved"": ""https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz"",
+      ""integrity"": ""sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="",
-      ""dev"": true
+      ""integrity"": ""sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=""
+    },
+    ""isstream"": {
+      ""version"": ""0.1.2"",
+      ""resolved"": ""https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz"",
+      ""integrity"": ""sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo="",
+      ""optional"": true
-      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls="",
-      ""dev"": true
+      ""integrity"": ""sha1-mGbfOVECEw449/mWvOtlRDIJwls=""
+    ""jsbn"": {
+      ""version"": ""0.1.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz"",
+      ""integrity"": ""sha1-peZUwuWi3rXyAdls77yoDA7y9RM="",
+      ""optional"": true
+    },
+    ""jsdom"": {
+      ""version"": ""7.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/jsdom/-/jsdom-7.2.2.tgz"",
+      ""integrity"": ""sha1-QLQCdwwr2iNGkJa+6Rq2deOx/G4="",
+      ""optional"": true,
+      ""requires"": {
+        ""abab"": ""1.0.4"",
+        ""acorn"": ""2.7.0"",
+        ""acorn-globals"": ""1.0.9"",
+        ""cssom"": ""0.3.2"",
+        ""cssstyle"": ""0.2.37"",
+        ""escodegen"": ""1.9.1"",
+        ""nwmatcher"": ""1.4.3"",
+        ""parse5"": ""1.5.1"",
+        ""request"": ""2.83.0"",
+        ""sax"": ""1.2.4"",
+        ""symbol-tree"": ""3.2.2"",
+        ""tough-cookie"": ""2.3.4"",
+        ""webidl-conversions"": ""2.0.1"",
+        ""whatwg-url-compat"": ""0.6.5"",
+        ""xml-name-validator"": ""2.0.1""
+      },
+      ""dependencies"": {
+        ""acorn"": {
+          ""version"": ""2.7.0"",
+          ""resolved"": ""https://registry.npmjs.org/acorn/-/acorn-2.7.0.tgz"",
+          ""integrity"": ""sha1-q259nYhqrKiwhbwzEreaGYQz8Oc="",
+          ""optional"": true
+        }
+      }
+    },
-      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s="",
-      ""dev"": true
+      ""integrity"": ""sha1-RsP+yMGJKxKwgz25vHYiF226s0s=""
+    },
+    ""json-schema"": {
+      ""version"": ""0.2.3"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz"",
+      ""integrity"": ""sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM="",
+      ""optional"": true
+    },
+    ""json-schema-traverse"": {
+      ""version"": ""0.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz"",
+      ""integrity"": ""sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A="",
+      ""optional"": true
-      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus="",
-      ""dev"": true
+      ""integrity"": ""sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=""
-    ""JSONStream"": {
-      ""version"": ""1.3.1"",
-      ""resolved"": ""https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.1.tgz"",
-      ""integrity"": ""sha1-cH92HgHa6eFvG8+TcDt4xwlmV5o="",
-      ""dev"": true,
-      ""requires"": {
-        ""jsonparse"": ""1.3.1"",
-        ""through"": ""2.3.8""
+    ""jsprim"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz"",
+      ""integrity"": ""sha1-MT5mvB5cwG5Di8G3SZwuXFastqI="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""extsprintf"": ""1.3.0"",
+        ""json-schema"": ""0.2.3"",
+        ""verror"": ""1.10.0""
+      }
+    },
+    ""klaw"": {
+      ""version"": ""1.3.1"",
+      ""resolved"": ""https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz"",
+      ""integrity"": ""sha1-QIhDO0azsbolnXh4XY6W9zugJDk="",
+      ""requires"": {
+        ""graceful-fs"": ""4.1.11""
-      ""dev"": true,
-      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="",
-      ""dev"": true
+      ""integrity"": ""sha1-eCA6TRwyiuHYbcpkYONptX9AVa4=""
+    ""lodash.assignin"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz"",
+      ""integrity"": ""sha1-uo31+4QesKPoBEIysOJjqNxqKKI=""
+    },
+    ""lodash.bind"": {
+      ""version"": ""4.2.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.bind/-/lodash.bind-4.2.1.tgz"",
+      ""integrity"": ""sha1-euMBfpOWIqwxt9fX3LGzTbFpDTU=""
+    },
+    ""lodash.defaults"": {
+      ""version"": ""4.2.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"",
+      ""integrity"": ""sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw=""
+    },
+    ""lodash.filter"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.filter/-/lodash.filter-4.6.0.tgz"",
+      ""integrity"": ""sha1-ZosdSYFgOuHMWm+nYBQ+SAtMSs4=""
+    },
+    ""lodash.flatten"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz"",
+      ""integrity"": ""sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8=""
+    },
+    ""lodash.foreach"": {
+      ""version"": ""4.5.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-4.5.0.tgz"",
+      ""integrity"": ""sha1-Gmo16s5AEoDH8G3d7DUWWrJ+PlM=""
+    },
+    ""lodash.map"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.map/-/lodash.map-4.6.0.tgz"",
+      ""integrity"": ""sha1-dx7Hg540c9nEzeKLGTlMNWL09tM=""
+    },
+    ""lodash.merge"": {
+      ""version"": ""4.6.1"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.1.tgz"",
+      ""integrity"": ""sha512-AOYza4+Hf5z1/0Hztxpm2/xiPZgi/cjMqdnKTUWTBSKchJlxXXuUSxCCl8rJlf4g6yww/j6mA8nC8Hw/EZWxKQ==""
+    },
+    ""lodash.pick"": {
+      ""version"": ""4.4.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.pick/-/lodash.pick-4.4.0.tgz"",
+      ""integrity"": ""sha1-UvBWEP/53tQiYRRB7R/BI6AwAbM=""
+    },
+    ""lodash.reduce"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reduce/-/lodash.reduce-4.6.0.tgz"",
+      ""integrity"": ""sha1-8atrg5KZrUj3hKu/R2WW8DuRTTs=""
+    },
+    ""lodash.reject"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.reject/-/lodash.reject-4.6.0.tgz"",
+      ""integrity"": ""sha1-gNZJLcFHCGS79YNTO2UfQqn1JBU=""
+    },
+    ""lodash.some"": {
+      ""version"": ""4.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/lodash.some/-/lodash.some-4.6.0.tgz"",
+      ""integrity"": ""sha1-G7nzFO9ri63tE7VJFpsqlF62jk0=""
+    },
-      ""dev"": true,
+    },
+    ""marked"": {
+      ""version"": ""0.3.6"",
+      ""resolved"": ""https://registry.npmjs.org/marked/-/marked-0.3.6.tgz"",
+      ""integrity"": ""sha1-ssbGGPzOzk74bE/Gy4p8v1rtqNc=""
+      }
+    },
+    ""mime-db"": {
+      ""version"": ""1.33.0"",
+      ""resolved"": ""https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz"",
+      ""integrity"": ""sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==""
+    },
+    ""mime-types"": {
+      ""version"": ""2.1.18"",
+      ""resolved"": ""https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz"",
+      ""integrity"": ""sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ=="",
+      ""requires"": {
+        ""mime-db"": ""1.33.0""
-      ""version"": ""2.18.1"",
-      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.18.1.tgz"",
-      ""integrity"": ""sha1-w2GT3Tzhwu7SrbfIAtu8d6gbHA8="",
+      ""version"": ""2.21.0"",
+      ""resolved"": ""https://registry.npmjs.org/moment/-/moment-2.21.0.tgz"",
+      ""integrity"": ""sha512-TCZ36BjURTeFTM/CwRcViQlfkMvL1/vFISuNLO5GkcVm1+QHfbSiNqZuWeMFjj1/3+uAjXswgRk30j1kkLYJBQ=="",
-      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="",
-      ""dev"": true
+      ""integrity"": ""sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=""
+    ""nth-check"": {
+      ""version"": ""1.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/nth-check/-/nth-check-1.0.1.tgz"",
+      ""integrity"": ""sha1-mSms32KPwsQQmN6rgqxYDPFJquQ="",
+      ""requires"": {
+        ""boolbase"": ""1.0.0""
+      }
+    },
-      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="",
-      ""dev"": true
+      ""integrity"": ""sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=""
+    },
+    ""nwmatcher"": {
+      ""version"": ""1.4.3"",
+      ""resolved"": ""https://registry.npmjs.org/nwmatcher/-/nwmatcher-1.4.3.tgz"",
+      ""integrity"": ""sha512-IKdSTiDWCarf2JTS5e9e2+5tPZGdkRJ79XjYV0pzK8Q9BpsFyBq1RGKxzs7Q8UBushGw7m6TzVKz6fcY99iSWw=="",
+      ""optional"": true
+    },
+    ""oauth-sign"": {
+      ""version"": ""0.8.2"",
+      ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz"",
+      ""integrity"": ""sha1-Rqarfwrq2N6unsBWV4C31O/rnUM="",
+      ""optional"": true
-      ""dev"": true,
+    ""parse5"": {
+      ""version"": ""1.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/parse5/-/parse5-1.5.1.tgz"",
+      ""integrity"": ""sha1-m387DeMr543CQBsXVzzK8Pb1nZQ="",
+      ""optional"": true
+    },
-      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA="",
-      ""dev"": true
+      ""integrity"": ""sha1-uULm1L3mUwBe9rcTYd74cn0GReA=""
+    },
+    ""performance-now"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz"",
+      ""integrity"": ""sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns="",
+      ""optional"": true
-      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ="",
-      ""dev"": true
+      ""integrity"": ""sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=""
-      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M="",
-      ""dev"": true
+      ""integrity"": ""sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=""
+    ""punycode"": {
+      ""version"": ""1.4.1"",
+      ""resolved"": ""https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz"",
+      ""integrity"": ""sha1-wNWmOycYgArY4esPpSachN1BhF4=""
+    },
+    },
+    ""qs"": {
+      ""version"": ""6.5.1"",
+      ""resolved"": ""https://registry.npmjs.org/qs/-/qs-6.5.1.tgz"",
+      ""integrity"": ""sha512-eRzhrN1WSINYCDCbrz796z37LOe3m5tmW7RQf6oBntukAG1nmovJvhnwHHRMAfeoItc1m2Hk02WER2aQ/iqs+A=="",
+      ""optional"": true
-      ""dev"": true,
-      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="",
-      ""dev"": true
+      ""integrity"": ""sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A==""
-      ""dev"": true,
+      }
+    },
+    ""request"": {
+      ""version"": ""2.83.0"",
+      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.83.0.tgz"",
+      ""integrity"": ""sha512-lR3gD69osqm6EYLk9wB/G1W/laGWjzH90t1vEa2xuxHD5KUrSzp9pUSfTm+YC5Nxt2T8nMPEvKlhbQayU7bgFw=="",
+      ""optional"": true,
+      ""requires"": {
+        ""aws-sign2"": ""0.7.0"",
+        ""aws4"": ""1.6.0"",
+        ""caseless"": ""0.12.0"",
+        ""combined-stream"": ""1.0.6"",
+        ""extend"": ""3.0.1"",
+        ""forever-agent"": ""0.6.1"",
+        ""form-data"": ""2.3.2"",
+        ""har-validator"": ""5.0.3"",
+        ""hawk"": ""6.0.2"",
+        ""http-signature"": ""1.2.0"",
+        ""is-typedarray"": ""1.0.0"",
+        ""isstream"": ""0.1.2"",
+        ""json-stringify-safe"": ""5.0.1"",
+        ""mime-types"": ""2.1.18"",
+        ""oauth-sign"": ""0.8.2"",
+        ""performance-now"": ""2.1.0"",
+        ""qs"": ""6.5.1"",
+        ""safe-buffer"": ""5.1.1"",
+        ""stringstream"": ""0.0.5"",
+        ""tough-cookie"": ""2.3.4"",
+        ""tunnel-agent"": ""0.6.0"",
+        ""uuid"": ""3.2.1""
+      },
+      ""dependencies"": {
+        ""uuid"": {
+          ""version"": ""3.2.1"",
+          ""resolved"": ""https://registry.npmjs.org/uuid/-/uuid-3.2.1.tgz"",
+          ""integrity"": ""sha512-jZnMwlb9Iku/O3smGWvZhauCf6cvvpKi4BKRiliS3cxnI+Gz9j5MEpTz2UFuXiKPJocb7gnsLHwiS05ige5BEA=="",
+          ""optional"": true
+        }
-      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg=="",
-      ""dev"": true
+      ""integrity"": ""sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==""
+    },
+    ""sax"": {
+      ""version"": ""1.2.4"",
+      ""resolved"": ""https://registry.npmjs.org/sax/-/sax-1.2.4.tgz"",
+      ""integrity"": ""sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw=="",
+      ""optional"": true
+    ""sntp"": {
+      ""version"": ""2.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz"",
+      ""integrity"": ""sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg=="",
+      ""optional"": true,
+      ""requires"": {
+        ""hoek"": ""4.2.1""
+      }
+    },
-      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="",
-      ""dev"": true
+      ""integrity"": ""sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=""
+    ""sshpk"": {
+      ""version"": ""1.13.1"",
+      ""resolved"": ""https://registry.npmjs.org/sshpk/-/sshpk-1.13.1.tgz"",
+      ""integrity"": ""sha1-US322mKHFEMW3EwY/hzx2UBzm+M="",
+      ""optional"": true,
+      ""requires"": {
+        ""asn1"": ""0.2.3"",
+        ""assert-plus"": ""1.0.0"",
+        ""bcrypt-pbkdf"": ""1.0.1"",
+        ""dashdash"": ""1.14.1"",
+        ""ecc-jsbn"": ""0.1.1"",
+        ""getpass"": ""0.1.7"",
+        ""jsbn"": ""0.1.1"",
+        ""tweetnacl"": ""0.14.5""
+      }
+    },
+    ""string-width"": {
+      ""version"": ""1.0.2"",
+      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
+      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
+      ""dev"": true,
+      ""requires"": {
+        ""code-point-at"": ""1.1.0"",
+        ""is-fullwidth-code-point"": ""1.0.0"",
+        ""strip-ansi"": ""3.0.1""
+      }
+    },
-      ""dev"": true,
-    ""string-width"": {
-      ""version"": ""1.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz"",
-      ""integrity"": ""sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M="",
-      ""dev"": true,
-      ""requires"": {
-        ""code-point-at"": ""1.1.0"",
-        ""is-fullwidth-code-point"": ""1.0.0"",
-        ""strip-ansi"": ""3.0.1""
-      }
+    ""stringstream"": {
+      ""version"": ""0.0.5"",
+      ""resolved"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz"",
+      ""integrity"": ""sha1-TkhM1N5aC7vuGORjB3EKioFiGHg="",
+      ""optional"": true
-      ""dev"": true,
-        ""moment"": ""2.18.1"",
+        ""moment"": ""2.21.0"",
-      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="",
-      ""dev"": true
+      ""integrity"": ""sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=""
+    },
+    ""symbol-tree"": {
+      ""version"": ""3.2.2"",
+      ""resolved"": ""https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.2.tgz"",
+      ""integrity"": ""sha1-rifbOPZgp64uHDt9G8KQgZuFGeY="",
+      ""optional"": true
+    },
+    ""taffydb"": {
+      ""version"": ""2.7.2"",
+      ""resolved"": ""https://registry.npmjs.org/taffydb/-/taffydb-2.7.2.tgz"",
+      ""integrity"": ""sha1-e/gQalwaSCUbPjvAoOFzJIn9Dcg=""
-      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="",
-      ""dev"": true
+      ""integrity"": ""sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=""
+    },
+    ""tough-cookie"": {
+      ""version"": ""2.3.4"",
+      ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz"",
+      ""integrity"": ""sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA=="",
+      ""requires"": {
+        ""punycode"": ""1.4.1""
+      }
+    },
+    ""tr46"": {
+      ""version"": ""0.0.3"",
+      ""resolved"": ""https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz"",
+      ""integrity"": ""sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="",
+      ""optional"": true
-      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="",
-      ""dev"": true
+      ""integrity"": ""sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=""
+    ""tunnel-agent"": {
+      ""version"": ""0.6.0"",
+      ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz"",
+      ""integrity"": ""sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0="",
+      ""optional"": true,
+      ""requires"": {
+        ""safe-buffer"": ""5.1.1""
+      }
+    },
+    ""tweetnacl"": {
+      ""version"": ""0.14.5"",
+      ""resolved"": ""https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz"",
+      ""integrity"": ""sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q="",
+      ""optional"": true
+    },
-      ""dev"": true,
-      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo="",
-      ""dev"": true
+      ""integrity"": ""sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=""
-      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="",
-      ""dev"": true
+      ""integrity"": ""sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=""
+    ""verror"": {
+      ""version"": ""1.10.0"",
+      ""resolved"": ""https://registry.npmjs.org/verror/-/verror-1.10.0.tgz"",
+      ""integrity"": ""sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA="",
+      ""optional"": true,
+      ""requires"": {
+        ""assert-plus"": ""1.0.0"",
+        ""core-util-is"": ""1.0.2"",
+        ""extsprintf"": ""1.3.0""
+      }
+    },
+    ""webidl-conversions"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-2.0.1.tgz"",
+      ""integrity"": ""sha1-O/glj30xjHRDw28uFpQCoaZwNQY="",
+      ""optional"": true
+    },
+    ""whatwg-url-compat"": {
+      ""version"": ""0.6.5"",
+      ""resolved"": ""https://registry.npmjs.org/whatwg-url-compat/-/whatwg-url-compat-0.6.5.tgz"",
+      ""integrity"": ""sha1-AImBEa9om7CXVBzVpFymyHmERb8="",
+      ""optional"": true,
+      ""requires"": {
+        ""tr46"": ""0.0.3""
+      }
+    },
-      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="",
-      ""dev"": true
+      ""integrity"": ""sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=""
+    ""xml-name-validator"": {
+      ""version"": ""2.0.1"",
+      ""resolved"": ""https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-2.0.1.tgz"",
+      ""integrity"": ""sha1-TYuPHszTQZqjYgYb7O9RXh5VljU="",
+      ""optional"": true
+    },"
sendgrid_sendgrid-nodejs,e465674eadc877e9d6309ecd83ba1f31ef28242b,"Merge pull request #666 from ctrimm/bug-moment-version-fix  Bumped the moment, chai-as-promised, and dirty-chai version in package.json",package.json,,"-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""moment"": ""^2.19.3"",","-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""moment"": ""^2.19.3"","
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,package.json,"-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""moment"": ""^2.19.3"",","-    ""eslint"": ""^3.19.0"",
+    ""eslint"": ""^4.19.1"",","-    ""chai-as-promised"": ""^6.0.0"",
-    ""dirty-chai"": ""^1.2.2"",
-    ""eslint"": ""^3.19.0"",
+    ""chai-as-promised"": ""^7.1.1"",
+    ""dirty-chai"": ""^2.0.1"",
+    ""eslint"": ""^4.19.1"",
+    ""moment"": ""^2.19.3"","
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/classes/mail.js,,"+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);","+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/classes/mail.spec.js,,"+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });","+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });","-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,6f0996ebd794fb1bc184b80b1eae5ed5268ff652,Merge branch 'master' into bug-moment-version-fix,packages/helpers/package.json,,"-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,3eb24964a0003a40c818eae578d35010e1fa6169,Merge pull request #687 from classcraft/master  Exclude sections from camel/snake case conversion in Mail helper class,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);","-    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,package.json,,"-    ""eslint"": ""^3.19.0"",
+    ""eslint"": ""^4.19.1"",","-    ""eslint"": ""^3.19.0"",
+    ""eslint"": ""^4.19.1"","
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/classes/mail.js,"-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers', 'sections']);
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers', 'sections']);","+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/classes/mail.spec.js,,"+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });","+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });","-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,aa1b1936bb69b8809db4c05baf938b47351b91a0,Merge branch 'master' into master,packages/helpers/package.json,,"-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,package.json,,"-    ""eslint"": ""^3.19.0"",
+    ""eslint"": ""^4.19.1"",","-    ""eslint"": ""^3.19.0"",
+    ""eslint"": ""^4.19.1"","
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/classes/mail.js,,"+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+    this.isDynamic = false;
+    this.dynamicTemplateData = null;
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,
-    this.setSubstitutions(substitutions);
-    this.setSubstitutionWrappers(substitutionWrappers);
+
+    if (this.isDynamic) {
+      this.setDynamicTemplateData(dynamicTemplateData)
+    } else {
+      this.setSubstitutions(substitutions);
+      this.setSubstitutionWrappers(substitutionWrappers);
+    }
-   * Set template ID
+   * Set template ID, also checks if the template is dynamic or legacy
+
+    if (templateId.indexOf('d-') === 0) {
+      this.isDynamic = true;
+    }
+
+    //We should either send substitutions or dynamicTemplateData
+    //depending on the templateId
+    if (this.isDynamic && personalization.substitutions) {
+      delete personalization.substitutions;
+    } else if (personalization.dynamicTemplateData) {
+      delete personalization.dynamicTemplateData;
+    }
+
-    //Apply substitutions and push to array
-    this.applySubstitutions(personalization);
+    //If this is dynamic, set dynamicTemplateData, or set substitutions
+    if (this.isDynamic) {
+      this.applyDynamicTemplateData(personalization);
+    } else {
+      this.applySubstitutions(personalization);
+    }
+
+    //Push personalization to array
+   * Helper which applies globally set dynamic_template_data to personalizations
+   */
+  applyDynamicTemplateData(personalization) {
+    if (personalization instanceof Personalization) {
+      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);
+    }
+  }
+
+  /**
+   * Set dynamicTemplateData
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-        !categories.every(cat => typeof cat === 'string')) {
+      !categories.every(cat => typeof cat === 'string')) {
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/classes/mail.spec.js,,"+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });","+  describe('#689', function() {
+
+    it('should detect dynamic template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(true);
+    });
+    it('should detect legacy template id', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+        }],
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.isDynamic).to.equal(false);
+    });
+    it('should ignore substitutions if templateId is dynamic', function() {
+      const mail = new Mail({
+        personalizations: [{
+          to: 'test@example.com',
+          headers: {
+            'test-header': 'test',
+          },
+          substitutions: {
+            test2: 'Test2',
+          },
+          dynamicTemplateData: {
+            test2: 'Testy 2',
+            test3: 'Testy 3',
+          },
+        }],
+        dynamicTemplateData: {
+          test1: 'Test 1',
+          test2: 'Test 2',
+        },
+        substitutions: {
+          test1: 'Test1',
+        },
+        from: {
+          email: 'test@example.com',
+        },
+        templateId: 'd-df80613cccc6441ea5cd7c95377bc1ef',
+        subject: 'test',
+        content: [{
+          type: 'text/plain',
+          value: 'test',
+        }],
+      });
+      expect(mail.substitutions).to.equal(null);
+      expect(mail.personalizations[0].substitutions).to.deep.equal({});
+
+      expect(mail.dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Test 2' });
+      expect(mail.personalizations[0].dynamicTemplateData).to.deep.equal({ test1: 'Test 1', test2: 'Testy 2', test3: 'Testy 3' });
+
+      expect(mail.toJSON()).to.deep.equal({
+        'content': [
+          {
+            'type': 'text/plain',
+            'value': 'test',
+          },
+        ],
+        'from': {
+          'email': 'test@example.com',
+        },
+        'personalizations': [
+          {
+            'dynamic_template_data': {
+              'test1': 'Test 1',
+              'test2': 'Testy 2',
+              'test3': 'Testy 3',
+            },
+            'headers': {
+              'test-header': 'test',
+            },
+            'to': [
+              {
+                'email': 'test@example.com',
+                'name': '',
+              },
+            ],
+          },
+        ],
+        'subject': 'test',
+        'template_id': 'd-df80613cccc6441ea5cd7c95377bc1ef',
+      });
+    });
+
+  });"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/classes/personalization.d.ts,,"-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**","-import {EmailData, EmailJSON} from ""./email-address"";
+import { EmailData, EmailJSON } from ""./email-address"";
-  to: EmailData|EmailData[],
-  cc?: EmailData|EmailData[],
-  bcc?: EmailData|EmailData[],
+  to: EmailData | EmailData[],
+  cc?: EmailData | EmailData[],
+  bcc?: EmailData | EmailData[],
+  dynamicTemplateData?: { [key: string]: string; };
-  to: EmailJSON|EmailJSON[];
+  to: EmailJSON | EmailJSON[];
+  dynamic_template_data?: { [key: string]: string; };
-  
+
-  setTo(to: EmailData|EmailData[]): void;
+  setTo(to: EmailData | EmailData[]): void;
-  setCc(cc: EmailData|EmailData[]): void;
+  setCc(cc: EmailData | EmailData[]): void;
-  setBcc(bcc: EmailData|EmailData[]): void;
+  setBcc(bcc: EmailData | EmailData[]): void;
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData: { [key: string]: string }): void;
+
+  /**"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/classes/personalization.js,,"+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);","+const merge = require('deepmerge');
+    this.dynamicTemplateData = {};
-    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
+    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
+    this.setDynamicTemplateData(dynamicTemplateData);
+   * Reverse merge dynamic template data, preserving existing ones
+   */
+  deepMergeDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined' || dynamicTemplateData === null) {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error(
+        'Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData'
+      );
+    }
+    this.dynamicTemplateData = merge(dynamicTemplateData, this.dynamicTemplateData);
+  }
+
+  /**
+   * Set dynamic template data
+   */
+  setDynamicTemplateData(dynamicTemplateData) {
+    if (typeof dynamicTemplateData === 'undefined') {
+      return;
+    }
+    if (typeof dynamicTemplateData !== 'object') {
+      throw new Error('Object expected for `dynamicTemplateData`');
+    }
+    this.dynamicTemplateData = dynamicTemplateData;
+  }
+
+  /**
-      substitutions, substitutionWrappers,
+      substitutions, substitutionWrappers, dynamicTemplateData,
-    if (Object.keys(substitutions).length > 0) {
+    if (substitutions && Object.keys(substitutions).length > 0) {
+    }
+
+    if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {
+      json.dynamicTemplateData = dynamicTemplateData;
-    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);
+    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/classes/personalization_specs/to-json.spec.js,,"-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });","-describe('Personalization', function() {
+describe('Personalization', function () {
-  beforeEach(function() {
+  beforeEach(function () {
-  describe('toJSON()', function() {
-    beforeEach(function() {
+  describe('toJSON()', function () {
+    beforeEach(function () {
-    it('should always have the to field', function() {
+    it('should always have the to field', function () {
-    it('should set the cc field', function() {
+    it('should set the cc field', function () {
-    it('should set the bcc field', function() {
+    it('should set the bcc field', function () {
-    it('should set the headers field', function() {
-      p.setHeaders({test: 'Test'});
+    it('should set the headers field', function () {
+      p.setHeaders({ test: 'Test' });
-    it('should set the custom_args field', function() {
-      p.setCustomArgs({test: 'Test'});
+    it('should set the custom_args field', function () {
+      p.setCustomArgs({ test: 'Test' });
-    it('should set the substitutions field', function() {
-      p.setSubstitutions({test: 'Test'});
+    it('should set the substitutions field', function () {
+      p.setSubstitutions({ test: 'Test' });
-    it('should apply wrappers to the substitutions', function() {
-      p.setSubstitutions({test: 'Test', otherTest2: 'Test2'});
+    it('should apply wrappers to the substitutions', function () {
+      p.setSubstitutions({ test: 'Test', otherTest2: 'Test2' });
-    it('should set the subject field', function() {
+    it('should set the dynamicTemplateData field', function () {
+      p.setDynamicTemplateData({ test: 'Test' });
+      const json = p.toJSON();
+      expect(json).to.have.property('dynamic_template_data');
+      expect(json.dynamic_template_data).to.be.an.instanceof(Object);
+    });
+    it('should set the subject field', function () {
-    it('should set the send_at field', function() {
+    it('should set the send_at field', function () {
-        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        customArgs: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+        substitutions: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+    it('should not modify the keys of dynamic template data', () => {
+      const data = {
+        to: 'to@example.org',
+        dynamicTemplateData: { snake_case: 'Test', T_EST: 'Test', camelCase: 'Test' },
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.dynamic_template_data).to.have.property('T_EST');
+      expect(json.dynamic_template_data).to.have.property('camelCase');
+      expect(json.dynamic_template_data).to.have.property('snake_case');
+      expect(json.dynamic_template_data.T_EST).to.equal('Test');
+      expect(json.dynamic_template_data.camelCase).to.equal('Test');
+      expect(json.dynamic_template_data.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/index.d.ts,,"-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';","-import * as helpers from ""@sendgrid/helpers/helpers/index""
-import * as classes from ""@sendgrid/helpers/classes/index""
+import * as helpers from '@sendgrid/helpers/helpers/index';
+import * as classes from '@sendgrid/helpers/classes/index';"
sendgrid_sendgrid-nodejs,15d9b0a08c048ce41cf21d619fa16bbf2dd31550,Merge pull request #691 from prohabits/master  Added support for dynamicTemplateData,packages/helpers/package.json,,"-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1""","-    ""chalk"": ""^2.0.1""
+    ""chalk"": ""^2.0.1"",
+    ""deepmerge"": ""^2.1.1"""
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,lerna.json,,"-  ""version"": ""6.1.3""
+  ""version"": ""6.2.1""","-  ""version"": ""6.1.3""
+  ""version"": ""6.2.1"""
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,package.json,,"+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"",","+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"","
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/client/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.2.1"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.2.1"","
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/client/src/client.d.ts,,"-export = new Client()
+declare const client: Client & { Client: Client }
+export = client","-export = new Client()
+declare const client: Client & { Client: Client }
+export = client"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/client/src/client.js,,"-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');","-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.2.1"",","-  ""version"": ""6.1.0"",
+  ""version"": ""6.2.1"","
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/contact-importer/src/importer.spec.js,,"-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {","-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/helpers/classes/email-address.d.ts,,"-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;","-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/helpers/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"","
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.2.1"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.2.1"","
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/inbound-mail-parser/src/parser.js,,"-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/inbound-mail-parser/src/parser.spec.js,,"-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {","-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/mail/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.2.1""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.2.1"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.2.1"",
+    ""@sendgrid/helpers"": ""^6.2.1"""
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/mail/src/mail.d.ts,,"-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail","-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/mail/src/mail.js,,"+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance","+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance"
sendgrid_sendgrid-nodejs,c6cbea3e53fb79040f290d093f5e9e2750edb212,Merge branch 'master' into digitalocean-tut,packages/subscription-widget/package.json,,"-  ""name"": ""signup"",
-  ""version"": ""1.0.0"",
+  ""name"": ""@sendgrid/subscription-widget"",
+  ""version"": ""6.2.1"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },","-  ""name"": ""signup"",
-  ""version"": ""1.0.0"",
+  ""name"": ""@sendgrid/subscription-widget"",
+  ""version"": ""6.2.1"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },"
sendgrid_sendgrid-nodejs,9e43910e83f2de58575180edeba3bf44d220b364,"Merge pull request #619 from phra/fix/typescript-definitions  fix: update definitions for tsc 2.6, fixes #618",packages/client/src/client.d.ts,,"-export = new Client()
+declare const client: Client & { Client: Client }
+export = client","-export = new Client()
+declare const client: Client & { Client: Client }
+export = client"
sendgrid_sendgrid-nodejs,9e43910e83f2de58575180edeba3bf44d220b364,"Merge pull request #619 from phra/fix/typescript-definitions  fix: update definitions for tsc 2.6, fixes #618",packages/helpers/classes/email-address.d.ts,,"-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;","-  fromData(data: EmailData);
+  fromData(data: EmailData): void;
-  setName(name: string);
+  setName(name: string): void;
-  setEmail(email: string);
+  setEmail(email: string): void;"
sendgrid_sendgrid-nodejs,9e43910e83f2de58575180edeba3bf44d220b364,"Merge pull request #619 from phra/fix/typescript-definitions  fix: update definitions for tsc 2.6, fixes #618",packages/mail/src/mail.d.ts,,"-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail","-export = new MailService()
+declare const mail: MailService & { MailService: MailService }
+export = mail"
sendgrid_sendgrid-nodejs,f11ddda711a919f6b9460dc85436e8421ebb5eb9,Merge pull request #605 from mukulmishra18/chai-version  Fixes #601: Chai dependency version issue.,package.json,"+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",","-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"",","+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",
-    ""chai"": ""^2.3.0"",
+    ""chai"": ""^4.0.1"","
sendgrid_sendgrid-nodejs,128115fd0d282a9fab3ab86b6a0ea5411d39668d,Merge pull request #650 from adamreisnz/expose-classes  Expose Client and MailService classes,package.json,,"+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""",","+    ""test:files"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/files.spec.js\"""","
sendgrid_sendgrid-nodejs,128115fd0d282a9fab3ab86b6a0ea5411d39668d,Merge pull request #650 from adamreisnz/expose-classes  Expose Client and MailService classes,packages/client/package.json,,"-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",","-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"","
sendgrid_sendgrid-nodejs,128115fd0d282a9fab3ab86b6a0ea5411d39668d,Merge pull request #650 from adamreisnz/expose-classes  Expose Client and MailService classes,packages/client/src/client.js,,"-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');","-const http = require('request');
-const pkg = require('../package.json');
-const {
-  helpers: {
-    mergeData,
-  },
-  classes: {
-    ResponseError,
-  },
-} = require('@sendgrid/helpers');
-
-/**
- * Sendgrid REST Client
- */
-class Client {
-
-  /**
-   * Constructor
-   */
-  constructor() {
-
-    //API key
-    this.apiKey = '';
-
-    //Default headers
-    this.defaultHeaders = {
-      'Accept': 'application/json',
-      'User-agent': 'sendgrid/' + pkg.version + ';nodejs',
-    };
-
-    //Empty default request
-    this.defaultRequest = {
-      json: true,
-      baseUrl: 'https://api.sendgrid.com/',
-      url: '',
-      method: 'GET',
-      headers: {},
-    };
-  }
-
-  /**
-   * Set API key
-   */
-  setApiKey(apiKey) {
-    this.apiKey = apiKey;
-  }
-
-  /**
-   * Set default header
-   */
-  setDefaultHeader(key, value) {
-    this.defaultHeaders[key] = value;
-    return this;
-  }
-
-  /**
-   * Set default request
-   */
-  setDefaultRequest(key, value) {
-    this.defaultRequest[key] = value;
-    return this;
-  }
-
-  /**
-   * Create headers for request
-   */
-  createHeaders(data) {
-
-    //Merge data with default headers
-    const headers = mergeData(this.defaultHeaders, data);
-
-    //Add API key, but don't overwrite if header already set
-    if (typeof headers.Authorization === 'undefined' && this.apiKey) {
-      headers.Authorization = 'Bearer ' + this.apiKey;
-    }
-
-    //Return
-    return headers;
-  }
-
-  /**
-   * Create request
-   */
-  createRequest(data) {
-
-    //Keep URL parameter consistent
-    if (data.uri) {
-      data.url = data.uri;
-      delete data.uri;
-    }
-
-    //Merge data with empty request
-    const request = mergeData(this.defaultRequest, data);
-
-    //Add headers
-    request.headers = this.createHeaders(request.headers);
-    return request;
-  }
-
-  /**
-   * Do a request
-   */
-  request(data, cb) {
-
-    //Create request
-    const request = this.createRequest(data);
-
-    //Perform request
-    const promise = new Promise((resolve, reject) => {
-      http(request, (error, response, body) => {
-
-        //Request error
-        if (error) {
-          return reject(error);
-        }
-
-        //Response error
-        if (response.statusCode >= 400) {
-          return reject(new ResponseError(response));
-        }
-
-        //Successful response
-        resolve([response, body]);
-      });
-    });
-
-    // Throw and error incase function not passed
-    if (cb && typeof cb !== 'function') {
-      throw new Error('Callback passed is not a function.');
-    }
-
-    //Execute callback if provided
-    if (cb) {
-      promise
-        .then(result => cb(null, result))
-        .catch(error => cb(error, null));
-    }
-
-    //Return promise
-    return promise;
-  }
-}
+const Client = require('./classes/client');"
sendgrid_sendgrid-nodejs,128115fd0d282a9fab3ab86b6a0ea5411d39668d,Merge pull request #650 from adamreisnz/expose-classes  Expose Client and MailService classes,packages/mail/package.json,,"-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",","-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"","
sendgrid_sendgrid-nodejs,128115fd0d282a9fab3ab86b6a0ea5411d39668d,Merge pull request #650 from adamreisnz/expose-classes  Expose Client and MailService classes,packages/mail/src/mail.js,,"+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance","+'use strict';
-const client = require('@sendgrid/client');
-const {
-  classes: {
-    Mail,
-  },
-} = require('@sendgrid/helpers');
+const MailService = require('./classes/mail-service');
-/**
- * Mail service class
- */
-class MailService {
-
-	/**
-	 * Constructor
-	 */
-  constructor() {
-    this.client = client;
-    this.substitutionWrappers = ['{{', '}}'];
-  }
-
-  /**
-   * API key pass through for convenience
-   */
-  setApiKey(apiKey) {
-    this.client.setApiKey(apiKey);
-  }
-
-  /**
-   * Set substitution wrappers
-   */
-  setSubstitutionWrappers(left, right) {
-    if (typeof left === 'undefined' || typeof right === 'undefined') {
-      throw new Error('Must provide both left and right side wrappers');
-    }
-    this.substitutionWrappers[0] = left;
-    this.substitutionWrappers[1] = right;
-  }
-
-  /**
-   * Send email
-   */
-  send(data, isMultiple = false, cb) {
-
-    //Callback as second parameter
-    if (typeof isMultiple === 'function') {
-      cb = isMultiple;
-      isMultiple = false;
-    }
-
-    //Array? Send in parallel
-    if (Array.isArray(data)) {
-
-      //Create promise
-      const promise = Promise.all(data.map(item => {
-        return this.send(item, isMultiple);
-      }));
-
-      //Execute callback if provided
-      if (cb) {
-        promise
-          .then(result => cb(null, result))
-          .catch(error => cb(error, null));
-      }
-
-      //Return promise
-      return promise;
-    }
-
-    //Send mail
-    try {
-
-      //Append multiple flag to data if not set
-      if (typeof data.isMultiple === 'undefined') {
-        data.isMultiple = isMultiple;
-      }
-
-      //Append global substitution wrappers if not set in data
-      if (typeof data.substitutionWrappers === 'undefined') {
-        data.substitutionWrappers = this.substitutionWrappers;
-      }
-
-      //Create Mail instance from data and get JSON body for request
-      const mail = Mail.create(data);
-      const body = mail.toJSON();
-
-      //Create request
-      const request = {
-        method: 'POST',
-        url: '/v3/mail/send',
-        body,
-      };
-
-      //Send
-      return this.client.request(request, cb);
-    }
-
-    //Catch sync errors
-    catch (error) {
-
-      //Pass to callback if provided
-      if (cb) {
-        cb(error, null);
-      }
-
-      //Reject promise
-      return Promise.reject(error);
-    }
-  }
-
-  /**
-   * Send multiple emails (shortcut)
-   */
-  sendMultiple(data, cb) {
-    return this.send(data, true, cb);
-  }
-}
-
-//Export class
+//Export singleton instance"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,lerna.json,,"-  ""version"": ""6.1.1""
+  ""version"": ""6.1.6""","-  ""version"": ""6.1.1""
+  ""version"": ""6.1.6"""
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/client/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      from, subject, content,
+      from, subject,
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);
+    }
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      from, subject, content,
+      from, subject,
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);
+    }
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/helpers/convert-keys.js,,"+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);","+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/helpers/convert-keys.spec.js,,"-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');","-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/helpers/split-name-email.spec.js,,"-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {","-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/helpers/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"","
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/mail/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.1""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5""","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.1""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5"""
sendgrid_sendgrid-nodejs,16c3277b8ee7292c41452c5b5dc32f240f301bf8,Merge branch 'expose-classes' of https://github.com/adambuczynski/sendgrid-nodejs into expose-classes,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,lerna.json,,"-  ""version"": ""6.1.1""
+  ""version"": ""6.1.6""","-  ""version"": ""6.1.1""
+  ""version"": ""6.1.6"""
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/client/package.json,"-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-  ""main"": ""src/client.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      from, subject, content,
+      from, subject,
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);
+    }
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      from, subject, content,
+      from, subject,
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);
+    }
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/helpers/convert-keys.js,,"+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);","+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/helpers/convert-keys.spec.js,,"-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');","-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/helpers/split-name-email.spec.js,,"-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {","-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/helpers/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"","
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/mail/package.json,"-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.1""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5""","-  ""version"": ""6.1.1"",
+  ""version"": ""6.1.5"",
-  ""main"": ""src/mail.js"",
+  ""main"": ""index.js"",
-    ""@sendgrid/client"": ""^6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.1""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5"""
sendgrid_sendgrid-nodejs,ad7688a8af9d1df6837b5e64bf455cf81800f0be,Merge branch 'master' into expose-classes,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,lerna.json,,"-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6""","-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6"""
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/client/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/helpers/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"","
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/mail/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5"""
sendgrid_sendgrid-nodejs,90c82397fc52ace1dc30fbc8eea8c1c8e7d81095,Merge branch 'master' into master,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,069bd43c29509d3dc5df11c12fb561c7c6116874,"Merge pull request #477 from phgroe/fix/response-body-check-undefined  Check if ""body"" on ""response"" is actually defined before accessing it",packages/helpers/classes/response-error.js,,"-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {","-    if (Array.isArray(body.errors)) {
+    if (body && Array.isArray(body.errors)) {"
sendgrid_sendgrid-nodejs,7d4f8a81dc6a4fab0e6d4e932a78898456830f7f,Merge pull request #581 from ElPonito/master  Remove only on test,packages/contact-importer/src/importer.spec.js,,"-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {","-describe.only('test_contact_importer', function() {
+describe('test_contact_importer', function() {"
sendgrid_sendgrid-nodejs,c9772443523e0674b2176936f26b2244240b1441,Merge pull request #580 from anthonyjuan/refactor_helper_array_to_json  simplify complexity in arrayToJson helpers,packages/helpers/helpers/array-to-json.js,,"-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();","-    if (typeof item === 'object' && item !== null) {
-      if (typeof item.toJSON === 'function') {
-        return item.toJSON();
-      }
+    if (typeof item === 'object' && item !== null && typeof item.toJSON === 'function') {
+      return item.toJSON();"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,lerna.json,,"-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6""","-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6"""
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/client/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/helpers/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"","
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/mail/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5"""
sendgrid_sendgrid-nodejs,b38e66596a9187c787a283a677d1ef2a6e6b5d52,Merge pull request #1 from sendgrid/master  Updating,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,lerna.json,,"-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6""","-  ""version"": ""6.1.3""
+  ""version"": ""6.1.6"""
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/client/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/contact-importer/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.5"",
-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/helpers/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"","
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"",","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/helpers"": ""^6.1.3"",
+    ""@sendgrid/helpers"": ""^6.1.5"","
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  var keyValues = {};
-  var key;
-
-  for (var index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  var file;
-  var attachments = [];
-
-  for (var index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
-      var config = {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
-      var parse = new Parse({}, {});
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
+      const parse = new Parse({}, {});
-    it('should parse raw email from payload and return a mail object', function(done) {
-      var request = {
+    it('should parse raw email from payload and return a mail object', (done) => {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/mail/package.json,,"-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5""","-  ""version"": ""6.1.3"",
+  ""version"": ""6.1.5"",
-    ""@sendgrid/client"": ""^6.1.3"",
-    ""@sendgrid/helpers"": ""^6.1.3""
+    ""@sendgrid/client"": ""^6.1.5"",
+    ""@sendgrid/helpers"": ""^6.1.5"""
sendgrid_sendgrid-nodejs,c00f6f27cebd6c8460535d7078bf9696124bde3e,Merge branch 'master' into patch-1,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,102d3f7e1addf2776c4eba532c9e71190b4a50bc,Merge branch 'master' into add-test-files-exist,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,102d3f7e1addf2776c4eba532c9e71190b4a50bc,Merge branch 'master' into add-test-files-exist,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"","
sendgrid_sendgrid-nodejs,102d3f7e1addf2776c4eba532c9e71190b4a50bc,Merge branch 'master' into add-test-files-exist,packages/inbound-mail-parser/src/parser.js,,"-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,102d3f7e1addf2776c4eba532c9e71190b4a50bc,Merge branch 'master' into add-test-files-exist,packages/inbound-mail-parser/src/parser.spec.js,,"-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {","-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/contact-importer/package.json,,"-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/contact-importer/src/importer.js,,"-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/contact-importer/src/importer.spec.js,,"+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/inbound-mail-parser/src/parser.spec.js,,"-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {","-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {"
sendgrid_sendgrid-nodejs,2a734f954d91dea3b45aecc05bb8f099166e79ee,Merge branch 'master' into 543-pull-request-template,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,a32f11d4fcbdc586ef017b3cb351d0f799b919bc,Merge pull request #544 from rafaelverger/enhacement/es6-ify-inboundMailParser  Enhacement - ES6-ify Inbound Mail Parser,package-lock.json,,"+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },","+    ""typescript"": {
+      ""version"": ""2.4.2"",
+      ""resolved"": ""https://registry.npmjs.org/typescript/-/typescript-2.4.2.tgz"",
+      ""integrity"": ""sha1-+DlfhdRZJ2BnyYiqQYN6j4KHCEQ="",
+      ""dev"": true
+    },"
sendgrid_sendgrid-nodejs,a32f11d4fcbdc586ef017b3cb351d0f799b919bc,Merge pull request #544 from rafaelverger/enhacement/es6-ify-inboundMailParser  Enhacement - ES6-ify Inbound Mail Parser,package.json,,"+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",","+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""","
sendgrid_sendgrid-nodejs,a32f11d4fcbdc586ef017b3cb351d0f799b919bc,Merge pull request #544 from rafaelverger/enhacement/es6-ify-inboundMailParser  Enhacement - ES6-ify Inbound Mail Parser,packages/inbound-mail-parser/src/parser.js,,"-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse({ keys }, request) {
-  this.keys = keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const { email:rawEmail } = this.payload;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(parsedEmail => {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-    const { path } = file;
-
-    if (fs.existsSync(path)) {
-      file.content = fs.readFileSync(path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,a32f11d4fcbdc586ef017b3cb351d0f799b919bc,Merge pull request #544 from rafaelverger/enhacement/es6-ify-inboundMailParser  Enhacement - ES6-ify Inbound Mail Parser,packages/inbound-mail-parser/src/parser.spec.js,,"-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {","-describe('test_parse', function() {
-  describe('test_parse_key_values', function() {
-    it('should return the key values specified in the config from the payload', function() {
+describe('test_parse', () => {
+  describe('test_parse_key_values', () => {
+    it('should return the key values specified in the config from the payload', () => {
-  describe('test_parse_get_raw_email', function() {
-    it('should return null if no raw email property in payload', function(done) {
+  describe('test_parse_get_raw_email', () => {
+    it('should return null if no raw email property in payload', (done) => {
-    it('should parse raw email from payload and return a mail object', function(done) {
+    it('should parse raw email from payload and return a mail object', (done) => {"
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,package.json,"+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:inbound"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/inbound-mail-parser/**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/contact-importer/package.json,,"-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/contact-importer/src/importer.js,,"-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/contact-importer/src/importer.spec.js,,"+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/inbound-mail-parser/src/parser.js,"-function createAttachment(file) {
+const createAttachment = (file) => {
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+function createAttachment({originalname, fileName, mimetype, contentType, content}) {
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
-function Parse(config, request) {
-  this.keys = config.keys;
+function Parse({ keys }, request) {
+  this.keys = keys;
-  const rawEmail = this.payload.email;
+  const { email:rawEmail } = this.payload;
-  this.getRawEmail(function(parsedEmail) {
+  this.getRawEmail(parsedEmail => {
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
+    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
+    const { path } = file;
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
+    if (fs.existsSync(path)) {
+      file.content = fs.readFileSync(path);","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+const createAttachment = (file) => {
+  const {originalname, fileName, mimetype, contentType, content} = file;
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
- * @constructor
- * @param {Object} config inbound configuration object
- * @param {Object} request request object of the parse webhook payload
-function Parse(config, request) {
-  this.keys = config.keys;
-  this.request = request;
-  this.payload = request.body || {};
-  this.files = request.files || [];
+class Parse {
+
+  /**
+   * @constructor
+   * @param {Object} config inbound configuration object
+   * @param {Object} request request object of the parse webhook payload
+   */
+  constructor(config, request) {
+    this.keys = config.keys;
+    this.request = request;
+    this.payload = request.body || {};
+    this.files = request.files || [];
+  }
+
+  /**
+   * Return an object literal of key/values in the payload received from webhook
+   * @return {Object} Valid key/values in the webhook payload
+   */
+  keyValues() {
+    return this.keys
+      .filter(key => this.payload[key])
+      .map(key => ({ [key]: this.payload[key] }))
+      .reduce((keyValues, keyPayload) => Object.assign(keyValues, keyPayload));
+  }
+
+  /**
+   * Whether the payload contains the raw email (Only applies to raw payloads)
+   * @return {Boolean}
+   */
+  hasRawEmail() {
+    return !!this.payload.email;
+  }
+
+  /**
+   * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+   * @param {Function} callback Function which will receive the parsed email object as the sole argument
+   */
+  getRawEmail(callback) {
+    const mailparser = new MailParser();
+    const { rawEmail } = this.payload;
+
+    if (!this.hasRawEmail()) {
+      return callback(null);
+    }
+
+    mailparser.on('end', callback);
+    mailparser.write(rawEmail);
+    mailparser.end();
+  }
+
+  /**
+   * Retrieves all attachments received from the webhook payload
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  attachments(callback) {
+    return this[`_getAttachments${this.hasRawEmail() ? 'Raw' : ''}`](callback);
+  }
+
+  /**
+   * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachmentsRaw(callback) {
+    this.getRawEmail(parsedEmail => {
+      const attachments = (parsedEmail || {}).attachments || [];
+      callback(attachments.map(createAttachment));
+    });
+  }
+
+  /**
+   * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+   * @private
+   * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+   */
+  _getAttachments(callback) {
+    return callback(this.files
+      .filter(file => fs.existsSync(file.path))
+      .map((exists, idx) => [exists, this.files[idx]])
+      .filter(([exists, _]) => exists)
+      .map(([_, file]) => {
+        file.content = fs.readFileSync(file.path);
+        return createAttachment(file);
+      })
+    );
+  }
-/**
- * Return an object literal of key/values in the payload received from webhook
- * @return {Object} Valid key/values in the webhook payload
- */
-Parse.prototype.keyValues = function() {
-  const keyValues = {};
-  let key;
-
-  for (const index in this.keys) {
-    key = this.keys[index];
-
-    if (this.payload[key]) {
-      keyValues[key] = this.payload[key];
-    }
-  }
-
-  return keyValues;
-};
-
-/**
- * Whether the payload contains the raw email (Only applies to raw payloads)
- * @return {Boolean}
- */
-Parse.prototype.hasRawEmail = function() {
-  return Boolean(this.payload.email);
-};
-
-/**
- * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
- * @param {Function} callback Function which will receive the parsed email object as the sole argument
- */
-Parse.prototype.getRawEmail = function(callback) {
-  const mailparser = new MailParser();
-  const rawEmail = this.payload.email;
-
-  if (!rawEmail) {
-    return callback(null);
-  }
-
-  mailparser.on('end', callback);
-
-  mailparser.write(rawEmail);
-  mailparser.end();
-};
-
-/**
- * Retrieves all attachments received from the webhook payload
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype.attachments = function(callback) {
-  if (this.hasRawEmail()) {
-    return this._getAttachmentsRaw(callback);
-  }
-
-  this._getAttachments(callback);
-};
-
-/**
- * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachmentsRaw = function(callback) {
-  this.getRawEmail(function(parsedEmail) {
-    if (!parsedEmail || !parsedEmail.attachments) {
-      return callback([]);
-    }
-
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
-
-    callback(attachments);
-  });
-};
-
-/**
- * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
- * @private
- * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
- */
-Parse.prototype._getAttachments = function(callback) {
-  let file;
-  const attachments = [];
-
-  for (const index in this.files) {
-    file = this.files[index];
-
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
-      attachments.push(createAttachment(file));
-    }
-  }
-
-  return callback(attachments);
-};
-"
sendgrid_sendgrid-nodejs,5d2943ff914c56308a14e091838f64d17b9d511b,Merge branch 'master' into enhacement/es6-ify-inboundMailParser,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/contact-importer/package.json,,"-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const { EventEmitter } = require('events');
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  var self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      var batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  var self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  var itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  var batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  var context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  var request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","-var ContactImporter = require('./importer');
+const sendgrid = require('sendgrid');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
-function Parse(config, request) {
-  this.keys = config.keys;
+function Parse({ keys }, request) {
+  this.keys = keys;
-  var keyValues = {};
-  var key;
+  const keyValues = {};
+  let key;
-  for (var index in this.keys) {
+  for (const index in this.keys) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
+  const mailparser = new MailParser();
+  const { email:rawEmail } = this.payload;
-  this.getRawEmail(function(parsedEmail) {
+  this.getRawEmail(parsedEmail => {
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
+    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-  var file;
-  var attachments = [];
+  let file;
+  const attachments = [];
-  for (var index in this.files) {
+  for (const index in this.files) {
+    const { path } = file;
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
+    if (fs.existsSync(path)) {
+      file.content = fs.readFileSync(path);","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
-  var attachment = new Attachment();
+function createAttachment({originalname, fileName, mimetype, contentType, content}) {
+  const attachment = new Attachment();
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
-function Parse(config, request) {
-  this.keys = config.keys;
+function Parse({ keys }, request) {
+  this.keys = keys;
-  var keyValues = {};
-  var key;
+  const keyValues = {};
+  let key;
-  for (var index in this.keys) {
+  for (const index in this.keys) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
+  const mailparser = new MailParser();
+  const { email:rawEmail } = this.payload;
-  this.getRawEmail(function(parsedEmail) {
+  this.getRawEmail(parsedEmail => {
-    var attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
+    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
-  var file;
-  var attachments = [];
+  let file;
+  const attachments = [];
-  for (var index in this.files) {
+  for (const index in this.files) {
+    const { path } = file;
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
+    if (fs.existsSync(path)) {
+      file.content = fs.readFileSync(path);"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-      var config = {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-      var parse = new Parse({}, {});
+      const parse = new Parse({}, {});
-      var request = {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-      var config = {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-      var parse = new Parse({}, {});
+      const parse = new Parse({}, {});
-      var request = {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,6194ef799033858384edbacbfba2d848c65a6d22,Merge branch 'master' into digitalocean-tut,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,9b57d1f80e4662ee9c8a1506b3e3ca48f13df498,Merge pull request #567 from lvarayut/check-license-date-range  Add a unittest to check the license.md file date range,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"",","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""**/*.spec.js\"""",
+    ""test:license"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha license.spec.js"","
sendgrid_sendgrid-nodejs,cafc7cb108f2ca889540fdd4a389e834931dedf3,Merge pull request #503 from nitish24p/callback-type-check  Callback type check,packages/client/src/client.js,,"+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+","+    // Throw and error incase function not passed
+    if (cb && typeof cb !== 'function') {
+      throw new Error('Callback passed is not a function.');
+    }
+"
sendgrid_sendgrid-nodejs,cafc7cb108f2ca889540fdd4a389e834931dedf3,Merge pull request #503 from nitish24p/callback-type-check  Callback type check,packages/mail/src/mail.spec.js,,"+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });","+
+  it('should throw an error if callback is not a function', () => {
+    return expect(function() {
+      sgMail.send(data, false, {});
+    }).to.throw(Error);
+  });"
sendgrid_sendgrid-nodejs,70c48457fb02c2deb7f6816177569c036c504d15,Merge pull request #534 from itaditya/533-patcher  fixes #533 by using object destructring & fat arrow,packages/inbound-mail-parser/src/parser.js,,"-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+function createAttachment({originalname, fileName, mimetype, contentType, content}) {
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
-function Parse(config, request) {
-  this.keys = config.keys;
+function Parse({ keys }, request) {
+  this.keys = keys;
-  const rawEmail = this.payload.email;
+  const { email:rawEmail } = this.payload;
-  this.getRawEmail(function(parsedEmail) {
+  this.getRawEmail(parsedEmail => {
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
+    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
+    const { path } = file;
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
+    if (fs.existsSync(path)) {
+      file.content = fs.readFileSync(path);","-const MailParser = require('mailparser').MailParser;
+const { MailParser } = require('mailparser');
-function createAttachment(file) {
+function createAttachment({originalname, fileName, mimetype, contentType, content}) {
-  attachment.setFilename(file.originalname || file.fileName);
-  attachment.setType(file.mimetype || file.contentType);
-  attachment.setContent(file.content.toString('base64'));
+  attachment.setFilename(originalname || fileName);
+  attachment.setType(mimetype || contentType);
+  attachment.setContent(content.toString('base64'));
-function Parse(config, request) {
-  this.keys = config.keys;
+function Parse({ keys }, request) {
+  this.keys = keys;
-  const rawEmail = this.payload.email;
+  const { email:rawEmail } = this.payload;
-  this.getRawEmail(function(parsedEmail) {
+  this.getRawEmail(parsedEmail => {
-    const attachments = parsedEmail.attachments.map(function(file) {
-      return createAttachment(file);
-    });
+    const attachments = parsedEmail.attachments.map(file => createAttachment(file));
+    const { path } = file;
-    if (fs.existsSync(file.path)) {
-      file.content = fs.readFileSync(file.path);
+    if (fs.existsSync(path)) {
+      file.content = fs.readFileSync(path);"
sendgrid_sendgrid-nodejs,22b66cf84d7d3601d011195b4d5caff202826c03,Merge pull request #549 from sendgrid/esdoc  Added esdoc support,package.json,"+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",","-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid""","+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",
-  }
+  },
+  ""description"": ""![SendGrid Logo](https://uiux.s3.amazonaws.com/2016-logos/email-logo%402x.png)"",
+  ""bugs"": {
+    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs/issues""
+  },
+  ""homepage"": ""https://github.com/sendgrid/sendgrid-nodejs#readme"",
+  ""main"": ""index.js"",
+  ""directories"": {
+    ""doc"": ""docs"",
+    ""test"": ""test""
+  },
+  ""dependencies"": {
+    ""chai"": ""^2.3.0"",
+    ""esdoc"": ""^1.0.3"",
+    ""esdoc-coverage-plugin"": ""^1.1.0"",
+    ""esdoc-type-inference-plugin"": ""^1.0.1""
+  },
+  ""author"": ""SendGrid"""
sendgrid_sendgrid-nodejs,d2192d849713b35540fc9e045b06dbf726e6f654,Merge pull request #542 from sethetter/532-es6-contact-importer  Turn ContactImporter into ES6 class,package.json,,"+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""",","+    ""test:contact"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/contact-importer/**/*.spec.js\"""","
sendgrid_sendgrid-nodejs,d2192d849713b35540fc9e045b06dbf726e6f654,Merge pull request #542 from sethetter/532-es6-contact-importer  Turn ContactImporter into ES6 class,packages/contact-importer/package.json,,"-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3""","-    ""lodash.chunk"": ""^4.2.0""
+    ""lodash.chunk"": ""^4.2.0"",
+    ""sendgrid"": ""^5.2.3"""
sendgrid_sendgrid-nodejs,d2192d849713b35540fc9e045b06dbf726e6f654,Merge pull request #542 from sethetter/532-es6-contact-importer  Turn ContactImporter into ES6 class,packages/contact-importer/src/importer.js,,"-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;","-const EventEmitter = require('events').EventEmitter;
+const { EventEmitter } = require('events');
-const ContactImporter = module.exports = function(sg, options) {
-  options = options || {};
-  const self = this;
-  this.sg = sg;
-  this.pendingItems = [];
+class ContactImporter extends EventEmitter {
+  constructor(sg, options = {}) {
+    super();
-  // Number of items to send per batch.
-  this.batchSize = options.batchSize || 1500;
+    this.sg = sg;
+    this.pendingItems = [];
-  // Max number of requests per rate limit period.
-  this.rateLimitLimit = options.rateLimitLimit || 3;
+    // Number of items to send per batch.
+    this.batchSize = options.batchSize || 1500;
-  // Length of rate limit period (miliseconds).
-  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+    // Max number of requests per rate limit period.
+    this.rateLimitLimit = options.rateLimitLimit || 3;
-  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
-  this.throttle = new Bottleneck(0, 0);
-  this.throttle.changeReservoir(this.rateLimitLimit);
+    // Length of rate limit period (miliseconds).
+    this.rateLimitPeriod = options.rateLimitPeriod || 2000;
-  // Create a queue that wil be used to send batches to the throttler.
-  this.queue = queue(ensureAsync(this._worker));
+    // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+    this.throttle = new Bottleneck(0, 0);
+    this.throttle.changeReservoir(this.rateLimitLimit);
-  // When the last batch is removed from the queue, add any incomplete batches.
-  this.queue.empty = function() {
-    if (self.pendingItems.length) {
-      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
-      const batch = self.pendingItems.splice(0);
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
+    this._setupQueue();
+  }
+
+  /**
+   *  Add a new contact, or an array of contacts, to the end of the queue.
+   *
+   * @param {Array|Object} data A contact or array of contacts.
+   */
+  push(data = []) {
+    data = Array.isArray(data) ? data : [data];
+
+    // Add the new items onto the pending items.
+    const itemsToProcess = this.pendingItems.concat(data);
+
+    // Chunk the pending items into batches and add onto the queue
+    const batches = chunk(itemsToProcess, this.batchSize);
+    debug('generated batches %s from %s items', batches.length, data.length);
+
+    batches.forEach((batch) => {
+      // If this batch is full or the queue is empty queue it for processing.
+      if (batch.length === this.batchSize || !this.queue.length()) {
+        this._pushToQueue(batch);
+      }
+      // Otherwise, it store it for later.
+      else {
+        debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+        this.pendingItems = batch;
+      }
+    });
+
+    debug('batches in queue: %s', this.queue.length());
+    debug('items in deferred queue: %s', this.pendingItems.length);
+  }
+
+  /**
+   * Send a batch of contacts to Sendgrid.
+   *
+   * @param {Object} task Task to be processed (data in 'data' property)
+   * @param {Function} callback Callback function.
+   */
+  _worker (task, callback) {
+    const context = task.owner;
+    debug('processing batch (%s items)', task.data.length);
+    context.throttle.submit(context._sendBatch, context, task.data, callback);
+  }
+
+  _sendBatch (context, data, callback) {
+    debug('sending batch (%s items)', data.length);
+
+    const request = context.sg.emptyRequest();
+    request.method = 'POST';
+    request.path = '/v3/contactdb/recipients';
+    request.body = data;
+
+    context.sg.API(request)
+      .then((response) => {
+        debug('got response: %o', response);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(null, response);
+      })
+      .catch((error) => {
+        debug('got error, %o', error);
+        setTimeout(() => {
+          context.throttle.incrementReservoir(1);
+        }, context.rateLimitPeriod);
+        return callback(error);
+  }
+
+  /**
+  * Emit the result of processing a batch.
+  *
+  * @param {Object} error
+  * @param {Object} result
+  */
+  _notify (error, result, batch) {
+    if (error) {
+      return this.emit('error', error, batch);
+    return this.emit('success', result, batch);
-  // Emit an event when the queue is drained.
-  this.queue.drain = function() {
-    self.emit('drain');
-  };
-};
-util.inherits(ContactImporter, EventEmitter);
+  /**
+   * Sets up the queue object on this instance of ContactImporter
+   */
+  _setupQueue () {
+    // Create a queue that wil be used to send batches to the throttler.
+    this.queue = queue(ensureAsync(this._worker));
-/**
- *  Add a new contact, or an array of contact, to the end of the queue.
- *
- * @param {Array|Object} data A contact or array of contacts.
- */
-ContactImporter.prototype.push = function(data) {
-  const self = this;
-  data = Array.isArray(data) ? data : [data];
+    // When the last batch is removed from the queue, add any incomplete batches.
+    this.queue.empty = () => {
+      if (!this.pendingItems.length) return;
-  // Add the new items onto the pending items.
-  const itemsToProcess = this.pendingItems.concat(data);
+      debug('adding %s items from deferrd queue for processing', this.pendingItems.length);
-  // Chunk the pending items into batches and add onto the queue
-  const batches = chunk(itemsToProcess, this.batchSize);
-  debug('generated batches %s from %s items', batches.length, data.length);
+      const batch = this.pendingItems.splice(0);
+      this._pushToQueue(batch);
+    };
-  batches.forEach(function(batch) {
-    // If this batch is full or the queue is empty queue it for processing.
-    if (batch.length === self.batchSize || !self.queue.length()) {
-      self.queue.push({
-        data: batch,
-        owner: self,
-      }, function(error, result) {
-        if (error) {
-          return self._notify(error, JSON.parse(error.response.body), batch);
-        }
-        return self._notify(null, JSON.parse(result.body), batch);
-      });
-    }
-    // Otherwise, it store it for later.
-    else {
-      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
-      self.pendingItems = batch;
-    }
-  });
+    // Emit an event when the queue is drained.
+    this.queue.drain = () => {
+      this.emit('drain');
+    };
+  }
-  debug('batches in queue: %s', this.queue.length());
-  debug('items in deferred queue: %s', this.pendingItems.length);
-};
+  /**
+   * Takes a batch and pushes it to the queue, handling the result as well.
+   *
+   * @param {Array} batch A batch to send to the queue.
+   */
+  _pushToQueue (batch) {
+    this.queue.push({
+      data: batch,
+      owner: this,
+    }, (error, result) => {
+      if (error) {
+        return this._notify(error, error.response.body, batch);
+      }
+      return this._notify(null, result.body, batch);
+    });
+  }
+}
-/**
- * Send a batch of contacts to Sendgrid.
- *
- * @param {Object} task Task to be processed (data in 'data' property)
- * @param {Function} callback Callback function.
- */
-ContactImporter.prototype._worker = function(task, callback) {
-  const context = task.owner;
-  debug('processing batch (%s items)', task.data.length);
-  context.throttle.submit(context._sendBatch, context, task.data, callback);
-};
-
-ContactImporter.prototype._sendBatch = function(context, data, callback) {
-  debug('sending batch (%s items)', data.length);
-
-  const request = context.sg.emptyRequest();
-  request.method = 'POST';
-  request.path = '/v3/contactdb/recipients';
-  request.body = data;
-
-  context.sg.API(request)
-    .then(function(response) {
-      debug('got response: %o', response);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(null, response);
-    })
-    .catch(function(error) {
-      debug('got error, %o', error);
-      setTimeout(function() {
-        context.throttle.incrementReservoir(1);
-      }, context.rateLimitPeriod);
-      return callback(error);
-    });
-};
-
-/**
- * Emit the result of processing a batch.
- *
- * @param {Object} error
- * @param {Object} result
- */
-ContactImporter.prototype._notify = function(error, result, batch) {
-  if (error) {
-    return this.emit('error', error, batch);
-  }
-  return this.emit('success', result, batch);
-};
+module.exports = ContactImporter;"
sendgrid_sendgrid-nodejs,d2192d849713b35540fc9e045b06dbf726e6f654,Merge pull request #542 from sethetter/532-es6-contact-importer  Turn ContactImporter into ES6 class,packages/contact-importer/src/importer.spec.js,,"+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);","+const sendgrid = require('sendgrid');
-      console.log('SUCCESS error', error);
-      console.log('SUCCESS batch', batch);
+      console.log('ERROR error', error);
+      console.log('ERROR batch', batch);"
sendgrid_sendgrid-nodejs,8c90958a3bf8767fbb93fe18c2e7a56c81f9ba8a,"Merge pull request #528 from mp-ffx/custom-headers  exclude headers from camel/snake case conversion, fixes #527",packages/helpers/classes/mail.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,8c90958a3bf8767fbb93fe18c2e7a56c81f9ba8a,"Merge pull request #528 from mp-ffx/custom-headers  exclude headers from camel/snake case conversion, fixes #527",packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);","-    data = toCamelCase(data, ['substitutions', 'customArgs']);
+    data = toCamelCase(data, ['substitutions', 'customArgs', 'headers']);
-    if (typeof wrappers === 'undefined') {
-      return;
-    }
+    if (typeof wrappers === 'undefined' || wrappers === null) {
+      return;
+    }
+
-    return toSnakeCase(json, ['substitutions', 'customArgs']);
+    return toSnakeCase(json, ['substitutions', 'customArgs', 'headers']);"
sendgrid_sendgrid-nodejs,8c90958a3bf8767fbb93fe18c2e7a56c81f9ba8a,"Merge pull request #528 from mp-ffx/custom-headers  exclude headers from camel/snake case conversion, fixes #527",packages/helpers/classes/personalization.spec.js,,"+
+  describe('#527', function() {
+    it('shouldn\'t convert the headers to camel/snake case', function() {
+      const p = new Personalization({
+        to: 'test@example.com',
+        headers: {
+          'List-Unsubscribe': '<mailto:test@test.com>',
+        },
+      });
+
+      expect(p.headers['List-Unsubscribe']).to.equal('<mailto:test@test.com>');
+
+      expect(p.toJSON().headers['List-Unsubscribe']).to
+        .equal('<mailto:test@test.com>');
+    });
+  });","+
+  describe('#527', function() {
+    it('shouldn\'t convert the headers to camel/snake case', function() {
+      const p = new Personalization({
+        to: 'test@example.com',
+        headers: {
+          'List-Unsubscribe': '<mailto:test@test.com>',
+        },
+      });
+
+      expect(p.headers['List-Unsubscribe']).to.equal('<mailto:test@test.com>');
+
+      expect(p.toJSON().headers['List-Unsubscribe']).to
+        .equal('<mailto:test@test.com>');
+    });
+  });"
sendgrid_sendgrid-nodejs,4b44ed0e5dce6ef606aa029dcd8a6e58b023a6b5,Merge pull request #489 from jaydp17/const-let  Moving away from var,packages/client/src/client.spec.js,,"-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
+    const sgClient = require('./client');
-  var request = {};
+  const request = {};
-    var sgClient = require('./client');
-    sgClient.setApiKey('SendGrid API Key');
-    sgClient.setDefaultRequest('baseUrl', baseUrl);
-    sgClient.setDefaultHeader('X-Mock', 200);
-    return sgClient
-      .request(request)
-      .then(([response, body]) => {
-        expect(response.statusCode).to.equal(200);
-      });
-  });
-});
-
+    const sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,4b44ed0e5dce6ef606aa029dcd8a6e58b023a6b5,Merge pull request #489 from jaydp17/const-let  Moving away from var,packages/contact-importer/src/importer.js,,"-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const EventEmitter = require('events').EventEmitter;
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
+const ContactImporter = module.exports = function(sg, options) {
-  var self = this;
+  const self = this;
-      var batch = self.pendingItems.splice(0);
+      const batch = self.pendingItems.splice(0);
-  var self = this;
+  const self = this;
-  var itemsToProcess = this.pendingItems.concat(data);
+  const itemsToProcess = this.pendingItems.concat(data);
-  var batches = chunk(itemsToProcess, this.batchSize);
+  const batches = chunk(itemsToProcess, this.batchSize);
-  var context = task.owner;
+  const context = task.owner;
-  var request = context.sg.emptyRequest();
+  const request = context.sg.emptyRequest();","-var Bottleneck = require('bottleneck');
-var EventEmitter = require('events').EventEmitter;
-var chunk = require('lodash.chunk');
-var debug = require('debug')('sendgrid');
-var util = require('util');
-var queue = require('async.queue');
-var ensureAsync = require('async.ensureasync');
+const Bottleneck = require('bottleneck');
+const EventEmitter = require('events').EventEmitter;
+const chunk = require('lodash.chunk');
+const debug = require('debug')('sendgrid');
+const util = require('util');
+const queue = require('async.queue');
+const ensureAsync = require('async.ensureasync');
-var ContactImporter = module.exports = function(sg, options) {
+const ContactImporter = module.exports = function(sg, options) {
-  var self = this;
+  const self = this;
-      var batch = self.pendingItems.splice(0);
+      const batch = self.pendingItems.splice(0);
-  var self = this;
+  const self = this;
-  var itemsToProcess = this.pendingItems.concat(data);
+  const itemsToProcess = this.pendingItems.concat(data);
-  var batches = chunk(itemsToProcess, this.batchSize);
+  const batches = chunk(itemsToProcess, this.batchSize);
-  var context = task.owner;
+  const context = task.owner;
-  var request = context.sg.emptyRequest();
+  const request = context.sg.emptyRequest();"
sendgrid_sendgrid-nodejs,4b44ed0e5dce6ef606aa029dcd8a6e58b023a6b5,Merge pull request #489 from jaydp17/const-let  Moving away from var,packages/contact-importer/src/importer.spec.js,,"-var ContactImporter = require('./importer');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;","-var ContactImporter = require('./importer');
+const ContactImporter = require('./importer');
-    var API_KEY = process.env.API_KEY;
-    var sg = sendgrid(API_KEY);
+    const API_KEY = process.env.API_KEY;
+    const sg = sendgrid(API_KEY);
-    var data = [];
+    const data = [];
-      var item = {
+      const item = {
-    var self = this;
+    const self = this;"
sendgrid_sendgrid-nodejs,4b44ed0e5dce6ef606aa029dcd8a6e58b023a6b5,Merge pull request #489 from jaydp17/const-let  Moving away from var,packages/inbound-mail-parser/src/parser.js,,"-  var attachment = new Attachment();
+  const attachment = new Attachment();
-  var keyValues = {};
-  var key;
+  const keyValues = {};
+  let key;
-  for (var index in this.keys) {
+  for (const index in this.keys) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
+  const mailparser = new MailParser();
+  const rawEmail = this.payload.email;
-    var attachments = parsedEmail.attachments.map(function(file) {
+    const attachments = parsedEmail.attachments.map(function(file) {
-  var file;
-  var attachments = [];
+  let file;
+  const attachments = [];
-  for (var index in this.files) {
+  for (const index in this.files) {","-  var attachment = new Attachment();
+  const attachment = new Attachment();
-  var keyValues = {};
-  var key;
+  const keyValues = {};
+  let key;
-  for (var index in this.keys) {
+  for (const index in this.keys) {
-  var mailparser = new MailParser();
-  var rawEmail = this.payload.email;
+  const mailparser = new MailParser();
+  const rawEmail = this.payload.email;
-    var attachments = parsedEmail.attachments.map(function(file) {
+    const attachments = parsedEmail.attachments.map(function(file) {
-  var file;
-  var attachments = [];
+  let file;
+  const attachments = [];
-  for (var index in this.files) {
+  for (const index in this.files) {"
sendgrid_sendgrid-nodejs,4b44ed0e5dce6ef606aa029dcd8a6e58b023a6b5,Merge pull request #489 from jaydp17/const-let  Moving away from var,packages/inbound-mail-parser/src/parser.spec.js,,"-var Parse = require('./parser');
+const Parse = require('./parser');
-      var config = {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-      var parse = new Parse({}, {});
+      const parse = new Parse({}, {});
-      var request = {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);","-var Parse = require('./parser');
+const Parse = require('./parser');
-      var config = {
+      const config = {
-      var request = {
+      const request = {
-      var parse = new Parse(config, request);
-      var keyValues = parse.keyValues();
-      var expectedValues = {
+      const parse = new Parse(config, request);
+      const keyValues = parse.keyValues();
+      const expectedValues = {
-      var parse = new Parse({}, {});
+      const parse = new Parse({}, {});
-      var request = {
+      const request = {
-      var parse = new Parse({}, request);
+      const parse = new Parse({}, request);"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/classes/mail.js,"-      from, subject, content,
+      from, subject,
+    }
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs']);
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs']);
-      from, subject, content,
+      from, subject,
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);
+    }
-    return toSnakeCase(json);
+    return toSnakeCase(json, ['substitutions', 'customArgs']);"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/classes/personalization.js,,"-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs']);","-    data = toCamelCase(data);
+    data = toCamelCase(data, ['substitutions', 'customArgs']);
-      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');
+      throw new Error(
+        'Object expected for `substitutions` in reverseMergeSubstitutions'
+      );
-    return toSnakeCase(json, ['substitutions']);
+    return toSnakeCase(json, ['substitutions', 'customArgs']);"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/classes/personalization.spec.js,,"+    it('should not modify the keys of substitutions and custom args', () => {
+      const data = {
+        to: 'to@example.org',
+        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.substitutions).to.have.property('{{T_EST}}');
+      expect(json.substitutions).to.have.property('{{camelCase}}');
+      expect(json.substitutions).to.have.property('{{snake_case}}');
+      expect(json.substitutions['{{T_EST}}']).to.equal('Test');
+      expect(json.substitutions['{{camelCase}}']).to.equal('Test');
+      expect(json.substitutions['{{snake_case}}']).to.equal('Test');
+      expect(json.custom_args).to.have.property('T_EST');
+      expect(json.custom_args).to.have.property('camelCase');
+      expect(json.custom_args).to.have.property('snake_case');
+      expect(json.custom_args.T_EST).to.equal('Test');
+      expect(json.custom_args.camelCase).to.equal('Test');
+      expect(json.custom_args.snake_case).to.equal('Test');
+    });
-      customArgs: {test: 'Test'},
-      substitutions: {test: 'Test'},
+      customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+      substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-    it('should call fromData() from the constructor', function() {
+    it('should call fromData() from the constructor', () => {
-    it('should throw an error for invalid input', function() {
+    it('should throw an error for invalid input', () => {
-    it('should have set all properties', function() {
+    it('should have set all properties', () => {
-      expect(p.customArgs.test).to.equal('Test');
-      expect(p.substitutions.test).to.equal('Test');
+      expect(p.customArgs.snake_case).to.equal('Test');
+      expect(p.substitutions.snake_case).to.equal('Test');
+    it('should not modify the keys of substitutions and custom args', () => {
+      p.fromData(data);
+      expect(p.substitutions.T_EST).to.equal('Test');
+      expect(p.substitutions.camelCase).to.equal('Test');
+      expect(p.substitutions.snake_case).to.equal('Test');
+      expect(p.customArgs.T_EST).to.equal('Test');
+      expect(p.customArgs.camelCase).to.equal('Test');
+      expect(p.customArgs.snake_case).to.equal('Test');
+    });","+    it('should not modify the keys of substitutions and custom args', () => {
+      const data = {
+        to: 'to@example.org',
+        customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+        substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+      };
+      p.fromData(data);
+      const json = p.toJSON();
+      expect(json.substitutions).to.have.property('{{T_EST}}');
+      expect(json.substitutions).to.have.property('{{camelCase}}');
+      expect(json.substitutions).to.have.property('{{snake_case}}');
+      expect(json.substitutions['{{T_EST}}']).to.equal('Test');
+      expect(json.substitutions['{{camelCase}}']).to.equal('Test');
+      expect(json.substitutions['{{snake_case}}']).to.equal('Test');
+      expect(json.custom_args).to.have.property('T_EST');
+      expect(json.custom_args).to.have.property('camelCase');
+      expect(json.custom_args).to.have.property('snake_case');
+      expect(json.custom_args.T_EST).to.equal('Test');
+      expect(json.custom_args.camelCase).to.equal('Test');
+      expect(json.custom_args.snake_case).to.equal('Test');
+    });
-      customArgs: {test: 'Test'},
-      substitutions: {test: 'Test'},
+      customArgs: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
+      substitutions: {snake_case: 'Test', T_EST: 'Test', camelCase: 'Test'},
-    it('should call fromData() from the constructor', function() {
+    it('should call fromData() from the constructor', () => {
-    it('should throw an error for invalid input', function() {
+    it('should throw an error for invalid input', () => {
-    it('should have set all properties', function() {
+    it('should have set all properties', () => {
-      expect(p.customArgs.test).to.equal('Test');
-      expect(p.substitutions.test).to.equal('Test');
+      expect(p.customArgs.snake_case).to.equal('Test');
+      expect(p.substitutions.snake_case).to.equal('Test');
+    it('should not modify the keys of substitutions and custom args', () => {
+      p.fromData(data);
+      expect(p.substitutions.T_EST).to.equal('Test');
+      expect(p.substitutions.camelCase).to.equal('Test');
+      expect(p.substitutions.snake_case).to.equal('Test');
+      expect(p.customArgs.T_EST).to.equal('Test');
+      expect(p.customArgs.camelCase).to.equal('Test');
+      expect(p.customArgs.snake_case).to.equal('Test');
+    });"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/helpers/convert-keys.js,,"+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);","+  //Ensure array for ignored values
+  if (!Array.isArray(ignored)) {
+    ignored = [];
+  }
+
+      //Convert key to snake case
+      const converted = converter(key);
+
+      //The ignored check checks both variants of the key
-        if (!Array.isArray(ignored) || !ignored.includes(key)) {
+        if (!ignored.includes(key) && !ignored.includes(converted)) {
-      const converted = converter(key);"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/helpers/convert-keys.spec.js,,"-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');","-    convertKeys(objCopy, strToCamelCase, ['nestedCamelCase']);
+    convertKeys(objCopy, strToCamelCase, ['nestedSnakeCase']);
+    expect(objCopy.nestedCamelCase).to.have.property('a');
+    expect(objCopy.nestedCamelCase).to.have.property('snakeCase');
+    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
+    expect(objCopy.nestedCamelCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedSnakeCase).to.have.property('snakeCase');
-    expect(objCopy.nestedSnakeCase).not.to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).to.have.property('a');
-    expect(objCopy.nestedCamelCase).to.have.property('camelCase');
-    expect(objCopy.nestedCamelCase).to.have.property('snake_case');
-    expect(objCopy.nestedCamelCase).not.to.have.property('snakeCase');
+    expect(objCopy.nestedSnakeCase).to.have.property('snake_case');
+    expect(objCopy.nestedSnakeCase).not.to.have.property('snakeCase');"
sendgrid_sendgrid-nodejs,233102596de3fba89961f3a4d9e3f62b8886acfe,Merge pull request #442 from adamreisnz/issue-441  Issue 441,packages/helpers/helpers/split-name-email.spec.js,,"-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {","-describe('splitNameEmail()', function() {
+describe('splitNameEmail', function() {"
sendgrid_sendgrid-nodejs,faaa3e8776de3b08ce832e6f0d6c3578df5fa97f,Merge pull request #438 from adamreisnz/issue-435  Content is not mandatory,packages/helpers/classes/mail.js,,"-      from, subject, content,
+      from, subject,
+    }
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);","-      from, subject, content,
+      from, subject,
+    }
+    if (Array.isArray(content) && content.length > 0) {
+      json.content = arrayToJSON(content);"
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',lerna.json,,"-  ""version"": ""6.1.0""
+  ""version"": ""6.1.1""","-  ""version"": ""6.1.0""
+  ""version"": ""6.1.1"""
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',packages/client/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.0"",
+    ""@sendgrid/helpers"": ""^6.1.1"",","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.0"",
+    ""@sendgrid/helpers"": ""^6.1.1"","
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',packages/helpers/classes/mail.js,,"+
+    //Convert to class if needed
+    if (!(personalization instanceof Personalization)) {
+      personalization = new Personalization(personalization);
+    }
+
+    //Apply substitutions and push to array
-    personalization.reverseMergeSubstitutions(this.substitutions);
-    personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    if (personalization instanceof Personalization) {
+      personalization.reverseMergeSubstitutions(this.substitutions);
+      personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    }","+
+    //Convert to class if needed
+    if (!(personalization instanceof Personalization)) {
+      personalization = new Personalization(personalization);
+    }
+
+    //Apply substitutions and push to array
-    personalization.reverseMergeSubstitutions(this.substitutions);
-    personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    if (personalization instanceof Personalization) {
+      personalization.reverseMergeSubstitutions(this.substitutions);
+      personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    }"
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',packages/helpers/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"","
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.0"",
+    ""@sendgrid/helpers"": ""^6.1.1"",","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/helpers"": ""^6.1.0"",
+    ""@sendgrid/helpers"": ""^6.1.1"","
sendgrid_sendgrid-nodejs,13055d6cf8e068bd761620a76194cf163e8e4a55,Merge remote-tracking branch 'sendgrid/master',packages/mail/package.json,,"-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/client"": ""^6.1.0"",
-    ""@sendgrid/helpers"": ""^6.1.0""
+    ""@sendgrid/client"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.1""","-  ""version"": ""6.1.0"",
+  ""version"": ""6.1.1"",
-    ""@sendgrid/client"": ""^6.1.0"",
-    ""@sendgrid/helpers"": ""^6.1.0""
+    ""@sendgrid/client"": ""^6.1.1"",
+    ""@sendgrid/helpers"": ""^6.1.1"""
sendgrid_sendgrid-nodejs,1e1512c9772203140eda96a5d0019d99be4e3f6a,Merge pull request #436 from adamreisnz/issue-433  Convert plain data to personalization class instance,packages/helpers/classes/mail.js,,"+
+    //Convert to class if needed
+    if (!(personalization instanceof Personalization)) {
+      personalization = new Personalization(personalization);
+    }
+
+    //Apply substitutions and push to array
-    personalization.reverseMergeSubstitutions(this.substitutions);
-    personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    if (personalization instanceof Personalization) {
+      personalization.reverseMergeSubstitutions(this.substitutions);
+      personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    }","+
+    //Convert to class if needed
+    if (!(personalization instanceof Personalization)) {
+      personalization = new Personalization(personalization);
+    }
+
+    //Apply substitutions and push to array
-    personalization.reverseMergeSubstitutions(this.substitutions);
-    personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    if (personalization instanceof Personalization) {
+      personalization.reverseMergeSubstitutions(this.substitutions);
+      personalization.setSubstitutionWrappers(this.substitutionWrappers);
+    }"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',packages/contact-importer/src/importer.js,,"+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};","+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',packages/inbound-mail-parser/src/parser.js,,"+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;","+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',package.json,,"-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.1.0"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0"",
+    ""typescript"": ""~2.4.2""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test:typescript"": ""tsc"",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }","-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.1.0"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0"",
+    ""typescript"": ""~2.4.2""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test:typescript"": ""tsc"",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',packages/contact-importer/src/importer.spec.js,,"+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});","+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',packages/inbound-mail-parser/src/parser.spec.js,,"+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});","+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,eb73fb34c64418e6d3c4318335d0dfc9ba43decc,Merge remote-tracking branch 'sendgrid/master',tsconfig.json,,"-        ""allowJs"": true,
-        ""moduleResolution"": ""node"",
-        ""target"": ""es5"",
-        ""noImplicitAny"": true
+        ""target"": ""es6"",
+        ""baseUrl"": ""."",
+        ""paths"": {
+            ""@sendgrid/*"": [""packages/*""]
+        }
-        ""index.d.ts"",
-        ""test/test.js"",
-        ""test/mail/test.js""
+        ""test/typescript/*.ts""","-        ""allowJs"": true,
-        ""moduleResolution"": ""node"",
-        ""target"": ""es5"",
-        ""noImplicitAny"": true
+        ""target"": ""es6"",
+        ""baseUrl"": ""."",
+        ""paths"": {
+            ""@sendgrid/*"": [""packages/*""]
+        }
-        ""index.d.ts"",
-        ""test/test.js"",
-        ""test/mail/test.js""
+        ""test/typescript/*.ts"""
sendgrid_sendgrid-nodejs,f61bd62249ae304eb490c9a76d273d44b7ce026b,Merge pull request #430 from SPARTAN563/feature/v6_typescript_definitions  Add TypeScript definitions for v6 packages,package.json,,"-    ""sinon-chai"": ""^2.10.0""
+    ""sinon-chai"": ""^2.10.0"",
+    ""typescript"": ""~2.4.2""
+    ""test:typescript"": ""tsc"",","-    ""sinon-chai"": ""^2.10.0""
+    ""sinon-chai"": ""^2.10.0"",
+    ""typescript"": ""~2.4.2""
+    ""test:typescript"": ""tsc"","
sendgrid_sendgrid-nodejs,f61bd62249ae304eb490c9a76d273d44b7ce026b,Merge pull request #430 from SPARTAN563/feature/v6_typescript_definitions  Add TypeScript definitions for v6 packages,packages/client/package.json,,"-    ""request"": ""^2.81.0""
+    ""request"": ""^2.81.0"",
+    ""@types/request"": ""^2.0.3""","-    ""request"": ""^2.81.0""
+    ""request"": ""^2.81.0"",
+    ""@types/request"": ""^2.0.3"""
sendgrid_sendgrid-nodejs,dad53e8600cab508933a48028cfef779f52898fe,Merge pull request #407 from adamreisnz/monorepo  Monorepo,packages/contact-importer/src/importer.js,,"+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};","+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};"
sendgrid_sendgrid-nodejs,dad53e8600cab508933a48028cfef779f52898fe,Merge pull request #407 from adamreisnz/monorepo  Monorepo,packages/inbound-mail-parser/src/parser.js,,"+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;","+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;"
sendgrid_sendgrid-nodejs,dad53e8600cab508933a48028cfef779f52898fe,Merge pull request #407 from adamreisnz/monorepo  Monorepo,package.json,,"-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.2.2"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }","-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.2.2"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }"
sendgrid_sendgrid-nodejs,dad53e8600cab508933a48028cfef779f52898fe,Merge pull request #407 from adamreisnz/monorepo  Monorepo,packages/contact-importer/src/importer.spec.js,,"+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});","+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,dad53e8600cab508933a48028cfef779f52898fe,Merge pull request #407 from adamreisnz/monorepo  Monorepo,packages/inbound-mail-parser/src/parser.spec.js,,"+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});","+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,3064ce1746007a024a12eb21c48099aba16f48ef,Merge remote-tracking branch 'origin/monorepo' into monorepo  # Conflicts: #	packages/helpers/classes/personalization.spec.js,packages/client/src/client.spec.js,,"+const baseUrl = 'http://localhost:4010/';
- * Dependencies
+ * Tests
-const sgClient = require('../../packages/client');
+describe('test_access_settings_activity_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/access_settings/activity';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_post', () => {
+  var request = {};
+  const data = {
+  ""ips"": [
+    {
+      ""ip"": ""192.168.1.1""
+    }, 
+    {
+      ""ip"": ""192.*.*.*""
+    }, 
+    {
+      ""ip"": ""192.168.1.3/32""
+    }
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_delete', () => {
+  var request = {};
+  const data = {
+  ""ids"": [
+    1, 
+    2, 
+    3
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist__rule_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/access_settings/whitelist/{rule_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist__rule_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/access_settings/whitelist/{rule_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts_post', () => {
+  var request = {};
+  const data = {
+  ""email_to"": ""example@example.com"", 
+  ""frequency"": ""daily"", 
+  ""type"": ""stats_notification""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/alerts';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_alerts_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/alerts';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__patch', () => {
+  var request = {};
+  const data = {
+  ""email_to"": ""example@example.com""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""My API Key"", 
+  ""sample"": ""data"", 
+  ""scopes"": [
+    ""mail.send"", 
+    ""alerts.create"", 
+    ""alerts.read""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/api_keys';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_api_keys_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/api_keys';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__put', () => {
+  var request = {};
+  const data = {
+  ""name"": ""A New Hope"", 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.update""
+  ]
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""A New Hope""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups_post', () => {
+  var request = {};
+  const data = {
+  ""description"": ""Suggestions for products our users might like."", 
+  ""is_default"": true, 
+  ""name"": ""Product Suggestions""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups_get', () => {
+  var request = {};
+  const queryParams = {
+  'id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/asm/groups';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__patch', () => {
+  var request = {};
+  const data = {
+  ""description"": ""Suggestions for items our users might like."", 
+  ""id"": 103, 
+  ""name"": ""Item Suggestions""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""test1@example.com"", 
+    ""test2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups/{group_id}/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/groups/{group_id}/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_search_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""exists1@example.com"", 
+    ""exists2@example.com"", 
+    ""doesnotexists@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups/{group_id}/suppressions/search';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/groups/{group_id}/suppressions/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_suppressions_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""test1@example.com"", 
+    ""test2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/suppressions/global';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/suppressions/global/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions/global/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_suppressions__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_browsers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'browsers': 'test_string', 
+  'end_date': '2016-04-01', 
+  'limit': 'test_string', 
+  'offset': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/browsers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns_post', () => {
+  var request = {};
+  const data = {
+  ""categories"": [
+    ""spring line""
+  ], 
+  ""custom_unsubscribe_url"": """", 
+  ""html_content"": ""<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>"", 
+  ""ip_pool"": ""marketing"", 
+  ""list_ids"": [
+    110, 
+    124
+  ], 
+  ""plain_content"": ""Check out our spring line!"", 
+  ""segment_ids"": [
+    110
+  ], 
+  ""sender_id"": 124451, 
+  ""subject"": ""New Products for Spring!"", 
+  ""suppression_group_id"": 42, 
+  ""title"": ""March Newsletter""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/campaigns';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__patch', () => {
+  var request = {};
+  const data = {
+  ""categories"": [
+    ""summer line""
+  ], 
+  ""html_content"": ""<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>"", 
+  ""plain_content"": ""Check out our summer line!"", 
+  ""subject"": ""New Products for Summer!"", 
+  ""title"": ""May Newsletter""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_post', () => {
+  var request = {};
+  const data = {
+  ""send_at"": 1489771528
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_patch', () => {
+  var request = {};
+  const data = {
+  ""send_at"": 1489451436
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_now_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules/now';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_test_post', () => {
+  var request = {};
+  const data = {
+  ""to"": ""your.email@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules/test';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_categories_get', () => {
+  var request = {};
+  const queryParams = {
+  'category': 'test_string', 
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_categories_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'categories': 'test_string', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_categories_stats_sums_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories/stats/sums';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_clients_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/clients/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_clients__client_type__stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/clients/{client_type}/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""pet"", 
+  ""type"": ""text""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/custom_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/custom_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields__custom_field_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/custom_fields/{custom_field_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields__custom_field_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/custom_fields/{custom_field_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""your list name""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists_delete', () => {
+  var request = {};
+  const data = [
+  1, 
+  2, 
+  3, 
+  4
+];
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_lists_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'delete_contacts': 'true'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""newlistname""
+};
+  request.body = data;
+  const queryParams = {
+  'list_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__get', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients_post', () => {
+  var request = {};
+  const data = [
+  ""recipient_id1"", 
+  ""recipient_id2""
+];
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1, 
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients__recipient_id__post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients__recipient_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1, 
+  'recipient_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_post', () => {
+  var request = {};
+  const data = [
+  {
+    ""age"": 25, 
+    ""email"": ""example@example.com"", 
+    ""first_name"": """", 
+    ""last_name"": ""User""
+  }, 
+  {
+    ""age"": 25, 
+    ""email"": ""example2@example.com"", 
+    ""first_name"": ""Example"", 
+    ""last_name"": ""User""
+  }
+];
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_delete', () => {
+  var request = {};
+  const data = [
+  ""recipient_id1"", 
+  ""recipient_id2""
+];
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_patch', () => {
+  var request = {};
+  const data = [
+  {
+    ""email"": ""jones@example.com"", 
+    ""first_name"": ""Guy"", 
+    ""last_name"": ""Jones""
+  }
+];
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_billable_count_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/billable_count';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_count_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/count';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_search_get', () => {
+  var request = {};
+  const queryParams = {
+  '{field_name}': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/search';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__lists_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/{recipient_id}/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_reserved_fields_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/reserved_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments_post', () => {
+  var request = {};
+  const data = {
+  ""conditions"": [
+    {
+      ""and_or"": """", 
+      ""field"": ""last_name"", 
+      ""operator"": ""eq"", 
+      ""value"": ""Miller""
+    }, 
+    {
+      ""and_or"": ""and"", 
+      ""field"": ""last_clicked"", 
+      ""operator"": ""gt"", 
+      ""value"": ""01/02/2015""
+    }, 
+    {
+      ""and_or"": ""or"", 
+      ""field"": ""clicks.campaign_identifier"", 
+      ""operator"": ""eq"", 
+      ""value"": ""513""
+    }
+  ], 
+  ""list_id"": 4, 
+  ""name"": ""Last Name Miller""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/segments';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'delete_contacts': 'true'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__patch', () => {
+  var request = {};
+  const data = {
+  ""conditions"": [
+    {
+      ""and_or"": """", 
+      ""field"": ""last_name"", 
+      ""operator"": ""eq"", 
+      ""value"": ""Miller""
+    }
+  ], 
+  ""list_id"": 5, 
+  ""name"": ""The Millers""
+};
+  request.body = data;
+  const queryParams = {
+  'segment_id': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__get', () => {
+  var request = {};
+  const queryParams = {
+  'segment_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments/{segment_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_status_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/status';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_devices_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/devices/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_geo_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'country': 'US', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/geo/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_post', () => {
+  var request = {};
+  const data = {
+  ""count"": 90323478, 
+  ""subusers"": [
+    ""subuser1"", 
+    ""subuser2""
+  ], 
+  ""user_can_send"": true, 
+  ""warmup"": true
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_ips_get', () => {
+  var request = {};
+  const queryParams = {
+  'exclude_whitelabels': 'true', 
+  'ip': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'subuser': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_assigned_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/assigned';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""marketing""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/pools';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/pools';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__put', () => {
+  var request = {};
+  const data = {
+  ""name"": ""new_pool_name""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__ips_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""0.0.0.0""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/pools/{pool_name}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__ips__ip__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/pools/{pool_name}/ips/{ip}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_remaining_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/remaining';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""0.0.0.0""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/warmup';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/warmup';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup__ip_address__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/warmup/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_warmup__ip_address__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/warmup/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips__ip_address__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_batch_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/mail/batch';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_mail_batch__batch_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail/batch/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_send_post', () => {
+  var request = {};
+  const data = {
+  ""content"": [
+    {
+      ""type"": ""text/html"", 
+      ""value"": ""<html><p>Hello, world!</p></html>""
+    }
+  ], 
+  ""from"": {
+    ""email"": ""sam.smith@example.com"", 
+    ""name"": ""Sam Smith""
+  }, 
+  ""personalizations"": [
+    {
+      ""subject"": ""Hello, World!"", 
+      ""to"": [
+        {
+          ""email"": ""john.doe@example.com"", 
+          ""name"": ""John Doe""
+        }
+      ]
+    }
+  ], 
+  ""reply_to"": {
+    ""email"": ""sam.smith@example.com"", 
+    ""name"": ""Sam Smith""
+  }, 
+  ""subject"": ""Hello, World!""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/mail/send';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_mail_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/mail_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_address_whitelist_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""list"": [
+    ""email1@example.com"", 
+    ""example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/address_whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_address_whitelist_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/address_whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bcc_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": ""email@example.com"", 
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/bcc';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bcc_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/bcc';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bounce_purge_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""hard_bounces"": 5, 
+  ""soft_bounces"": 5
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/bounce_purge';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bounce_purge_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/bounce_purge';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_footer_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""..."", 
+  ""plain_content"": ""...""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/footer';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_footer_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/footer';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_bounce_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/forward_bounce';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_bounce_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/forward_bounce';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_spam_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": """", 
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/forward_spam';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_spam_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/forward_spam';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_plain_content_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/plain_content';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_plain_content_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/plain_content';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_spam_check_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""max_score"": 5, 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/spam_check';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_spam_check_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/spam_check';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_template_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""<% body %>""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/template';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_template_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/template';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mailbox_providers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'mailbox_providers': 'test_string', 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/mailbox_providers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/partner_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_new_relic_patch', () => {
+  var request = {};
+  const data = {
+  ""enable_subuser_statistics"": true, 
+  ""enabled"": true, 
+  ""license_key"": """"
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/partner_settings/new_relic';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_new_relic_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/partner_settings/new_relic';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/scopes';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_requests_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/scopes/requests';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_requests__request_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/scopes/requests/{request_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_scopes_requests__request_id__approve_patch', () => {
+  var request = {};
+  request.method = 'PATCH';
+  request.url = '/v3/scopes/requests/{request_id}/approve';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders_post', () => {
+  var request = {};
+  const data = {
+  ""address"": ""123 Elm St."", 
+  ""address_2"": ""Apt. 456"", 
+  ""city"": ""Denver"", 
+  ""country"": ""United States"", 
+  ""from"": {
+    ""email"": ""from@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""nickname"": ""My Sender ID"", 
+  ""reply_to"": {
+    ""email"": ""replyto@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""state"": ""Colorado"", 
+  ""zip"": ""80202""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/senders';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_senders_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/senders';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_senders__sender_id__patch', () => {
+  var request = {};
+  const data = {
+  ""address"": ""123 Elm St."", 
+  ""address_2"": ""Apt. 456"", 
+  ""city"": ""Denver"", 
+  ""country"": ""United States"", 
+  ""from"": {
+    ""email"": ""from@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""nickname"": ""My Sender ID"", 
+  ""reply_to"": {
+    ""email"": ""replyto@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""state"": ""Colorado"", 
+  ""zip"": ""80202""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__resend_verification_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/senders/{sender_id}/resend_verification';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""John@example.com"", 
+  ""ips"": [
+    ""1.1.1.1"", 
+    ""2.2.2.2""
+  ], 
+  ""password"": ""johns_password"", 
+  ""username"": ""John@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/subusers';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1, 
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_reputations_get', () => {
+  var request = {};
+  const queryParams = {
+  'usernames': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/reputations';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01', 
+  'subusers': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_monthly_get', () => {
+  var request = {};
+  const queryParams = {
+  'date': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'subuser': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats/monthly';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_sums_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats/sums';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/subusers/{subuser_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__patch', () => {
+  var request = {};
+  const data = {
+  ""disabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/subusers/{subuser_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__ips_put', () => {
+  var request = {};
+  const data = [
+  ""127.0.0.1""
+];
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/subusers/{subuser_name}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_put', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""frequency"": 500
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""frequency"": 50000
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__stats_monthly_get', () => {
+  var request = {};
+  const queryParams = {
+  'date': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/{subuser_name}/stats/monthly';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_blocks_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/blocks';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_blocks_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/blocks';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_blocks__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/blocks/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_blocks__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/blocks/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_bounces_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": true, 
+  ""emails"": [
+    ""example@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/bounces';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_bounces_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/bounces';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_bounces__email__delete', () => {
+  var request = {};
+  const queryParams = {
+  'email_address': 'example@example.com'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/bounces/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_bounces__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/bounces/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/invalid_emails';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/invalid_emails';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/invalid_emails/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/invalid_emails/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/spam_reports';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/spam_reports';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/spam_reports/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/spam_reports/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_unsubscribes_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/unsubscribes';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""teammate1@example.com"", 
+  ""is_admin"": false, 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.update""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/teammates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_teammates_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/teammates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_pending_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/teammates/pending';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_pending__token__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/teammates/pending/{token}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_teammates_pending__token__resend_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/teammates/pending/{token}/resend';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates__username__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_teammates__username__patch', () => {
+  var request = {};
+  const data = {
+  ""is_admin"": false, 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.edit""
+  ]
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates__username__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""example_name""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/templates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_templates_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_templates__template_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""new_example_name""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions_post', () => {
+  var request = {};
+  const data = {
+  ""active"": 1, 
+  ""html_content"": ""<%body%>"", 
+  ""name"": ""example_version_name"", 
+  ""plain_content"": ""<%body%>"", 
+  ""subject"": ""<%subject%>"", 
+  ""template_id"": ""ddb96bbc-9b92-425e-8979-99464621b543""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/templates/{template_id}/versions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__patch', () => {
+  var request = {};
+  const data = {
+  ""active"": 1, 
+  ""html_content"": ""<%body%>"", 
+  ""name"": ""updated_example_name"", 
+  ""plain_content"": ""<%body%>"", 
+  ""subject"": ""<%subject%>""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__activate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}/activate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_click_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/click';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_click_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/click';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_google_analytics_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""utm_campaign"": ""website"", 
+  ""utm_content"": """", 
+  ""utm_medium"": ""email"", 
+  ""utm_source"": ""sendgrid.com"", 
+  ""utm_term"": """"
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/google_analytics';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_google_analytics_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/google_analytics';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_open_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/open';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_open_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/open';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_subscription_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""html content"", 
+  ""landing"": ""landing page html"", 
+  ""plain_content"": ""text content"", 
+  ""replace"": ""replacement tag"", 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/subscription';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_subscription_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/subscription';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_account_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/account';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_credits_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/credits';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_email_put', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/email';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_email_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/email';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_password_put', () => {
+  var request = {};
+  const data = {
+  ""new_password"": ""new_password"", 
+  ""old_password"": ""old_password""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/password';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_profile_patch', () => {
+  var request = {};
+  const data = {
+  ""city"": ""Orange"", 
+  ""first_name"": ""Example"", 
+  ""last_name"": ""User""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/profile';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_profile_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/profile';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends_post', () => {
+  var request = {};
+  const data = {
+  ""batch_id"": ""YOUR_BATCH_ID"", 
+  ""status"": ""pause""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/scheduled_sends';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/scheduled_sends';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__patch', () => {
+  var request = {};
+  const data = {
+  ""status"": ""pause""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_settings_enforced_tls_patch', () => {
+  var request = {};
+  const data = {
+  ""require_tls"": true, 
+  ""require_valid_cert"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/settings/enforced_tls';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_settings_enforced_tls_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/settings/enforced_tls';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_username_put', () => {
+  var request = {};
+  const data = {
+  ""username"": ""test_username""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/username';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_username_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/username';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_settings_patch', () => {
+  var request = {};
+  const data = {
+  ""bounce"": true, 
+  ""click"": true, 
+  ""deferred"": true, 
+  ""delivered"": true, 
+  ""dropped"": true, 
+  ""enabled"": true, 
+  ""group_resubscribe"": true, 
+  ""group_unsubscribe"": true, 
+  ""open"": true, 
+  ""processed"": true, 
+  ""spam_report"": true, 
+  ""unsubscribe"": true, 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/webhooks/event/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_settings_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/event/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_test_post', () => {
+  var request = {};
+  const data = {
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/webhooks/event/test';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings_post', () => {
+  var request = {};
+  const data = {
+  ""hostname"": ""myhostname.com"", 
+  ""send_raw"": false, 
+  ""spam_check"": true, 
+  ""url"": ""http://email.myhosthame.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/webhooks/parse/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__patch', () => {
+  var request = {};
+  const data = {
+  ""send_raw"": true, 
+  ""spam_check"": false, 
+  ""url"": ""http://newdomain.com/parse""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 'test_string', 
+  'offset': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_post', () => {
+  var request = {};
+  const data = {
+  ""automatic_security"": false, 
+  ""custom_spf"": true, 
+  ""default"": true, 
+  ""domain"": ""example.com"", 
+  ""ips"": [
+    ""192.168.1.1"", 
+    ""192.168.1.2""
+  ], 
+  ""subdomain"": ""news"", 
+  ""username"": ""john@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_get', () => {
+  var request = {};
+  const queryParams = {
+  'domain': 'test_string', 
+  'exclude_subusers': 'true', 
+  'limit': 1, 
+  'offset': 1, 
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_default_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/default';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_subuser_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_subuser_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__patch', () => {
+  var request = {};
+  const data = {
+  ""custom_spf"": true, 
+  ""default"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__subuser_post', () => {
+  var request = {};
+  const data = {
+  ""username"": ""jane@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{domain_id}/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__ips_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""192.168.0.1""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{id}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__ips__ip__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/{id}/ips/{ip}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips_post', () => {
+  var request = {};
+  const data = {
+  ""domain"": ""example.com"", 
+  ""ip"": ""192.168.1.1"", 
+  ""subdomain"": ""email""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_ips_get', () => {
+  var request = {};
+  const queryParams = {
+  'ip': 'test_string', 
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/ips/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/ips/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/ips/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_post', () => {
+  var request = {};
+  const data = {
+  ""default"": true, 
+  ""domain"": ""example.com"", 
+  ""subdomain"": ""mail""
+};
+  request.body = data;
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_links_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_default_get', () => {
+  var request = {};
+  const queryParams = {
+  'domain': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/default';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_subuser_delete', () => {
+  var request = {};
+  const queryParams = {
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/links/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_links_subuser_get', () => {
+  var request = {};
+  const queryParams = {
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__patch', () => {
+  var request = {};
+  const data = {
+  ""default"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__link_id__subuser_post', () => {
+  var request = {};
+  const data = {
+  ""username"": ""jane@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links/{link_id}/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+","+const baseUrl = 'http://localhost:4010/';
- * Dependencies
+ * Tests
-const sgClient = require('../../packages/client');
+describe('test_access_settings_activity_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/access_settings/activity';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_post', () => {
+  var request = {};
+  const data = {
+  ""ips"": [
+    {
+      ""ip"": ""192.168.1.1""
+    }, 
+    {
+      ""ip"": ""192.*.*.*""
+    }, 
+    {
+      ""ip"": ""192.168.1.3/32""
+    }
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_delete', () => {
+  var request = {};
+  const data = {
+  ""ids"": [
+    1, 
+    2, 
+    3
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/access_settings/whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist__rule_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/access_settings/whitelist/{rule_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_access_settings_whitelist__rule_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/access_settings/whitelist/{rule_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts_post', () => {
+  var request = {};
+  const data = {
+  ""email_to"": ""example@example.com"", 
+  ""frequency"": ""daily"", 
+  ""type"": ""stats_notification""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/alerts';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_alerts_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/alerts';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__patch', () => {
+  var request = {};
+  const data = {
+  ""email_to"": ""example@example.com""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_alerts__alert_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/alerts/{alert_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""My API Key"", 
+  ""sample"": ""data"", 
+  ""scopes"": [
+    ""mail.send"", 
+    ""alerts.create"", 
+    ""alerts.read""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/api_keys';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_api_keys_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/api_keys';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__put', () => {
+  var request = {};
+  const data = {
+  ""name"": ""A New Hope"", 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.update""
+  ]
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""A New Hope""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_api_keys__api_key_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/api_keys/{api_key_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups_post', () => {
+  var request = {};
+  const data = {
+  ""description"": ""Suggestions for products our users might like."", 
+  ""is_default"": true, 
+  ""name"": ""Product Suggestions""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups_get', () => {
+  var request = {};
+  const queryParams = {
+  'id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/asm/groups';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__patch', () => {
+  var request = {};
+  const data = {
+  ""description"": ""Suggestions for items our users might like."", 
+  ""id"": 103, 
+  ""name"": ""Item Suggestions""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/groups/{group_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""test1@example.com"", 
+    ""test2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups/{group_id}/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/groups/{group_id}/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions_search_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""exists1@example.com"", 
+    ""exists2@example.com"", 
+    ""doesnotexists@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/groups/{group_id}/suppressions/search';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_groups__group_id__suppressions__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/groups/{group_id}/suppressions/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_suppressions_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global_post', () => {
+  var request = {};
+  const data = {
+  ""recipient_emails"": [
+    ""test1@example.com"", 
+    ""test2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/asm/suppressions/global';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/asm/suppressions/global/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_asm_suppressions_global__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions/global/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_asm_suppressions__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/asm/suppressions/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_browsers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'browsers': 'test_string', 
+  'end_date': '2016-04-01', 
+  'limit': 'test_string', 
+  'offset': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/browsers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns_post', () => {
+  var request = {};
+  const data = {
+  ""categories"": [
+    ""spring line""
+  ], 
+  ""custom_unsubscribe_url"": """", 
+  ""html_content"": ""<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>"", 
+  ""ip_pool"": ""marketing"", 
+  ""list_ids"": [
+    110, 
+    124
+  ], 
+  ""plain_content"": ""Check out our spring line!"", 
+  ""segment_ids"": [
+    110
+  ], 
+  ""sender_id"": 124451, 
+  ""subject"": ""New Products for Spring!"", 
+  ""suppression_group_id"": 42, 
+  ""title"": ""March Newsletter""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/campaigns';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__patch', () => {
+  var request = {};
+  const data = {
+  ""categories"": [
+    ""summer line""
+  ], 
+  ""html_content"": ""<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>"", 
+  ""plain_content"": ""Check out our summer line!"", 
+  ""subject"": ""New Products for Summer!"", 
+  ""title"": ""May Newsletter""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/campaigns/{campaign_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_post', () => {
+  var request = {};
+  const data = {
+  ""send_at"": 1489771528
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_patch', () => {
+  var request = {};
+  const data = {
+  ""send_at"": 1489451436
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/campaigns/{campaign_id}/schedules';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_now_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules/now';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_campaigns__campaign_id__schedules_test_post', () => {
+  var request = {};
+  const data = {
+  ""to"": ""your.email@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/campaigns/{campaign_id}/schedules/test';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_categories_get', () => {
+  var request = {};
+  const queryParams = {
+  'category': 'test_string', 
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_categories_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'categories': 'test_string', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_categories_stats_sums_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/categories/stats/sums';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_clients_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/clients/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_clients__client_type__stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/clients/{client_type}/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""pet"", 
+  ""type"": ""text""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/custom_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/custom_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields__custom_field_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/custom_fields/{custom_field_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_contactdb_custom_fields__custom_field_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/custom_fields/{custom_field_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""your list name""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists_delete', () => {
+  var request = {};
+  const data = [
+  1, 
+  2, 
+  3, 
+  4
+];
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_lists_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'delete_contacts': 'true'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""newlistname""
+};
+  request.body = data;
+  const queryParams = {
+  'list_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__get', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists/{list_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients_post', () => {
+  var request = {};
+  const data = [
+  ""recipient_id1"", 
+  ""recipient_id2""
+];
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1, 
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients__recipient_id__post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_lists__list_id__recipients__recipient_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'list_id': 1, 
+  'recipient_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/lists/{list_id}/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_post', () => {
+  var request = {};
+  const data = [
+  {
+    ""age"": 25, 
+    ""email"": ""example@example.com"", 
+    ""first_name"": """", 
+    ""last_name"": ""User""
+  }, 
+  {
+    ""age"": 25, 
+    ""email"": ""example2@example.com"", 
+    ""first_name"": ""Example"", 
+    ""last_name"": ""User""
+  }
+];
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_delete', () => {
+  var request = {};
+  const data = [
+  ""recipient_id1"", 
+  ""recipient_id2""
+];
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_patch', () => {
+  var request = {};
+  const data = [
+  {
+    ""email"": ""jones@example.com"", 
+    ""first_name"": ""Guy"", 
+    ""last_name"": ""Jones""
+  }
+];
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_billable_count_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/billable_count';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_count_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/count';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients_search_get', () => {
+  var request = {};
+  const queryParams = {
+  '{field_name}': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/search';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/{recipient_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_recipients__recipient_id__lists_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/recipients/{recipient_id}/lists';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_reserved_fields_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/reserved_fields';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments_post', () => {
+  var request = {};
+  const data = {
+  ""conditions"": [
+    {
+      ""and_or"": """", 
+      ""field"": ""last_name"", 
+      ""operator"": ""eq"", 
+      ""value"": ""Miller""
+    }, 
+    {
+      ""and_or"": ""and"", 
+      ""field"": ""last_clicked"", 
+      ""operator"": ""gt"", 
+      ""value"": ""01/02/2015""
+    }, 
+    {
+      ""and_or"": ""or"", 
+      ""field"": ""clicks.campaign_identifier"", 
+      ""operator"": ""eq"", 
+      ""value"": ""513""
+    }
+  ], 
+  ""list_id"": 4, 
+  ""name"": ""Last Name Miller""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/contactdb/segments';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__delete', () => {
+  var request = {};
+  const queryParams = {
+  'delete_contacts': 'true'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__patch', () => {
+  var request = {};
+  const data = {
+  ""conditions"": [
+    {
+      ""and_or"": """", 
+      ""field"": ""last_name"", 
+      ""operator"": ""eq"", 
+      ""value"": ""Miller""
+    }
+  ], 
+  ""list_id"": 5, 
+  ""name"": ""The Millers""
+};
+  request.body = data;
+  const queryParams = {
+  'segment_id': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'PATCH';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__get', () => {
+  var request = {};
+  const queryParams = {
+  'segment_id': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments/{segment_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_segments__segment_id__recipients_get', () => {
+  var request = {};
+  const queryParams = {
+  'page': 1, 
+  'page_size': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/contactdb/segments/{segment_id}/recipients';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_contactdb_status_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/contactdb/status';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_devices_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/devices/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_geo_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'country': 'US', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/geo/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_post', () => {
+  var request = {};
+  const data = {
+  ""count"": 90323478, 
+  ""subusers"": [
+    ""subuser1"", 
+    ""subuser2""
+  ], 
+  ""user_can_send"": true, 
+  ""warmup"": true
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_ips_get', () => {
+  var request = {};
+  const queryParams = {
+  'exclude_whitelabels': 'true', 
+  'ip': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'subuser': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_assigned_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/assigned';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""marketing""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/pools';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/pools';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__put', () => {
+  var request = {};
+  const data = {
+  ""name"": ""new_pool_name""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/pools/{pool_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__ips_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""0.0.0.0""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/pools/{pool_name}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_ips_pools__pool_name__ips__ip__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/pools/{pool_name}/ips/{ip}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_remaining_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/remaining';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""0.0.0.0""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/ips/warmup';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/warmup';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips_warmup__ip_address__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/ips/warmup/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_ips_warmup__ip_address__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/warmup/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_ips__ip_address__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/ips/{ip_address}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_batch_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/mail/batch';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_mail_batch__batch_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail/batch/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_send_post', () => {
+  var request = {};
+  const data = {
+  ""content"": [
+    {
+      ""type"": ""text/html"", 
+      ""value"": ""<html><p>Hello, world!</p></html>""
+    }
+  ], 
+  ""from"": {
+    ""email"": ""sam.smith@example.com"", 
+    ""name"": ""Sam Smith""
+  }, 
+  ""personalizations"": [
+    {
+      ""subject"": ""Hello, World!"", 
+      ""to"": [
+        {
+          ""email"": ""john.doe@example.com"", 
+          ""name"": ""John Doe""
+        }
+      ]
+    }
+  ], 
+  ""reply_to"": {
+    ""email"": ""sam.smith@example.com"", 
+    ""name"": ""Sam Smith""
+  }, 
+  ""subject"": ""Hello, World!""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/mail/send';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 202);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(202);
+      });
+  });
+});
+
+describe('test_mail_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/mail_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_address_whitelist_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""list"": [
+    ""email1@example.com"", 
+    ""example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/address_whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_address_whitelist_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/address_whitelist';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bcc_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": ""email@example.com"", 
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/bcc';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bcc_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/bcc';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bounce_purge_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""hard_bounces"": 5, 
+  ""soft_bounces"": 5
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/bounce_purge';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_bounce_purge_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/bounce_purge';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_footer_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""..."", 
+  ""plain_content"": ""...""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/footer';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_footer_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/footer';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_bounce_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/forward_bounce';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_bounce_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/forward_bounce';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_spam_patch', () => {
+  var request = {};
+  const data = {
+  ""email"": """", 
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/forward_spam';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_forward_spam_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/forward_spam';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_plain_content_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/plain_content';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_plain_content_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/plain_content';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_spam_check_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""max_score"": 5, 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/spam_check';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_spam_check_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/spam_check';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_template_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""<% body %>""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/mail_settings/template';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mail_settings_template_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/mail_settings/template';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_mailbox_providers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'mailbox_providers': 'test_string', 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/mailbox_providers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/partner_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_new_relic_patch', () => {
+  var request = {};
+  const data = {
+  ""enable_subuser_statistics"": true, 
+  ""enabled"": true, 
+  ""license_key"": """"
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/partner_settings/new_relic';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_partner_settings_new_relic_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/partner_settings/new_relic';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/scopes';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_requests_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/scopes/requests';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_scopes_requests__request_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/scopes/requests/{request_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_scopes_requests__request_id__approve_patch', () => {
+  var request = {};
+  request.method = 'PATCH';
+  request.url = '/v3/scopes/requests/{request_id}/approve';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders_post', () => {
+  var request = {};
+  const data = {
+  ""address"": ""123 Elm St."", 
+  ""address_2"": ""Apt. 456"", 
+  ""city"": ""Denver"", 
+  ""country"": ""United States"", 
+  ""from"": {
+    ""email"": ""from@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""nickname"": ""My Sender ID"", 
+  ""reply_to"": {
+    ""email"": ""replyto@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""state"": ""Colorado"", 
+  ""zip"": ""80202""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/senders';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_senders_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/senders';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_senders__sender_id__patch', () => {
+  var request = {};
+  const data = {
+  ""address"": ""123 Elm St."", 
+  ""address_2"": ""Apt. 456"", 
+  ""city"": ""Denver"", 
+  ""country"": ""United States"", 
+  ""from"": {
+    ""email"": ""from@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""nickname"": ""My Sender ID"", 
+  ""reply_to"": {
+    ""email"": ""replyto@example.com"", 
+    ""name"": ""Example INC""
+  }, 
+  ""state"": ""Colorado"", 
+  ""zip"": ""80202""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/senders/{sender_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_senders__sender_id__resend_verification_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/senders/{sender_id}/resend_verification';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""John@example.com"", 
+  ""ips"": [
+    ""1.1.1.1"", 
+    ""2.2.2.2""
+  ], 
+  ""password"": ""johns_password"", 
+  ""username"": ""John@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/subusers';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1, 
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_reputations_get', () => {
+  var request = {};
+  const queryParams = {
+  'usernames': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/reputations';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'start_date': '2016-01-01', 
+  'subusers': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_monthly_get', () => {
+  var request = {};
+  const queryParams = {
+  'date': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'subuser': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats/monthly';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers_stats_sums_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/stats/sums';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/subusers/{subuser_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__patch', () => {
+  var request = {};
+  const data = {
+  ""disabled"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/subusers/{subuser_name}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__ips_put', () => {
+  var request = {};
+  const data = [
+  ""127.0.0.1""
+];
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/subusers/{subuser_name}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_put', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""frequency"": 500
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com"", 
+  ""frequency"": 50000
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__monitor_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/subusers/{subuser_name}/monitor';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_subusers__subuser_name__stats_monthly_get', () => {
+  var request = {};
+  const queryParams = {
+  'date': 'test_string', 
+  'limit': 1, 
+  'offset': 1, 
+  'sort_by_direction': 'asc', 
+  'sort_by_metric': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/subusers/{subuser_name}/stats/monthly';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_blocks_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/blocks';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_blocks_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/blocks';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_blocks__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/blocks/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_blocks__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/blocks/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_bounces_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": true, 
+  ""emails"": [
+    ""example@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/bounces';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_bounces_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/bounces';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_bounces__email__delete', () => {
+  var request = {};
+  const queryParams = {
+  'email_address': 'example@example.com'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/bounces/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_bounces__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/bounces/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/invalid_emails';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/invalid_emails';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/invalid_emails/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_invalid_emails__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/invalid_emails/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports_delete', () => {
+  var request = {};
+  const data = {
+  ""delete_all"": false, 
+  ""emails"": [
+    ""example1@example.com"", 
+    ""example2@example.com""
+  ]
+};
+  request.body = data;
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/spam_reports';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/spam_reports';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports__email__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/suppression/spam_reports/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_suppression_spam_reports__email__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/suppression/spam_reports/{email}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_suppression_unsubscribes_get', () => {
+  var request = {};
+  const queryParams = {
+  'end_time': 1, 
+  'limit': 1, 
+  'offset': 1, 
+  'start_time': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/suppression/unsubscribes';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_post', () => {
+  var request = {};
+  const data = {
+  ""email"": ""teammate1@example.com"", 
+  ""is_admin"": false, 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.update""
+  ]
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/teammates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_teammates_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/teammates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_pending_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/teammates/pending';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates_pending__token__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/teammates/pending/{token}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_teammates_pending__token__resend_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/teammates/pending/{token}/resend';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates__username__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_teammates__username__patch', () => {
+  var request = {};
+  const data = {
+  ""is_admin"": false, 
+  ""scopes"": [
+    ""user.profile.read"", 
+    ""user.profile.edit""
+  ]
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_teammates__username__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/teammates/{username}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates_post', () => {
+  var request = {};
+  const data = {
+  ""name"": ""example_name""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/templates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_templates_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_templates__template_id__patch', () => {
+  var request = {};
+  const data = {
+  ""name"": ""new_example_name""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates/{template_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions_post', () => {
+  var request = {};
+  const data = {
+  ""active"": 1, 
+  ""html_content"": ""<%body%>"", 
+  ""name"": ""example_version_name"", 
+  ""plain_content"": ""<%body%>"", 
+  ""subject"": ""<%subject%>"", 
+  ""template_id"": ""ddb96bbc-9b92-425e-8979-99464621b543""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/templates/{template_id}/versions';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__patch', () => {
+  var request = {};
+  const data = {
+  ""active"": 1, 
+  ""html_content"": ""<%body%>"", 
+  ""name"": ""updated_example_name"", 
+  ""plain_content"": ""<%body%>"", 
+  ""subject"": ""<%subject%>""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_templates__template_id__versions__version_id__activate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/templates/{template_id}/versions/{version_id}/activate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_click_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/click';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_click_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/click';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_google_analytics_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""utm_campaign"": ""website"", 
+  ""utm_content"": """", 
+  ""utm_medium"": ""email"", 
+  ""utm_source"": ""sendgrid.com"", 
+  ""utm_term"": """"
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/google_analytics';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_google_analytics_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/google_analytics';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_open_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/open';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_open_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/open';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_subscription_patch', () => {
+  var request = {};
+  const data = {
+  ""enabled"": true, 
+  ""html_content"": ""html content"", 
+  ""landing"": ""landing page html"", 
+  ""plain_content"": ""text content"", 
+  ""replace"": ""replacement tag"", 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/tracking_settings/subscription';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_tracking_settings_subscription_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/tracking_settings/subscription';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_account_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/account';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_credits_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/credits';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_email_put', () => {
+  var request = {};
+  const data = {
+  ""email"": ""example@example.com""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/email';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_email_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/email';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_password_put', () => {
+  var request = {};
+  const data = {
+  ""new_password"": ""new_password"", 
+  ""old_password"": ""old_password""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/password';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_profile_patch', () => {
+  var request = {};
+  const data = {
+  ""city"": ""Orange"", 
+  ""first_name"": ""Example"", 
+  ""last_name"": ""User""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/profile';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_profile_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/profile';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends_post', () => {
+  var request = {};
+  const data = {
+  ""batch_id"": ""YOUR_BATCH_ID"", 
+  ""status"": ""pause""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/scheduled_sends';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/scheduled_sends';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__patch', () => {
+  var request = {};
+  const data = {
+  ""status"": ""pause""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_scheduled_sends__batch_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/scheduled_sends/{batch_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_settings_enforced_tls_patch', () => {
+  var request = {};
+  const data = {
+  ""require_tls"": true, 
+  ""require_valid_cert"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/settings/enforced_tls';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_settings_enforced_tls_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/settings/enforced_tls';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_username_put', () => {
+  var request = {};
+  const data = {
+  ""username"": ""test_username""
+};
+  request.body = data;
+  request.method = 'PUT';
+  request.url = '/v3/user/username';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_username_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/username';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_settings_patch', () => {
+  var request = {};
+  const data = {
+  ""bounce"": true, 
+  ""click"": true, 
+  ""deferred"": true, 
+  ""delivered"": true, 
+  ""dropped"": true, 
+  ""enabled"": true, 
+  ""group_resubscribe"": true, 
+  ""group_unsubscribe"": true, 
+  ""open"": true, 
+  ""processed"": true, 
+  ""spam_report"": true, 
+  ""unsubscribe"": true, 
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/webhooks/event/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_settings_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/event/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_event_test_post', () => {
+  var request = {};
+  const data = {
+  ""url"": ""url""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/webhooks/event/test';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings_post', () => {
+  var request = {};
+  const data = {
+  ""hostname"": ""myhostname.com"", 
+  ""send_raw"": false, 
+  ""spam_check"": true, 
+  ""url"": ""http://email.myhosthame.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/user/webhooks/parse/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/settings';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__patch', () => {
+  var request = {};
+  const data = {
+  ""send_raw"": true, 
+  ""spam_check"": false, 
+  ""url"": ""http://newdomain.com/parse""
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_settings__hostname__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/settings/{hostname}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_user_webhooks_parse_stats_get', () => {
+  var request = {};
+  const queryParams = {
+  'aggregated_by': 'day', 
+  'end_date': '2016-04-01', 
+  'limit': 'test_string', 
+  'offset': 'test_string', 
+  'start_date': '2016-01-01'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/user/webhooks/parse/stats';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_post', () => {
+  var request = {};
+  const data = {
+  ""automatic_security"": false, 
+  ""custom_spf"": true, 
+  ""default"": true, 
+  ""domain"": ""example.com"", 
+  ""ips"": [
+    ""192.168.1.1"", 
+    ""192.168.1.2""
+  ], 
+  ""subdomain"": ""news"", 
+  ""username"": ""john@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_get', () => {
+  var request = {};
+  const queryParams = {
+  'domain': 'test_string', 
+  'exclude_subusers': 'true', 
+  'limit': 1, 
+  'offset': 1, 
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_default_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/default';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_subuser_delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_domains_subuser_get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__patch', () => {
+  var request = {};
+  const data = {
+  ""custom_spf"": true, 
+  ""default"": false
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/domains/{domain_id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__domain_id__subuser_post', () => {
+  var request = {};
+  const data = {
+  ""username"": ""jane@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{domain_id}/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__ips_post', () => {
+  var request = {};
+  const data = {
+  ""ip"": ""192.168.0.1""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{id}/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__ips__ip__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/domains/{id}/ips/{ip}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_domains__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/domains/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips_post', () => {
+  var request = {};
+  const data = {
+  ""domain"": ""example.com"", 
+  ""ip"": ""192.168.1.1"", 
+  ""subdomain"": ""email""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_ips_get', () => {
+  var request = {};
+  const queryParams = {
+  'ip': 'test_string', 
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/ips';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/ips/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/ips/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_ips__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/ips/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_post', () => {
+  var request = {};
+  const data = {
+  ""default"": true, 
+  ""domain"": ""example.com"", 
+  ""subdomain"": ""mail""
+};
+  request.body = data;
+  const queryParams = {
+  'limit': 1, 
+  'offset': 1
+};
+  request.qs = queryParams;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});
+
+describe('test_whitelabel_links_get', () => {
+  var request = {};
+  const queryParams = {
+  'limit': 1
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_default_get', () => {
+  var request = {};
+  const queryParams = {
+  'domain': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/default';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links_subuser_delete', () => {
+  var request = {};
+  const queryParams = {
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/links/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_links_subuser_get', () => {
+  var request = {};
+  const queryParams = {
+  'username': 'test_string'
+};
+  request.qs = queryParams;
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__delete', () => {
+  var request = {};
+  request.method = 'DELETE';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 204);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(204);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__patch', () => {
+  var request = {};
+  const data = {
+  ""default"": true
+};
+  request.body = data;
+  request.method = 'PATCH';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__get', () => {
+  var request = {};
+  request.method = 'GET';
+  request.url = '/v3/whitelabel/links/{id}';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__id__validate_post', () => {
+  var request = {};
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links/{id}/validate';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+
+describe('test_whitelabel_links__link_id__subuser_post', () => {
+  var request = {};
+  const data = {
+  ""username"": ""jane@example.com""
+};
+  request.body = data;
+  request.method = 'POST';
+  request.url = '/v3/whitelabel/links/{link_id}/subuser';
+  it('should have the correct response code', () => {
+    var sgClient = require('./client');
+    sgClient.setApiKey('SendGrid API Key');
+    sgClient.setDefaultRequest('baseUrl', baseUrl);
+    sgClient.setDefaultHeader('X-Mock', 200);
+    return sgClient
+      .request(request)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(200);
+      });
+  });
+});
+"
sendgrid_sendgrid-nodejs,3064ce1746007a024a12eb21c48099aba16f48ef,Merge remote-tracking branch 'origin/monorepo' into monorepo  # Conflicts: #	packages/helpers/classes/personalization.spec.js,packages/helpers/classes/personalization.js,,"-      throw new Error('Object expected for `substitutions`');
+      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');","-      throw new Error('Object expected for `substitutions`');
+      throw new Error('Object expected for `substitutions` in reverseMergeSubstitutions');"
sendgrid_sendgrid-nodejs,3064ce1746007a024a12eb21c48099aba16f48ef,Merge remote-tracking branch 'origin/monorepo' into monorepo  # Conflicts: #	packages/helpers/classes/personalization.spec.js,packages/helpers/classes/personalization.spec.js,"-      expect(function() {
-        p.setSubstitutions(null);
-      }).to.throw(Error);
-      }).to.throw(Error);
-      expect(function() {
-        p.reverseMergeSubstitutions(null);","-        p.setSubstitutions('Invalid');
-      }).to.throw(Error);
-      expect(function() {
-        p.setSubstitutions(null);
+        p.setSubstitutions(3);
-      }).to.throw(Error);
-      expect(function() {
-        p.reverseMergeSubstitutions(null);","-        p.setSubstitutions(null);
+        p.setSubstitutions(3);
-      }).to.throw(Error);
-      expect(function() {
-        p.reverseMergeSubstitutions(null);"
sendgrid_sendgrid-nodejs,3064ce1746007a024a12eb21c48099aba16f48ef,Merge remote-tracking branch 'origin/monorepo' into monorepo  # Conflicts: #	packages/helpers/classes/personalization.spec.js,packages/mail/src/mail.spec.js,,"-const baseUrl = process.env.MOCK_HOST || 'http://localhost:4010/';
+const baseUrl = 'http://localhost:4010/';","-const baseUrl = process.env.MOCK_HOST || 'http://localhost:4010/';
+const baseUrl = 'http://localhost:4010/';"
sendgrid_sendgrid-nodejs,56b72bb309a4beeae442d118c58453dea453235b,Merge branch 'monorepo' of https://github.com/adamreisnz/sendgrid-nodejs into adamreisnz-monorepo,packages/client/package.json,"-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.2"",","-    ""@sendgrid/helpers"": ""^6.0.0"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3"",","-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.2"",
-    ""@sendgrid/helpers"": ""^6.0.0"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3"","
sendgrid_sendgrid-nodejs,56b72bb309a4beeae442d118c58453dea453235b,Merge branch 'monorepo' of https://github.com/adamreisnz/sendgrid-nodejs into adamreisnz-monorepo,packages/helpers/classes/mail.js,,"-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-	/**
-	 * To JSON
-	 */
+  /**
+   * To JSON
+   */"
sendgrid_sendgrid-nodejs,56b72bb309a4beeae442d118c58453dea453235b,Merge branch 'monorepo' of https://github.com/adamreisnz/sendgrid-nodejs into adamreisnz-monorepo,packages/helpers/classes/personalization.js,,"-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof substitutions !== 'object' || substitutions === null) {
+    if (typeof substitutions !== 'object') {
-    if (typeof substitutions === 'undefined') {
-      return;
-    }
-    if (typeof substitutions !== 'object' || substitutions === null) {
+    if (typeof substitutions === 'undefined' || substitutions === null) {
+      return;
+    }
+    if (typeof substitutions !== 'object') {
-	 * To JSON
-	 */
+   * To JSON
+   */","-	/**
-	 * Constructor
-	 */
+  /**
+   * Constructor
+   */
-    if (typeof substitutions !== 'object' || substitutions === null) {
+    if (typeof substitutions !== 'object') {
-    if (typeof substitutions === 'undefined') {
-      return;
-    }
-    if (typeof substitutions !== 'object' || substitutions === null) {
+    if (typeof substitutions === 'undefined' || substitutions === null) {
+      return;
+    }
+    if (typeof substitutions !== 'object') {
-	 * To JSON
-	 */
+   * To JSON
+   */"
sendgrid_sendgrid-nodejs,0540c8277bfb8a77e819cd537f19bd337ab7a8ef,Fix merge conflicts,package.json,,"+  ""description"": ""Official SendGrid NodeJS library."",
+  ""homepage"": ""https://sendgrid.com"",","+  ""description"": ""Official SendGrid NodeJS library."",
+  ""homepage"": ""https://sendgrid.com"","
sendgrid_sendgrid-nodejs,0540c8277bfb8a77e819cd537f19bd337ab7a8ef,Fix merge conflicts,packages/client/package.json,"-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.4"",","-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.2"",","-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.2"","
sendgrid_sendgrid-nodejs,0540c8277bfb8a77e819cd537f19bd337ab7a8ef,Fix merge conflicts,packages/mail/package.json,"-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.4"",
-    ""@sendgrid/client"": ""^6.0.0-beta.3"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.3""
+    ""@sendgrid/client"": ""^6.0.0-beta.4"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.4""","-    ""@sendgrid/client"": ""^6.0.0-beta.3"",
+    ""@sendgrid/client"": ""^6.0.0-beta.2"",","-  ""version"": ""6.0.0-beta.3"",
+  ""version"": ""6.0.0-beta.4"",
-    ""@sendgrid/client"": ""^6.0.0-beta.3"",
+    ""@sendgrid/client"": ""^6.0.0-beta.2"","
sendgrid_sendgrid-nodejs,8a2436d188c5aab9c1360eb03621c9bec7905e55,Merge pull request #418 from SPARTAN563/fix/417-update-index-ts  fix: Update TypeScript definition to correct callback arguments for API,index.d.ts,,"+declare namespace SendGrid.Helpers.Error {
+    export interface SendGridError extends Error {
+
+    }
+}
+
-        API(request: SendGrid.Rest.Request, callback: (response: SendGrid.Rest.Response) => void): void;
+        API(request: SendGrid.Rest.Request, callback: (err: SendGrid.Helpers.Error.SendGridError, response: SendGrid.Rest.Response) => void): void;","+declare namespace SendGrid.Helpers.Error {
+    export interface SendGridError extends Error {
+
+    }
+}
+
-        API(request: SendGrid.Rest.Request, callback: (response: SendGrid.Rest.Response) => void): void;
+        API(request: SendGrid.Rest.Request, callback: (err: SendGrid.Helpers.Error.SendGridError, response: SendGrid.Rest.Response) => void): void;"
sendgrid_sendgrid-nodejs,3c4f82bddb705ff5b33db9d8dd67fb5288227650,Merge pull request #413 from zoitravel/master  Handle null and undefined values in substitutions,lib/helpers/mail/mail.js,,"-    this.substitutions[currentKey] = substitution[currentKey].toString();
+    var currentVal = substitution[currentKey];
+    if (currentVal === null || typeof currentVal === 'undefined') {
+      this.substitutions[currentKey] = '';
+    }
+    else {
+      this.substitutions[currentKey] = currentVal.toString();
+    }","-    this.substitutions[currentKey] = substitution[currentKey].toString();
+    var currentVal = substitution[currentKey];
+    if (currentVal === null || typeof currentVal === 'undefined') {
+      this.substitutions[currentKey] = '';
+    }
+    else {
+      this.substitutions[currentKey] = currentVal.toString();
+    }"
sendgrid_sendgrid-nodejs,ae8a9353872146e1752006284c181a27f17dd084,Merge pull request #410 from dangerismycat/patch-1  Cast substitution values to strings,lib/helpers/mail/mail.js,,"-    this.substitutions[Object.keys(substitution)[0]] =
-      substitution[Object.keys(substitution)[0]];
+    var currentKey = Object.keys(substitution)[0];
+    this.substitutions[currentKey] = substitution[currentKey].toString();","-    this.substitutions[Object.keys(substitution)[0]] =
-      substitution[Object.keys(substitution)[0]];
+    var currentKey = Object.keys(substitution)[0];
+    this.substitutions[currentKey] = substitution[currentKey].toString();"
sendgrid_sendgrid-nodejs,f6fce7391c27e0126f0b53acd91c71ea08bb6424,v6.0.0-beta.3,lerna.json,"-  ""version"": ""6.0.0-beta.0""
+  ""version"": ""6.0.0-beta.2""","-  ""version"": ""6.0.0-beta.0""
+  ""version"": ""6.0.0-beta.3""","-  ""version"": ""6.0.0-beta.0""
+  ""version"": ""6.0.0-beta.3"""
sendgrid_sendgrid-nodejs,f6fce7391c27e0126f0b53acd91c71ea08bb6424,v6.0.0-beta.3,packages/helpers/classes/mail.js,,"-      to, from, replyTo, sendAt, subject, text, html, content, templateId,
-      personalizations, attachments, ipPoolName, batchId, asm, sections,
-      headers, categories, customArgs, mailSettings, trackingSettings,
-      substitutions, substitutionWrappers, isMultiple,
+      to, from, replyTo, cc, bcc, sendAt, subject, text, html, content,
+      templateId, personalizations, attachments, ipPoolName, batchId,
+      sections, headers, categories, customArgs, asm, mailSettings,
+      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      //Create base data for personalizations
+      const baseData = {
+        cc,
+        bcc,
+        substitutions,
+        substitutionWrappers,
+      };
+
-          const subs = to.substitutions || substitutions;
-          this.addTo(to, subs, substitutionWrappers);
+          const toData = Object.assign({}, baseData, {to});
+          if (to.substitutions) {
+            toData.substitutions = to.substitutions;
+          }
+          this.addTo(toData);
-        this.addTo(to, substitutions, substitutionWrappers);
+        const toData = Object.assign({}, baseData, {to});
+        this.addTo(toData);
-  addTo(to, substitutions, substitutionWrappers) {
-    this.addPersonalization(new Personalization({
-      to, substitutions, substitutionWrappers,
-    }));
+  addTo(data) {
+    this.addPersonalization(new Personalization(data));","-      to, from, replyTo, sendAt, subject, text, html, content, templateId,
-      personalizations, attachments, ipPoolName, batchId, asm, sections,
-      headers, categories, customArgs, mailSettings, trackingSettings,
-      substitutions, substitutionWrappers, isMultiple,
+      to, from, replyTo, cc, bcc, sendAt, subject, text, html, content,
+      templateId, personalizations, attachments, ipPoolName, batchId,
+      sections, headers, categories, customArgs, asm, mailSettings,
+      trackingSettings, substitutions, substitutionWrappers, isMultiple,
+      //Create base data for personalizations
+      const baseData = {
+        cc,
+        bcc,
+        substitutions,
+        substitutionWrappers,
+      };
+
-          const subs = to.substitutions || substitutions;
-          this.addTo(to, subs, substitutionWrappers);
+          const toData = Object.assign({}, baseData, {to});
+          if (to.substitutions) {
+            toData.substitutions = to.substitutions;
+          }
+          this.addTo(toData);
-        this.addTo(to, substitutions, substitutionWrappers);
+        const toData = Object.assign({}, baseData, {to});
+        this.addTo(toData);
-  addTo(to, substitutions, substitutionWrappers) {
-    this.addPersonalization(new Personalization({
-      to, substitutions, substitutionWrappers,
-    }));
+  addTo(data) {
+    this.addPersonalization(new Personalization(data));"
sendgrid_sendgrid-nodejs,f6fce7391c27e0126f0b53acd91c71ea08bb6424,v6.0.0-beta.3,packages/helpers/package.json,"-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.2"",","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"",","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"","
sendgrid_sendgrid-nodejs,f6fce7391c27e0126f0b53acd91c71ea08bb6424,v6.0.0-beta.3,packages/inbound-mail-parser/package.json,"-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.2"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.2"",","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3"",","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3"","
sendgrid_sendgrid-nodejs,f6fce7391c27e0126f0b53acd91c71ea08bb6424,v6.0.0-beta.3,packages/mail/package.json,"-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.2"",
-    ""@sendgrid/client"": ""^6.0.0-beta.0"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0""
+    ""@sendgrid/client"": ""^6.0.0-beta.2"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.2""","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"",
-    ""@sendgrid/client"": ""^6.0.0-beta.0"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0""
+    ""@sendgrid/client"": ""^6.0.0-beta.3"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3""","-  ""version"": ""6.0.0-beta.0"",
+  ""version"": ""6.0.0-beta.3"",
-    ""@sendgrid/client"": ""^6.0.0-beta.0"",
-    ""@sendgrid/helpers"": ""^6.0.0-beta.0""
+    ""@sendgrid/client"": ""^6.0.0-beta.2"",
+    ""@sendgrid/helpers"": ""^6.0.0-beta.3"""
sendgrid_sendgrid-nodejs,28dc04b4e0be2bbd21d895b31901df9134727981,v6.0.0-beta.2,packages/contact-importer/src/importer.js,,"+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};","+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};"
sendgrid_sendgrid-nodejs,28dc04b4e0be2bbd21d895b31901df9134727981,v6.0.0-beta.2,packages/inbound-mail-parser/src/parser.js,,"+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;","+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/helpers');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;"
sendgrid_sendgrid-nodejs,28dc04b4e0be2bbd21d895b31901df9134727981,v6.0.0-beta.2,package.json,"-  ""version"": ""5.1.0"",
+  ""version"": ""5.1.2"",","-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.1.0"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }","-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""version"": ""5.1.0"",
+  ""version"": ""6.0.0"",
+  ""private"": false,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:helpers"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/helpers/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }"
sendgrid_sendgrid-nodejs,28dc04b4e0be2bbd21d895b31901df9134727981,v6.0.0-beta.2,packages/contact-importer/src/importer.spec.js,,"+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});","+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,28dc04b4e0be2bbd21d895b31901df9134727981,v6.0.0-beta.2,packages/inbound-mail-parser/src/parser.spec.js,,"+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});","+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,lerna.json,,"-  ""version"": ""6.0.0""
+  ""version"": ""6.0.0-beta.0""","-  ""version"": ""6.0.0""
+  ""version"": ""6.0.0-beta.0"""
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,package.json,,"-  ""private"": true,
+  ""private"": false,","-  ""private"": true,
+  ""private"": false,"
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,packages/client/package.json,,"-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },","-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },"
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,packages/contact-importer/package.json,,"-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },","-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },"
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,packages/inbound-mail-parser/package.json,,"-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-    ""@sendgrid/support"": ""^6.0.0"",
+    ""@sendgrid/mail-helpers"": ""^6.0.0-beta.0"",","-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-    ""@sendgrid/support"": ""^6.0.0"",
+    ""@sendgrid/mail-helpers"": ""^6.0.0-beta.0"","
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,packages/mail/package.json,,"-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-    ""@sendgrid/client"": ""^6.0.0"",
-    ""@sendgrid/support"": ""^6.0.0""
+    ""@sendgrid/client"": ""^6.0.0-beta.0"",
+    ""@sendgrid/mail-helpers"": ""^6.0.0-beta.0""","-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-    ""@sendgrid/client"": ""^6.0.0"",
-    ""@sendgrid/support"": ""^6.0.0""
+    ""@sendgrid/client"": ""^6.0.0-beta.0"",
+    ""@sendgrid/mail-helpers"": ""^6.0.0-beta.0"""
sendgrid_sendgrid-nodejs,1bdb4615ef02c257449f070cae19835eb782e1e4,Merge remote-tracking branch 'sendgrid/monorepo' into monorepo,packages/support/package.json,,"-  ""name"": ""@sendgrid/support"",
-  ""description"": ""SendGrid NodeJS support classes and helpers"",
-  ""version"": ""6.0.0"",
+  ""name"": ""@sendgrid/mail-helpers"",
+  ""description"": ""SendGrid NodeJS mail helpers"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-  ""dependencies"": {},
-    ""sendgrid""
+    ""sendgrid"",
+    ""mail"",
+    ""helpers""","-  ""name"": ""@sendgrid/support"",
-  ""description"": ""SendGrid NodeJS support classes and helpers"",
-  ""version"": ""6.0.0"",
+  ""name"": ""@sendgrid/mail-helpers"",
+  ""description"": ""SendGrid NodeJS mail helpers"",
+  ""version"": ""6.0.0-beta.0"",
+  ""publishConfig"": {
+    ""access"": ""public""
+  },
-  ""dependencies"": {},
-    ""sendgrid""
+    ""sendgrid"",
+    ""mail"",
+    ""helpers"""
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,package.json,,"-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/**/*.spec.js\"""",
-    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/mail/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:support"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/support/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",","-    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/**/*.spec.js\"""",
-    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""test/mail/*.spec.js\"""",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:support"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/support/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""","
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/client/package.json,"-  ""name"": ""@sendgrid/client"",
+  ""name"": ""sendgrid-client"",
-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta"",","-    ""http-as-promised"": ""^1.1.0""
+    ""@sendgrid/support"": ""^6.0.0"",
+    ""request"": ""^2.81.0""","-  ""name"": ""@sendgrid/client"",
+  ""name"": ""sendgrid-client"",
-  ""version"": ""6.0.0"",
+  ""version"": ""6.0.0-beta"",
-    ""http-as-promised"": ""^1.1.0""
+    ""@sendgrid/support"": ""^6.0.0"",
+    ""request"": ""^2.81.0"""
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/client/src/client.js,,"-const http = require('http-as-promised');
+const http = require('request');
-const mergeData = require('./helpers/merge-data');
+const {
+  helpers: {
+    mergeData,
+  },
+  classes: {
+    ResponseError,
+  },
+} = require('@sendgrid/support');
-    const promise = http(request);
+    const promise = new Promise((resolve, reject) => {
+      http(request, (error, response, body) => {
+
+        //Request error
+        if (error) {
+          return reject(error);
+        }
+
+        //Response error
+        if (response.statusCode >= 400) {
+          return reject(new ResponseError(response));
+        }
+
+        //Successful response
+        resolve([response, body]);
+      });
+    });","-const http = require('http-as-promised');
+const http = require('request');
-const mergeData = require('./helpers/merge-data');
+const {
+  helpers: {
+    mergeData,
+  },
+  classes: {
+    ResponseError,
+  },
+} = require('@sendgrid/support');
-    const promise = http(request);
+    const promise = new Promise((resolve, reject) => {
+      http(request, (error, response, body) => {
+
+        //Request error
+        if (error) {
+          return reject(error);
+        }
+
+        //Response error
+        if (response.statusCode >= 400) {
+          return reject(new ResponseError(response));
+        }
+
+        //Successful response
+        resolve([response, body]);
+      });
+    });"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/inbound-mail-parser/src/parser.js,,"-const {Attachment} = require('@sendgrid/mail-helpers');
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/support');","-const {Attachment} = require('@sendgrid/mail-helpers');
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/support');"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/support/classes/email-address.js,,"+'use strict';
+
+/**
+ * Dependencies
+ */
+const splitNameEmail = require('../helpers/split-name-email');
+
+/**
+ * Email address class
+ */
+class EmailAddress {
+
+	/**
+	 * Constructor
+	 */
+  constructor(data) {
+
+    //Construct from data
+    if (data) {
+      this.fromData(data);
+    }
+  }
+
+  /**
+   * From data
+   */
+  fromData(data) {
+
+    //String given
+    if (typeof data === 'string') {
+      const [name, email] = splitNameEmail(data);
+      data = {name, email};
+    }
+
+    //Expecting object
+    if (typeof data !== 'object') {
+      throw new Error('Expecting object or string for EmailAddress data');
+    }
+
+    //Extract name and email
+    const {name, email} = data;
+
+    //Set
+    this.setEmail(email);
+    this.setName(name);
+  }
+
+  /**
+   * Set name
+   */
+  setName(name) {
+    if (typeof name === 'undefined') {
+      return;
+    }
+    if (typeof name !== 'string') {
+      throw new Error('String expected for `name`');
+    }
+    this.name = name;
+  }
+
+  /**
+   * Set email
+   */
+  setEmail(email) {
+    if (typeof email === 'undefined') {
+      return;
+    }
+    if (typeof email !== 'string') {
+      throw new Error('String expected for `email`');
+    }
+    this.email = email;
+  }
+
+	/**
+	 * To JSON
+	 */
+  toJSON() {
+
+    //Get properties
+    const {email, name} = this;
+
+    //Initialize with mandatory properties
+    const json = {email};
+
+    //Add name if present
+    if (typeof name !== 'undefined') {
+      json.name = name;
+    }
+
+    //Return
+    return json;
+  }
+
+  /**************************************************************************
+   * Static helpers
+   ***/
+
+  /**
+   * Create an EmailAddress instance from given data
+   */
+  static create(data) {
+
+    //Array?
+    if (Array.isArray(data)) {
+      return data
+        .filter(item => !!item)
+        .map(item => this.create(item));
+    }
+
+    //Already instance of EmailAddress class?
+    if (data instanceof EmailAddress) {
+      return data;
+    }
+
+    //Create instance
+    return new EmailAddress(data);
+  }
+}
+
+//Export class
+module.exports = EmailAddress;","+'use strict';
+
+/**
+ * Dependencies
+ */
+const splitNameEmail = require('../helpers/split-name-email');
+
+/**
+ * Email address class
+ */
+class EmailAddress {
+
+	/**
+	 * Constructor
+	 */
+  constructor(data) {
+
+    //Construct from data
+    if (data) {
+      this.fromData(data);
+    }
+  }
+
+  /**
+   * From data
+   */
+  fromData(data) {
+
+    //String given
+    if (typeof data === 'string') {
+      const [name, email] = splitNameEmail(data);
+      data = {name, email};
+    }
+
+    //Expecting object
+    if (typeof data !== 'object') {
+      throw new Error('Expecting object or string for EmailAddress data');
+    }
+
+    //Extract name and email
+    const {name, email} = data;
+
+    //Set
+    this.setEmail(email);
+    this.setName(name);
+  }
+
+  /**
+   * Set name
+   */
+  setName(name) {
+    if (typeof name === 'undefined') {
+      return;
+    }
+    if (typeof name !== 'string') {
+      throw new Error('String expected for `name`');
+    }
+    this.name = name;
+  }
+
+  /**
+   * Set email
+   */
+  setEmail(email) {
+    if (typeof email === 'undefined') {
+      return;
+    }
+    if (typeof email !== 'string') {
+      throw new Error('String expected for `email`');
+    }
+    this.email = email;
+  }
+
+	/**
+	 * To JSON
+	 */
+  toJSON() {
+
+    //Get properties
+    const {email, name} = this;
+
+    //Initialize with mandatory properties
+    const json = {email};
+
+    //Add name if present
+    if (typeof name !== 'undefined') {
+      json.name = name;
+    }
+
+    //Return
+    return json;
+  }
+
+  /**************************************************************************
+   * Static helpers
+   ***/
+
+  /**
+   * Create an EmailAddress instance from given data
+   */
+  static create(data) {
+
+    //Array?
+    if (Array.isArray(data)) {
+      return data
+        .filter(item => !!item)
+        .map(item => this.create(item));
+    }
+
+    //Already instance of EmailAddress class?
+    if (data instanceof EmailAddress) {
+      return data;
+    }
+
+    //Create instance
+    return new EmailAddress(data);
+  }
+}
+
+//Export class
+module.exports = EmailAddress;"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/support/package.json,,"+{
+  ""name"": ""@sendgrid/support"",
+  ""description"": ""SendGrid NodeJS support classes and helpers"",
+  ""version"": ""6.0.0"",
+  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""contributors"": [
+    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
+    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
+    ""Swift <swift@sendgrid.com>"",
+    ""Brandon West <brandon.west@sendgrid.com>"",
+    ""Scott Motte <scott.motte@sendgrid.com>"",
+    ""Robert Acosta <robert.acosta@sendgrid.com>"",
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Reis <adam@reis.nz>""
+  ],
+  ""license"": ""MIT"",
+  ""homepage"": ""https://sendgrid.com"",
+  ""repository"": {
+    ""type"": ""git"",
+    ""url"": ""git://github.com/sendgrid/sendgrid-nodejs.git""
+  },
+  ""engines"": {
+    ""node"": "">= 6.0.0""
+  },
+  ""dependencies"": {},
+  ""tags"": [
+    ""sendgrid""
+  ]
+}","+{
+  ""name"": ""sendgrid-mail-helpers"",
+  ""description"": ""SendGrid NodeJS mail helpers"",
+  ""version"": ""6.0.0-beta"",
+  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
+  ""contributors"": [
+    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
+    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
+    ""Swift <swift@sendgrid.com>"",
+    ""Brandon West <brandon.west@sendgrid.com>"",
+    ""Scott Motte <scott.motte@sendgrid.com>"",
+    ""Robert Acosta <robert.acosta@sendgrid.com>"",
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Reis <adam@reis.nz>""
+  ],
+  ""license"": ""MIT"",
+  ""homepage"": ""https://sendgrid.com"",
+  ""repository"": {
+    ""type"": ""git"",
+    ""url"": ""git://github.com/sendgrid/sendgrid-nodejs.git""
+  },
+  ""engines"": {
+    ""node"": "">= 6.0.0""
+  },
+  ""tags"": [
+<<<<<<< HEAD:packages/mail-helpers/package.json
+    ""sendgrid"",
+    ""mail"",
+    ""helpers""
+=======
+    ""sendgrid""
+>>>>>>> a2775ef11169d4859fba8644cdb789c5036c0267:packages/support/package.json
+  ]
+}"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/mail/src/mail.js,,"-const {Mail} = require('@sendgrid/mail-helpers');
+const {
+  classes: {
+    Mail,
+  },
+} = require('@sendgrid/support');
+    this.substitutionWrappers = ['{{', '}}'];
+  }
+
+  /**
+   * Set substitution wrappers
+   */
+  setSubstitutionWrappers(left, right) {
+    if (typeof left === 'undefined' || typeof right === 'undefined') {
+      throw new Error('Must provide both left and right side wrappers');
+    }
+    this.substitutionWrappers[0] = left;
+    this.substitutionWrappers[1] = right;
-    //Catch sync errors
+    //Send mail
-      //Create Mail instance(s) from given data and get JSON body for request
-      const mail = Mail.create(data, isMultiple);
+      //Append multiple flag to data if not set
+      if (typeof data.isMultiple === 'undefined') {
+        data.isMultiple = isMultiple;
+      }
+
+      //Append global substitution wrappers if not set in data
+      if (typeof data.substitutionWrappers === 'undefined') {
+        data.substitutionWrappers = this.substitutionWrappers;
+      }
+
+      //Create Mail instance from data and get JSON body for request
+      const mail = Mail.create(data);
+
+    //Catch sync errors
+
+      //Pass to callback if provided
+
+      //Reject promise","-const {Mail} = require('@sendgrid/mail-helpers');
+const {
+  classes: {
+    Mail,
+  },
+} = require('@sendgrid/support');
+    this.substitutionWrappers = ['{{', '}}'];
+  }
+
+  /**
+   * Set substitution wrappers
+   */
+  setSubstitutionWrappers(left, right) {
+    if (typeof left === 'undefined' || typeof right === 'undefined') {
+      throw new Error('Must provide both left and right side wrappers');
+    }
+    this.substitutionWrappers[0] = left;
+    this.substitutionWrappers[1] = right;
-    //Catch sync errors
+    //Send mail
-      //Create Mail instance(s) from given data and get JSON body for request
-      const mail = Mail.create(data, isMultiple);
+      //Append multiple flag to data if not set
+      if (typeof data.isMultiple === 'undefined') {
+        data.isMultiple = isMultiple;
+      }
+
+      //Append global substitution wrappers if not set in data
+      if (typeof data.substitutionWrappers === 'undefined') {
+        data.substitutionWrappers = this.substitutionWrappers;
+      }
+
+      //Create Mail instance from data and get JSON body for request
+      const mail = Mail.create(data);
+
+    //Catch sync errors
+
+      //Pass to callback if provided
+
+      //Reject promise"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/client/src/client.spec.js,,"+'use strict';
+
+/**
+ * Dependencies
+ */
+const sgClient = require('../../packages/client');","+'use strict';
+
+/**
+ * Dependencies
+ */
+const sgClient = require('../../packages/client');"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/contact-importer/src/importer.spec.js,,"+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});","+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,test/mocha.js,,"+'use strict';
+
+//Load dependencies
+const fs = require('fs');
+const chai = require('chai');
+const sinon = require('sinon');
+const dirtyChai = require('dirty-chai');
+const sinonChai = require('sinon-chai');
+const chaiAsPromised = require('chai-as-promised');
+
+//Enable should assertion style for usage with chai-as-promised
+chai.should();
+
+//Extend chai
+chai.use(dirtyChai);
+chai.use(sinonChai);
+chai.use(chaiAsPromised);
+
+//Load sinon extensions
+require('mocha-sinon');
+
+//Expose globals
+global.expect = chai.expect;
+global.sinon = sinon;","+'use strict';
+
+//Load dependencies
+const fs = require('fs');
+const chai = require('chai');
+const sinon = require('sinon');
+const dirtyChai = require('dirty-chai');
+const sinonChai = require('sinon-chai');
+const chaiAsPromised = require('chai-as-promised');
+
+//Enable should assertion style for usage with chai-as-promised
+chai.should();
+
+//Extend chai
+chai.use(dirtyChai);
+chai.use(sinonChai);
+chai.use(chaiAsPromised);
+
+//Load sinon extensions
+require('mocha-sinon');
+
+//Expose globals
+global.expect = chai.expect;
+global.sinon = sinon;"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/inbound-mail-parser/src/parser.spec.js,,"+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});","+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,71743d644897ade37ee4afd14840a793ac0736bc,Packing things up,packages/mail/src/mail.spec.js,,"+'use strict';
+
+/**
+ * Dependencies
+ */
+const sgMail = require('./mail');
+const sgClient = sgMail.client;
+const baseUrl = process.env.MOCK_HOST || 'http://localhost:4010/';
+
+/**
+ * Setup client
+ */
+before(() => {
+  sgClient.setApiKey('SendGrid API Key');
+  sgClient.setDefaultRequest('baseUrl', baseUrl);
+});
+
+/**
+ * Default mock header
+ */
+beforeEach(() => {
+  sgClient.setDefaultHeader('X-Mock', 200);
+});
+
+/**
+ * Tests
+ */
+describe('sgMail.send()', () => {
+
+  //Create mail data
+  const data = {
+    to: 'recipient@example.org',
+    from: 'sender@example.org',
+    subject: 'Hello world',
+    text: 'Hello plain world!',
+    html: '<p>Hello HTML world!</p>',
+  };
+
+  it('should throw an error when no data provided', () => {
+    return expect(sgMail.send()).to.eventually.be.rejectedWith(Error);
+  });
+
+  it('should send a basic email', () => {
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});","+'use strict';
+
+/**
+ * Dependencies
+ */
+const sgMail = require('./mail');
+const sgClient = sgMail.client;
+const baseUrl = process.env.MOCK_HOST || 'http://localhost:4010/';
+
+/**
+ * Setup client
+ */
+before(() => {
+  sgClient.setApiKey('SendGrid API Key');
+  sgClient.setDefaultRequest('baseUrl', baseUrl);
+});
+
+/**
+ * Default mock header
+ */
+beforeEach(() => {
+  sgClient.setDefaultHeader('X-Mock', 200);
+});
+
+/**
+ * Tests
+ */
+describe('sgMail.send()', () => {
+
+  //Create mail data
+  const data = {
+    to: 'recipient@example.org',
+    from: 'sender@example.org',
+    subject: 'Hello world',
+    text: 'Hello plain world!',
+    html: '<p>Hello HTML world!</p>',
+  };
+
+  it('should throw an error when no data provided', () => {
+    return expect(sgMail.send()).to.eventually.be.rejectedWith(Error);
+  });
+
+  it('should send a basic email', () => {
+    sgClient.setDefaultHeader('X-Mock', 201);
+    return sgMail
+      .send(data)
+      .then(([response, body]) => {
+        expect(response.statusCode).to.equal(201);
+      });
+  });
+});"
sendgrid_sendgrid-nodejs,a2775ef11169d4859fba8644cdb789c5036c0267,Merge pull request #406 from adamreisnz/monorepo  Monorepo,packages/contact-importer/src/importer.js,,"+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};","+/* eslint dot-notation: 'off' */
+'use strict';
+
+var Bottleneck = require('bottleneck');
+var EventEmitter = require('events').EventEmitter;
+var chunk = require('lodash.chunk');
+var debug = require('debug')('sendgrid');
+var util = require('util');
+var queue = require('async.queue');
+var ensureAsync = require('async.ensureasync');
+
+var ContactImporter = module.exports = function(sg, options) {
+  options = options || {};
+  var self = this;
+  this.sg = sg;
+  this.pendingItems = [];
+
+  // Number of items to send per batch.
+  this.batchSize = options.batchSize || 1500;
+
+  // Max number of requests per rate limit period.
+  this.rateLimitLimit = options.rateLimitLimit || 3;
+
+  // Length of rate limit period (miliseconds).
+  this.rateLimitPeriod = options.rateLimitPeriod || 2000;
+
+  // Create a throttler that will process no more than `rateLimitLimit` requests every `rateLimitPeriod` ms.
+  this.throttle = new Bottleneck(0, 0);
+  this.throttle.changeReservoir(this.rateLimitLimit);
+
+  // Create a queue that wil be used to send batches to the throttler.
+  this.queue = queue(ensureAsync(this._worker));
+
+  // When the last batch is removed from the queue, add any incomplete batches.
+  this.queue.empty = function() {
+    if (self.pendingItems.length) {
+      debug('adding %s items from deferrd queue for processing', self.pendingItems.length);
+      var batch = self.pendingItems.splice(0);
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+  };
+
+  // Emit an event when the queue is drained.
+  this.queue.drain = function() {
+    self.emit('drain');
+  };
+};
+util.inherits(ContactImporter, EventEmitter);
+
+/**
+ *  Add a new contact, or an array of contact, to the end of the queue.
+ *
+ * @param {Array|Object} data A contact or array of contacts.
+ */
+ContactImporter.prototype.push = function(data) {
+  var self = this;
+  data = Array.isArray(data) ? data : [data];
+
+  // Add the new items onto the pending items.
+  var itemsToProcess = this.pendingItems.concat(data);
+
+  // Chunk the pending items into batches and add onto the queue
+  var batches = chunk(itemsToProcess, this.batchSize);
+  debug('generated batches %s from %s items', batches.length, data.length);
+
+  batches.forEach(function(batch) {
+    // If this batch is full or the queue is empty queue it for processing.
+    if (batch.length === self.batchSize || !self.queue.length()) {
+      self.queue.push({
+        data: batch,
+        owner: self,
+      }, function(error, result) {
+        if (error) {
+          return self._notify(error, JSON.parse(error.response.body), batch);
+        }
+        return self._notify(null, JSON.parse(result.body), batch);
+      });
+    }
+    // Otherwise, it store it for later.
+    else {
+      debug('the last batch with only %s item is deferred (partial batch)', batch.length);
+      self.pendingItems = batch;
+    }
+  });
+
+  debug('batches in queue: %s', this.queue.length());
+  debug('items in deferred queue: %s', this.pendingItems.length);
+};
+
+/**
+ * Send a batch of contacts to Sendgrid.
+ *
+ * @param {Object} task Task to be processed (data in 'data' property)
+ * @param {Function} callback Callback function.
+ */
+ContactImporter.prototype._worker = function(task, callback) {
+  var context = task.owner;
+  debug('processing batch (%s items)', task.data.length);
+  context.throttle.submit(context._sendBatch, context, task.data, callback);
+};
+
+ContactImporter.prototype._sendBatch = function(context, data, callback) {
+  debug('sending batch (%s items)', data.length);
+
+  var request = context.sg.emptyRequest();
+  request.method = 'POST';
+  request.path = '/v3/contactdb/recipients';
+  request.body = data;
+
+  context.sg.API(request)
+    .then(function(response) {
+      debug('got response: %o', response);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(null, response);
+    })
+    .catch(function(error) {
+      debug('got error, %o', error);
+      setTimeout(function() {
+        context.throttle.incrementReservoir(1);
+      }, context.rateLimitPeriod);
+      return callback(error);
+    });
+};
+
+/**
+ * Emit the result of processing a batch.
+ *
+ * @param {Object} error
+ * @param {Object} result
+ */
+ContactImporter.prototype._notify = function(error, result, batch) {
+  if (error) {
+    return this.emit('error', error, batch);
+  }
+  return this.emit('success', result, batch);
+};"
sendgrid_sendgrid-nodejs,a2775ef11169d4859fba8644cdb789c5036c0267,Merge pull request #406 from adamreisnz/monorepo  Monorepo,packages/inbound-mail-parser/src/parser.js,,"+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/support');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;","+'use strict';
+
+const fs = require('fs');
+const MailParser = require('mailparser').MailParser;
+const {
+  classes: {
+    Attachment,
+  },
+} = require('@sendgrid/support');
+
+/**
+ * Normalises attachment files retrieved from file system or parsed raw email
+ *
+ * @param {Object} file The file object returned by file system or parsed email
+ * @return {Object} A SendGrid Attachment object with the file data
+ */
+function createAttachment(file) {
+  var attachment = new Attachment();
+
+  attachment.setFilename(file.originalname || file.fileName);
+  attachment.setType(file.mimetype || file.contentType);
+  attachment.setContent(file.content.toString('base64'));
+
+  return attachment;
+}
+
+/**
+ * Simple class that parses data received from SendGrid Inbound Parse Webhook
+ *
+ * @constructor
+ * @param {Object} config inbound configuration object
+ * @param {Object} request request object of the parse webhook payload
+ */
+function Parse(config, request) {
+  this.keys = config.keys;
+  this.request = request;
+  this.payload = request.body || {};
+  this.files = request.files || [];
+}
+
+/**
+ * Return an object literal of key/values in the payload received from webhook
+ * @return {Object} Valid key/values in the webhook payload
+ */
+Parse.prototype.keyValues = function() {
+  var keyValues = {};
+  var key;
+
+  for (var index in this.keys) {
+    key = this.keys[index];
+
+    if (this.payload[key]) {
+      keyValues[key] = this.payload[key];
+    }
+  }
+
+  return keyValues;
+};
+
+/**
+ * Whether the payload contains the raw email (Only applies to raw payloads)
+ * @return {Boolean}
+ */
+Parse.prototype.hasRawEmail = function() {
+  return Boolean(this.payload.email);
+};
+
+/**
+ * Parses the raw email and returns the mail object in a callback (Only applies to raw payloads)
+ * @param {Function} callback Function which will receive the parsed email object as the sole argument
+ */
+Parse.prototype.getRawEmail = function(callback) {
+  var mailparser = new MailParser();
+  var rawEmail = this.payload.email;
+
+  if (!rawEmail) {
+    return callback(null);
+  }
+
+  mailparser.on('end', callback);
+
+  mailparser.write(rawEmail);
+  mailparser.end();
+};
+
+/**
+ * Retrieves all attachments received from the webhook payload
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype.attachments = function(callback) {
+  if (this.hasRawEmail()) {
+    return this._getAttachmentsRaw(callback);
+  }
+
+  this._getAttachments(callback);
+};
+
+/**
+ * Parses raw email to retrieve any encoded attachments (Only applies to raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachmentsRaw = function(callback) {
+  this.getRawEmail(function(parsedEmail) {
+    if (!parsedEmail || !parsedEmail.attachments) {
+      return callback([]);
+    }
+
+    var attachments = parsedEmail.attachments.map(function(file) {
+      return createAttachment(file);
+    });
+
+    callback(attachments);
+  });
+};
+
+/**
+ * Retrieves webhook payload files from the file system (Only applies to non raw payloads)
+ * @private
+ * @param {Function} callback Function which will receive an array, of attachments found, as the sole argument
+ */
+Parse.prototype._getAttachments = function(callback) {
+  var file;
+  var attachments = [];
+
+  for (var index in this.files) {
+    file = this.files[index];
+
+    if (fs.existsSync(file.path)) {
+      file.content = fs.readFileSync(file.path);
+      attachments.push(createAttachment(file));
+    }
+  }
+
+  return callback(attachments);
+};
+
+module.exports = Parse;"
sendgrid_sendgrid-nodejs,a2775ef11169d4859fba8644cdb789c5036c0267,Merge pull request #406 from adamreisnz/monorepo  Monorepo,package.json,,"-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.1.0"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": true,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:support"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/support/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }","-  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-  ""contributors"": [
-    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-    ""David Tomberlin <david.tomberlin@sendgrid.com>"",
-    ""Swift <swift@sendgrid.com>"",
-    ""Brandon West <brandon.west@sendgrid.com>"",
-    ""Scott Motte <scott.motte@sendgrid.com>"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>"",
-    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
-    ""Adam Buczynski <me@adambuczynski.com>""
-  ],
-  ""description"": ""Official SendGrid NodeJS library."",
-  ""version"": ""5.1.0"",
-  ""homepage"": ""https://sendgrid.com"",
+  ""version"": ""6.0.0"",
+  ""private"": true,
+  ""license"": ""SEE LICENSE IN LICENSE.md"",
-  ""engines"": {
-    ""node"": "">= 4.0.0""
-  },
-  ""dependencies"": {
-    ""async.ensureasync"": ""^0.5.2"",
-    ""async.queue"": ""^0.5.2"",
-    ""bottleneck"": ""^1.12.0"",
-    ""debug"": ""^2.2.0"",
-    ""lodash.chunk"": ""^4.2.0"",
-    ""mailparser"": ""^0.6.1"",
-    ""sendgrid-rest"": ""^2.3.0""
-  },
-    ""chai"": ""^3.5.0"",
-    ""eslint"": ""^3.1.0"",
-    ""mocha"": ""^2.4.5"",
-    ""mocha-sinon"": ""^1.1.5"",
-    ""sinon"": ""^1.17.5"",
-    ""sinon-chai"": ""^2.8.0"",
-    ""system-sleep"": ""^1.0.0-g"",
-    ""typescript"": ""^2.0.0""
+    ""babel-cli"": ""^6.24.1"",
+    ""babel-preset-es2015"": ""^6.24.1"",
+    ""chai"": ""^4.0.1"",
+    ""chai-as-promised"": ""^6.0.0"",
+    ""dirty-chai"": ""^1.2.2"",
+    ""eslint"": ""^3.19.0"",
+    ""istanbul"": ""^1.0.0-alpha.2"",
+    ""lerna"": ""^2.0.0-rc.5"",
+    ""mocha"": ""^3.4.2"",
+    ""mocha-clean"": ""^1.0.0"",
+    ""mocha-sinon"": ""^2.0.0"",
+    ""sinon"": ""^2.3.2"",
+    ""sinon-chai"": ""^2.10.0""
-    ""test"": ""mocha"",
-    ""test:typescript"": ""tsc""
-  },
-  ""typings"": ""index.d.ts"",
-  ""tags"": [
-    ""http"",
-    ""rest"",
-    ""api""
-  ],
-  ""license"": ""MIT"",
-  ""optionalDependencies"": {}
+    ""prism:install"": ""curl https://raw.githubusercontent.com/stoplightio/prism/master/install.sh | sh"",
+    ""prism"": ""prism run --mock --list --spec https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json"",
+    ""test:all"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/**/*.spec.js\"""",
+    ""test:support"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/support/**/*.spec.js\"""",
+    ""test:client"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/client/**/*.spec.js\"""",
+    ""test:mail"": ""babel-node ./node_modules/istanbul/lib/cli cover ./node_modules/mocha/bin/_mocha \""packages/mail/**/*.spec.js\"""",
+    ""test"": ""npm run test:all -s"",
+    ""coverage"": ""open -a \""Google Chrome\"" ./coverage/lcov-report/index.html""
+  }"
sendgrid_sendgrid-nodejs,a2775ef11169d4859fba8644cdb789c5036c0267,Merge pull request #406 from adamreisnz/monorepo  Monorepo,packages/contact-importer/src/importer.spec.js,,"+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});","+var ContactImporter = require('./importer');
+
+describe.only('test_contact_importer', function() {
+  beforeEach(function() {
+    // Create a new SendGrid instance.
+    var API_KEY = process.env.API_KEY;
+    var sg = sendgrid(API_KEY);
+
+    // Create a new importer with a batch size of 2.
+    this.contactImporter = new ContactImporter(sg, {
+      batchSize: 2,
+    });
+    // this.spy = sinon.spy(ContactImporter.prototype, '_sendBatch')
+    this.sinon.spy(ContactImporter.prototype, '_sendBatch');
+
+    // Generate some test data.
+    var data = [];
+    for (i = 0; i < 5; i++) {
+      var item = {
+        email: 'example' + i + '@example.com',
+        first_name: 'Test',
+        last_name: 'User',
+      };
+      // Lets make the first user produce an error.
+      if (i === 1) {
+        item.invalid_field = 'some value';
+      }
+      data.push(item);
+    }
+    this.contactImporter.push(data);
+  });
+
+  it('test_contact_importer sends items in batches', function(done) {
+    var self = this;
+    this.timeout(30000);
+    this.contactImporter.on('success', function(result, batch) {
+      console.log('SUCCESS result', result);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('error', function(error, batch) {
+      console.log('SUCCESS error', error);
+      console.log('SUCCESS batch', batch);
+    });
+    this.contactImporter.on('drain', function() {
+      expect(self.contactImporter._sendBatch).to.have.callCount(3);
+      done();
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,a2775ef11169d4859fba8644cdb789c5036c0267,Merge pull request #406 from adamreisnz/monorepo  Monorepo,packages/inbound-mail-parser/src/parser.spec.js,,"+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});","+var Parse = require('./parser');
+
+describe('test_parse', function() {
+  describe('test_parse_key_values', function() {
+    it('should return the key values specified in the config from the payload', function() {
+      var config = {
+        keys: ['to', 'from'],
+      };
+      var request = {
+        body: {
+          to: 'inbound@inbound.example.com',
+          from: 'Test User <test@example.com>',
+          subject: 'Test Subject',
+        },
+      };
+
+      var parse = new Parse(config, request);
+      var keyValues = parse.keyValues();
+      var expectedValues = {
+        to: 'inbound@inbound.example.com',
+        from: 'Test User <test@example.com>',
+      };
+
+      expect(keyValues).to.be.an('object');
+      expect(keyValues).to.deep.equal(expectedValues);
+    });
+  });
+
+  describe('test_parse_get_raw_email', function() {
+    it('should return null if no raw email property in payload', function(done) {
+      var parse = new Parse({}, {});
+
+      function callback(email) {
+        expect(email).to.be.null;
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+
+    it('should parse raw email from payload and return a mail object', function(done) {
+      var request = {
+        body: {
+          email: 'MIME-Version: 1.0\r\nReceived: by 0.0.0.0 with HTTP; Wed, 10 Aug 2016 14:44:21 -0700 (PDT)\r\nFrom: Example User <test@example.com>\r\nDate: Wed, 10 Aug 2016 14:44:21 -0700\r\nSubject: Inbound Parse Test Raw Data\r\nTo: inbound@inbound.inbound.com\r\nContent-Type: multipart/alternative; boundary=001a113ee97c89842f0539be8e7a\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello SendGrid!\r\n\r\n--001a113ee97c89842f0539be8e7a\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n<html><body><strong>Hello SendGrid!</body></html>\r\n\r\n--001a113ee97c89842f0539be8e7a--\r\n',
+        },
+      };
+
+      var parse = new Parse({}, request);
+
+      function callback(email) {
+        expect(email).to.be.an('object');
+        done();
+      }
+
+      parse.getRawEmail(callback);
+    });
+  });
+});"
sendgrid_sendgrid-nodejs,d2235a0076bbea8340adee753ed42ac6271f555b,Merge pull request #399 from zoitravel/batchId-type  Fix `batch_id` type,index.d.ts,,"-        setBatchId(batch_id: number): void;
-        getBatchId(): number;
+        setBatchId(batch_id: string): void;
+        getBatchId(): string;
-            batch_id: number;
+            batch_id: string;","-        setBatchId(batch_id: number): void;
-        getBatchId(): number;
+        setBatchId(batch_id: string): void;
+        getBatchId(): string;
-            batch_id: number;
+            batch_id: string;"
sendgrid_sendgrid-nodejs,b29d1c68b2ccb875470ca94e0782bee940da53ce,Merge pull request #395 from sendgrid/test_hello_world  Updating test to reflect Hello World Example,test/helpers/mail/test.js,,"+  var fromEmail = new helper.Email('test@example.com');
+  var toEmail = new helper.Email('test@example.com');
+  var subject = 'Sending with SendGrid is Fun';
+  var content = new helper.Content('text/plain', 'and easy to do anywhere, even with Node.js');
+  var mail = new helper.Mail(fromEmail, subject, toEmail, content);
-  mail = new helper.Mail()
-  email = new helper.Email(""test@example.com"")
-  mail.setFrom(email)
-
-  personalization = new helper.Personalization()
-  email = new helper.Email(""test@example.com"")
-  personalization.addTo(email)
-  mail.addPersonalization(personalization)
-
-  mail.setSubject(""Hello World from the SendGrid Node.js Library"")
-
-  content = new helper.Content(""text/plain"", ""some text here"")
-  mail.addContent(content)
-  content = new helper.Content(""text/html"", ""<html><body>some text here</body></html>"")
-  mail.addContent(content)
-
-  test_payload = '{""from"":{""email"":""test@example.com""},""personalizations"":[{""to"":[{""email"":""test@example.com""}]}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""}]}'
+  test_payload = '{""from"":{""email"":""test@example.com""},""personalizations"":[{""to"":[{""email"":""test@example.com""}]}],""subject"":""Sending with SendGrid is Fun"",""content"":[{""type"":""text/plain"",""value"":""and easy to do anywhere, even with Node.js""}]}'","+  var fromEmail = new helper.Email('test@example.com');
+  var toEmail = new helper.Email('test@example.com');
+  var subject = 'Sending with SendGrid is Fun';
+  var content = new helper.Content('text/plain', 'and easy to do anywhere, even with Node.js');
+  var mail = new helper.Mail(fromEmail, subject, toEmail, content);
-  mail = new helper.Mail()
-  email = new helper.Email(""test@example.com"")
-  mail.setFrom(email)
-
-  personalization = new helper.Personalization()
-  email = new helper.Email(""test@example.com"")
-  personalization.addTo(email)
-  mail.addPersonalization(personalization)
-
-  mail.setSubject(""Hello World from the SendGrid Node.js Library"")
-
-  content = new helper.Content(""text/plain"", ""some text here"")
-  mail.addContent(content)
-  content = new helper.Content(""text/html"", ""<html><body>some text here</body></html>"")
-  mail.addContent(content)
-
-  test_payload = '{""from"":{""email"":""test@example.com""},""personalizations"":[{""to"":[{""email"":""test@example.com""}]}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""}]}'
+  test_payload = '{""from"":{""email"":""test@example.com""},""personalizations"":[{""to"":[{""email"":""test@example.com""}]}],""subject"":""Sending with SendGrid is Fun"",""content"":[{""type"":""text/plain"",""value"":""and easy to do anywhere, even with Node.js""}]}'"
sendgrid_sendgrid-nodejs,c68e7d7288a3e6fd7ccf538170c512eeda1ce9a4,Merge pull request #391 from hpaul/patch-1  Return personalizations as an array of request compatible JSON.,lib/helpers/mail/mail.js,,"-
+  // This array must be JSON compatible with the raw sendgrid request 
-    return this.personalizations;
+    return this.personalizations.map(function(personalization) {
+       return personalization.toJSON();
+    });","-
+  // This array must be JSON compatible with the raw sendgrid request 
-    return this.personalizations;
+    return this.personalizations.map(function(personalization) {
+       return personalization.toJSON();
+    });"
sendgrid_sendgrid-nodejs,eaf1e552ae5d4bc985dfdb5e10e1bc9c2f159410,Merge remote-tracking branch 'sendgrid/master',examples/helpers/mail/example.js,,"-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)","-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)"
sendgrid_sendgrid-nodejs,eaf1e552ae5d4bc985dfdb5e10e1bc9c2f159410,Merge remote-tracking branch 'sendgrid/master',lib/helpers/contact-importer/contact-importer.js,,"-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);","-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);"
sendgrid_sendgrid-nodejs,eaf1e552ae5d4bc985dfdb5e10e1bc9c2f159410,Merge remote-tracking branch 'sendgrid/master',package.json,,"-  ""version"": ""5.0.0"",
+  ""version"": ""5.1.0"",
+    ""system-sleep"": ""^1.0.0-g"",","-  ""version"": ""5.0.0"",
+  ""version"": ""5.1.0"",
+    ""system-sleep"": ""^1.0.0-g"","
sendgrid_sendgrid-nodejs,eaf1e552ae5d4bc985dfdb5e10e1bc9c2f159410,Merge remote-tracking branch 'sendgrid/master',test/test.js,,"+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
+  this.timeout(TEST_TIMEOUT_MS);
+  var API_KEY = 'SendGrid API Key'
+  var TEST_HOST = 'localhost'
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})","+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
+  this.timeout(TEST_TIMEOUT_MS);
+  var API_KEY = 'SendGrid API Key'
+  var TEST_HOST = 'localhost'
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})"
sendgrid_sendgrid-nodejs,92ef3487d6fc97fc8196930fcf9313454c8d923b,Merge branch 'master' of https://github.com/sendgrid/sendgrid-nodejs into api-simplification,lib/helpers/contact-importer/contact-importer.js,,"-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);","-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);"
sendgrid_sendgrid-nodejs,92ef3487d6fc97fc8196930fcf9313454c8d923b,Merge branch 'master' of https://github.com/sendgrid/sendgrid-nodejs into api-simplification,package.json,,"-  ""version"": ""5.0.0"",
+  ""version"": ""5.1.0"",
+    ""system-sleep"": ""^1.0.0-g"",","-  ""version"": ""5.0.0"",
+  ""version"": ""5.1.0"",
+    ""system-sleep"": ""^1.0.0-g"","
sendgrid_sendgrid-nodejs,92ef3487d6fc97fc8196930fcf9313454c8d923b,Merge branch 'master' of https://github.com/sendgrid/sendgrid-nodejs into api-simplification,test/test.js,,"+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
+  this.timeout(TEST_TIMEOUT_MS);
+  var API_KEY = 'SendGrid API Key'
+  var TEST_HOST = 'localhost'
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})","+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
+  this.timeout(TEST_TIMEOUT_MS);
+  var API_KEY = 'SendGrid API Key'
+  var TEST_HOST = 'localhost'
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})"
sendgrid_sendgrid-nodejs,d40d7062f08430e0604973fbb9a32aad627fbc64,Merge pull request #325 from MikeRalphson/patch-1  [WIP] Run prism for tests,package.json,,"+    ""system-sleep"": ""^1.0.0-g"",","+    ""system-sleep"": ""^1.0.0-g"","
sendgrid_sendgrid-nodejs,d40d7062f08430e0604973fbb9a32aad627fbc64,Merge pull request #325 from MikeRalphson/patch-1  [WIP] Run prism for tests,test/test.js,,"+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})","+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-describe('test_suppression_spam_reports__email__get', function () {
-  this.timeout(30000);
+describe('test_suppression_spam_report__email__get', function () {
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,examples/helpers/mail/example.js,,"+  bypass_list_management = new helper.BypassListManagement(false)
+  mail_settings.setBypassListManagement(bypass_list_management)","+  bypass_list_management = new helper.BypassListManagement(false)
+  mail_settings.setBypassListManagement(bypass_list_management)"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,index.d.ts,,"-        constructor(enable: boolean, enableText: string);
-
-        getEnable(): boolean;
-        setEnable(enabled: boolean): void;
-
-        getEnableText(): string;
-        setEnableText(enableText: string): void;
-
-        toJSON(): {
-            enable: boolean;
-            enable_text: string;
+        constructor(enable: boolean, enableText: boolean);
+
+        getEnable(): boolean;
+        setEnable(enabled: boolean): void;
+
+        getEnableText(): boolean;
+        setEnableText(enableText: boolean): void;
+
+        toJSON(): {
+            enable: boolean;
+            enable_text: boolean;
-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};
-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;
-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;","-        constructor(enable: boolean, enableText: string);
-
-        getEnable(): boolean;
-        setEnable(enabled: boolean): void;
-
-        getEnableText(): string;
-        setEnableText(enableText: string): void;
-
-        toJSON(): {
-            enable: boolean;
-            enable_text: string;
+        constructor(enable: boolean, enableText: boolean);
+
+        getEnable(): boolean;
+        setEnable(enabled: boolean): void;
+
+        getEnableText(): boolean;
+        setEnableText(enableText: boolean): void;
+
+        toJSON(): {
+            enable: boolean;
+            enable_text: boolean;
-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};
-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;
-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,index.js,,+exports.parse = require('./lib/helpers/inbound/parse.js');,+exports.parse = require('./lib/helpers/inbound/parse.js');
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,lib/helpers/contact-importer/contact-importer.js,,"-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);","-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,lib/helpers/mail/mail.js,,"-  this.setBypassListManagment = function(bypass_list_management) {
+  this.setBypassListManagement = function(bypass_list_management) {","-  this.setBypassListManagment = function(bypass_list_management) {
+  this.setBypassListManagement = function(bypass_list_management) {"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,lib/sendgrid.js,,"-        response.body = response.body ? JSON.parse(response.body) : response.body;
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
-    response.body = response.body ? JSON.parse(response.body) : response.body;
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }","-        response.body = response.body ? JSON.parse(response.body) : response.body;
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
-    response.body = response.body ? JSON.parse(response.body) : response.body;
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,package.json,"+    ""system-sleep"": ""^1.0.0-g"",","-  ""version"": ""4.7.0"",
+  ""version"": ""5.0.1"",
-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""
+    ""mailparser"": ""^0.6.1"",","-  ""version"": ""4.7.0"",
+  ""version"": ""5.0.1"",
-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""
+    ""mailparser"": ""^0.6.1"",
+    ""system-sleep"": ""^1.0.0-g"","
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,test/helpers/mail/test.js,,"-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'","-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'"
sendgrid_sendgrid-nodejs,83507768ffb4575a9c7626157d5aaca049c98969,Merge branch 'master' into patch-1,test/test.js,"+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})","-describe('test_suppression_spam_report__email__get', function () {
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
-
-  var sg = sendgrid(API_KEY, TEST_HOST)
-
-  var request = sg.emptyRequest()
-  if(TEST_HOST == 'localhost') {
-    request.test = true
-    request.port = 4010
-  }
-  request.method = 'GET'
-  request.path = '/v3/suppression/spam_report/{email}'
-  request.headers['X-Mock'] = 200
-  it('test_suppression_spam_report__email__get had the correct response code', function(done) {
+describe('test_suppression_spam_reports__email__get', function () {
+  this.timeout(30000);
+  var API_KEY = 'SendGrid API Key'
+  if(process.env.TRAVIS) {
+    var TEST_HOST = process.env.MOCK_HOST
+  } else {
+    var TEST_HOST = 'localhost'
+  }
+
+  var sg = sendgrid(API_KEY, TEST_HOST)
+
+  var request = sg.emptyRequest()
+  if(TEST_HOST == 'localhost') {
+    request.test = true
+    request.port = 4010
+  }
+  request.method = 'GET'
+  request.path = '/v3/suppression/spam_reports/{email}'
+  request.headers['X-Mock'] = 200
+  it('test_suppression_spam_reports__email__get had the correct response code', function(done) {","+var fs = require('fs');
+var execSync = require('child_process').execSync;
+var spawn = require('child_process').spawn;
+
+var sleep = require('system-sleep');
+
+var prism;
+var TEST_TIMEOUT_MS = 30000;
+var PRISM_SETUP_MS = 2000;
+var PRISM_STARTUP_MS = 20000;
+
+before(function() {
+  this.timeout(Math.max(PRISM_SETUP_MS + PRISM_STARTUP_MS, TEST_TIMEOUT_MS));
+  if (!fs.existsSync('/usr/local/bin/prism')) {
+    if (process.platform != 'win32') {
+      try {
+        execSync('test/prism.sh');
+      }
+      catch (e) {
+        console.log(e.message);
+        console.log('Error downloading the prism binary, you can try downloading directly here (https://github.com/stoplightio/prism/releases) and placing it in your /user/local/bin directory');
+        process.exit(1);
+      }
+    }
+    else {
+      console.log('Please download the Windows binary (https://github.com/stoplightio/prism/releases) and place it in your /usr/local/bin directory');
+      process.exit(1);
+    }
+  }
+  console.log('Activating Prism (~20s)');
+  prism = spawn('prism', ['run', '--mock', '--list', '--spec', 'https://raw.githubusercontent.com/sendgrid/sendgrid-oai/master/oai_stoplight.json'], { detached: true });
+  console.log('Prism Started');
+  sleep(PRISM_STARTUP_MS);
+  prism.stdout.on('data', function(data) {
+    console.log(data.toString());
+  });
+  prism.stderr.on('data', function(data) {
+    console.log(data.toString());
+  });
+});
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
-
-  var sg = sendgrid(API_KEY, TEST_HOST)
-
-  var request = sg.emptyRequest()
-  if(TEST_HOST == 'localhost') {
-    request.test = true
-    request.port = 4010
-  }
-  request.method = 'GET'
-  request.path = '/v3/suppression/spam_report/{email}'
-  request.headers['X-Mock'] = 200
-  it('test_suppression_spam_report__email__get had the correct response code', function(done) {
+  this.timeout(TEST_TIMEOUT_MS);
+  var API_KEY = 'SendGrid API Key'
+  if(process.env.TRAVIS) {
+    var TEST_HOST = process.env.MOCK_HOST
+  } else {
+    var TEST_HOST = 'localhost'
+  }
+
+  var sg = sendgrid(API_KEY, TEST_HOST)
+
+  var request = sg.emptyRequest()
+  if(TEST_HOST == 'localhost') {
+    request.test = true
+    request.port = 4010
+  }
+  request.method = 'GET'
+  request.path = '/v3/suppression/spam_reports/{email}'
+  request.headers['X-Mock'] = 200
+  it('test_suppression_spam_reports__email__get had the correct response code', function(done) {
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
-  this.timeout(30000);
+  this.timeout(TEST_TIMEOUT_MS);
+
+after(function() {
+  prism.kill();
+})"
sendgrid_sendgrid-nodejs,0d2a65cefa6ce3d298881b85bcc69a6d53ebbd41,Merge pull request #385 from eemeli/fix-contact-importer  Remove JSON.parse() around response bodies in contact-importer,lib/helpers/contact-importer/contact-importer.js,,"-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);","-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);
-          return self._notify(error, JSON.parse(error.response.body), batch);
+          return self._notify(error, error.response.body, batch);
-        return self._notify(null, JSON.parse(result.body), batch);
+        return self._notify(null, result.body, batch);"
sendgrid_sendgrid-nodejs,846bd00795c8aa4ba857ff04046f6fb59ee9816b,Merge remote-tracking branch 'sendgrid/master' into api-simplification,examples/helpers/mail/example.js,,"-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)","-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)"
sendgrid_sendgrid-nodejs,30c94631583581c4f82d65557c060d2753efb38d,Merge pull request #379 from chrisvariety/patch-1  Fix typo in kitchen sink mail example,examples/helpers/mail/example.js,,"-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)","-  mail_settings.setBypassListManagment(bypass_list_management)
+  mail_settings.setBypassListManagement(bypass_list_management)"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/accesssettings/accesssettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
- 
+
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    }, 
+    },
-    }, 
+    },
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    1, 
-    2, 
+    1,
+    2,
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
- 
+
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    }, 
+    },
-    }, 
+    },
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    1, 
-    2, 
+    1,
+    2,
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/alerts/alerts.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/apikeys/apikeys.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/asm/asm.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/browsers/browsers.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/campaigns/campaigns.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/categories/categories.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/clients/clients.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/contactdb/contactdb.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/devices/devices.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/geo/geo.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/helpers/mail/example.js,,"+  bypass_list_management = new helper.BypassListManagement(false)
+  mail_settings.setBypassListManagment(bypass_list_management)
-  var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+  var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-  sg.API(requestPost, function (response) {
+  sg.API(requestPost, function (error, response) {","+  bypass_list_management = new helper.BypassListManagement(false)
+  mail_settings.setBypassListManagment(bypass_list_management)
-  var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+  var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-  sg.API(requestPost, function (response) {
+  sg.API(requestPost, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/ips/ips.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/mail/mail.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/mailboxproviders/mailboxproviders.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/mailsettings/mailsettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/partnersettings/partnersettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/scopes/scopes.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/senders/senders.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/stats/stats.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/subusers/subusers.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/suppression/suppression.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/templates/templates.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/trackingsettings/trackingsettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/user/user.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',examples/whitelabel/whitelabel.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',index.js,,"-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');
+exports.importer = require('./lib/helpers/contact-importer/contact-importer.js');
+exports.parse = require('./lib/helpers/inbound/parse.js');","-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');
+exports.importer = require('./lib/helpers/contact-importer/contact-importer.js');
+exports.parse = require('./lib/helpers/inbound/parse.js');"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',lib/helpers/mail/mail.js,,"-""use strict"";
+'use strict';
-  this.enable = enable
-  this.enable_text = enable_text
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.enable_text = enable_text;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEnableText = function(enable_text){
-    this.enable_text = enable_text
-  }
+    return this.enable;
+  };
+
+  this.setEnableText = function(enable_text) {
+    this.enable_text = enable_text;
+  };
-    return this.enable_text
-  }
-
-  this.toJSON = function () {
+    return this.enable_text;
+  };
+
+  this.toJSON = function() {
-      enable_text: this.getEnableText()
-    }
-    return json
-  }
-
-  return this
+      enable_text: this.getEnableText(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setSubscriptionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.enable;
+  };
+
+  this.setSubscriptionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubscriptionTag()
-    }
-    return json
-  }
-
-  return this
+      substitution_tag: this.getSubscriptionTag(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.text = text
-  this.html = html
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.setSubstitutionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.html;
+  };
+
+  this.setSubstitutionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubstitutionTag()
-    }
-    return json
-  }
-
-  return this
-}
-
-function Ganalytics(enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign) {
-  this.enable = enable
-  this.utm_source = utm_source
-  this.utm_medium = utm_medium
-  this.utm_term = utm_term
-  this.utm_content = utm_content
-  this.utm_campaign = utm_campaign
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+      substitution_tag: this.getSubstitutionTag(),
+    };
+    return json;
+  };
+
+  return this;
+}
+
+function Ganalytics(
+  enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign
+) {
+  this.enable = enable;
+  this.utm_source = utm_source;
+  this.utm_medium = utm_medium;
+  this.utm_term = utm_term;
+  this.utm_content = utm_content;
+  this.utm_campaign = utm_campaign;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setUtmSource = function(utm_source){
-    this.utm_source = utm_source
-  }
+    return this.enable;
+  };
+
+  this.setUtmSource = function(utm_source) {
+    this.utm_source = utm_source;
+  };
-    return this.utm_source
-  }
-
-  this.setUtmMedium = function(utm_medium){
-    this.utm_medium = utm_medium
-  }
+    return this.utm_source;
+  };
+
+  this.setUtmMedium = function(utm_medium) {
+    this.utm_medium = utm_medium;
+  };
-    return this.utm_medium
-  }
-
-  this.setUtmTerm = function(utm_term){
-    this.utm_term = utm_term
-  }
+    return this.utm_medium;
+  };
+
+  this.setUtmTerm = function(utm_term) {
+    this.utm_term = utm_term;
+  };
-    return this.utm_term
-  }
-
-  this.setUtmContent = function(utm_content){
-    this.utm_content = utm_content
-  }
+    return this.utm_term;
+  };
+
+  this.setUtmContent = function(utm_content) {
+    this.utm_content = utm_content;
+  };
-    return this.utm_content
-  }
-
-  this.setUtmCampaign = function(utm_campaign){
-    this.utm_campaign = utm_campaign
-  }
+    return this.utm_content;
+  };
+
+  this.setUtmCampaign = function(utm_campaign) {
+    this.utm_campaign = utm_campaign;
+  };
-    return this.utm_campaign
-  }
-
-  this.toJSON = function () {
+    return this.utm_campaign;
+  };
+
+  this.toJSON = function() {
-      utm_campaign: this.getUtmCampaign()
-    }
-    return json
-  }
-
-  return this
+      utm_campaign: this.getUtmCampaign(),
+    };
+    return json;
+  };
+
+  return this;
-  this.click_tracking = undefined
-  this.open_tracking = undefined
-  this.subscription_tracking = undefined
-  this.ganalytics = undefined
+  this.click_tracking = undefined;
+  this.open_tracking = undefined;
+  this.subscription_tracking = undefined;
+  this.ganalytics = undefined;
-    this.click_tracking = click_tracking
-  }
+    this.click_tracking = click_tracking;
+  };
-    return this.click_tracking
-  }
+    return this.click_tracking;
+  };
-    this.open_tracking = open_tracking
-  }
+    this.open_tracking = open_tracking;
+  };
-    return this.open_tracking
-  }
+    return this.open_tracking;
+  };
-    this.subscription_tracking = subscription_tracking
-  }
+    this.subscription_tracking = subscription_tracking;
+  };
-    return this.subscription_tracking
-  }
+    return this.subscription_tracking;
+  };
-    this.ganalytics = ganalytics
-  }
+    this.ganalytics = ganalytics;
+  };
-    return this.ganalytics
-  }
-
-  this.toJSON = function () {
+    return this.ganalytics;
+  };
+
+  this.toJSON = function() {
-    }
-    return json
-  }
-
-  return this
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.email = email
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.email = email;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEmail = function(email){
-    this.email = email
-  }
+    return this.enable;
+  };
+
+  this.setEmail = function(email) {
+    this.email = email;
+  };
-    return this.email
-  }
-
-  this.toJSON = function () {
+    return this.email;
+  };
+
+  this.toJSON = function() {
-      email: this.getEmail()
-    }
-    return json
-  }
-
-  return this
+      email: this.getEmail(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.text = text
-  this.html = html
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.toJSON = function () {
+    return this.html;
+  };
+
+  this.toJSON = function() {
-      html: this.getHtml()
-    }
-    return json
-  }
-
-  return this
+      html: this.getHtml(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.threshold = threshold
-  this.post_to_url = post_to_url
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.threshold = threshold;
+  this.post_to_url = post_to_url;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setThreshold = function(threshold){
-    this.threshold = threshold
-  }
+    return this.enable;
+  };
+
+  this.setThreshold = function(threshold) {
+    this.threshold = threshold;
+  };
-    return this.threshold
-  }
-
-  this.setPostToUrl = function(post_to_url){
-    this.post_to_url = post_to_url
-  }
+    return this.threshold;
+  };
+
+  this.setPostToUrl = function(post_to_url) {
+    this.post_to_url = post_to_url;
+  };
-    return this.post_to_url
-  }
-
-  this.toJSON = function () {
+    return this.post_to_url;
+  };
+
+  this.toJSON = function() {
-      post_to_url: this.getPostToUrl()
-    }
-    return json
-  }
-
-  return this
+      post_to_url: this.getPostToUrl(),
+    };
+    return json;
+  };
+
+  return this;
-  this.bcc = undefined
-  this.bypass_list_management = undefined
-  this.footer = undefined
-  this.sandbox_mode = undefined
-  this.spam_check = undefined
+  this.bcc = undefined;
+  this.bypass_list_management = undefined;
+  this.footer = undefined;
+  this.sandbox_mode = undefined;
+  this.spam_check = undefined;
-    this.bcc = bcc
-  }
+    this.bcc = bcc;
+  };
-    return this.bcc
-  }
-
-  this.setBypassListManagment = function(bypass_list_management) {
-    this.bypass_list_management = bypass_list_management
-  }
+    return this.bcc;
+  };
+
+  this.setBypassListManagement = function(bypass_list_management) {
+    this.bypass_list_management = bypass_list_management;
+  };
-    return this.bypass_list_management
-  }
+    return this.bypass_list_management;
+  };
-    this.footer = footer
-  }
+    this.footer = footer;
+  };
-    return this.footer
-  }
+    return this.footer;
+  };
-    this.sandbox_mode = sandbox_mode
-  }
+    this.sandbox_mode = sandbox_mode;
+  };
-    return this.sandbox_mode
-  }
+    return this.sandbox_mode;
+  };
-    this.spam_check = spam_check
-  }
+    this.spam_check = spam_check;
+  };
-    return this.spam_check
-  }
-
-  this.toJSON = function () {
+    return this.spam_check;
+  };
+
+  this.toJSON = function() {
-      spam_check: this.getSpamCheck()
-    }
-    return json
-  }
-
-  return this
+      spam_check: this.getSpamCheck(),
+    };
+    return json;
+  };
+
+  return this;
-  this.content = undefined
-  this.type = undefined
-  this.filename = undefined
-  this.disposition = undefined
-  this.content_id = undefined
+  this.content = undefined;
+  this.type = undefined;
+  this.filename = undefined;
+  this.disposition = undefined;
+  this.content_id = undefined;
-    this.content = content
-  }
+    this.content = content;
+  };
-    return this.content
-  }
+    return this.content;
+  };
-    this.type = type
-  }
+    this.type = type;
+  };
-    return this.type
-  }
+    return this.type;
+  };
-    this.filename = filename
-  }
+    this.filename = filename;
+  };
-    return this.filename
-  }
+    return this.filename;
+  };
-    this.disposition = disposition
-  }
+    this.disposition = disposition;
+  };
-    return this.disposition
-  }
+    return this.disposition;
+  };
-    this.content_id = content_id
-  }
+    this.content_id = content_id;
+  };
-    return this.content_id
-  }
-
-  this.toJSON = function () {
+    return this.content_id;
+  };
+
+  this.toJSON = function() {
-      content_id: this.getContentId()
-    }
-    return json
-  }
-
-  return this
+      content_id: this.getContentId(),
+    };
+    return json;
+  };
+
+  return this;
-  this.group_id = group_id
-  this.groups_to_display = groups_to_display
+  this.group_id = group_id;
+  this.groups_to_display = groups_to_display;
-    groups_to_display: this.groups_to_display
-  }
-
-  return json
+    groups_to_display: this.groups_to_display,
+  };
+
+  return json;
-  this.category = name
+  this.category = name;
-    category: this.category
-  }
-
-  return json
+    category: this.category,
+  };
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.tos = undefined
-  this.ccs = undefined
-  this.bccs = undefined
-  this.subject = undefined
-  this.headers = undefined
-  this.substitutions = undefined
-  this.custom_args = undefined
-  this.send_at = undefined
+  this.tos = undefined;
+  this.ccs = undefined;
+  this.bccs = undefined;
+  this.subject = undefined;
+  this.headers = undefined;
+  this.substitutions = undefined;
+  this.custom_args = undefined;
+  this.send_at = undefined;
-    if(this.tos == undefined){
-      this.tos = []
-    }
-    this.tos.push(email)
-  }
+    if (this.tos === undefined) {
+      this.tos = [];
+    }
+    this.tos.push(email);
+  };
-    return this.tos
-  }
+    return this.tos;
+  };
-    if(this.ccs == undefined){
-      this.ccs = []
-    }
-    this.ccs.push(email)
-  }
+    if (this.ccs === undefined) {
+      this.ccs = [];
+    }
+    this.ccs.push(email);
+  };
-    return this.ccs
-  }
+    return this.ccs;
+  };
-    if(this.bccs == undefined){
-      this.bccs = []
-    }
-    this.bccs.push(email)
-  }
+    if (this.bccs === undefined) {
+      this.bccs = [];
+    }
+    this.bccs.push(email);
+  };
-    return this.bccs
-  }
+    return this.bccs;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-    return this.subject
-  }
+    return this.subject;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
+    return this.headers;
+  };
-    if(this.substitutions == undefined){
-      this.substitutions = {}
-    }
-    this.substitutions[Object.keys(substitution)[0]] = substitution[Object.keys(substitution)[0]]
-  }
+    if (this.substitutions === undefined) {
+      this.substitutions = {};
+    }
+    this.substitutions[Object.keys(substitution)[0]] =
+      substitution[Object.keys(substitution)[0]];
+  };
-    return this.substitutions
-  }
+    return this.substitutions;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-      send_at: this.getSendAt()
-    }
-    return json
-  }
-
-  return this
+      send_at: this.getSendAt(),
+    };
+    return json;
+  };
+
+  return this;
-  this.type = type
-  this.value = value
+  this.type = type;
+  this.value = value;
-    value: this.value
-  }
-
-  return json
+    value: this.value,
+  };
+
+  return json;
-  this.name = name
-  this.email = email
+  this.name = name;
+  this.email = email;
-    name: this.name
-  }
-
-  return json
+    name: this.name,
+  };
+
+  return json;
-  this.from_email = undefined
-  this.personalizations = undefined
-  this.subject = undefined
-  this.contents = undefined
-  this.attachments = undefined
-  this.template_id = undefined
-  this.sections = undefined
-  this.headers = undefined
-  this.categories = undefined
-  this.send_at = undefined
-  this.batch_id = undefined
-  this.asm = undefined
-  this.ip_pool_name = undefined
-  this.mail_settings = undefined
-  this.reply_to = undefined
+  this.from_email = undefined;
+  this.personalizations = undefined;
+  this.subject = undefined;
+  this.contents = undefined;
+  this.attachments = undefined;
+  this.template_id = undefined;
+  this.sections = undefined;
+  this.headers = undefined;
+  this.categories = undefined;
+  this.send_at = undefined;
+  this.batch_id = undefined;
+  this.asm = undefined;
+  this.ip_pool_name = undefined;
+  this.mail_settings = undefined;
+  this.reply_to = undefined;
-    this.from_email = email
-  }
+    this.from_email = email;
+  };
-  }
+  };
-    if(this.personalizations == undefined){
-      this.personalizations = []
+    if (this.personalizations === undefined) {
+      this.personalizations = [];
-  }
+  };
-    return this.personalizations
-  }
+    return this.personalizations;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-  }
+  };
-    if(this.contents == undefined){
-      this.contents = []
+    if (this.contents === undefined) {
+      this.contents = [];
-  }
+  };
-    return this.contents
-  }
+    return this.contents;
+  };
-    if(this.attachments == undefined){
-      this.attachments = []
+    if (this.attachments === undefined) {
+      this.attachments = [];
-  }
+  };
-    return this.attachments
-  }
+    return this.attachments;
+  };
-    this.template_id = template_id
-  }
+    this.template_id = template_id;
+  };
-  }
+  };
-    if(this.sections == undefined){
-      this.sections = {}
-    }
-    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]]
-  }
+    if (this.sections === undefined) {
+      this.sections = {};
+    }
+    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]];
+  };
-    return this.sections
-  }
+    return this.sections;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
-
-  this.addCategory = function (category) {
-    if(this.categories == undefined){
-      this.categories = []
-    }
-    this.categories.push(category[""category""])
-  }
+    return this.headers;
+  };
+
+  this.addCategory = function(category) {
+    if (this.categories === undefined) {
+      this.categories = [];
+    }
+    this.categories.push(category.category);
+  };
-    return this.categories
-  }
+    return this.categories;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-    this.batch_id = batch_id
-  }
+    this.batch_id = batch_id;
+  };
-    return this.batch_id
-  }
+    return this.batch_id;
+  };
-    this.asm = asm
-  }
+    this.asm = asm;
+  };
-    return this.asm
-  }
+    return this.asm;
+  };
-    this.ip_pool_name = ip_pool_name
-  }
+    this.ip_pool_name = ip_pool_name;
+  };
-    return this.ip_pool_name
-  }
+    return this.ip_pool_name;
+  };
-    this.mail_settings = mail_settings
-  }
+    this.mail_settings = mail_settings;
+  };
-    return this.mail_settings
-  }
+    return this.mail_settings;
+  };
-    this.tracking_settings = tracking_settings
-  }
+    this.tracking_settings = tracking_settings;
+  };
-    return this.tracking_settings
-  }
+    return this.tracking_settings;
+  };
-    this.reply_to = reply_to
-  }
+    this.reply_to = reply_to;
+  };
-  }
-
-  if(from_email && subject && to_email && content){
-    this.setFrom(from_email)
-    var personalization = new Personalization()
-    personalization.addTo(to_email)
-    this.addPersonalization(personalization)
-    this.setSubject(subject)
-    this.addContent(content)
+  };
+
+  if (from_email && subject && to_email && content) {
+    this.setFrom(from_email);
+    var personalization = new Personalization();
+    personalization.addTo(to_email);
+    this.addPersonalization(personalization);
+    this.setSubject(subject);
+    this.addContent(content);
-      reply_to: this.getReplyTo()
-    }
-
-    return json
-  }
-
-  return this
-}
-
-module.exports =
-{
+      reply_to: this.getReplyTo(),
+    };
+
+    return json;
+  };
+
+  return this;
+}
+
+module.exports = {
-  TrackingSettings: TrackingSettings
-}
+  TrackingSettings: TrackingSettings,
+};","-""use strict"";
+'use strict';
-  this.enable = enable
-  this.enable_text = enable_text
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.enable_text = enable_text;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEnableText = function(enable_text){
-    this.enable_text = enable_text
-  }
+    return this.enable;
+  };
+
+  this.setEnableText = function(enable_text) {
+    this.enable_text = enable_text;
+  };
-    return this.enable_text
-  }
-
-  this.toJSON = function () {
+    return this.enable_text;
+  };
+
+  this.toJSON = function() {
-      enable_text: this.getEnableText()
-    }
-    return json
-  }
-
-  return this
+      enable_text: this.getEnableText(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setSubscriptionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.enable;
+  };
+
+  this.setSubscriptionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubscriptionTag()
-    }
-    return json
-  }
-
-  return this
+      substitution_tag: this.getSubscriptionTag(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.text = text
-  this.html = html
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.setSubstitutionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.html;
+  };
+
+  this.setSubstitutionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubstitutionTag()
-    }
-    return json
-  }
-
-  return this
-}
-
-function Ganalytics(enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign) {
-  this.enable = enable
-  this.utm_source = utm_source
-  this.utm_medium = utm_medium
-  this.utm_term = utm_term
-  this.utm_content = utm_content
-  this.utm_campaign = utm_campaign
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+      substitution_tag: this.getSubstitutionTag(),
+    };
+    return json;
+  };
+
+  return this;
+}
+
+function Ganalytics(
+  enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign
+) {
+  this.enable = enable;
+  this.utm_source = utm_source;
+  this.utm_medium = utm_medium;
+  this.utm_term = utm_term;
+  this.utm_content = utm_content;
+  this.utm_campaign = utm_campaign;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setUtmSource = function(utm_source){
-    this.utm_source = utm_source
-  }
+    return this.enable;
+  };
+
+  this.setUtmSource = function(utm_source) {
+    this.utm_source = utm_source;
+  };
-    return this.utm_source
-  }
-
-  this.setUtmMedium = function(utm_medium){
-    this.utm_medium = utm_medium
-  }
+    return this.utm_source;
+  };
+
+  this.setUtmMedium = function(utm_medium) {
+    this.utm_medium = utm_medium;
+  };
-    return this.utm_medium
-  }
-
-  this.setUtmTerm = function(utm_term){
-    this.utm_term = utm_term
-  }
+    return this.utm_medium;
+  };
+
+  this.setUtmTerm = function(utm_term) {
+    this.utm_term = utm_term;
+  };
-    return this.utm_term
-  }
-
-  this.setUtmContent = function(utm_content){
-    this.utm_content = utm_content
-  }
+    return this.utm_term;
+  };
+
+  this.setUtmContent = function(utm_content) {
+    this.utm_content = utm_content;
+  };
-    return this.utm_content
-  }
-
-  this.setUtmCampaign = function(utm_campaign){
-    this.utm_campaign = utm_campaign
-  }
+    return this.utm_content;
+  };
+
+  this.setUtmCampaign = function(utm_campaign) {
+    this.utm_campaign = utm_campaign;
+  };
-    return this.utm_campaign
-  }
-
-  this.toJSON = function () {
+    return this.utm_campaign;
+  };
+
+  this.toJSON = function() {
-      utm_campaign: this.getUtmCampaign()
-    }
-    return json
-  }
-
-  return this
+      utm_campaign: this.getUtmCampaign(),
+    };
+    return json;
+  };
+
+  return this;
-  this.click_tracking = undefined
-  this.open_tracking = undefined
-  this.subscription_tracking = undefined
-  this.ganalytics = undefined
+  this.click_tracking = undefined;
+  this.open_tracking = undefined;
+  this.subscription_tracking = undefined;
+  this.ganalytics = undefined;
-    this.click_tracking = click_tracking
-  }
+    this.click_tracking = click_tracking;
+  };
-    return this.click_tracking
-  }
+    return this.click_tracking;
+  };
-    this.open_tracking = open_tracking
-  }
+    this.open_tracking = open_tracking;
+  };
-    return this.open_tracking
-  }
+    return this.open_tracking;
+  };
-    this.subscription_tracking = subscription_tracking
-  }
+    this.subscription_tracking = subscription_tracking;
+  };
-    return this.subscription_tracking
-  }
+    return this.subscription_tracking;
+  };
-    this.ganalytics = ganalytics
-  }
+    this.ganalytics = ganalytics;
+  };
-    return this.ganalytics
-  }
-
-  this.toJSON = function () {
+    return this.ganalytics;
+  };
+
+  this.toJSON = function() {
-    }
-    return json
-  }
-
-  return this
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.email = email
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.email = email;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEmail = function(email){
-    this.email = email
-  }
+    return this.enable;
+  };
+
+  this.setEmail = function(email) {
+    this.email = email;
+  };
-    return this.email
-  }
-
-  this.toJSON = function () {
+    return this.email;
+  };
+
+  this.toJSON = function() {
-      email: this.getEmail()
-    }
-    return json
-  }
-
-  return this
+      email: this.getEmail(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.text = text
-  this.html = html
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.toJSON = function () {
+    return this.html;
+  };
+
+  this.toJSON = function() {
-      html: this.getHtml()
-    }
-    return json
-  }
-
-  return this
+      html: this.getHtml(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.threshold = threshold
-  this.post_to_url = post_to_url
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.threshold = threshold;
+  this.post_to_url = post_to_url;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setThreshold = function(threshold){
-    this.threshold = threshold
-  }
+    return this.enable;
+  };
+
+  this.setThreshold = function(threshold) {
+    this.threshold = threshold;
+  };
-    return this.threshold
-  }
-
-  this.setPostToUrl = function(post_to_url){
-    this.post_to_url = post_to_url
-  }
+    return this.threshold;
+  };
+
+  this.setPostToUrl = function(post_to_url) {
+    this.post_to_url = post_to_url;
+  };
-    return this.post_to_url
-  }
-
-  this.toJSON = function () {
+    return this.post_to_url;
+  };
+
+  this.toJSON = function() {
-      post_to_url: this.getPostToUrl()
-    }
-    return json
-  }
-
-  return this
+      post_to_url: this.getPostToUrl(),
+    };
+    return json;
+  };
+
+  return this;
-  this.bcc = undefined
-  this.bypass_list_management = undefined
-  this.footer = undefined
-  this.sandbox_mode = undefined
-  this.spam_check = undefined
+  this.bcc = undefined;
+  this.bypass_list_management = undefined;
+  this.footer = undefined;
+  this.sandbox_mode = undefined;
+  this.spam_check = undefined;
-    this.bcc = bcc
-  }
+    this.bcc = bcc;
+  };
-    return this.bcc
-  }
-
-  this.setBypassListManagment = function(bypass_list_management) {
-    this.bypass_list_management = bypass_list_management
-  }
+    return this.bcc;
+  };
+
+  this.setBypassListManagement = function(bypass_list_management) {
+    this.bypass_list_management = bypass_list_management;
+  };
-    return this.bypass_list_management
-  }
+    return this.bypass_list_management;
+  };
-    this.footer = footer
-  }
+    this.footer = footer;
+  };
-    return this.footer
-  }
+    return this.footer;
+  };
-    this.sandbox_mode = sandbox_mode
-  }
+    this.sandbox_mode = sandbox_mode;
+  };
-    return this.sandbox_mode
-  }
+    return this.sandbox_mode;
+  };
-    this.spam_check = spam_check
-  }
+    this.spam_check = spam_check;
+  };
-    return this.spam_check
-  }
-
-  this.toJSON = function () {
+    return this.spam_check;
+  };
+
+  this.toJSON = function() {
-      spam_check: this.getSpamCheck()
-    }
-    return json
-  }
-
-  return this
+      spam_check: this.getSpamCheck(),
+    };
+    return json;
+  };
+
+  return this;
-  this.content = undefined
-  this.type = undefined
-  this.filename = undefined
-  this.disposition = undefined
-  this.content_id = undefined
+  this.content = undefined;
+  this.type = undefined;
+  this.filename = undefined;
+  this.disposition = undefined;
+  this.content_id = undefined;
-    this.content = content
-  }
+    this.content = content;
+  };
-    return this.content
-  }
+    return this.content;
+  };
-    this.type = type
-  }
+    this.type = type;
+  };
-    return this.type
-  }
+    return this.type;
+  };
-    this.filename = filename
-  }
+    this.filename = filename;
+  };
-    return this.filename
-  }
+    return this.filename;
+  };
-    this.disposition = disposition
-  }
+    this.disposition = disposition;
+  };
-    return this.disposition
-  }
+    return this.disposition;
+  };
-    this.content_id = content_id
-  }
+    this.content_id = content_id;
+  };
-    return this.content_id
-  }
-
-  this.toJSON = function () {
+    return this.content_id;
+  };
+
+  this.toJSON = function() {
-      content_id: this.getContentId()
-    }
-    return json
-  }
-
-  return this
+      content_id: this.getContentId(),
+    };
+    return json;
+  };
+
+  return this;
-  this.group_id = group_id
-  this.groups_to_display = groups_to_display
+  this.group_id = group_id;
+  this.groups_to_display = groups_to_display;
-    groups_to_display: this.groups_to_display
-  }
-
-  return json
+    groups_to_display: this.groups_to_display,
+  };
+
+  return json;
-  this.category = name
+  this.category = name;
-    category: this.category
-  }
-
-  return json
+    category: this.category,
+  };
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.tos = undefined
-  this.ccs = undefined
-  this.bccs = undefined
-  this.subject = undefined
-  this.headers = undefined
-  this.substitutions = undefined
-  this.custom_args = undefined
-  this.send_at = undefined
+  this.tos = undefined;
+  this.ccs = undefined;
+  this.bccs = undefined;
+  this.subject = undefined;
+  this.headers = undefined;
+  this.substitutions = undefined;
+  this.custom_args = undefined;
+  this.send_at = undefined;
-    if(this.tos == undefined){
-      this.tos = []
-    }
-    this.tos.push(email)
-  }
+    if (this.tos === undefined) {
+      this.tos = [];
+    }
+    this.tos.push(email);
+  };
-    return this.tos
-  }
+    return this.tos;
+  };
-    if(this.ccs == undefined){
-      this.ccs = []
-    }
-    this.ccs.push(email)
-  }
+    if (this.ccs === undefined) {
+      this.ccs = [];
+    }
+    this.ccs.push(email);
+  };
-    return this.ccs
-  }
+    return this.ccs;
+  };
-    if(this.bccs == undefined){
-      this.bccs = []
-    }
-    this.bccs.push(email)
-  }
+    if (this.bccs === undefined) {
+      this.bccs = [];
+    }
+    this.bccs.push(email);
+  };
-    return this.bccs
-  }
+    return this.bccs;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-    return this.subject
-  }
+    return this.subject;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
+    return this.headers;
+  };
-    if(this.substitutions == undefined){
-      this.substitutions = {}
-    }
-    this.substitutions[Object.keys(substitution)[0]] = substitution[Object.keys(substitution)[0]]
-  }
+    if (this.substitutions === undefined) {
+      this.substitutions = {};
+    }
+    this.substitutions[Object.keys(substitution)[0]] =
+      substitution[Object.keys(substitution)[0]];
+  };
-    return this.substitutions
-  }
+    return this.substitutions;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-      send_at: this.getSendAt()
-    }
-    return json
-  }
-
-  return this
+      send_at: this.getSendAt(),
+    };
+    return json;
+  };
+
+  return this;
-  this.type = type
-  this.value = value
+  this.type = type;
+  this.value = value;
-    value: this.value
-  }
-
-  return json
+    value: this.value,
+  };
+
+  return json;
-  this.name = name
-  this.email = email
+  this.name = name;
+  this.email = email;
-    name: this.name
-  }
-
-  return json
+    name: this.name,
+  };
+
+  return json;
-  this.from_email = undefined
-  this.personalizations = undefined
-  this.subject = undefined
-  this.contents = undefined
-  this.attachments = undefined
-  this.template_id = undefined
-  this.sections = undefined
-  this.headers = undefined
-  this.categories = undefined
-  this.send_at = undefined
-  this.batch_id = undefined
-  this.asm = undefined
-  this.ip_pool_name = undefined
-  this.mail_settings = undefined
-  this.reply_to = undefined
+  this.from_email = undefined;
+  this.personalizations = undefined;
+  this.subject = undefined;
+  this.contents = undefined;
+  this.attachments = undefined;
+  this.template_id = undefined;
+  this.sections = undefined;
+  this.headers = undefined;
+  this.categories = undefined;
+  this.send_at = undefined;
+  this.batch_id = undefined;
+  this.asm = undefined;
+  this.ip_pool_name = undefined;
+  this.mail_settings = undefined;
+  this.reply_to = undefined;
-    this.from_email = email
-  }
+    this.from_email = email;
+  };
-  }
+  };
-    if(this.personalizations == undefined){
-      this.personalizations = []
+    if (this.personalizations === undefined) {
+      this.personalizations = [];
-  }
+  };
-    return this.personalizations
-  }
+    return this.personalizations;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-  }
+  };
-    if(this.contents == undefined){
-      this.contents = []
+    if (this.contents === undefined) {
+      this.contents = [];
-  }
+  };
-    return this.contents
-  }
+    return this.contents;
+  };
-    if(this.attachments == undefined){
-      this.attachments = []
+    if (this.attachments === undefined) {
+      this.attachments = [];
-  }
+  };
-    return this.attachments
-  }
+    return this.attachments;
+  };
-    this.template_id = template_id
-  }
+    this.template_id = template_id;
+  };
-  }
+  };
-    if(this.sections == undefined){
-      this.sections = {}
-    }
-    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]]
-  }
+    if (this.sections === undefined) {
+      this.sections = {};
+    }
+    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]];
+  };
-    return this.sections
-  }
+    return this.sections;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
-
-  this.addCategory = function (category) {
-    if(this.categories == undefined){
-      this.categories = []
-    }
-    this.categories.push(category[""category""])
-  }
+    return this.headers;
+  };
+
+  this.addCategory = function(category) {
+    if (this.categories === undefined) {
+      this.categories = [];
+    }
+    this.categories.push(category.category);
+  };
-    return this.categories
-  }
+    return this.categories;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-    this.batch_id = batch_id
-  }
+    this.batch_id = batch_id;
+  };
-    return this.batch_id
-  }
+    return this.batch_id;
+  };
-    this.asm = asm
-  }
+    this.asm = asm;
+  };
-    return this.asm
-  }
+    return this.asm;
+  };
-    this.ip_pool_name = ip_pool_name
-  }
+    this.ip_pool_name = ip_pool_name;
+  };
-    return this.ip_pool_name
-  }
+    return this.ip_pool_name;
+  };
-    this.mail_settings = mail_settings
-  }
+    this.mail_settings = mail_settings;
+  };
-    return this.mail_settings
-  }
+    return this.mail_settings;
+  };
-    this.tracking_settings = tracking_settings
-  }
+    this.tracking_settings = tracking_settings;
+  };
-    return this.tracking_settings
-  }
+    return this.tracking_settings;
+  };
-    this.reply_to = reply_to
-  }
+    this.reply_to = reply_to;
+  };
-  }
-
-  if(from_email && subject && to_email && content){
-    this.setFrom(from_email)
-    var personalization = new Personalization()
-    personalization.addTo(to_email)
-    this.addPersonalization(personalization)
-    this.setSubject(subject)
-    this.addContent(content)
+  };
+
+  if (from_email && subject && to_email && content) {
+    this.setFrom(from_email);
+    var personalization = new Personalization();
+    personalization.addTo(to_email);
+    this.addPersonalization(personalization);
+    this.setSubject(subject);
+    this.addContent(content);
-      reply_to: this.getReplyTo()
-    }
-
-    return json
-  }
-
-  return this
-}
-
-module.exports =
-{
+      reply_to: this.getReplyTo(),
+    };
+
+    return json;
+  };
+
+  return this;
+}
+
+module.exports = {
-  TrackingSettings: TrackingSettings
-}
+  TrackingSettings: TrackingSettings,
+};"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',lib/sendgrid.js,,"-""use strict"";
-var package_json = require('./../package.json');
-var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/* eslint dot-notation: 'off' */
+'use strict';
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid (apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client
-  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  globalRequest.host = host || ""api.sendgrid.com"";
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
-  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
-  globalRequest.headers['Accept'] = 'application/json'
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj] ) {
-        globalRequest.headers[key] = globalHeaders[obj][key]
+/**
+ * Dependencies
+ */
+var pkg = require('./../package.json');
+var sendgridRest = require('sendgrid-rest');
+var emptyRequest = sendgridRest.emptyRequest;
+var Client = sendgridRest.Client;
+var SendGridError = require('./helpers/error');
+
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  var request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
-  var client = new Client(globalRequest)
+  return request;
+}
-  this.emptyRequest = function () {
-    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + pkg.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  }
+  return headers;
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+  return new SendGridInstance(apiKey, host, globalHeaders);
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGridInstance(apiKey, host, globalHeaders) {
+  //Create global request
+  this.globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
+  this.client = new Client(this.globalRequest);
+}
+
+//Interact with the API with this function
+SendGridInstance.prototype.API = function(request, callback) {
+  var self = this;
+
+  //If no callback provided, we will return a promise
+  if (!callback) {
+    if (!SendGrid.Promise) {
+      throw new SendGridError('Promise API not supported');
+    }
+    return new SendGrid.Promise(function(resolve, reject) {
+      self.client.API(request, function(response) {
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
+        if (isValidResponse(response)) {
+          resolve(response);
+        }
+        else {
+          var error = new SendGridError('Response error');
+          error.response = response;
+          reject(error);
+        }
+      });
+    });
-  // Interact with the API with this function
-  this.API = function(request, callback) {
-    client.API(request, function (response) {
-      callback(response)
-    })
-  };
-
-  this.globalRequest = globalRequest
-  return this;
+  //Use callback
+  self.client.API(request, function(response) {
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }
+    if (isValidResponse(response)) {
+      callback(null, response);
+    }
+    else {
+      var error = new SendGridError('Response error');
+      error.response = response;
+      callback(error, response);
+    }
+  });
-module.exports =
-{
-  SendGrid: SendGrid,
-  emptyRequest: emptyRequest
+//Set requests
+SendGridInstance.prototype.emptyRequest = getEmptyRequest;
+
+//Try to use native promises by default
+if (typeof Promise !== 'undefined') {
+  SendGrid.Promise = Promise;
+else {
+  SendGrid.Promise = null;
+}
+
+//Export
+module.exports = SendGrid;","-""use strict"";
-var package_json = require('./../package.json');
-var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/* eslint dot-notation: 'off' */
+'use strict';
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid (apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client
-  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  globalRequest.host = host || ""api.sendgrid.com"";
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
-  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
-  globalRequest.headers['Accept'] = 'application/json'
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj] ) {
-        globalRequest.headers[key] = globalHeaders[obj][key]
+/**
+ * Dependencies
+ */
+var pkg = require('./../package.json');
+var sendgridRest = require('sendgrid-rest');
+var emptyRequest = sendgridRest.emptyRequest;
+var Client = sendgridRest.Client;
+var SendGridError = require('./helpers/error');
+
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  var request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
-  var client = new Client(globalRequest)
+  return request;
+}
-  this.emptyRequest = function () {
-    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + pkg.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  }
+  return headers;
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+  return new SendGridInstance(apiKey, host, globalHeaders);
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGridInstance(apiKey, host, globalHeaders) {
+  //Create global request
+  this.globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
+  this.client = new Client(this.globalRequest);
+}
+
+//Interact with the API with this function
+SendGridInstance.prototype.API = function(request, callback) {
+  var self = this;
+
+  //If no callback provided, we will return a promise
+  if (!callback) {
+    if (!SendGrid.Promise) {
+      throw new SendGridError('Promise API not supported');
+    }
+    return new SendGrid.Promise(function(resolve, reject) {
+      self.client.API(request, function(response) {
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
+        if (isValidResponse(response)) {
+          resolve(response);
+        }
+        else {
+          var error = new SendGridError('Response error');
+          error.response = response;
+          reject(error);
+        }
+      });
+    });
-  // Interact with the API with this function
-  this.API = function(request, callback) {
-    client.API(request, function (response) {
-      callback(response)
-    })
-  };
-
-  this.globalRequest = globalRequest
-  return this;
+  //Use callback
+  self.client.API(request, function(response) {
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }
+    if (isValidResponse(response)) {
+      callback(null, response);
+    }
+    else {
+      var error = new SendGridError('Response error');
+      error.response = response;
+      callback(error, response);
+    }
+  });
-module.exports =
-{
-  SendGrid: SendGrid,
-  emptyRequest: emptyRequest
+//Set requests
+SendGridInstance.prototype.emptyRequest = getEmptyRequest;
+
+//Try to use native promises by default
+if (typeof Promise !== 'undefined') {
+  SendGrid.Promise = Promise;
+else {
+  SendGrid.Promise = null;
+}
+
+//Export
+module.exports = SendGrid;"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',package.json,,"-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-  ""version"": ""3.0.11"",
+  ""version"": ""5.0.0"",
-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""
-    ""sendgrid-rest"": ""^2.2.1""
+    ""async.ensureasync"": ""^0.5.2"",
+    ""async.queue"": ""^0.5.2"",
+    ""bottleneck"": ""^1.12.0"",
+    ""debug"": ""^2.2.0"",
+    ""lodash.chunk"": ""^4.2.0"",
+    ""mailparser"": ""^0.6.1"",
+    ""sendgrid-rest"": ""^2.3.0""
-    ""eslint"": ""^2.7.0"",
-    ""eslint-config-standard"": ""^5.1.0"",
-    ""eslint-plugin-standard"": ""^1.3.2"",
-    ""mocha"": ""^2.4.5""
+    ""eslint"": ""^3.1.0"",
+    ""mocha"": ""^2.4.5"",
+    ""mocha-sinon"": ""^1.1.5"",
+    ""sinon"": ""^1.17.5"",
+    ""sinon-chai"": ""^2.8.0"",
+    ""typescript"": ""^2.0.0""
-    ""test"": ""mocha""
+    ""lint"": ""eslint . --fix"",
+    ""test"": ""mocha"",
+    ""test:typescript"": ""tsc""
+  ""typings"": ""index.d.ts"",","-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-  ""version"": ""3.0.11"",
+  ""version"": ""5.0.0"",
-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""
-    ""sendgrid-rest"": ""^2.2.1""
+    ""async.ensureasync"": ""^0.5.2"",
+    ""async.queue"": ""^0.5.2"",
+    ""bottleneck"": ""^1.12.0"",
+    ""debug"": ""^2.2.0"",
+    ""lodash.chunk"": ""^4.2.0"",
+    ""mailparser"": ""^0.6.1"",
+    ""sendgrid-rest"": ""^2.3.0""
-    ""eslint"": ""^2.7.0"",
-    ""eslint-config-standard"": ""^5.1.0"",
-    ""eslint-plugin-standard"": ""^1.3.2"",
-    ""mocha"": ""^2.4.5""
+    ""eslint"": ""^3.1.0"",
+    ""mocha"": ""^2.4.5"",
+    ""mocha-sinon"": ""^1.1.5"",
+    ""sinon"": ""^1.17.5"",
+    ""sinon-chai"": ""^2.8.0"",
+    ""typescript"": ""^2.0.0""
-    ""test"": ""mocha""
+    ""lint"": ""eslint . --fix"",
+    ""test"": ""mocha"",
+    ""test:typescript"": ""tsc""
+  ""typings"": ""index.d.ts"","
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',test/helpers/mail/test.js,,"-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'","-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'"
sendgrid_sendgrid-nodejs,a38f15d1df8900328bfea04978dd547af6e7b975,Merge remote-tracking branch 'sendgrid/master',test/test.js,,"+var sendgrid = require('../lib/sendgrid');
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-describe('test_suppression_spam_report__email__get', function () {
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
-
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
-
-  var request = sg.emptyRequest()
-  if(TEST_HOST == 'localhost') {
-    request.test = true
-    request.port = 4010
-  }
-  request.method = 'GET'
-  request.path = '/v3/suppression/spam_report/{email}'
-  request.headers['X-Mock'] = 200
-  it('test_suppression_spam_report__email__get had the correct response code', function(done) {
-    sg.API(request, function (response) {
+describe('test_suppression_spam_reports__email__get', function () {
+  this.timeout(30000);
+  var API_KEY = 'SendGrid API Key'
+  if(process.env.TRAVIS) {
+    var TEST_HOST = process.env.MOCK_HOST
+  } else {
+    var TEST_HOST = 'localhost'
+  }
+
+  var sg = sendgrid(API_KEY, TEST_HOST)
+
+  var request = sg.emptyRequest()
+  if(TEST_HOST == 'localhost') {
+    request.test = true
+    request.port = 4010
+  }
+  request.method = 'GET'
+  request.path = '/v3/suppression/spam_reports/{email}'
+  request.headers['X-Mock'] = 200
+  it('test_suppression_spam_reports__email__get had the correct response code', function(done) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
-      assert.equal(response.statusCode, 200, 'response code is not correct')
-      done();
-    })
-  });
-})
-
+    sg.API(request, function (error, response) {
+      assert.equal(response.statusCode, 200, 'response code is not correct')
+      done();
+    })
+  });
+})","+var sendgrid = require('../lib/sendgrid');
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-describe('test_suppression_spam_report__email__get', function () {
-  this.timeout(30000);
-  var API_KEY = 'SendGrid API Key'
-  if(process.env.TRAVIS) {
-    var TEST_HOST = process.env.MOCK_HOST
-  } else {
-    var TEST_HOST = 'localhost'
-  }
-
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
-
-  var request = sg.emptyRequest()
-  if(TEST_HOST == 'localhost') {
-    request.test = true
-    request.port = 4010
-  }
-  request.method = 'GET'
-  request.path = '/v3/suppression/spam_report/{email}'
-  request.headers['X-Mock'] = 200
-  it('test_suppression_spam_report__email__get had the correct response code', function(done) {
-    sg.API(request, function (response) {
+describe('test_suppression_spam_reports__email__get', function () {
+  this.timeout(30000);
+  var API_KEY = 'SendGrid API Key'
+  if(process.env.TRAVIS) {
+    var TEST_HOST = process.env.MOCK_HOST
+  } else {
+    var TEST_HOST = 'localhost'
+  }
+
+  var sg = sendgrid(API_KEY, TEST_HOST)
+
+  var request = sg.emptyRequest()
+  if(TEST_HOST == 'localhost') {
+    request.test = true
+    request.port = 4010
+  }
+  request.method = 'GET'
+  request.path = '/v3/suppression/spam_reports/{email}'
+  request.headers['X-Mock'] = 200
+  it('test_suppression_spam_reports__email__get had the correct response code', function(done) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
-      assert.equal(response.statusCode, 200, 'response code is not correct')
-      done();
-    })
-  });
-})
-
+    sg.API(request, function (error, response) {
+      assert.equal(response.statusCode, 200, 'response code is not correct')
+      done();
+    })
+  });
+})"
sendgrid_sendgrid-nodejs,cfb43c59168ba9d0d06008e9bd9f76f49bcfb539,"Merge pull request #328 from MikeRalphson/patch-2  Drop 0.10, 0.12 from supported Node.js versions, add 6",package.json,"-  ""version"": ""4.7.0"",
+  ""version"": ""4.10.0"",
+    ""mailparser"": ""^0.6.1"",","-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""","-  ""version"": ""4.7.0"",
+  ""version"": ""4.10.0"",
-    ""node"": "">= 0.4.7""
+    ""node"": "">= 4.0.0""
+    ""mailparser"": ""^0.6.1"","
sendgrid_sendgrid-nodejs,caf5b9a0c81911c61984fade2a265c35a49c7d8e,Merge pull request #330 from jamsinclair/parse-implementation-303  Add Inbound Parse data parser #303,index.js,,+exports.parse = require('./lib/helpers/inbound/parse.js');,+exports.parse = require('./lib/helpers/inbound/parse.js');
sendgrid_sendgrid-nodejs,caf5b9a0c81911c61984fade2a265c35a49c7d8e,Merge pull request #330 from jamsinclair/parse-implementation-303  Add Inbound Parse data parser #303,package.json,"-  ""version"": ""4.7.0"",
+  ""version"": ""4.9.0"",","+    ""mailparser"": ""^0.6.1"",","-  ""version"": ""4.7.0"",
+  ""version"": ""4.9.0"",
+    ""mailparser"": ""^0.6.1"","
sendgrid_sendgrid-nodejs,a5c8beabba7803259c29f628294318763e319370,Merge pull request #371 from furstenheim/master  Catch error in sendgrid,lib/sendgrid.js,,"-        response.body = response.body ? JSON.parse(response.body) : response.body;
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
-    response.body = response.body ? JSON.parse(response.body) : response.body;
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }","-        response.body = response.body ? JSON.parse(response.body) : response.body;
+        try {
+          response.body = response.body ? JSON.parse(response.body) : response.body;
+        } catch (e) {
+          return reject(e)
+        }
-    response.body = response.body ? JSON.parse(response.body) : response.body;
+    try {
+      response.body = response.body ? JSON.parse(response.body) : response.body;
+    } catch (e) {
+      return callback(e)
+    }"
sendgrid_sendgrid-nodejs,0c5918bbed15dc714f5eb8aced615ca8e3d8ca1b,Merge pull request #348 from dhenriques/fix-click-tracking-typescript-definitions  Fix typescript definition for the ClickTracking,index.d.ts,"-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};
-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;
-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;","-        constructor(enable: boolean, enableText: string);
-
-        getEnable(): boolean;
-        setEnable(enabled: boolean): void;
-
-        getEnableText(): string;
-        setEnableText(enableText: string): void;
-
-        toJSON(): {
-            enable: boolean;
-            enable_text: string;
+        constructor(enable: boolean, enableText: boolean);
+
+        getEnable(): boolean;
+        setEnable(enabled: boolean): void;
+
+        getEnableText(): boolean;
+        setEnableText(enableText: boolean): void;
+
+        toJSON(): {
+            enable: boolean;
+            enable_text: boolean;","-        constructor(enable: boolean, enableText: string);
-
-        getEnable(): boolean;
-        setEnable(enabled: boolean): void;
-
-        getEnableText(): string;
-        setEnableText(enableText: string): void;
-
-        toJSON(): {
-            enable: boolean;
-            enable_text: string;
+        constructor(enable: boolean, enableText: boolean);
+
+        getEnable(): boolean;
+        setEnable(enabled: boolean): void;
+
+        getEnableText(): boolean;
+        setEnableText(enableText: boolean): void;
+
+        toJSON(): {
+            enable: boolean;
+            enable_text: boolean;
-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};
-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;
-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;"
sendgrid_sendgrid-nodejs,9ce80588ed24fd95cdd3dadd2c3c32147d2e2fbb,Merge pull request #368 from blove/master  Personalization.getSubstitutions() return type incorrect in index.d.ts TypeScript definition file,index.d.ts,,"-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};","-        getSubstitutions(): Substitution[];
+        getSubstitutions(): {[key: string]: string};"
sendgrid_sendgrid-nodejs,433adfb48a6b07443c7ece88fc83d53b6c93aec6,Merge pull request #338 from pointimize/fix  Fix function name in mail helper and fix the corresponding test,lib/helpers/mail/mail.js,,"-  this.setBypassListManagment = function(bypass_list_management) {
+  this.setBypassListManagement = function(bypass_list_management) {","-  this.setBypassListManagment = function(bypass_list_management) {
+  this.setBypassListManagement = function(bypass_list_management) {"
sendgrid_sendgrid-nodejs,433adfb48a6b07443c7ece88fc83d53b6c93aec6,Merge pull request #338 from pointimize/fix  Fix function name in mail helper and fix the corresponding test,test/helpers/mail/test.js,,"-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'","-  asm = new helper.ASM(3, [1,4,5])
-  mail.setASM(asm)
+  asm = new helper.Asm(3, [1,4,5])
+  mail.setAsm(asm)
-  bcc = new helper.BCC(true, ""test@example.com"")
+  bcc = new helper.Bcc(true, ""test@example.com"")
+  bypass_list_management = new helper.BypassListManagement(true);
+  mail_settings.setBypassListManagement(bypass_list_management);
-  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""DX""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""DX""}}'
+  test_payload = '{""from"":{""email"":""test@example.com"",""name"":""Example User""},""personalizations"":[{""to"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""cc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""bcc"":[{""email"":""test@example.com"",""name"":""Example User""},{""email"":""test@example.com"",""name"":""Example User""}],""subject"":""Hello World from the Personalized SendGrid Node.js Library"",""headers"":{""X-Test"":""True"",""X-Test2"":""False""},""substitutions"":{""%name%"":""Example User"",""%city%"":""Denver""},""custom_args"":{""timing"":""morning"",""type"":""marketing""},""send_at"":1443636899}],""subject"":""Hello World from the SendGrid Node.js Library"",""content"":[{""type"":""text/plain"",""value"":""some text here""},{""type"":""text/html"",""value"":""<html><body>some text here</body></html>""},{""type"":""text/calendar"",""value"":""Party Time""}],""attachments"":[{""content"":""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12"",""type"":""application/pdf"",""filename"":""balance_001.pdf"",""disposition"":""attachment""},{""content"":""BwdW"",""type"":""image/png"",""filename"":""banner.png"",""disposition"":""inline"",""content_id"":""banner""}],""template_id"":""439b6d66-4408-4ead-83de-5c83c2ee313a"",""sections"":{""%section1%"":""Textforasubstitutiontagofsection1"",""%section2%"":""Textforasubstitutiontagofsection2""},""headers"":{""X-Test3"":""1"",""X-Test4"":""2""},""categories"":[""January"",""2015""],""custom_args"":{""timing"":""evening"",""type"":""summer_contest""},""send_at"":1443636899,""batch_id"":""some_batch_id"",""asm"":{""group_id"":3,""groups_to_display"":[1,4,5]},""ip_pool_name"":""23"",""mail_settings"":{""bcc"":{""enable"":true,""email"":""test@example.com""},""bypass_list_management"":{""enable"":true},""footer"":{""enable"":true,""text"":""some footer text"",""html"":""<html><body>some footer text</body></html>""},""sandbox_mode"":{""enable"":true},""spam_check"":{""enable"":true,""threshold"":1,""post_to_url"":""https://gotchya.example.com""}},""tracking_settings"":{""click_tracking"":{""enable"":false,""enable_text"":false},""open_tracking"":{""enable"":true,""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""subscription_tracking"":{""enable"":true,""text"":""text to insert into the text/plain portion of the message"",""html"":""html to insert into the text/html portion of the message"",""substitution_tag"":""Optional tag to replace with the open image in the body of the message""},""ganalytics"":{""enable"":true,""utm_source"":""some utm source"",""utm_medium"":""some utc medium"",""utm_term"":""some utm term"",""utm_content"":""some utm content"",""utm_campaign"":""some utm campaign""}},""reply_to"":{""email"":""test@example.com"",""name"":""Example User""}}'"
sendgrid_sendgrid-nodejs,24cd4bf8586bfb572ee9aa9980f26e2d4b6e62bd,Merge pull request #354 from SPARTAN563/fix/issue-353  fix: Make various TypeScript request components optional,index.d.ts,"-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;","-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;","-        host: string;
+        host?: string;
-        headers: {
+        headers?: {
-        body: string | {};
-        queryParams: {
+        body?: string | {};
+        queryParams?: {
-        test: boolean;
-        port: string|number;
+        test?: boolean;
+        port?: string|number;
-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;"
sendgrid_sendgrid-nodejs,bd1c4c4bfbae590a2b668850f318ffadabe3dd28,Merge pull request #333 from IOAyman/path-typedefinition  [TypeDefinition] SendGrid.API should return Promise<T> instead of PromiseLike<T>,index.d.ts,,"-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;","-        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;
+        API(request: SendGrid.Rest.Request): Promise<SendGrid.Rest.Response>;"
sendgrid_sendgrid-nodejs,a51d08ba20757d5f82ba0b1d6c627d73d6602b67,"Merge pull request #323 from aszx87410/master  Update nodejs-http-client dependency to v2.3.0, closes #317",package.json,,"-    ""sendgrid-rest"": ""^2.2.1""
+    ""sendgrid-rest"": ""^2.3.0""","-    ""sendgrid-rest"": ""^2.2.1""
+    ""sendgrid-rest"": ""^2.3.0"""
sendgrid_sendgrid-nodejs,9771fdbeedfc11ba5860c00ed28aa989f878e815,Merge pull request #319 from hugoduraes/issue-266  Convert response data to have valid json objects,lib/sendgrid.js,,"+        response.body = response.body ? JSON.parse(response.body) : response.body;
+    response.body = response.body ? JSON.parse(response.body) : response.body;","+        response.body = response.body ? JSON.parse(response.body) : response.body;
+    response.body = response.body ? JSON.parse(response.body) : response.body;"
sendgrid_sendgrid-nodejs,45136e4bbc02e33dfe4167b8a416df6f8d850481,Merge pull request #308 from SPARTAN563/feat/typescript-promise-api  feat: Add support for promises to the TypeScript definitions file,index.d.ts,"-        emptyRequest(): SendGrid.Rest.Request;
+        emptyRequest(data?: SendGrid.Rest.Request): SendGrid.Rest.Request;",+        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;,"-        emptyRequest(): SendGrid.Rest.Request;
+        emptyRequest(data?: SendGrid.Rest.Request): SendGrid.Rest.Request;
+        API(request: SendGrid.Rest.Request): PromiseLike<SendGrid.Rest.Response>;"
sendgrid_sendgrid-nodejs,f04577cae79211918ce6d1e8494acb90e962abb1,Merge pull request #309 from SPARTAN563/fix/typescript-empty-request  Allow emptyRequest() to be called with a request object,index.d.ts,,"-        emptyRequest(): SendGrid.Rest.Request;
+        emptyRequest(data?: SendGrid.Rest.Request): SendGrid.Rest.Request;","-        emptyRequest(): SendGrid.Rest.Request;
+        emptyRequest(data?: SendGrid.Rest.Request): SendGrid.Rest.Request;"
sendgrid_sendgrid-nodejs,05c3b3da83f4752acad7fd0b6600e6d2bfdc7211,Merge pull request #299 from sitegui/responseInError  Fill 'response' property in error instance,lib/sendgrid.js,,+      error.response = response;,+      error.response = response;
sendgrid_sendgrid-nodejs,0bca9d657f954a5422ea2c28f1040a407b9da75f,Merge branch 'master' of https://github.com/sendgrid/sendgrid-nodejs,index.d.ts,,"+
+        mail: SendGrid.Helpers.Mail.Helper;
-declare const mail: SendGrid.Helpers.Mail.Helper;
-export {mail, sendGrid as SendGrid};
+export = sendGrid;","+
+        mail: SendGrid.Helpers.Mail.Helper;
-declare const mail: SendGrid.Helpers.Mail.Helper;
-export {mail, sendGrid as SendGrid};
+export = sendGrid;"
sendgrid_sendgrid-nodejs,34b0f1c69bdf9cf56759b5595162f2e3b2bce285,Merge pull request #300 from SPARTAN563/fix/typescript-definitions  fix: Correct TypeScript definitions,index.d.ts,,"+
+        mail: SendGrid.Helpers.Mail.Helper;
-declare const mail: SendGrid.Helpers.Mail.Helper;
-export {mail, sendGrid as SendGrid};
+export = sendGrid;","+
+        mail: SendGrid.Helpers.Mail.Helper;
-declare const mail: SendGrid.Helpers.Mail.Helper;
-export {mail, sendGrid as SendGrid};
+export = sendGrid;"
sendgrid_sendgrid-nodejs,d4acbcedc8899b0ec16b526aa02da05c742d7451,Merge pull request #251 from EMSSConsulting/feat/typescript-definitions  Add TypeScript typings definition file for v3 API,package.json,"-  ""version"": ""4.2.0"",
+  ""version"": ""4.2.1"",
+    ""debug"": ""^2.2.0"",
-    ""debug"": ""^2.2.0"",","-    ""sinon-chai"": ""^2.8.0""
+    ""sinon-chai"": ""^2.8.0"",
+    ""typescript"": ""^2.0.0""
-    ""test"": ""mocha""
+    ""test"": ""mocha"",
+    ""test:typescript"": ""tsc""
+  ""typings"": ""index.d.ts"",","-  ""version"": ""4.2.0"",
+  ""version"": ""4.2.1"",
+    ""debug"": ""^2.2.0"",
-    ""debug"": ""^2.2.0"",
-    ""sinon-chai"": ""^2.8.0""
+    ""sinon-chai"": ""^2.8.0"",
+    ""typescript"": ""^2.0.0""
-    ""test"": ""mocha""
+    ""test"": ""mocha"",
+    ""test:typescript"": ""tsc""
+  ""typings"": ""index.d.ts"","
sendgrid_sendgrid-nodejs,25623f6830e5c0f00de1e3f3db24b6f90f1781c8,Merge pull request #278 from fullcube/tkp/contact-importer  Tkp/contact importer,index.js,,+exports.importer = require('./lib/helpers/contact-importer/contact-importer.js');,+exports.importer = require('./lib/helpers/contact-importer/contact-importer.js');
sendgrid_sendgrid-nodejs,25623f6830e5c0f00de1e3f3db24b6f90f1781c8,Merge pull request #278 from fullcube/tkp/contact-importer  Tkp/contact importer,package.json,"-  ""version"": ""4.0.1"",
+  ""version"": ""4.1.0"",","+    ""async.ensureasync"": ""^0.5.2"",
+    ""async.queue"": ""^0.5.2"",
+    ""bottleneck"": ""^1.12.0"",
+    ""lodash.chunk"": ""^4.2.0"",
+    ""debug"": ""^2.2.0"",
-    ""mocha"": ""^2.4.5""
+    ""mocha"": ""^2.4.5"",
+    ""mocha-sinon"": ""^1.1.5"",
+    ""sinon"": ""^1.17.5"",
+    ""sinon-chai"": ""^2.8.0""","-  ""version"": ""4.0.1"",
+  ""version"": ""4.1.0"",
+    ""async.ensureasync"": ""^0.5.2"",
+    ""async.queue"": ""^0.5.2"",
+    ""bottleneck"": ""^1.12.0"",
+    ""lodash.chunk"": ""^4.2.0"",
+    ""debug"": ""^2.2.0"",
-    ""mocha"": ""^2.4.5""
+    ""mocha"": ""^2.4.5"",
+    ""mocha-sinon"": ""^1.1.5"",
+    ""sinon"": ""^1.17.5"",
+    ""sinon-chai"": ""^2.8.0"""
sendgrid_sendgrid-nodejs,3751074fa234cc7e0987469acb82201fc0715327,Merge pull request #277 from fullcube/tkp/sendgrid-factory  Make SendGrid a factory that enables multiple prototype instances,lib/sendgrid.js,,"+  return new SendGridInstance(apiKey, host, globalHeaders);
+}
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGridInstance(apiKey, host, globalHeaders) {
-  var globalRequest = getEmptyRequest({
+  this.globalRequest = getEmptyRequest({
-  var client = new Client(globalRequest);
+  this.client = new Client(this.globalRequest);
+}
-  //Interact with the API with this function
-  SendGrid.API = function(request, callback) {
+//Interact with the API with this function
+SendGridInstance.prototype.API = function(request, callback) {
+  var self = this;
-    //If no callback provided, we will return a promise
-    if (!callback) {
-      if (!SendGrid.Promise) {
-        throw new SendGridError('Promise API not supported');
-      }
-      return new SendGrid.Promise(function(resolve, reject) {
-        client.API(request, function(response) {
-          if (isValidResponse(response)) {
-            resolve(response);
-          }
-          else {
-            var error = new SendGridError('Response error');
-            error.response = response;
-            reject(error);
-          }
-        });
+  //If no callback provided, we will return a promise
+  if (!callback) {
+    if (!SendGrid.Promise) {
+      throw new SendGridError('Promise API not supported');
+    }
+    return new SendGrid.Promise(function(resolve, reject) {
+      self.client.API(request, function(response) {
+        if (isValidResponse(response)) {
+          resolve(response);
+        }
+        else {
+          var error = new SendGridError('Response error');
+          error.response = response;
+          reject(error);
+        }
+    });
+  }
+
+  //Use callback
+  self.client.API(request, function(response) {
+    if (isValidResponse(response)) {
+      callback(null, response);
+    else {
+      var error = new SendGridError('Response error');
+      callback(error, response);
+    }
+  });
+};
-    //Use callback
-    client.API(request, function(response) {
-      if (isValidResponse(response)) {
-        callback(null, response);
-      }
-      else {
-        var error = new SendGridError('Response error');
-        callback(error, response);
-      }
-    });
-  };
-
-  //Set requests
-  SendGrid.emptyRequest = getEmptyRequest;
-  SendGrid.globalRequest = globalRequest;
-  return SendGrid;
-}
+//Set requests
+SendGridInstance.prototype.emptyRequest = getEmptyRequest;","+  return new SendGridInstance(apiKey, host, globalHeaders);
+}
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGridInstance(apiKey, host, globalHeaders) {
-  var globalRequest = getEmptyRequest({
+  this.globalRequest = getEmptyRequest({
-  var client = new Client(globalRequest);
+  this.client = new Client(this.globalRequest);
+}
-  //Interact with the API with this function
-  SendGrid.API = function(request, callback) {
+//Interact with the API with this function
+SendGridInstance.prototype.API = function(request, callback) {
+  var self = this;
-    //If no callback provided, we will return a promise
-    if (!callback) {
-      if (!SendGrid.Promise) {
-        throw new SendGridError('Promise API not supported');
-      }
-      return new SendGrid.Promise(function(resolve, reject) {
-        client.API(request, function(response) {
-          if (isValidResponse(response)) {
-            resolve(response);
-          }
-          else {
-            var error = new SendGridError('Response error');
-            error.response = response;
-            reject(error);
-          }
-        });
+  //If no callback provided, we will return a promise
+  if (!callback) {
+    if (!SendGrid.Promise) {
+      throw new SendGridError('Promise API not supported');
+    }
+    return new SendGrid.Promise(function(resolve, reject) {
+      self.client.API(request, function(response) {
+        if (isValidResponse(response)) {
+          resolve(response);
+        }
+        else {
+          var error = new SendGridError('Response error');
+          error.response = response;
+          reject(error);
+        }
+    });
+  }
+
+  //Use callback
+  self.client.API(request, function(response) {
+    if (isValidResponse(response)) {
+      callback(null, response);
+    else {
+      var error = new SendGridError('Response error');
+      callback(error, response);
+    }
+  });
+};
-    //Use callback
-    client.API(request, function(response) {
-      if (isValidResponse(response)) {
-        callback(null, response);
-      }
-      else {
-        var error = new SendGridError('Response error');
-        callback(error, response);
-      }
-    });
-  };
-
-  //Set requests
-  SendGrid.emptyRequest = getEmptyRequest;
-  SendGrid.globalRequest = globalRequest;
-  return SendGrid;
-}
+//Set requests
+SendGridInstance.prototype.emptyRequest = getEmptyRequest;"
sendgrid_sendgrid-nodejs,e7a3f6328343925836fb978ca8f16c43b32f61d8,Merge pull request #264 from sendgrid/let-vs-var  Backwards compatibility fix,lib/sendgrid.js,,"-  let request = JSON.parse(JSON.stringify(emptyRequest));
+  var request = JSON.parse(JSON.stringify(emptyRequest));
-SendGrid.Promise = Promise || null;
+if (typeof Promise !== 'undefined') {
+  SendGrid.Promise = Promise;
+}
+else {
+  SendGrid.Promise = null;
+}","-  let request = JSON.parse(JSON.stringify(emptyRequest));
+  var request = JSON.parse(JSON.stringify(emptyRequest));
-SendGrid.Promise = Promise || null;
+if (typeof Promise !== 'undefined') {
+  SendGrid.Promise = Promise;
+}
+else {
+  SendGrid.Promise = null;
+}"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/accesssettings/accesssettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
- 
+
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    }, 
+    },
-    }, 
+    },
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    1, 
-    2, 
+    1,
+    2,
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
- 
+
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    }, 
+    },
-    }, 
+    },
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-    1, 
-    2, 
+    1,
+    2,
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/alerts/alerts.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/apikeys/apikeys.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/asm/asm.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/browsers/browsers.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/campaigns/campaigns.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/categories/categories.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/clients/clients.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/contactdb/contactdb.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/devices/devices.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/geo/geo.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/helpers/mail/example.js,,"-  var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+  var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-  sg.API(requestPost, function (response) {
+  sg.API(requestPost, function (error, response) {","-  var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+  var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-  sg.API(requestPost, function (response) {
+  sg.API(requestPost, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/ips/ips.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/mail/mail.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/mailboxproviders/mailboxproviders.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/mailsettings/mailsettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/partnersettings/partnersettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/scopes/scopes.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/senders/senders.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/stats/stats.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/subusers/subusers.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/suppression/suppression.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/templates/templates.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/trackingsettings/trackingsettings.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/user/user.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,examples/whitelabel/whitelabel.js,,"-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})","-var sg = require('sendgrid').SendGrid(process.env.SENDGRID_API_KEY)
+var sg = require('sendgrid')(process.env.SENDGRID_API_KEY)
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
+sg.API(request, function (error, response) {
-sg.API(request, function (response) {
-  console.log(response.statusCode)
-  console.log(response.body)
-  console.log(response.headers)
-})
+sg.API(request, function (error, response) {
+  console.log(response.statusCode)
+  console.log(response.body)
+  console.log(response.headers)
+})"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,index.js,,"-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');","-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,lib/helpers/mail/mail.js,,"-""use strict"";
+'use strict';
-  this.enable = enable
-  this.enable_text = enable_text
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.enable_text = enable_text;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEnableText = function(enable_text){
-    this.enable_text = enable_text
-  }
+    return this.enable;
+  };
+
+  this.setEnableText = function(enable_text) {
+    this.enable_text = enable_text;
+  };
-    return this.enable_text
-  }
-
-  this.toJSON = function () {
+    return this.enable_text;
+  };
+
+  this.toJSON = function() {
-      enable_text: this.getEnableText()
-    }
-    return json
-  }
-
-  return this
+      enable_text: this.getEnableText(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setSubscriptionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.enable;
+  };
+
+  this.setSubscriptionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubscriptionTag()
-    }
-    return json
-  }
-
-  return this
+      substitution_tag: this.getSubscriptionTag(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.text = text
-  this.html = html
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.setSubstitutionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.html;
+  };
+
+  this.setSubstitutionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubstitutionTag()
-    }
-    return json
-  }
-
-  return this
-}
-
-function Ganalytics(enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign) {
-  this.enable = enable
-  this.utm_source = utm_source
-  this.utm_medium = utm_medium
-  this.utm_term = utm_term
-  this.utm_content = utm_content
-  this.utm_campaign = utm_campaign
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+      substitution_tag: this.getSubstitutionTag(),
+    };
+    return json;
+  };
+
+  return this;
+}
+
+function Ganalytics(
+  enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign
+) {
+  this.enable = enable;
+  this.utm_source = utm_source;
+  this.utm_medium = utm_medium;
+  this.utm_term = utm_term;
+  this.utm_content = utm_content;
+  this.utm_campaign = utm_campaign;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setUtmSource = function(utm_source){
-    this.utm_source = utm_source
-  }
+    return this.enable;
+  };
+
+  this.setUtmSource = function(utm_source) {
+    this.utm_source = utm_source;
+  };
-    return this.utm_source
-  }
-
-  this.setUtmMedium = function(utm_medium){
-    this.utm_medium = utm_medium
-  }
+    return this.utm_source;
+  };
+
+  this.setUtmMedium = function(utm_medium) {
+    this.utm_medium = utm_medium;
+  };
-    return this.utm_medium
-  }
-
-  this.setUtmTerm = function(utm_term){
-    this.utm_term = utm_term
-  }
+    return this.utm_medium;
+  };
+
+  this.setUtmTerm = function(utm_term) {
+    this.utm_term = utm_term;
+  };
-    return this.utm_term
-  }
-
-  this.setUtmContent = function(utm_content){
-    this.utm_content = utm_content
-  }
+    return this.utm_term;
+  };
+
+  this.setUtmContent = function(utm_content) {
+    this.utm_content = utm_content;
+  };
-    return this.utm_content
-  }
-
-  this.setUtmCampaign = function(utm_campaign){
-    this.utm_campaign = utm_campaign
-  }
+    return this.utm_content;
+  };
+
+  this.setUtmCampaign = function(utm_campaign) {
+    this.utm_campaign = utm_campaign;
+  };
-    return this.utm_campaign
-  }
-
-  this.toJSON = function () {
+    return this.utm_campaign;
+  };
+
+  this.toJSON = function() {
-      utm_campaign: this.getUtmCampaign()
-    }
-    return json
-  }
-
-  return this
+      utm_campaign: this.getUtmCampaign(),
+    };
+    return json;
+  };
+
+  return this;
-  this.click_tracking = undefined
-  this.open_tracking = undefined
-  this.subscription_tracking = undefined
-  this.ganalytics = undefined
+  this.click_tracking = undefined;
+  this.open_tracking = undefined;
+  this.subscription_tracking = undefined;
+  this.ganalytics = undefined;
-    this.click_tracking = click_tracking
-  }
+    this.click_tracking = click_tracking;
+  };
-    return this.click_tracking
-  }
+    return this.click_tracking;
+  };
-    this.open_tracking = open_tracking
-  }
+    this.open_tracking = open_tracking;
+  };
-    return this.open_tracking
-  }
+    return this.open_tracking;
+  };
-    this.subscription_tracking = subscription_tracking
-  }
+    this.subscription_tracking = subscription_tracking;
+  };
-    return this.subscription_tracking
-  }
+    return this.subscription_tracking;
+  };
-    this.ganalytics = ganalytics
-  }
+    this.ganalytics = ganalytics;
+  };
-    return this.ganalytics
-  }
-
-  this.toJSON = function () {
+    return this.ganalytics;
+  };
+
+  this.toJSON = function() {
-    }
-    return json
-  }
-
-  return this
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.email = email
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.email = email;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEmail = function(email){
-    this.email = email
-  }
+    return this.enable;
+  };
+
+  this.setEmail = function(email) {
+    this.email = email;
+  };
-    return this.email
-  }
-
-  this.toJSON = function () {
+    return this.email;
+  };
+
+  this.toJSON = function() {
-      email: this.getEmail()
-    }
-    return json
-  }
-
-  return this
+      email: this.getEmail(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.text = text
-  this.html = html
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.toJSON = function () {
+    return this.html;
+  };
+
+  this.toJSON = function() {
-      html: this.getHtml()
-    }
-    return json
-  }
-
-  return this
+      html: this.getHtml(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.threshold = threshold
-  this.post_to_url = post_to_url
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.threshold = threshold;
+  this.post_to_url = post_to_url;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setThreshold = function(threshold){
-    this.threshold = threshold
-  }
+    return this.enable;
+  };
+
+  this.setThreshold = function(threshold) {
+    this.threshold = threshold;
+  };
-    return this.threshold
-  }
-
-  this.setPostToUrl = function(post_to_url){
-    this.post_to_url = post_to_url
-  }
+    return this.threshold;
+  };
+
+  this.setPostToUrl = function(post_to_url) {
+    this.post_to_url = post_to_url;
+  };
-    return this.post_to_url
-  }
-
-  this.toJSON = function () {
+    return this.post_to_url;
+  };
+
+  this.toJSON = function() {
-      post_to_url: this.getPostToUrl()
-    }
-    return json
-  }
-
-  return this
+      post_to_url: this.getPostToUrl(),
+    };
+    return json;
+  };
+
+  return this;
-  this.bcc = undefined
-  this.bypass_list_management = undefined
-  this.footer = undefined
-  this.sandbox_mode = undefined
-  this.spam_check = undefined
+  this.bcc = undefined;
+  this.bypass_list_management = undefined;
+  this.footer = undefined;
+  this.sandbox_mode = undefined;
+  this.spam_check = undefined;
-    this.bcc = bcc
-  }
+    this.bcc = bcc;
+  };
-    return this.bcc
-  }
+    return this.bcc;
+  };
-    this.bypass_list_management = bypass_list_management
-  }
+    this.bypass_list_management = bypass_list_management;
+  };
-    return this.bypass_list_management
-  }
+    return this.bypass_list_management;
+  };
-    this.footer = footer
-  }
+    this.footer = footer;
+  };
-    return this.footer
-  }
+    return this.footer;
+  };
-    this.sandbox_mode = sandbox_mode
-  }
+    this.sandbox_mode = sandbox_mode;
+  };
-    return this.sandbox_mode
-  }
+    return this.sandbox_mode;
+  };
-    this.spam_check = spam_check
-  }
+    this.spam_check = spam_check;
+  };
-    return this.spam_check
-  }
-
-  this.toJSON = function () {
+    return this.spam_check;
+  };
+
+  this.toJSON = function() {
-      spam_check: this.getSpamCheck()
-    }
-    return json
-  }
-
-  return this
+      spam_check: this.getSpamCheck(),
+    };
+    return json;
+  };
+
+  return this;
-  this.content = undefined
-  this.type = undefined
-  this.filename = undefined
-  this.disposition = undefined
-  this.content_id = undefined
+  this.content = undefined;
+  this.type = undefined;
+  this.filename = undefined;
+  this.disposition = undefined;
+  this.content_id = undefined;
-    this.content = content
-  }
+    this.content = content;
+  };
-    return this.content
-  }
+    return this.content;
+  };
-    this.type = type
-  }
+    this.type = type;
+  };
-    return this.type
-  }
+    return this.type;
+  };
-    this.filename = filename
-  }
+    this.filename = filename;
+  };
-    return this.filename
-  }
+    return this.filename;
+  };
-    this.disposition = disposition
-  }
+    this.disposition = disposition;
+  };
-    return this.disposition
-  }
+    return this.disposition;
+  };
-    this.content_id = content_id
-  }
+    this.content_id = content_id;
+  };
-    return this.content_id
-  }
-
-  this.toJSON = function () {
+    return this.content_id;
+  };
+
+  this.toJSON = function() {
-      content_id: this.getContentId()
-    }
-    return json
-  }
-
-  return this
+      content_id: this.getContentId(),
+    };
+    return json;
+  };
+
+  return this;
-  this.group_id = group_id
-  this.groups_to_display = groups_to_display
+  this.group_id = group_id;
+  this.groups_to_display = groups_to_display;
-    groups_to_display: this.groups_to_display
-  }
-
-  return json
+    groups_to_display: this.groups_to_display,
+  };
+
+  return json;
-  this.category = name
+  this.category = name;
-    category: this.category
-  }
-
-  return json
+    category: this.category,
+  };
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.tos = undefined
-  this.ccs = undefined
-  this.bccs = undefined
-  this.subject = undefined
-  this.headers = undefined
-  this.substitutions = undefined
-  this.custom_args = undefined
-  this.send_at = undefined
+  this.tos = undefined;
+  this.ccs = undefined;
+  this.bccs = undefined;
+  this.subject = undefined;
+  this.headers = undefined;
+  this.substitutions = undefined;
+  this.custom_args = undefined;
+  this.send_at = undefined;
-    if(this.tos == undefined){
-      this.tos = []
-    }
-    this.tos.push(email)
-  }
+    if (this.tos === undefined) {
+      this.tos = [];
+    }
+    this.tos.push(email);
+  };
-    return this.tos
-  }
+    return this.tos;
+  };
-    if(this.ccs == undefined){
-      this.ccs = []
-    }
-    this.ccs.push(email)
-  }
+    if (this.ccs === undefined) {
+      this.ccs = [];
+    }
+    this.ccs.push(email);
+  };
-    return this.ccs
-  }
+    return this.ccs;
+  };
-    if(this.bccs == undefined){
-      this.bccs = []
-    }
-    this.bccs.push(email)
-  }
+    if (this.bccs === undefined) {
+      this.bccs = [];
+    }
+    this.bccs.push(email);
+  };
-    return this.bccs
-  }
+    return this.bccs;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-    return this.subject
-  }
+    return this.subject;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
+    return this.headers;
+  };
-    if(this.substitutions == undefined){
-      this.substitutions = {}
-    }
-    this.substitutions[Object.keys(substitution)[0]] = substitution[Object.keys(substitution)[0]]
-  }
+    if (this.substitutions === undefined) {
+      this.substitutions = {};
+    }
+    this.substitutions[Object.keys(substitution)[0]] =
+      substitution[Object.keys(substitution)[0]];
+  };
-    return this.substitutions
-  }
+    return this.substitutions;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-      send_at: this.getSendAt()
-    }
-    return json
-  }
-
-  return this
+      send_at: this.getSendAt(),
+    };
+    return json;
+  };
+
+  return this;
-  this.type = type
-  this.value = value
+  this.type = type;
+  this.value = value;
-    value: this.value
-  }
-
-  return json
+    value: this.value,
+  };
+
+  return json;
-  this.name = name
-  this.email = email
+  this.name = name;
+  this.email = email;
-    name: this.name
-  }
-
-  return json
+    name: this.name,
+  };
+
+  return json;
-  this.from_email = undefined
-  this.personalizations = undefined
-  this.subject = undefined
-  this.contents = undefined
-  this.attachments = undefined
-  this.template_id = undefined
-  this.sections = undefined
-  this.headers = undefined
-  this.categories = undefined
-  this.send_at = undefined
-  this.batch_id = undefined
-  this.asm = undefined
-  this.ip_pool_name = undefined
-  this.mail_settings = undefined
-  this.reply_to = undefined
+  this.from_email = undefined;
+  this.personalizations = undefined;
+  this.subject = undefined;
+  this.contents = undefined;
+  this.attachments = undefined;
+  this.template_id = undefined;
+  this.sections = undefined;
+  this.headers = undefined;
+  this.categories = undefined;
+  this.send_at = undefined;
+  this.batch_id = undefined;
+  this.asm = undefined;
+  this.ip_pool_name = undefined;
+  this.mail_settings = undefined;
+  this.reply_to = undefined;
-    this.from_email = email
-  }
+    this.from_email = email;
+  };
-  }
+  };
-    if(this.personalizations == undefined){
-      this.personalizations = []
+    if (this.personalizations === undefined) {
+      this.personalizations = [];
-  }
+  };
-    return this.personalizations
-  }
+    return this.personalizations;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-  }
+  };
-    if(this.contents == undefined){
-      this.contents = []
+    if (this.contents === undefined) {
+      this.contents = [];
-  }
+  };
-    return this.contents
-  }
+    return this.contents;
+  };
-    if(this.attachments == undefined){
-      this.attachments = []
+    if (this.attachments === undefined) {
+      this.attachments = [];
-  }
+  };
-    return this.attachments
-  }
+    return this.attachments;
+  };
-    this.template_id = template_id
-  }
+    this.template_id = template_id;
+  };
-  }
+  };
-    if(this.sections == undefined){
-      this.sections = {}
-    }
-    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]]
-  }
+    if (this.sections === undefined) {
+      this.sections = {};
+    }
+    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]];
+  };
-    return this.sections
-  }
+    return this.sections;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
-
-  this.addCategory = function (category) {
-    if(this.categories == undefined){
-      this.categories = []
-    }
-    this.categories.push(category[""category""])
-  }
+    return this.headers;
+  };
+
+  this.addCategory = function(category) {
+    if (this.categories === undefined) {
+      this.categories = [];
+    }
+    this.categories.push(category.category);
+  };
-    return this.categories
-  }
+    return this.categories;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-    this.batch_id = batch_id
-  }
+    this.batch_id = batch_id;
+  };
-    return this.batch_id
-  }
+    return this.batch_id;
+  };
-    this.asm = asm
-  }
+    this.asm = asm;
+  };
-    return this.asm
-  }
+    return this.asm;
+  };
-    this.ip_pool_name = ip_pool_name
-  }
+    this.ip_pool_name = ip_pool_name;
+  };
-    return this.ip_pool_name
-  }
+    return this.ip_pool_name;
+  };
-    this.mail_settings = mail_settings
-  }
+    this.mail_settings = mail_settings;
+  };
-    return this.mail_settings
-  }
+    return this.mail_settings;
+  };
-    this.tracking_settings = tracking_settings
-  }
+    this.tracking_settings = tracking_settings;
+  };
-    return this.tracking_settings
-  }
+    return this.tracking_settings;
+  };
-    this.reply_to = reply_to
-  }
+    this.reply_to = reply_to;
+  };
-  }
-
-  if(from_email && subject && to_email && content){
-    this.setFrom(from_email)
-    var personalization = new Personalization()
-    personalization.addTo(to_email)
-    this.addPersonalization(personalization)
-    this.setSubject(subject)
-    this.addContent(content)
+  };
+
+  if (from_email && subject && to_email && content) {
+    this.setFrom(from_email);
+    var personalization = new Personalization();
+    personalization.addTo(to_email);
+    this.addPersonalization(personalization);
+    this.setSubject(subject);
+    this.addContent(content);
-      reply_to: this.getReplyTo()
-    }
-
-    return json
-  }
-
-  return this
-}
-
-module.exports =
-{
+      reply_to: this.getReplyTo(),
+    };
+
+    return json;
+  };
+
+  return this;
+}
+
+module.exports = {
-  TrackingSettings: TrackingSettings
-}
+  TrackingSettings: TrackingSettings,
+};","-""use strict"";
+'use strict';
-  this.enable = enable
-  this.enable_text = enable_text
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.enable_text = enable_text;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEnableText = function(enable_text){
-    this.enable_text = enable_text
-  }
+    return this.enable;
+  };
+
+  this.setEnableText = function(enable_text) {
+    this.enable_text = enable_text;
+  };
-    return this.enable_text
-  }
-
-  this.toJSON = function () {
+    return this.enable_text;
+  };
+
+  this.toJSON = function() {
-      enable_text: this.getEnableText()
-    }
-    return json
-  }
-
-  return this
+      enable_text: this.getEnableText(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setSubscriptionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.enable;
+  };
+
+  this.setSubscriptionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubscriptionTag()
-    }
-    return json
-  }
-
-  return this
+      substitution_tag: this.getSubscriptionTag(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.text = text
-  this.html = html
-  this.substitution_tag = substitution_tag
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+  this.substitution_tag = substitution_tag;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.setSubstitutionTag = function(substitution_tag){
-    this.substitution_tag = substitution_tag
-  }
+    return this.html;
+  };
+
+  this.setSubstitutionTag = function(substitution_tag) {
+    this.substitution_tag = substitution_tag;
+  };
-    return this.substitution_tag
-  }
-
-  this.toJSON = function () {
+    return this.substitution_tag;
+  };
+
+  this.toJSON = function() {
-      substitution_tag: this.getSubstitutionTag()
-    }
-    return json
-  }
-
-  return this
-}
-
-function Ganalytics(enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign) {
-  this.enable = enable
-  this.utm_source = utm_source
-  this.utm_medium = utm_medium
-  this.utm_term = utm_term
-  this.utm_content = utm_content
-  this.utm_campaign = utm_campaign
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+      substitution_tag: this.getSubstitutionTag(),
+    };
+    return json;
+  };
+
+  return this;
+}
+
+function Ganalytics(
+  enable, utm_source, utm_medium, utm_term, utm_content, utm_campaign
+) {
+  this.enable = enable;
+  this.utm_source = utm_source;
+  this.utm_medium = utm_medium;
+  this.utm_term = utm_term;
+  this.utm_content = utm_content;
+  this.utm_campaign = utm_campaign;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setUtmSource = function(utm_source){
-    this.utm_source = utm_source
-  }
+    return this.enable;
+  };
+
+  this.setUtmSource = function(utm_source) {
+    this.utm_source = utm_source;
+  };
-    return this.utm_source
-  }
-
-  this.setUtmMedium = function(utm_medium){
-    this.utm_medium = utm_medium
-  }
+    return this.utm_source;
+  };
+
+  this.setUtmMedium = function(utm_medium) {
+    this.utm_medium = utm_medium;
+  };
-    return this.utm_medium
-  }
-
-  this.setUtmTerm = function(utm_term){
-    this.utm_term = utm_term
-  }
+    return this.utm_medium;
+  };
+
+  this.setUtmTerm = function(utm_term) {
+    this.utm_term = utm_term;
+  };
-    return this.utm_term
-  }
-
-  this.setUtmContent = function(utm_content){
-    this.utm_content = utm_content
-  }
+    return this.utm_term;
+  };
+
+  this.setUtmContent = function(utm_content) {
+    this.utm_content = utm_content;
+  };
-    return this.utm_content
-  }
-
-  this.setUtmCampaign = function(utm_campaign){
-    this.utm_campaign = utm_campaign
-  }
+    return this.utm_content;
+  };
+
+  this.setUtmCampaign = function(utm_campaign) {
+    this.utm_campaign = utm_campaign;
+  };
-    return this.utm_campaign
-  }
-
-  this.toJSON = function () {
+    return this.utm_campaign;
+  };
+
+  this.toJSON = function() {
-      utm_campaign: this.getUtmCampaign()
-    }
-    return json
-  }
-
-  return this
+      utm_campaign: this.getUtmCampaign(),
+    };
+    return json;
+  };
+
+  return this;
-  this.click_tracking = undefined
-  this.open_tracking = undefined
-  this.subscription_tracking = undefined
-  this.ganalytics = undefined
+  this.click_tracking = undefined;
+  this.open_tracking = undefined;
+  this.subscription_tracking = undefined;
+  this.ganalytics = undefined;
-    this.click_tracking = click_tracking
-  }
+    this.click_tracking = click_tracking;
+  };
-    return this.click_tracking
-  }
+    return this.click_tracking;
+  };
-    this.open_tracking = open_tracking
-  }
+    this.open_tracking = open_tracking;
+  };
-    return this.open_tracking
-  }
+    return this.open_tracking;
+  };
-    this.subscription_tracking = subscription_tracking
-  }
+    this.subscription_tracking = subscription_tracking;
+  };
-    return this.subscription_tracking
-  }
+    return this.subscription_tracking;
+  };
-    this.ganalytics = ganalytics
-  }
+    this.ganalytics = ganalytics;
+  };
-    return this.ganalytics
-  }
-
-  this.toJSON = function () {
+    return this.ganalytics;
+  };
+
+  this.toJSON = function() {
-    }
-    return json
-  }
-
-  return this
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
-  this.email = email
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.email = email;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setEmail = function(email){
-    this.email = email
-  }
+    return this.enable;
+  };
+
+  this.setEmail = function(email) {
+    this.email = email;
+  };
-    return this.email
-  }
-
-  this.toJSON = function () {
+    return this.email;
+  };
+
+  this.toJSON = function() {
-      email: this.getEmail()
-    }
-    return json
-  }
-
-  return this
+      email: this.getEmail(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.text = text
-  this.html = html
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.text = text;
+  this.html = html;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setText = function(text){
-    this.text = text
-  }
+    return this.enable;
+  };
+
+  this.setText = function(text) {
+    this.text = text;
+  };
-    return this.text
-  }
-
-  this.setHtml = function(html){
-    this.html = html
-  }
+    return this.text;
+  };
+
+  this.setHtml = function(html) {
+    this.html = html;
+  };
-    return this.html
-  }
-
-  this.toJSON = function () {
+    return this.html;
+  };
+
+  this.toJSON = function() {
-      html: this.getHtml()
-    }
-    return json
-  }
-
-  return this
+      html: this.getHtml(),
+    };
+    return json;
+  };
+
+  return this;
-  this.enable = enable
+  this.enable = enable;
-    enable: this.enable
-  }
-
-  return json
+    enable: this.enable,
+  };
+
+  return json;
-  this.enable = enable
-  this.threshold = threshold
-  this.post_to_url = post_to_url
-
-
-  this.setEnable = function(enable){
-    this.enable = enable
-  }
+  this.enable = enable;
+  this.threshold = threshold;
+  this.post_to_url = post_to_url;
+
+  this.setEnable = function(enable) {
+    this.enable = enable;
+  };
-    return this.enable
-  }
-
-  this.setThreshold = function(threshold){
-    this.threshold = threshold
-  }
+    return this.enable;
+  };
+
+  this.setThreshold = function(threshold) {
+    this.threshold = threshold;
+  };
-    return this.threshold
-  }
-
-  this.setPostToUrl = function(post_to_url){
-    this.post_to_url = post_to_url
-  }
+    return this.threshold;
+  };
+
+  this.setPostToUrl = function(post_to_url) {
+    this.post_to_url = post_to_url;
+  };
-    return this.post_to_url
-  }
-
-  this.toJSON = function () {
+    return this.post_to_url;
+  };
+
+  this.toJSON = function() {
-      post_to_url: this.getPostToUrl()
-    }
-    return json
-  }
-
-  return this
+      post_to_url: this.getPostToUrl(),
+    };
+    return json;
+  };
+
+  return this;
-  this.bcc = undefined
-  this.bypass_list_management = undefined
-  this.footer = undefined
-  this.sandbox_mode = undefined
-  this.spam_check = undefined
+  this.bcc = undefined;
+  this.bypass_list_management = undefined;
+  this.footer = undefined;
+  this.sandbox_mode = undefined;
+  this.spam_check = undefined;
-    this.bcc = bcc
-  }
+    this.bcc = bcc;
+  };
-    return this.bcc
-  }
+    return this.bcc;
+  };
-    this.bypass_list_management = bypass_list_management
-  }
+    this.bypass_list_management = bypass_list_management;
+  };
-    return this.bypass_list_management
-  }
+    return this.bypass_list_management;
+  };
-    this.footer = footer
-  }
+    this.footer = footer;
+  };
-    return this.footer
-  }
+    return this.footer;
+  };
-    this.sandbox_mode = sandbox_mode
-  }
+    this.sandbox_mode = sandbox_mode;
+  };
-    return this.sandbox_mode
-  }
+    return this.sandbox_mode;
+  };
-    this.spam_check = spam_check
-  }
+    this.spam_check = spam_check;
+  };
-    return this.spam_check
-  }
-
-  this.toJSON = function () {
+    return this.spam_check;
+  };
+
+  this.toJSON = function() {
-      spam_check: this.getSpamCheck()
-    }
-    return json
-  }
-
-  return this
+      spam_check: this.getSpamCheck(),
+    };
+    return json;
+  };
+
+  return this;
-  this.content = undefined
-  this.type = undefined
-  this.filename = undefined
-  this.disposition = undefined
-  this.content_id = undefined
+  this.content = undefined;
+  this.type = undefined;
+  this.filename = undefined;
+  this.disposition = undefined;
+  this.content_id = undefined;
-    this.content = content
-  }
+    this.content = content;
+  };
-    return this.content
-  }
+    return this.content;
+  };
-    this.type = type
-  }
+    this.type = type;
+  };
-    return this.type
-  }
+    return this.type;
+  };
-    this.filename = filename
-  }
+    this.filename = filename;
+  };
-    return this.filename
-  }
+    return this.filename;
+  };
-    this.disposition = disposition
-  }
+    this.disposition = disposition;
+  };
-    return this.disposition
-  }
+    return this.disposition;
+  };
-    this.content_id = content_id
-  }
+    this.content_id = content_id;
+  };
-    return this.content_id
-  }
-
-  this.toJSON = function () {
+    return this.content_id;
+  };
+
+  this.toJSON = function() {
-      content_id: this.getContentId()
-    }
-    return json
-  }
-
-  return this
+      content_id: this.getContentId(),
+    };
+    return json;
+  };
+
+  return this;
-  this.group_id = group_id
-  this.groups_to_display = groups_to_display
+  this.group_id = group_id;
+  this.groups_to_display = groups_to_display;
-    groups_to_display: this.groups_to_display
-  }
-
-  return json
+    groups_to_display: this.groups_to_display,
+  };
+
+  return json;
-  this.category = name
+  this.category = name;
-    category: this.category
-  }
-
-  return json
+    category: this.category,
+  };
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.key = key
-  this.value = value
-
-  var json = {}
-  json[this.key] = this.value
-
-  return json
+  this.key = key;
+  this.value = value;
+
+  var json = {};
+  json[this.key] = this.value;
+
+  return json;
-  this.tos = undefined
-  this.ccs = undefined
-  this.bccs = undefined
-  this.subject = undefined
-  this.headers = undefined
-  this.substitutions = undefined
-  this.custom_args = undefined
-  this.send_at = undefined
+  this.tos = undefined;
+  this.ccs = undefined;
+  this.bccs = undefined;
+  this.subject = undefined;
+  this.headers = undefined;
+  this.substitutions = undefined;
+  this.custom_args = undefined;
+  this.send_at = undefined;
-    if(this.tos == undefined){
-      this.tos = []
-    }
-    this.tos.push(email)
-  }
+    if (this.tos === undefined) {
+      this.tos = [];
+    }
+    this.tos.push(email);
+  };
-    return this.tos
-  }
+    return this.tos;
+  };
-    if(this.ccs == undefined){
-      this.ccs = []
-    }
-    this.ccs.push(email)
-  }
+    if (this.ccs === undefined) {
+      this.ccs = [];
+    }
+    this.ccs.push(email);
+  };
-    return this.ccs
-  }
+    return this.ccs;
+  };
-    if(this.bccs == undefined){
-      this.bccs = []
-    }
-    this.bccs.push(email)
-  }
+    if (this.bccs === undefined) {
+      this.bccs = [];
+    }
+    this.bccs.push(email);
+  };
-    return this.bccs
-  }
+    return this.bccs;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-    return this.subject
-  }
+    return this.subject;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
+    return this.headers;
+  };
-    if(this.substitutions == undefined){
-      this.substitutions = {}
-    }
-    this.substitutions[Object.keys(substitution)[0]] = substitution[Object.keys(substitution)[0]]
-  }
+    if (this.substitutions === undefined) {
+      this.substitutions = {};
+    }
+    this.substitutions[Object.keys(substitution)[0]] =
+      substitution[Object.keys(substitution)[0]];
+  };
-    return this.substitutions
-  }
+    return this.substitutions;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-      send_at: this.getSendAt()
-    }
-    return json
-  }
-
-  return this
+      send_at: this.getSendAt(),
+    };
+    return json;
+  };
+
+  return this;
-  this.type = type
-  this.value = value
+  this.type = type;
+  this.value = value;
-    value: this.value
-  }
-
-  return json
+    value: this.value,
+  };
+
+  return json;
-  this.name = name
-  this.email = email
+  this.name = name;
+  this.email = email;
-    name: this.name
-  }
-
-  return json
+    name: this.name,
+  };
+
+  return json;
-  this.from_email = undefined
-  this.personalizations = undefined
-  this.subject = undefined
-  this.contents = undefined
-  this.attachments = undefined
-  this.template_id = undefined
-  this.sections = undefined
-  this.headers = undefined
-  this.categories = undefined
-  this.send_at = undefined
-  this.batch_id = undefined
-  this.asm = undefined
-  this.ip_pool_name = undefined
-  this.mail_settings = undefined
-  this.reply_to = undefined
+  this.from_email = undefined;
+  this.personalizations = undefined;
+  this.subject = undefined;
+  this.contents = undefined;
+  this.attachments = undefined;
+  this.template_id = undefined;
+  this.sections = undefined;
+  this.headers = undefined;
+  this.categories = undefined;
+  this.send_at = undefined;
+  this.batch_id = undefined;
+  this.asm = undefined;
+  this.ip_pool_name = undefined;
+  this.mail_settings = undefined;
+  this.reply_to = undefined;
-    this.from_email = email
-  }
+    this.from_email = email;
+  };
-  }
+  };
-    if(this.personalizations == undefined){
-      this.personalizations = []
+    if (this.personalizations === undefined) {
+      this.personalizations = [];
-  }
+  };
-    return this.personalizations
-  }
+    return this.personalizations;
+  };
-    this.subject = subject
-  }
+    this.subject = subject;
+  };
-  }
+  };
-    if(this.contents == undefined){
-      this.contents = []
+    if (this.contents === undefined) {
+      this.contents = [];
-  }
+  };
-    return this.contents
-  }
+    return this.contents;
+  };
-    if(this.attachments == undefined){
-      this.attachments = []
+    if (this.attachments === undefined) {
+      this.attachments = [];
-  }
+  };
-    return this.attachments
-  }
+    return this.attachments;
+  };
-    this.template_id = template_id
-  }
+    this.template_id = template_id;
+  };
-  }
+  };
-    if(this.sections == undefined){
-      this.sections = {}
-    }
-    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]]
-  }
+    if (this.sections === undefined) {
+      this.sections = {};
+    }
+    this.sections[Object.keys(section)[0]] = section[Object.keys(section)[0]];
+  };
-    return this.sections
-  }
+    return this.sections;
+  };
-    if(this.headers == undefined){
-      this.headers = {}
-    }
-    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]]
-  }
+    if (this.headers === undefined) {
+      this.headers = {};
+    }
+    this.headers[Object.keys(header)[0]] = header[Object.keys(header)[0]];
+  };
-    return this.headers
-  }
-
-  this.addCategory = function (category) {
-    if(this.categories == undefined){
-      this.categories = []
-    }
-    this.categories.push(category[""category""])
-  }
+    return this.headers;
+  };
+
+  this.addCategory = function(category) {
+    if (this.categories === undefined) {
+      this.categories = [];
+    }
+    this.categories.push(category.category);
+  };
-    return this.categories
-  }
+    return this.categories;
+  };
-    if(this.custom_args == undefined){
-      this.custom_args = {}
-    }
-    this.custom_args[Object.keys(custom_arg)[0]] = custom_arg[Object.keys(custom_arg)[0]]
-  }
+    if (this.custom_args === undefined) {
+      this.custom_args = {};
+    }
+    this.custom_args[Object.keys(custom_arg)[0]] =
+      custom_arg[Object.keys(custom_arg)[0]];
+  };
-    return this.custom_args
-  }
+    return this.custom_args;
+  };
-    this.send_at = send_at
-  }
+    this.send_at = send_at;
+  };
-    return this.send_at
-  }
+    return this.send_at;
+  };
-    this.batch_id = batch_id
-  }
+    this.batch_id = batch_id;
+  };
-    return this.batch_id
-  }
+    return this.batch_id;
+  };
-    this.asm = asm
-  }
+    this.asm = asm;
+  };
-    return this.asm
-  }
+    return this.asm;
+  };
-    this.ip_pool_name = ip_pool_name
-  }
+    this.ip_pool_name = ip_pool_name;
+  };
-    return this.ip_pool_name
-  }
+    return this.ip_pool_name;
+  };
-    this.mail_settings = mail_settings
-  }
+    this.mail_settings = mail_settings;
+  };
-    return this.mail_settings
-  }
+    return this.mail_settings;
+  };
-    this.tracking_settings = tracking_settings
-  }
+    this.tracking_settings = tracking_settings;
+  };
-    return this.tracking_settings
-  }
+    return this.tracking_settings;
+  };
-    this.reply_to = reply_to
-  }
+    this.reply_to = reply_to;
+  };
-  }
-
-  if(from_email && subject && to_email && content){
-    this.setFrom(from_email)
-    var personalization = new Personalization()
-    personalization.addTo(to_email)
-    this.addPersonalization(personalization)
-    this.setSubject(subject)
-    this.addContent(content)
+  };
+
+  if (from_email && subject && to_email && content) {
+    this.setFrom(from_email);
+    var personalization = new Personalization();
+    personalization.addTo(to_email);
+    this.addPersonalization(personalization);
+    this.setSubject(subject);
+    this.addContent(content);
-      reply_to: this.getReplyTo()
-    }
-
-    return json
-  }
-
-  return this
-}
-
-module.exports =
-{
+      reply_to: this.getReplyTo(),
+    };
+
+    return json;
+  };
+
+  return this;
+}
+
+module.exports = {
-  TrackingSettings: TrackingSettings
-}
+  TrackingSettings: TrackingSettings,
+};"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,lib/sendgrid.js,,"-""use strict"";
-var package_json = require('./../package.json');
-var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/* eslint dot-notation: 'off' */
+'use strict';
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid (apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client
-  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  globalRequest.host = host || ""api.sendgrid.com"";
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
-  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
-  globalRequest.headers['Accept'] = 'application/json'
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj] ) {
-        globalRequest.headers[key] = globalHeaders[obj][key]
+/**
+ * Dependencies
+ */
+var pkg = require('./../package.json');
+var sendgridRest = require('sendgrid-rest');
+var emptyRequest = sendgridRest.emptyRequest;
+var Client = sendgridRest.Client;
+var SendGridError = require('./helpers/error');
+
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  let request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
-  var client = new Client(globalRequest)
+  return request;
+}
-  this.emptyRequest = function () {
-    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + pkg.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  return headers;
+}
-  // Interact with the API with this function
-  this.API = function(request, callback) {
-    client.API(request, function (response) {
-      callback(response)
-    })
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+
+  //Create global request
+  var globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
+  var client = new Client(globalRequest);
+
+  //Interact with the API with this function
+  SendGrid.API = function(request, callback) {
+
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            var error = new SendGridError('Response error');
+            error.response = response;
+            reject(error);
+          }
+        });
+      });
+    }
+
+    //Use callback
+    client.API(request, function(response) {
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
+    });
-  this.globalRequest = globalRequest
-  return this;
-};
+  //Set requests
+  SendGrid.emptyRequest = getEmptyRequest;
+  SendGrid.globalRequest = globalRequest;
+  return SendGrid;
+}
-module.exports =
-{
-  SendGrid: SendGrid,
-  emptyRequest: emptyRequest
-}
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+//Export
+module.exports = SendGrid;","-""use strict"";
-var package_json = require('./../package.json');
-var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/* eslint dot-notation: 'off' */
+'use strict';
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid (apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client
-  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  globalRequest.host = host || ""api.sendgrid.com"";
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
-  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
-  globalRequest.headers['Accept'] = 'application/json'
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj] ) {
-        globalRequest.headers[key] = globalHeaders[obj][key]
+/**
+ * Dependencies
+ */
+var pkg = require('./../package.json');
+var sendgridRest = require('sendgrid-rest');
+var emptyRequest = sendgridRest.emptyRequest;
+var Client = sendgridRest.Client;
+var SendGridError = require('./helpers/error');
+
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  let request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
-  var client = new Client(globalRequest)
+  return request;
+}
-  this.emptyRequest = function () {
-    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + pkg.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  return headers;
+}
-  // Interact with the API with this function
-  this.API = function(request, callback) {
-    client.API(request, function (response) {
-      callback(response)
-    })
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+
+  //Create global request
+  var globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
+  var client = new Client(globalRequest);
+
+  //Interact with the API with this function
+  SendGrid.API = function(request, callback) {
+
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            var error = new SendGridError('Response error');
+            error.response = response;
+            reject(error);
+          }
+        });
+      });
+    }
+
+    //Use callback
+    client.API(request, function(response) {
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
+    });
-  this.globalRequest = globalRequest
-  return this;
-};
+  //Set requests
+  SendGrid.emptyRequest = getEmptyRequest;
+  SendGrid.globalRequest = globalRequest;
+  return SendGrid;
+}
-module.exports =
-{
-  SendGrid: SendGrid,
-  emptyRequest: emptyRequest
-}
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+//Export
+module.exports = SendGrid;"
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,package.json,,"-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-    ""eslint"": ""^2.7.0"",
-    ""eslint-config-standard"": ""^5.1.0"",
-    ""eslint-plugin-standard"": ""^1.3.2"",
+    ""eslint"": ""^3.1.0"",
+    ""lint"": ""eslint . --fix"",","-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-    ""eslint"": ""^2.7.0"",
-    ""eslint-config-standard"": ""^5.1.0"",
-    ""eslint-plugin-standard"": ""^1.3.2"",
+    ""eslint"": ""^3.1.0"",
+    ""lint"": ""eslint . --fix"","
sendgrid_sendgrid-nodejs,93763a74a85969382d59fcb3708d22051498f998,Merge pull request #261 from adambuczynski/eslint  Promise API and consistent callback function signature,test/test.js,,"+var sendgrid = require('../lib/sendgrid');
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
-      assert.equal(response.statusCode, 200, 'response code is not correct')
-      done();
-    })
-  });
-})
-
+    sg.API(request, function (error, response) {
+      assert.equal(response.statusCode, 200, 'response code is not correct')
+      done();
+    })
+  });
+})","+var sendgrid = require('../lib/sendgrid');
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
+    sg.API(request, function (error, response) {
-  var sg = require('../lib/sendgrid.js').SendGrid(API_KEY, TEST_HOST)
+  var sg = sendgrid(API_KEY, TEST_HOST)
-    sg.API(request, function (response) {
-      assert.equal(response.statusCode, 200, 'response code is not correct')
-      done();
-    })
-  });
-})
-
+    sg.API(request, function (error, response) {
+      assert.equal(response.statusCode, 200, 'response code is not correct')
+      done();
+    })
+  });
+})"
sendgrid_sendgrid-nodejs,bc6295358f4424e343ed9377cc7f0ffdb17dc98c,Merge branch 'callback-function-signature' into eslint,index.js,,"-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');","-exports = module.exports = require(""./lib/sendgrid"");
-exports.mail = require(""./lib/helpers/mail/mail.js"")
+exports = module.exports = require('./lib/sendgrid');
+exports.mail = require('./lib/helpers/mail/mail.js');"
sendgrid_sendgrid-nodejs,bc6295358f4424e343ed9377cc7f0ffdb17dc98c,Merge branch 'callback-function-signature' into eslint,lib/sendgrid.js,,"+var Client = require('sendgrid-rest').Client;
+var SendGridError = require('./helpers/error');
-//Helper to get empty request
-function getEmptyRequest() {
-  return JSON.parse(JSON.stringify(emptyRequest));
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid(apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client;
-  var globalRequest = getEmptyRequest();
-  globalRequest.host = host || 'api.sendgrid.com';
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey);
-  globalRequest.headers['Accept'] = 'application/json';
-  globalRequest.headers['User-Agent'] =
-    'sendgrid/' + package_json.version + ';nodejs';
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj]) {
-        globalRequest.headers[key] = globalHeaders[obj][key];
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  let request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
+  return request;
+}
+
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  }
+  return headers;
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+
+  //Create global request
+  var globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
-  this.emptyRequest = getEmptyRequest;
+  //Interact with the API with this function
+  this.API = function(request, callback) {
-  // Interact with the API with this function
-  this.API = function(request, callback) {
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            reject(response);
+          }
+        });
+      });
+    }
+
+    //Use callback
-      callback(response);
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
+  //Set requests
+  this.emptyRequest = getEmptyRequest;
-module.exports =
-{
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+//Export
+module.exports = {","+var Client = require('sendgrid-rest').Client;
+var SendGridError = require('./helpers/error');
-//Helper to get empty request
-function getEmptyRequest() {
-  return JSON.parse(JSON.stringify(emptyRequest));
+/**
+ * Helper to check if response is valid
+ */
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
-// SendGrid allows for quick and easy access to the v3 Web API
-function SendGrid(apiKey, host, globalHeaders) {
-  var Client = require('sendgrid-rest').Client;
-  var globalRequest = getEmptyRequest();
-  globalRequest.host = host || 'api.sendgrid.com';
-  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey);
-  globalRequest.headers['Accept'] = 'application/json';
-  globalRequest.headers['User-Agent'] =
-    'sendgrid/' + package_json.version + ';nodejs';
-  if (globalHeaders) {
-    for (var obj in globalHeaders) {
-      for (var key in globalHeaders[obj]) {
-        globalRequest.headers[key] = globalHeaders[obj][key];
+/**
+ * Helper to get a new empty request
+ */
+function getEmptyRequest(data) {
+  let request = JSON.parse(JSON.stringify(emptyRequest));
+  if (data && typeof data === 'object') {
+    for (var key in data) {
+      if (data.hasOwnProperty(key)) {
+        request[key] = JSON.parse(JSON.stringify(data[key]));
+  return request;
+}
+
+/**
+ * Helper to make headers
+ */
+function makeHeaders(apiKey, globalHeaders) {
+  var headers = {};
+  headers['Authorization'] = 'Bearer '.concat(apiKey);
+  headers['Accept'] = 'application/json';
+  headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs';
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      if (globalHeaders.hasOwnProperty(obj) &&
+        typeof globalHeaders[obj] === 'object') {
+        for (var key in globalHeaders[obj]) {
+          if (globalHeaders[obj].hasOwnProperty(key)) {
+            headers[key] = globalHeaders[obj][key];
+          }
+        }
+      }
+    }
+  }
+  return headers;
+}
+
+/**
+ * SendGrid allows for quick and easy access to the v3 Web API
+ */
+function SendGrid(apiKey, host, globalHeaders) {
+
+  //Create global request
+  var globalRequest = getEmptyRequest({
+    host: host || 'api.sendgrid.com',
+    headers: makeHeaders(apiKey, globalHeaders),
+  });
+
+  //Initialize new client
-  this.emptyRequest = getEmptyRequest;
+  //Interact with the API with this function
+  this.API = function(request, callback) {
-  // Interact with the API with this function
-  this.API = function(request, callback) {
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            reject(response);
+          }
+        });
+      });
+    }
+
+    //Use callback
-      callback(response);
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
+  //Set requests
+  this.emptyRequest = getEmptyRequest;
-module.exports =
-{
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+//Export
+module.exports = {"
sendgrid_sendgrid-nodejs,bc6295358f4424e343ed9377cc7f0ffdb17dc98c,Merge branch 'callback-function-signature' into eslint,package.json,,"-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-    ""eslint"": ""^2.7.0"",
+    ""eslint"": ""^3.1.0"",
+    ""pretest"": ""eslint . --fix"",","-    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>"",
+    ""Adam Buczynski <me@adambuczynski.com>""
-    ""eslint"": ""^2.7.0"",
+    ""eslint"": ""^3.1.0"",
+    ""pretest"": ""eslint . --fix"","
sendgrid_sendgrid-nodejs,18da9c733950313fd0a17336760f3ab1ac38ccff,Merge branch 'eslint' into callback-function-signature,lib/sendgrid.js,"+var SendGridError = require('./helpers/error');
+
+//Helper to check if response is valid
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+//Helper to get a new empty request
+function getEmptyRequest() {
+  return JSON.parse(JSON.stringify(emptyRequest));
+}
-  var globalRequest = this.emptyRequest();
+  var globalRequest = getEmptyRequest();
-  this.emptyRequest = function() {
-    return JSON.parse(JSON.stringify(emptyRequest));
-  };
+  this.emptyRequest = getEmptyRequest;
+
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            reject(response);
+          }
+        });
+      });
+    }
+
+    //Use callback
-      callback(response);
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
-module.exports =
-{
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+module.exports = {
-  emptyRequest: SendGrid.emptyRequest(),
+  emptyRequest: getEmptyRequest(),","+//Helper to get empty request
+function getEmptyRequest() {
+  return JSON.parse(JSON.stringify(emptyRequest));
+}
+
-  var globalRequest = this.emptyRequest();
+  var globalRequest = getEmptyRequest();
-  this.emptyRequest = function() {
-    return JSON.parse(JSON.stringify(emptyRequest));
-  };
+  this.emptyRequest = getEmptyRequest;
-  emptyRequest: SendGrid.emptyRequest(),
+  emptyRequest: getEmptyRequest(),","+var SendGridError = require('./helpers/error');
+
+//Helper to check if response is valid
+function isValidResponse(response) {
+  return (
+    response &&
+    response.statusCode &&
+    response.statusCode >= 200 &&
+    response.statusCode <= 299
+  );
+}
+
+//Helper to get a new empty request
+function getEmptyRequest() {
+  return JSON.parse(JSON.stringify(emptyRequest));
+}
+
+//Helper to get empty request
+function getEmptyRequest() {
+  return JSON.parse(JSON.stringify(emptyRequest));
+}
-  var globalRequest = this.emptyRequest();
+  var globalRequest = getEmptyRequest();
-  this.emptyRequest = function() {
-    return JSON.parse(JSON.stringify(emptyRequest));
-  };
+  this.emptyRequest = getEmptyRequest;
+
+    //If no callback provided, we will return a promise
+    if (!callback) {
+      if (!SendGrid.Promise) {
+        throw new SendGridError('Promise API not supported');
+      }
+      return new SendGrid.Promise(function(resolve, reject) {
+        client.API(request, function(response) {
+          if (isValidResponse(response)) {
+            resolve(response);
+          }
+          else {
+            reject(response);
+          }
+        });
+      });
+    }
+
+    //Use callback
-      callback(response);
+      if (isValidResponse(response)) {
+        callback(null, response);
+      }
+      else {
+        var error = new SendGridError('Response error');
+        callback(error, response);
+      }
-module.exports =
-{
+//Try to use native promises by default
+SendGrid.Promise = Promise || null;
+
+module.exports = {
-  emptyRequest: SendGrid.emptyRequest(),
+  emptyRequest: getEmptyRequest(),"
sendgrid_sendgrid-nodejs,912725c7d7f346bce6a7393ce8875e36403130e0,Merge branch 'v3release',lib/sendgrid.js,,"+var package_json = require('./../package.json');
+var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-var package_json    = require('./../package.json');
-var _               = require('lodash');
-var request         = require('request');
-var smtpapi_lib     = require('smtpapi');
-var Email           = require('./email');
-var Sendgrid = function(apiUserOrKey, apiKeyOrOptions, options) {
+// SendGrid allows for quick and easy access to the v3 Web API
+function SendGrid (apiKey, host, globalHeaders) {
+  var Client = require('sendgrid-rest').Client
+  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+  globalRequest.host = host || ""api.sendgrid.com"";
+  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
+  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      for (var key in globalHeaders[obj] ) {
+        globalRequest.headers[key] = globalHeaders[obj][key]
+      }
+    }
+  }
+  var client = new Client(globalRequest)
-  if( !(this instanceof Sendgrid) ) {
-    return new Sendgrid(apiUserOrKey, apiKeyOrOptions, options);
+  this.emptyRequest = function () {
+    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  // Check if given a username + password or api key
-  if (typeof apiKeyOrOptions === 'string') {
-    // Username and password
-    this.api_user = apiUserOrKey;
-    this.api_key  = apiKeyOrOptions;
-    this.options  = options || {};
-  } else if (typeof apiKeyOrOptions === 'object' || apiKeyOrOptions === undefined) {
-    // API key
-    this.api_key  = apiUserOrKey;
-    this.api_user = null;
-
-    // With options
-    this.options = apiKeyOrOptions || {};
-  } else {
-    // Won't be thrown?
-    throw new Error('Need a username + password or api key!');
-  }
-
-  var _this         = this;
-  
-  // do this to mantain similarity to other libs
-  var uriParts = {};
-  uriParts.protocol = this.options.protocol || ""https"";
-  uriParts.host = this.options.host || ""api.sendgrid.com"";
-  uriParts.port = this.options.port || """";
-  uriParts.endpoint = this.options.endpoint || ""/api/mail.send.json"";
-  delete this.options.protocol;
-  delete this.options.host;
-  delete this.options.port;
-  delete this.options.endpoint;
-  this.options.uriParts = uriParts;
-
-  this.options.uri = this.options.uri || uriParts.protocol + ""://"" + uriParts.host + (uriParts.port ? "":"" + uriParts.port : """") + uriParts.endpoint;
-
-  var send = function(email, callback) {
-    var callback    = callback || function() { };
-    if (email.constructor !== Email) {
-      email = new Email(email);
-    }
-
-    _send.bind(this)(email, callback);
+  // Interact with the API with this function
+  this.API = function(request, callback) {
+    client.API(request, function (response) {
+      callback(response)
+    })
-  var _send = function(email, callback) {
-    var postOptions = {
-      method    : 'POST',
-      headers   : {
-        'User-Agent': 'sendgrid/' + package_json.version + ';nodejs'
-      }
-    };
-
-    // Using api key
-    if (this.api_user === null) {
-      postOptions.headers['Authorization'] = 'Bearer ' + this.api_key;
-    }
-
-    var options = _.merge(postOptions, this.options);
-
-    var req = request(options, function(err, resp, body) {
-      var json;
-
-      if(err) return callback(err, null);
-      
-      try {
-        json = JSON.parse(body);
-      } catch (e) {
-        // be more granular with the error message
-        e.message = e.message + "" JSONPARSEERROR when parsing: "" + body;
-        return callback(new Error(e), null);
-      }
-
-      if (json.message !== 'success') {
-        var error = 'sendgrid error';
-        if (json.errors) { error = json.errors.shift(); }
-        return callback(new Error(error), null);
-      }
-
-      return callback(null, json);
-    });
-
-    var form          = email.toWebFormat();
-
-    // Using username + password
-    if (this.api_user !== null) {
-      form['api_user']  = this.api_user;
-      form['api_key']   = this.api_key;
-    }
-
-    var reqForm = req.form();
-
-    var _reqFormAppend = function(field, value) {
-      reqForm.append(field, value);
-    };
-
-    for (var field in form) {
-      var value = form[field];
-      if (value && value.filename) {
-        if (value.cid) {
-          reqForm.append(""content[""+value.filename+""]"", value.cid);
-        }
-        reqForm.append(""files[""+value.filename+""]"", value.content, {filename: value.filename, contentType: value.contentType});
-      } else {
-        try {
-          if(!Array.isArray(value)){
-            //reqForm.append(field, value);
-            _reqFormAppend.bind(this)(field, value);
-          } else {
-            value.forEach(_reqFormAppend.bind(this, field));
-          }
-        } catch(err) {}
-      }
-    }
-  };
-
-  /*
-   * Expose public API calls
-   */
-  this.version         = package_json.version;
-  this.Email           = Email;
-  this.smtpapi         = smtpapi_lib;
-  this.send            = send;
-  this.options         = this.options;
+  this.globalRequest = globalRequest
-module.exports = Sendgrid;
+module.exports =
+{
+  SendGrid: SendGrid,
+  emptyRequest: emptyRequest
+}","+var package_json = require('./../package.json');
+var emptyRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-var package_json    = require('./../package.json');
-var _               = require('lodash');
-var request         = require('request');
-var smtpapi_lib     = require('smtpapi');
-var Email           = require('./email');
-var Sendgrid = function(apiUserOrKey, apiKeyOrOptions, options) {
+// SendGrid allows for quick and easy access to the v3 Web API
+function SendGrid (apiKey, host, globalHeaders) {
+  var Client = require('sendgrid-rest').Client
+  var globalRequest = JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
+  globalRequest.host = host || ""api.sendgrid.com"";
+  globalRequest.headers['Authorization'] = 'Bearer '.concat(apiKey)
+  globalRequest.headers['User-Agent'] = 'sendgrid/' + package_json.version + ';nodejs'
+  if (globalHeaders) {
+    for (var obj in globalHeaders) {
+      for (var key in globalHeaders[obj] ) {
+        globalRequest.headers[key] = globalHeaders[obj][key]
+      }
+    }
+  }
+  var client = new Client(globalRequest)
-  if( !(this instanceof Sendgrid) ) {
-    return new Sendgrid(apiUserOrKey, apiKeyOrOptions, options);
+  this.emptyRequest = function () {
+    return JSON.parse(JSON.stringify(require('sendgrid-rest').emptyRequest));
-  // Check if given a username + password or api key
-  if (typeof apiKeyOrOptions === 'string') {
-    // Username and password
-    this.api_user = apiUserOrKey;
-    this.api_key  = apiKeyOrOptions;
-    this.options  = options || {};
-  } else if (typeof apiKeyOrOptions === 'object' || apiKeyOrOptions === undefined) {
-    // API key
-    this.api_key  = apiUserOrKey;
-    this.api_user = null;
-
-    // With options
-    this.options = apiKeyOrOptions || {};
-  } else {
-    // Won't be thrown?
-    throw new Error('Need a username + password or api key!');
-  }
-
-  var _this         = this;
-  
-  // do this to mantain similarity to other libs
-  var uriParts = {};
-  uriParts.protocol = this.options.protocol || ""https"";
-  uriParts.host = this.options.host || ""api.sendgrid.com"";
-  uriParts.port = this.options.port || """";
-  uriParts.endpoint = this.options.endpoint || ""/api/mail.send.json"";
-  delete this.options.protocol;
-  delete this.options.host;
-  delete this.options.port;
-  delete this.options.endpoint;
-  this.options.uriParts = uriParts;
-
-  this.options.uri = this.options.uri || uriParts.protocol + ""://"" + uriParts.host + (uriParts.port ? "":"" + uriParts.port : """") + uriParts.endpoint;
-
-  var send = function(email, callback) {
-    var callback    = callback || function() { };
-    if (email.constructor !== Email) {
-      email = new Email(email);
-    }
-
-    _send.bind(this)(email, callback);
+  // Interact with the API with this function
+  this.API = function(request, callback) {
+    client.API(request, function (response) {
+      callback(response)
+    })
-  var _send = function(email, callback) {
-    var postOptions = {
-      method    : 'POST',
-      headers   : {
-        'User-Agent': 'sendgrid/' + package_json.version + ';nodejs'
-      }
-    };
-
-    // Using api key
-    if (this.api_user === null) {
-      postOptions.headers['Authorization'] = 'Bearer ' + this.api_key;
-    }
-
-    var options = _.merge(postOptions, this.options);
-
-    var req = request(options, function(err, resp, body) {
-      var json;
-
-      if(err) return callback(err, null);
-      
-      try {
-        json = JSON.parse(body);
-      } catch (e) {
-        // be more granular with the error message
-        e.message = e.message + "" JSONPARSEERROR when parsing: "" + body;
-        return callback(new Error(e), null);
-      }
-
-      if (json.message !== 'success') {
-        var error = 'sendgrid error';
-        if (json.errors) { error = json.errors.shift(); }
-        return callback(new Error(error), null);
-      }
-
-      return callback(null, json);
-    });
-
-    var form          = email.toWebFormat();
-
-    // Using username + password
-    if (this.api_user !== null) {
-      form['api_user']  = this.api_user;
-      form['api_key']   = this.api_key;
-    }
-
-    var reqForm = req.form();
-
-    var _reqFormAppend = function(field, value) {
-      reqForm.append(field, value);
-    };
-
-    for (var field in form) {
-      var value = form[field];
-      if (value && value.filename) {
-        if (value.cid) {
-          reqForm.append(""content[""+value.filename+""]"", value.cid);
-        }
-        reqForm.append(""files[""+value.filename+""]"", value.content, {filename: value.filename, contentType: value.contentType});
-      } else {
-        try {
-          if(!Array.isArray(value)){
-            //reqForm.append(field, value);
-            _reqFormAppend.bind(this)(field, value);
-          } else {
-            value.forEach(_reqFormAppend.bind(this, field));
-          }
-        } catch(err) {}
-      }
-    }
-  };
-
-  /*
-   * Expose public API calls
-   */
-  this.version         = package_json.version;
-  this.Email           = Email;
-  this.smtpapi         = smtpapi_lib;
-  this.send            = send;
-  this.options         = this.options;
+  this.globalRequest = globalRequest
-module.exports = Sendgrid;
+module.exports =
+{
+  SendGrid: SendGrid,
+  emptyRequest: emptyRequest
+}"
sendgrid_sendgrid-nodejs,912725c7d7f346bce6a7393ce8875e36403130e0,Merge branch 'v3release',package.json,,"-  ""author"": ""SendGrid <info@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>""
+    ""Robert Acosta <robert.acosta@sendgrid.com>"",
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
-  ""version"": ""2.0.0"",
-  ""homepage"": ""http://sendgrid.com"",
+  ""version"": ""3.0.0"",
+  ""homepage"": ""https://sendgrid.com"",
-    ""mime"": ""^1.2.9"",
-    ""request"": ""^2.60.0"",
-    ""lodash"": ""^3.0.1 || ^2.0.0"",
-    ""smtpapi"": ""^1.2.0""
+    ""sendgrid-rest"": ""^2.2.0""
-    ""dotenv"": ""0.0.2"",
-    ""mocha"": "">= 0.9.0"",
-    ""chai"": "">= 0.1.6"",
-    ""nock"": ""^0.16.0"",
-    ""sinon"": ""^1.6.0""
+    ""chai"": ""^3.5.0"",
+    ""eslint"": ""^2.7.0"",
+    ""eslint-config-standard"": ""^5.1.0"",
+    ""eslint-plugin-standard"": ""^1.3.2"",
+    ""mocha"": ""^2.4.5""
-    ""test"": ""./node_modules/.bin/mocha --grep '#skip' --invert"",
-    ""skipped"": ""./node_modules/.bin/mocha --grep '#skip'""
+    ""test"": ""mocha""
+  ""tags"": [
+    ""http"",
+    ""rest"",
+    ""api""
+  ],","-  ""author"": ""SendGrid <info@sendgrid.com> (sendgrid.com)"",
+  ""author"": ""SendGrid <dx@sendgrid.com> (sendgrid.com)"",
-    ""Robert Acosta <robert.acosta@sendgrid.com>""
+    ""Robert Acosta <robert.acosta@sendgrid.com>"",
+    ""Elmer Thomas <elmer.thomas@sendgrid.com>""
-  ""version"": ""2.0.0"",
-  ""homepage"": ""http://sendgrid.com"",
+  ""version"": ""3.0.0"",
+  ""homepage"": ""https://sendgrid.com"",
-    ""mime"": ""^1.2.9"",
-    ""request"": ""^2.60.0"",
-    ""lodash"": ""^3.0.1 || ^2.0.0"",
-    ""smtpapi"": ""^1.2.0""
+    ""sendgrid-rest"": ""^2.2.0""
-    ""dotenv"": ""0.0.2"",
-    ""mocha"": "">= 0.9.0"",
-    ""chai"": "">= 0.1.6"",
-    ""nock"": ""^0.16.0"",
-    ""sinon"": ""^1.6.0""
+    ""chai"": ""^3.5.0"",
+    ""eslint"": ""^2.7.0"",
+    ""eslint-config-standard"": ""^5.1.0"",
+    ""eslint-plugin-standard"": ""^1.3.2"",
+    ""mocha"": ""^2.4.5""
-    ""test"": ""./node_modules/.bin/mocha --grep '#skip' --invert"",
-    ""skipped"": ""./node_modules/.bin/mocha --grep '#skip'""
+    ""test"": ""mocha""
+  ""tags"": [
+    ""http"",
+    ""rest"",
+    ""api""
+  ],"
sendgrid_sendgrid-nodejs,a5d9f8985136d948a8c47e525192a87ed60f61bf,Merge pull request #187 from sendgrid/tb-ccwebapi  Change to param to use Web API instead of X-SMTPAPI header,lib/email.js,,"+  this.to.push(to);
+  return this;
+};
+
+Email.prototype.setSmtpapiTos = function(tos) {
+  this.smtpapi.setTos(tos);    
+  return this;
+};
+
+Email.prototype.addSmtpapiTo = function(to) {
-  this.smtpapi.setTos(tos);
+  this.to = tos;","+  this.to.push(to);
+  return this;
+};
+
+Email.prototype.setSmtpapiTos = function(tos) {
+  this.smtpapi.setTos(tos);    
+  return this;
+};
+
+Email.prototype.addSmtpapiTo = function(to) {
-  this.smtpapi.setTos(tos);
+  this.to = tos;"
sendgrid_sendgrid-nodejs,a5d9f8985136d948a8c47e525192a87ed60f61bf,Merge pull request #187 from sendgrid/tb-ccwebapi  Change to param to use Web API instead of X-SMTPAPI header,package.json,,"-  ""version"": ""1.9.2"",
+  ""version"": ""2.0.0"",","-  ""version"": ""1.9.2"",
+  ""version"": ""2.0.0"","
sendgrid_sendgrid-nodejs,a5d9f8985136d948a8c47e525192a87ed60f61bf,Merge pull request #187 from sendgrid/tb-ccwebapi  Change to param to use Web API instead of X-SMTPAPI header,test/lib/email.test.js,,"-    it('should not have multiple TOs if as an array but also set on smtpapi via addTo', function() {
-      var payload     = Object.create(default_payload);
-      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
-      var email       = new Email(payload);
-      email.addTo(payload.to[0]);
-      email.addTo(payload.to[1]);
-
-      var format      = email.toWebFormat();
-
-      expect(format.to).to.equal(payload.from);
-    });
-
-      email.addTo(""test@test.com"");
-      var format = email.toWebFormat();
-
+      email.addSmtpapiTo(""test@test.com"");
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+    });
+
+    it('should have to addresses if there is no tos set but there are smtpapi tos set', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = """";
+      var email       = new Email(payload);
+      email.setSmtpapiTos([""test@test.com"", ""test2@test.com""]);
+      var format = email.toWebFormat();
+
+      expect(JSON.parse(format['x-smtpapi']).to).to.not.be.empty;
+      expect(JSON.parse(format['x-smtpapi']).to).to.be.an.array;
+    });
+
+    it('should have a to address using addTo if there is no smtpapi to', function(){
+      var payload = Object.create(default_payload);
+      payload.to = """";
+      var email = new Email(payload);
+      email.addTo('test@test.com');
+      email.addTo('test1@test.com');
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+      expect(format.to[0]).to.equal('test@test.com');
+      expect(format.to[1]).to.equal('test1@test.com');
+    });
+
+    it('should have a to addresses using setTos if there is no smtpapi to', function(){
+      var payload = Object.create(default_payload);
+      payload.to = """";
+      var email = new Email(payload);
+      email.setTos(['test@test.com', 'test1@test.com']);
+      
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+      expect(format.to).to.be.an.array;
+      expect(format.to[0]).to.equal('test@test.com');
+      expect(format.to[1]).to.equal('test1@test.com');","-    it('should not have multiple TOs if as an array but also set on smtpapi via addTo', function() {
-      var payload     = Object.create(default_payload);
-      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
-      var email       = new Email(payload);
-      email.addTo(payload.to[0]);
-      email.addTo(payload.to[1]);
-
-      var format      = email.toWebFormat();
-
-      expect(format.to).to.equal(payload.from);
-    });
-
-      email.addTo(""test@test.com"");
-      var format = email.toWebFormat();
-
+      email.addSmtpapiTo(""test@test.com"");
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+    });
+
+    it('should have to addresses if there is no tos set but there are smtpapi tos set', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = """";
+      var email       = new Email(payload);
+      email.setSmtpapiTos([""test@test.com"", ""test2@test.com""]);
+      var format = email.toWebFormat();
+
+      expect(JSON.parse(format['x-smtpapi']).to).to.not.be.empty;
+      expect(JSON.parse(format['x-smtpapi']).to).to.be.an.array;
+    });
+
+    it('should have a to address using addTo if there is no smtpapi to', function(){
+      var payload = Object.create(default_payload);
+      payload.to = """";
+      var email = new Email(payload);
+      email.addTo('test@test.com');
+      email.addTo('test1@test.com');
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+      expect(format.to[0]).to.equal('test@test.com');
+      expect(format.to[1]).to.equal('test1@test.com');
+    });
+
+    it('should have a to addresses using setTos if there is no smtpapi to', function(){
+      var payload = Object.create(default_payload);
+      payload.to = """";
+      var email = new Email(payload);
+      email.setTos(['test@test.com', 'test1@test.com']);
+      
+      var format = email.toWebFormat();
+
+      expect(format.to).to.not.be.empty;
+      expect(format.to).to.be.an.array;
+      expect(format.to[0]).to.equal('test@test.com');
+      expect(format.to[1]).to.equal('test1@test.com');"
sendgrid_sendgrid-nodejs,a5d9f8985136d948a8c47e525192a87ed60f61bf,Merge pull request #187 from sendgrid/tb-ccwebapi  Change to param to use Web API instead of X-SMTPAPI header,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""1.9.2"");
+    expect(sendgrid.version).to.equal(""2.0.0"");","-    expect(sendgrid.version).to.equal(""1.9.2"");
+    expect(sendgrid.version).to.equal(""2.0.0"");"
sendgrid_sendgrid-nodejs,c35e6b535d6287fca945e4f8ca9588cb5950aa92,Merge branch 'jbeoris-ISSUE-174'  Closes #174,lib/email.js,,"+Email.prototype.setFromName = function(fromname) {
+  this.fromname = fromname;
+};
+","+Email.prototype.setFromName = function(fromname) {
+  this.fromname = fromname;
+};
+"
sendgrid_sendgrid-nodejs,c35e6b535d6287fca945e4f8ca9588cb5950aa92,Merge branch 'jbeoris-ISSUE-174'  Closes #174,test/lib/email.test.js,,"+  });
+
+  it('should be possible to setFromName', function() {
+    var email = new Email();
+    expect(email.fromname).to.be.empty;
+    email.setFromName('Part Kyle');
+    expect(email.fromname).to.eql('Part Kyle');","+  });
+
+  it('should be possible to setFromName', function() {
+    var email = new Email();
+    expect(email.fromname).to.be.empty;
+    email.setFromName('Part Kyle');
+    expect(email.fromname).to.eql('Part Kyle');"
sendgrid_sendgrid-nodejs,e0e7c9034351d5830248f169745d1d553096df09,Merge pull request #168 from piyo7/setter-method-chaining  Add 'return this' for setter method chaining,lib/email.js,,"+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;","+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;
+  return this;"
sendgrid_sendgrid-nodejs,42fcbf7ef3f5ff3f9ded41bf8144ffde9b0542d0,Merge pull request #167 from pdehaan/patch-1  Update license attribute,package.json,,"+  ""license"": ""MIT"",","+  ""license"": ""MIT"","
sendgrid_sendgrid-nodejs,2bbae9c53417438316d88571571a9bec7c60a706,Merge pull request #158 from ecaron/lodash-2-or-3  Permit lodash version 3 to also be acceptable within npm,package.json,,"-    ""lodash"": ""^2.0.0"",
+    ""lodash"": ""^3.0.1 || ^2.0.0"",","-    ""lodash"": ""^2.0.0"",
+    ""lodash"": ""^3.0.1 || ^2.0.0"","
sendgrid_sendgrid-nodejs,18659c736a00621fe6c3b57ad065eb61349bcfd8,Merge pull request #149 from bsorin/fix-date-is-not-sent  Fix: The date is not sent,lib/email.js,,"-  this.date    = params.date    || new Date();
+  this.date    = params.date    || '';
-
+};
+
+Email.prototype.setDate = function(date) {
+  this.date = date;
+  if (this.date)        { web.date         = this.date; }","-  this.date    = params.date    || new Date();
+  this.date    = params.date    || '';
-
+};
+
+Email.prototype.setDate = function(date) {
+  this.date = date;
+  if (this.date)        { web.date         = this.date; }"
sendgrid_sendgrid-nodejs,18659c736a00621fe6c3b57ad065eb61349bcfd8,Merge pull request #149 from bsorin/fix-date-is-not-sent  Fix: The date is not sent,package.json,,"-  ""version"": ""1.4.0"",
+  ""version"": ""1.5.0"",","-  ""version"": ""1.4.0"",
+  ""version"": ""1.5.0"","
sendgrid_sendgrid-nodejs,18659c736a00621fe6c3b57ad065eb61349bcfd8,Merge pull request #149 from bsorin/fix-date-is-not-sent  Fix: The date is not sent,test/integration/sendgrid.test.js,,"+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the date param', function(done) {
+      payload.subject   += ""handles the date param"";
+
+      var email         = new Email(payload);
+      email.setDate('Wed, 17 Dec 2014 19:21:16 +0000');","+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the date param', function(done) {
+      payload.subject   += ""handles the date param"";
+
+      var email         = new Email(payload);
+      email.setDate('Wed, 17 Dec 2014 19:21:16 +0000');"
sendgrid_sendgrid-nodejs,18659c736a00621fe6c3b57ad065eb61349bcfd8,Merge pull request #149 from bsorin/fix-date-is-not-sent  Fix: The date is not sent,test/lib/email.test.js,,"+    it(""should set a date if one is provided"", function() {
+      var payload     = Object.create(default_payload);
+      var email       = new Email({from: 'test@test.com', fromname:'Tester T. Testerson', subject: 'testing', text: 'testing', date: 'Wed, 17 Dec 2014 19:21:16 +0000'});
+      var format = email.toWebFormat();
+
+      expect(format.date).to.equal('Wed, 17 Dec 2014 19:21:16 +0000');
+
+      email.setDate('Wed, 17 Dec 2013 19:21:16 +0000');
+      format = email.toWebFormat();
+      expect(format.date).to.equal('Wed, 17 Dec 2013 19:21:16 +0000');
+    });
+
+  });
+
+  it('should be possible to setDate', function() {
+    var email = new Email();
+    expect(email.date).to.be.empty;
+    email.setDate('Wed, 17 Dec 2014 19:21:16 +0000');
+    expect(email.date).to.eql('Wed, 17 Dec 2014 19:21:16 +0000');","+    it(""should set a date if one is provided"", function() {
+      var payload     = Object.create(default_payload);
+      var email       = new Email({from: 'test@test.com', fromname:'Tester T. Testerson', subject: 'testing', text: 'testing', date: 'Wed, 17 Dec 2014 19:21:16 +0000'});
+      var format = email.toWebFormat();
+
+      expect(format.date).to.equal('Wed, 17 Dec 2014 19:21:16 +0000');
+
+      email.setDate('Wed, 17 Dec 2013 19:21:16 +0000');
+      format = email.toWebFormat();
+      expect(format.date).to.equal('Wed, 17 Dec 2013 19:21:16 +0000');
+    });
+
+  });
+
+  it('should be possible to setDate', function() {
+    var email = new Email();
+    expect(email.date).to.be.empty;
+    email.setDate('Wed, 17 Dec 2014 19:21:16 +0000');
+    expect(email.date).to.eql('Wed, 17 Dec 2014 19:21:16 +0000');"
sendgrid_sendgrid-nodejs,18659c736a00621fe6c3b57ad065eb61349bcfd8,Merge pull request #149 from bsorin/fix-date-is-not-sent  Fix: The date is not sent,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""1.4.0"");
+    expect(sendgrid.version).to.equal(""1.5.0"");","-    expect(sendgrid.version).to.equal(""1.4.0"");
+    expect(sendgrid.version).to.equal(""1.5.0"");"
sendgrid_sendgrid-nodejs,6437cd1caf39c5dfe92110a8de437821bcd7b073,Merge pull request #147 from bsorin/Add-Scheduled-Params  Feature: Added the ability to schedule the send,lib/email.js,,"+Email.prototype.setSendAt = function(send_at) {
+  this.smtpapi.setSendAt(send_at);
+};
+
+Email.prototype.setSendEachAt = function(send_each_at) {
+  this.smtpapi.setSendEachAt(send_each_at);
+};
+
+Email.prototype.addSendEachAt = function(send_each_at) {
+  this.smtpapi.addSendEachAt(send_each_at);
+};
+","+Email.prototype.setSendAt = function(send_at) {
+  this.smtpapi.setSendAt(send_at);
+};
+
+Email.prototype.setSendEachAt = function(send_each_at) {
+  this.smtpapi.setSendEachAt(send_each_at);
+};
+
+Email.prototype.addSendEachAt = function(send_each_at) {
+  this.smtpapi.addSendEachAt(send_each_at);
+};
+"
sendgrid_sendgrid-nodejs,6437cd1caf39c5dfe92110a8de437821bcd7b073,Merge pull request #147 from bsorin/Add-Scheduled-Params  Feature: Added the ability to schedule the send,package.json,,"-  ""version"": ""1.3.0"",
+  ""version"": ""1.4.0"",
-    ""smtpapi"": ""^1.0.4""
+    ""smtpapi"": ""^1.0.5""","-  ""version"": ""1.3.0"",
+  ""version"": ""1.4.0"",
-    ""smtpapi"": ""^1.0.4""
+    ""smtpapi"": ""^1.0.5"""
sendgrid_sendgrid-nodejs,6437cd1caf39c5dfe92110a8de437821bcd7b073,Merge pull request #147 from bsorin/Add-Scheduled-Params  Feature: Added the ability to schedule the send,test/integration/sendgrid.test.js,,"+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the send_at scheduling param', function(done) {
+      payload.subject   += ""handles the send_at scheduling param"";
+
+      var email         = new Email(payload);
+      email.setSendAt(Math.floor(new Date() / 1000) + 60);
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the send_each_at scheduling param', function(done) {
+      payload.subject   += ""handles the send_each_at scheduling param"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+      email.addSendEachAt(Math.floor(new Date() / 1000) + 60);
+      email.addSendEachAt(Math.floor(new Date() / 1000) + 300);
+","+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the send_at scheduling param', function(done) {
+      payload.subject   += ""handles the send_at scheduling param"";
+
+      var email         = new Email(payload);
+      email.setSendAt(Math.floor(new Date() / 1000) + 60);
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+        done();
+      });
+    });
+
+    it('handles the send_each_at scheduling param', function(done) {
+      payload.subject   += ""handles the send_each_at scheduling param"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+      email.addSendEachAt(Math.floor(new Date() / 1000) + 60);
+      email.addSendEachAt(Math.floor(new Date() / 1000) + 300);
+"
sendgrid_sendgrid-nodejs,6437cd1caf39c5dfe92110a8de437821bcd7b073,Merge pull request #147 from bsorin/Add-Scheduled-Params  Feature: Added the ability to schedule the send,test/lib/email.test.js,,"+  });
+
+  it('should be possible to setSendAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendAt(1409348513);
+    expect(email.smtpapi.header.send_at).to.eql(1409348513);
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+  });
+
+  it('should be possible to setSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendEachAt([1409348513, 1409348514]);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);
+  });
+
+  it('should be possible to addSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.addSendEachAt(1409348513);
+    email.addSendEachAt(1409348514);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);
+  });
+
+  it('should be possible to setSendEachAt and addSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendEachAt([1409348513]);
+    email.addSendEachAt(1409348514);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);","+  });
+
+  it('should be possible to setSendAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendAt(1409348513);
+    expect(email.smtpapi.header.send_at).to.eql(1409348513);
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+  });
+
+  it('should be possible to setSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendEachAt([1409348513, 1409348514]);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);
+  });
+
+  it('should be possible to addSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.addSendEachAt(1409348513);
+    email.addSendEachAt(1409348514);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);
+  });
+
+  it('should be possible to setSendEachAt and addSendEachAt', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([]);
+    email.setSendEachAt([1409348513]);
+    email.addSendEachAt(1409348514);
+    expect(email.smtpapi.header.send_at).to.be.empty;
+    expect(email.smtpapi.header.send_each_at).to.eql([1409348513, 1409348514]);"
sendgrid_sendgrid-nodejs,6437cd1caf39c5dfe92110a8de437821bcd7b073,Merge pull request #147 from bsorin/Add-Scheduled-Params  Feature: Added the ability to schedule the send,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""1.3.0"");
+    expect(sendgrid.version).to.equal(""1.4.0"");","-    expect(sendgrid.version).to.equal(""1.3.0"");
+    expect(sendgrid.version).to.equal(""1.4.0"");"
sendgrid_sendgrid-nodejs,c61fa29ad2fbffcbecd73e7492037c316ca5c2bb,Merge branch 'bsorin-Support-CC',lib/email.js,,"+  this.cc      = params.cc      || [];
+};
+
+Email.prototype.addCc = function(cc) {
+  this.cc.push(cc);
+};
+
+Email.prototype.setCcs = function(cc) {
+  this.cc = cc;
+  if (this.cc)          { web.cc           = this.cc; }","+  this.cc      = params.cc      || [];
+};
+
+Email.prototype.addCc = function(cc) {
+  this.cc.push(cc);
+};
+
+Email.prototype.setCcs = function(cc) {
+  this.cc = cc;
+  if (this.cc)          { web.cc           = this.cc; }"
sendgrid_sendgrid-nodejs,c61fa29ad2fbffcbecd73e7492037c316ca5c2bb,Merge branch 'bsorin-Support-CC',test/integration/sendgrid.test.js,,"+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });
+
+    it('has array of CCs', function(done) {
+      payload.subject += ""has array of CCs"";
+      payload.cc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');","+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });
+
+    it('has array of CCs', function(done) {
+      payload.subject += ""has array of CCs"";
+      payload.cc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');"
sendgrid_sendgrid-nodejs,c61fa29ad2fbffcbecd73e7492037c316ca5c2bb,Merge branch 'bsorin-Support-CC',test/lib/email.test.js,,"-]
+];
+    it('should have multiple CCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.cc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.cc).to.equal(payload.cc);
+    });
+
-      
-      Array.prototype['testMethod'] = function() {
+
+      Array.prototype.testMethod = function() {
-      
+
-    
+
-      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});  
+      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
-      expect(format.to).to.not.be.empty; 
+      expect(format.to).to.not.be.empty;
+  });
+
+  it('should be possible to addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.addCc('sorin@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.setCcs(['sorin2@domain.com']);
+    expect(email.cc).to.eql(['sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs and addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
-      email.addFilter('subscriptiontrack', 'enable', 1)
-      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."")
+      email.addFilter('subscriptiontrack', 'enable', 1);
+      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."");","-]
+];
+    it('should have multiple CCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.cc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.cc).to.equal(payload.cc);
+    });
+
-      
-      Array.prototype['testMethod'] = function() {
+
+      Array.prototype.testMethod = function() {
-      
+
-    
+
-      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});  
+      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
-      expect(format.to).to.not.be.empty; 
+      expect(format.to).to.not.be.empty;
+  });
+
+  it('should be possible to addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.addCc('sorin@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.setCcs(['sorin2@domain.com']);
+    expect(email.cc).to.eql(['sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs and addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
-      email.addFilter('subscriptiontrack', 'enable', 1)
-      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."")
+      email.addFilter('subscriptiontrack', 'enable', 1);
+      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."");"
sendgrid_sendgrid-nodejs,57bc8892cb4d84af8692a80f44c2fc379cd88ec1,Fix conflicts and linting,lib/email.js,"-Email.prototype.addUniqueArg = function (object_literal) {
-  this.smtpapi.addUniqueArg(object_literal);
+Email.prototype.addUniqueArg = function (key, val) {
+  this.smtpapi.addUniqueArg(key, val);","+  this.cc      = params.cc      || [];
+};
+
+Email.prototype.addCc = function(cc) {
+  this.cc.push(cc);
+};
+
+Email.prototype.setCcs = function(cc) {
+  this.cc = cc;
+  if (this.cc)          { web.cc           = this.cc; }","+  this.cc      = params.cc      || [];
+Email.prototype.addCc = function(cc) {
+  this.cc.push(cc);
+};
+
+Email.prototype.setCcs = function(cc) {
+  this.cc = cc;
+};
+
-Email.prototype.addUniqueArg = function (object_literal) {
-  this.smtpapi.addUniqueArg(object_literal);
+Email.prototype.addUniqueArg = function (key, val) {
+  this.smtpapi.addUniqueArg(key, val);
+  if (this.cc)          { web.cc           = this.cc; }"
sendgrid_sendgrid-nodejs,57bc8892cb4d84af8692a80f44c2fc379cd88ec1,Fix conflicts and linting,test/integration/sendgrid.test.js,"+
+    it('handles unique args being set in the email', function(done) {
+      payload.subject   += ""handles unique args being set in the email"";
+
+      var email = new Email(payload);
+      email.addSubstitution('-name-', ['Kyle', 'David']);
+      email.addSubstitution('-meme-', ['-kyleSection-', '-davidSection-']);
+      email.addSubstitution('-id-', ['111', '222']);
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');
+      email.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+
+      email.setUniqueArgs({secret_code: '-id-'});
+      email.addUniqueArg('secret_code_sg', '111-222-333');
+
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });","+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });
+
+    it('has array of CCs', function(done) {
+      payload.subject += ""has array of CCs"";
+      payload.cc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');","+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });
+
+    it('has array of CCs', function(done) {
+      payload.subject += ""has array of CCs"";
+      payload.cc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+
+    it('handles unique args being set in the email', function(done) {
+      payload.subject   += ""handles unique args being set in the email"";
+
+      var email = new Email(payload);
+      email.addSubstitution('-name-', ['Kyle', 'David']);
+      email.addSubstitution('-meme-', ['-kyleSection-', '-davidSection-']);
+      email.addSubstitution('-id-', ['111', '222']);
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');
+      email.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+
+      email.setUniqueArgs({secret_code: '-id-'});
+      email.addUniqueArg('secret_code_sg', '111-222-333');
+
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });"
sendgrid_sendgrid-nodejs,57bc8892cb4d84af8692a80f44c2fc379cd88ec1,Fix conflicts and linting,test/lib/email.test.js,"+  it('should be possible to addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.addUniqueArg('unique_arg1', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.setUniqueArgs({unique_arg2: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs and addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });","+    it('should have multiple CCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.cc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.cc).to.equal(payload.cc);
+    });
+
+  it('should be possible to addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.addCc('sorin@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.setCcs(['sorin2@domain.com']);
+    expect(email.cc).to.eql(['sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs and addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });","-]
+];
+    it('should have multiple CCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.cc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.cc).to.equal(payload.cc);
+    });
+
-      
-      Array.prototype['testMethod'] = function() {
+
+      Array.prototype.testMethod = function() {
-      
+
-    
+
-      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});  
+      var email       = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
-      expect(format.to).to.not.be.empty; 
+      expect(format.to).to.not.be.empty;
+  it('should be possible to addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.addUniqueArg('unique_arg1', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.setUniqueArgs({unique_arg2: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs and addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });
+
+  it('should be possible to addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.addCc('sorin@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.setCcs(['sorin2@domain.com']);
+    expect(email.cc).to.eql(['sorin2@domain.com']);
+  });
+
+  it('should be possible to setCcs and addCc', function() {
+    var email = new Email();
+    expect(email.cc).to.eql([]);
+    email.setCcs(['sorin@domain.com']);
+    expect(email.cc).to.eql(['sorin@domain.com']);
+    email.addCc('sorin2@domain.com');
+    expect(email.cc).to.eql(['sorin@domain.com', 'sorin2@domain.com']);
+  });
-      email.addFilter('subscriptiontrack', 'enable', 1)
-      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."")
+      email.addFilter('subscriptiontrack', 'enable', 1);
+      email.addFilter('subscriptiontrack', ""text/plain"", ""If you would like to unsubscribe and stop receiving these emails click here: <% %>."");"
sendgrid_sendgrid-nodejs,92688d09c0320a0c1392839db4f87688a17be357,Merge pull request #145 from bsorin/Fix-addUniqueArg  Fixed: addUniqueArg method is not handle correctly the unique args addition,lib/email.js,,"-Email.prototype.addUniqueArg = function (object_literal) {
-  this.smtpapi.addUniqueArg(object_literal);
+Email.prototype.addUniqueArg = function (key, val) {
+  this.smtpapi.addUniqueArg(key, val);","-Email.prototype.addUniqueArg = function (object_literal) {
-  this.smtpapi.addUniqueArg(object_literal);
+Email.prototype.addUniqueArg = function (key, val) {
+  this.smtpapi.addUniqueArg(key, val);"
sendgrid_sendgrid-nodejs,92688d09c0320a0c1392839db4f87688a17be357,Merge pull request #145 from bsorin/Fix-addUniqueArg  Fixed: addUniqueArg method is not handle correctly the unique args addition,test/integration/sendgrid.test.js,,"+
+    it('handles unique args being set in the email', function(done) {
+      payload.subject   += ""handles unique args being set in the email"";
+
+      var email = new Email(payload);
+      email.addSubstitution('-name-', ['Kyle', 'David']);
+      email.addSubstitution('-meme-', ['-kyleSection-', '-davidSection-']);
+      email.addSubstitution('-id-', ['111', '222']);
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');
+      email.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+
+      email.setUniqueArgs({secret_code: '-id-'});
+      email.addUniqueArg('secret_code_sg', '111-222-333');
+
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });","+
+    it('handles unique args being set in the email', function(done) {
+      payload.subject   += ""handles unique args being set in the email"";
+
+      var email = new Email(payload);
+      email.addSubstitution('-name-', ['Kyle', 'David']);
+      email.addSubstitution('-meme-', ['-kyleSection-', '-davidSection-']);
+      email.addSubstitution('-id-', ['111', '222']);
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');
+      email.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+
+      email.setUniqueArgs({secret_code: '-id-'});
+      email.addUniqueArg('secret_code_sg', '111-222-333');
+
+      sendgrid.send(email, function(err, json) {
+        expect(err).to.be.null;
+        expect(json.message).to.equal('success');
+
+        done();
+      });
+    });"
sendgrid_sendgrid-nodejs,92688d09c0320a0c1392839db4f87688a17be357,Merge pull request #145 from bsorin/Fix-addUniqueArg  Fixed: addUniqueArg method is not handle correctly the unique args addition,test/lib/email.test.js,,"+  it('should be possible to addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.addUniqueArg('unique_arg1', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.setUniqueArgs({unique_arg2: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs and addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });","+  it('should be possible to addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.addUniqueArg('unique_arg1', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.setUniqueArgs({unique_arg2: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg2: 'value'});
+  });
+
+  it('should be possible to setUniqueArgs and addUniqueArg', function() {
+    var email = new Email();
+    expect(email.smtpapi.header.unique_args).to.eql({});
+    email.setUniqueArgs({unique_arg1: 'value'});
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value'});
+    email.addUniqueArg('unique_arg2', 'value');
+    expect(email.smtpapi.header.unique_args).to.eql({unique_arg1: 'value', unique_arg2: 'value'});
+  });"
sendgrid_sendgrid-nodejs,d0276d4546ec5a5375e8b653a1a8d721f15ac355,Merge pull request #138 from bpneal/master  Bump smtpapi to 1.0.4,npm-shrinkwrap.json,,"-      ""version"": ""1.0.3"",
-      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz"",
-      ""resolved"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz""
+      ""version"": ""1.0.4"",
+      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.4.tgz"",
+      ""resolved"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.4.tgz""","-      ""version"": ""1.0.3"",
-      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz"",
-      ""resolved"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz""
+      ""version"": ""1.0.4"",
+      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.4.tgz"",
+      ""resolved"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.4.tgz"""
sendgrid_sendgrid-nodejs,d0276d4546ec5a5375e8b653a1a8d721f15ac355,Merge pull request #138 from bpneal/master  Bump smtpapi to 1.0.4,package.json,,"-    ""smtpapi"": ""^1.0.3""
+    ""smtpapi"": ""^1.0.4""","-    ""smtpapi"": ""^1.0.3""
+    ""smtpapi"": ""^1.0.4"""
sendgrid_sendgrid-nodejs,a5042e89541c5e33c2994690d78aa7784e48a64a,Merge branch 'bpneal-master',lib/email.js,,"-Email.prototype.addSection = function(object_literal) {
-  this.smtpapi.addSection(object_literal);
+Email.prototype.addSection = function(key, val) {
+  this.smtpapi.addSection(key, val);","-Email.prototype.addSection = function(object_literal) {
-  this.smtpapi.addSection(object_literal);
+Email.prototype.addSection = function(key, val) {
+  this.smtpapi.addSection(key, val);"
sendgrid_sendgrid-nodejs,a5042e89541c5e33c2994690d78aa7784e48a64a,Merge branch 'bpneal-master',npm-shrinkwrap.json,,"-  ""version"": ""1.2.1"",
+  ""version"": ""1.2.2"",","-  ""version"": ""1.2.1"",
+  ""version"": ""1.2.2"","
sendgrid_sendgrid-nodejs,a5042e89541c5e33c2994690d78aa7784e48a64a,Merge branch 'bpneal-master',package.json,,"-  ""version"": ""1.2.1"",
+  ""version"": ""1.2.2"",
-    ""mime"": ""1.2.9"",
-    ""request"": ""2.40.0"",
-    ""lodash"": ""2.0.0"",
-    ""smtpapi"": ""1.0.3""
+    ""mime"": ""^1.2.9"",
+    ""request"": ""^2.40.0"",
+    ""lodash"": ""^2.0.0"",
+    ""smtpapi"": ""^1.0.3""
-    ""nock"": ""~0.16.0"",
-    ""sinon"": ""~1.6.0""
+    ""nock"": ""^0.16.0"",
+    ""sinon"": ""^1.6.0""","-  ""version"": ""1.2.1"",
+  ""version"": ""1.2.2"",
-    ""mime"": ""1.2.9"",
-    ""request"": ""2.40.0"",
-    ""lodash"": ""2.0.0"",
-    ""smtpapi"": ""1.0.3""
+    ""mime"": ""^1.2.9"",
+    ""request"": ""^2.40.0"",
+    ""lodash"": ""^2.0.0"",
+    ""smtpapi"": ""^1.0.3""
-    ""nock"": ""~0.16.0"",
-    ""sinon"": ""~1.6.0""
+    ""nock"": ""^0.16.0"",
+    ""sinon"": ""^1.6.0"""
sendgrid_sendgrid-nodejs,a5042e89541c5e33c2994690d78aa7784e48a64a,Merge branch 'bpneal-master',test/integration/sendgrid.test.js,,"-      email.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
-      email.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');","-      email.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
-      email.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      email.addSection('-kyleSection-', 'I heard you liked batman so I killed your parents');
+      email.addSection('-davidSection-', 'Metal gear?!!?!!!!eleven');"
sendgrid_sendgrid-nodejs,a5042e89541c5e33c2994690d78aa7784e48a64a,Merge branch 'bpneal-master',test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""1.2.1"");
+    expect(sendgrid.version).to.equal(""1.2.2"");","-    expect(sendgrid.version).to.equal(""1.2.1"");
+    expect(sendgrid.version).to.equal(""1.2.2"");"
sendgrid_sendgrid-nodejs,142f7a0626bd7836926e5c95ec952cf8f292f2f1,Merge pull request #132 from sendgrid/fix_request_version  Version bump 1.2.1,npm-shrinkwrap.json,,"-  ""version"": ""1.2.0"",
+  ""version"": ""1.2.1"",
-    ""chai"": {
-      ""version"": ""1.9.1"",
-      ""from"": ""chai@>= 0.1.6"",
-      ""dependencies"": {
-        ""assertion-error"": {
-          ""version"": ""1.0.0"",
-          ""from"": ""assertion-error@1.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/assertion-error/-/assertion-error-1.0.0.tgz""
-        },
-        ""deep-eql"": {
-          ""version"": ""0.1.3"",
-          ""from"": ""deep-eql@0.1.3"",
-          ""resolved"": ""https://registry.npmjs.org/deep-eql/-/deep-eql-0.1.3.tgz"",
-          ""dependencies"": {
-            ""type-detect"": {
-              ""version"": ""0.1.1"",
-              ""from"": ""type-detect@0.1.1"",
-              ""resolved"": ""https://registry.npmjs.org/type-detect/-/type-detect-0.1.1.tgz""
-            }
-          }
-        }
-      }
-    },
-    ""dotenv"": {
-      ""version"": ""0.0.2"",
-      ""from"": ""dotenv@0.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/dotenv/-/dotenv-0.0.2.tgz""
-    },
-      ""from"": ""lodash@2.0.0"",
+      ""from"": ""https://registry.npmjs.org/lodash/-/lodash-2.0.0.tgz"",
-      ""from"": ""mime@1.2.9"",
+      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
-    },
-    ""mocha"": {
-      ""version"": ""1.21.4"",
-      ""from"": ""mocha@>= 0.9.0"",
-      ""resolved"": ""https://registry.npmjs.org/mocha/-/mocha-1.21.4.tgz"",
-      ""dependencies"": {
-        ""commander"": {
-          ""version"": ""2.0.0"",
-          ""from"": ""commander@2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/commander/-/commander-2.0.0.tgz""
-        },
-        ""growl"": {
-          ""version"": ""1.8.1"",
-          ""from"": ""growl@1.8.x"",
-          ""resolved"": ""https://registry.npmjs.org/growl/-/growl-1.8.1.tgz""
-        },
-        ""jade"": {
-          ""version"": ""0.26.3"",
-          ""from"": ""jade@0.26.3"",
-          ""resolved"": ""https://registry.npmjs.org/jade/-/jade-0.26.3.tgz"",
-          ""dependencies"": {
-            ""commander"": {
-              ""version"": ""0.6.1"",
-              ""from"": ""commander@0.6.1""
-            },
-            ""mkdirp"": {
-              ""version"": ""0.3.0"",
-              ""from"": ""mkdirp@0.3.0""
-            }
-          }
-        },
-        ""diff"": {
-          ""version"": ""1.0.7"",
-          ""from"": ""diff@1.0.7"",
-          ""resolved"": ""https://registry.npmjs.org/diff/-/diff-1.0.7.tgz""
-        },
-        ""debug"": {
-          ""version"": ""1.0.4"",
-          ""from"": ""debug@*"",
-          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-1.0.4.tgz"",
-          ""dependencies"": {
-            ""ms"": {
-              ""version"": ""0.6.2"",
-              ""from"": ""ms@0.6.2"",
-              ""resolved"": ""https://registry.npmjs.org/ms/-/ms-0.6.2.tgz""
-            }
-          }
-        },
-        ""mkdirp"": {
-          ""version"": ""0.3.5"",
-          ""from"": ""mkdirp@0.3.5"",
-          ""resolved"": ""https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz""
-        },
-        ""glob"": {
-          ""version"": ""3.2.3"",
-          ""from"": ""glob@3.2.3"",
-          ""resolved"": ""https://registry.npmjs.org/glob/-/glob-3.2.3.tgz"",
-          ""dependencies"": {
-            ""minimatch"": {
-              ""version"": ""0.2.14"",
-              ""from"": ""minimatch@~0.2.11"",
-              ""dependencies"": {
-                ""lru-cache"": {
-                  ""version"": ""2.5.0"",
-                  ""from"": ""lru-cache@2""
-                },
-                ""sigmund"": {
-                  ""version"": ""1.0.0"",
-                  ""from"": ""sigmund@~1.0.0""
-                }
-              }
-            },
-            ""graceful-fs"": {
-              ""version"": ""2.0.3"",
-              ""from"": ""graceful-fs@~2.0.0""
-            },
-            ""inherits"": {
-              ""version"": ""2.0.1"",
-              ""from"": ""inherits@2""
-            }
-          }
-        }
-      }
-    },
-    ""nock"": {
-      ""version"": ""0.16.0"",
-      ""from"": ""nock@~0.16.0"",
-      ""dependencies"": {
-        ""propagate"": {
-          ""version"": ""0.2.2"",
-          ""from"": ""propagate@0.2.x""
-        }
-      }
-      ""from"": ""request@2.40.0"",
+      ""from"": ""https://registry.npmjs.org/request/-/request-2.40.0.tgz"",
-          ""from"": ""qs@~1.0.0"",
+          ""from"": ""https://registry.npmjs.org/qs/-/qs-1.0.2.tgz"",
-          ""from"": ""json-stringify-safe@~5.0.0""
+          ""from"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz""
-          ""from"": ""mime-types@~1.0.1"",
+          ""from"": ""https://registry.npmjs.org/mime-types/-/mime-types-1.0.2.tgz"",
-          ""from"": ""forever-agent@~0.5.0"",
+          ""from"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.2.tgz"",
-          ""from"": ""node-uuid@~1.4.0"",
+          ""from"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz"",
-          ""from"": ""tough-cookie@>=0.12.0"",
+          ""from"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-0.12.1.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-0.12.1.tgz"",
-              ""from"": ""punycode@>=0.2.0"",
+              ""from"": ""https://registry.npmjs.org/punycode/-/punycode-1.3.1.tgz"",
-          ""from"": ""form-data@~0.1.0"",
+          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.1.4.tgz"",
-              ""from"": ""combined-stream@~0.0.4"",
+              ""from"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.5.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.5.tgz"",
-                  ""from"": ""delayed-stream@0.0.5"",
+                  ""from"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-0.0.5.tgz"",
-              ""from"": ""mime@~1.2.11""
+              ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.11.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/mime/-/mime-1.2.11.tgz""
-              ""from"": ""async@~0.9.0""
+              ""from"": ""https://registry.npmjs.org/async/-/async-0.9.0.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.9.0.tgz""
-          ""from"": ""tunnel-agent@~0.4.0""
+          ""from"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.0.tgz""
-          ""from"": ""http-signature@~0.10.0"",
+          ""from"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
-              ""from"": ""assert-plus@0.1.2"",
+              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""from"": ""asn1@0.1.11"",
+              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""from"": ""ctype@0.5.2"",
+              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-          ""from"": ""oauth-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""from"": ""hawk@1.1.1"",
+          ""from"": ""https://registry.npmjs.org/hawk/-/hawk-1.1.1.tgz"",
-              ""from"": ""hoek@0.9.x""
+              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-              ""from"": ""boom@0.4.x"",
+              ""from"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
-              ""from"": ""cryptiles@0.2.x"",
+              ""from"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz"",
-              ""from"": ""sntp@0.2.x"",
+              ""from"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
-          ""from"": ""aws-sign2@~0.5.0""
+          ""from"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz""
-          ""from"": ""stringstream@~0.0.4"",
+          ""from"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.4.tgz"",
-        }
-      }
-    },
-    ""sinon"": {
-      ""version"": ""1.6.0"",
-      ""from"": ""sinon@~1.6.0"",
-      ""dependencies"": {
-        ""buster-format"": {
-          ""version"": ""0.5.6"",
-          ""from"": ""buster-format@~0.5"",
-          ""dependencies"": {
-            ""buster-core"": {
-              ""version"": ""0.6.4"",
-              ""from"": ""buster-core@=0.6.4""
-            }
-          }
-      ""from"": ""smtpapi@1.0.3"",
+      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz"",","-  ""version"": ""1.2.0"",
+  ""version"": ""1.2.1"",
-    ""chai"": {
-      ""version"": ""1.9.1"",
-      ""from"": ""chai@>= 0.1.6"",
-      ""dependencies"": {
-        ""assertion-error"": {
-          ""version"": ""1.0.0"",
-          ""from"": ""assertion-error@1.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/assertion-error/-/assertion-error-1.0.0.tgz""
-        },
-        ""deep-eql"": {
-          ""version"": ""0.1.3"",
-          ""from"": ""deep-eql@0.1.3"",
-          ""resolved"": ""https://registry.npmjs.org/deep-eql/-/deep-eql-0.1.3.tgz"",
-          ""dependencies"": {
-            ""type-detect"": {
-              ""version"": ""0.1.1"",
-              ""from"": ""type-detect@0.1.1"",
-              ""resolved"": ""https://registry.npmjs.org/type-detect/-/type-detect-0.1.1.tgz""
-            }
-          }
-        }
-      }
-    },
-    ""dotenv"": {
-      ""version"": ""0.0.2"",
-      ""from"": ""dotenv@0.0.2"",
-      ""resolved"": ""https://registry.npmjs.org/dotenv/-/dotenv-0.0.2.tgz""
-    },
-      ""from"": ""lodash@2.0.0"",
+      ""from"": ""https://registry.npmjs.org/lodash/-/lodash-2.0.0.tgz"",
-      ""from"": ""mime@1.2.9"",
+      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
-    },
-    ""mocha"": {
-      ""version"": ""1.21.4"",
-      ""from"": ""mocha@>= 0.9.0"",
-      ""resolved"": ""https://registry.npmjs.org/mocha/-/mocha-1.21.4.tgz"",
-      ""dependencies"": {
-        ""commander"": {
-          ""version"": ""2.0.0"",
-          ""from"": ""commander@2.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/commander/-/commander-2.0.0.tgz""
-        },
-        ""growl"": {
-          ""version"": ""1.8.1"",
-          ""from"": ""growl@1.8.x"",
-          ""resolved"": ""https://registry.npmjs.org/growl/-/growl-1.8.1.tgz""
-        },
-        ""jade"": {
-          ""version"": ""0.26.3"",
-          ""from"": ""jade@0.26.3"",
-          ""resolved"": ""https://registry.npmjs.org/jade/-/jade-0.26.3.tgz"",
-          ""dependencies"": {
-            ""commander"": {
-              ""version"": ""0.6.1"",
-              ""from"": ""commander@0.6.1""
-            },
-            ""mkdirp"": {
-              ""version"": ""0.3.0"",
-              ""from"": ""mkdirp@0.3.0""
-            }
-          }
-        },
-        ""diff"": {
-          ""version"": ""1.0.7"",
-          ""from"": ""diff@1.0.7"",
-          ""resolved"": ""https://registry.npmjs.org/diff/-/diff-1.0.7.tgz""
-        },
-        ""debug"": {
-          ""version"": ""1.0.4"",
-          ""from"": ""debug@*"",
-          ""resolved"": ""https://registry.npmjs.org/debug/-/debug-1.0.4.tgz"",
-          ""dependencies"": {
-            ""ms"": {
-              ""version"": ""0.6.2"",
-              ""from"": ""ms@0.6.2"",
-              ""resolved"": ""https://registry.npmjs.org/ms/-/ms-0.6.2.tgz""
-            }
-          }
-        },
-        ""mkdirp"": {
-          ""version"": ""0.3.5"",
-          ""from"": ""mkdirp@0.3.5"",
-          ""resolved"": ""https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz""
-        },
-        ""glob"": {
-          ""version"": ""3.2.3"",
-          ""from"": ""glob@3.2.3"",
-          ""resolved"": ""https://registry.npmjs.org/glob/-/glob-3.2.3.tgz"",
-          ""dependencies"": {
-            ""minimatch"": {
-              ""version"": ""0.2.14"",
-              ""from"": ""minimatch@~0.2.11"",
-              ""dependencies"": {
-                ""lru-cache"": {
-                  ""version"": ""2.5.0"",
-                  ""from"": ""lru-cache@2""
-                },
-                ""sigmund"": {
-                  ""version"": ""1.0.0"",
-                  ""from"": ""sigmund@~1.0.0""
-                }
-              }
-            },
-            ""graceful-fs"": {
-              ""version"": ""2.0.3"",
-              ""from"": ""graceful-fs@~2.0.0""
-            },
-            ""inherits"": {
-              ""version"": ""2.0.1"",
-              ""from"": ""inherits@2""
-            }
-          }
-        }
-      }
-    },
-    ""nock"": {
-      ""version"": ""0.16.0"",
-      ""from"": ""nock@~0.16.0"",
-      ""dependencies"": {
-        ""propagate"": {
-          ""version"": ""0.2.2"",
-          ""from"": ""propagate@0.2.x""
-        }
-      }
-      ""from"": ""request@2.40.0"",
+      ""from"": ""https://registry.npmjs.org/request/-/request-2.40.0.tgz"",
-          ""from"": ""qs@~1.0.0"",
+          ""from"": ""https://registry.npmjs.org/qs/-/qs-1.0.2.tgz"",
-          ""from"": ""json-stringify-safe@~5.0.0""
+          ""from"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.0.tgz""
-          ""from"": ""mime-types@~1.0.1"",
+          ""from"": ""https://registry.npmjs.org/mime-types/-/mime-types-1.0.2.tgz"",
-          ""from"": ""forever-agent@~0.5.0"",
+          ""from"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.2.tgz"",
-          ""from"": ""node-uuid@~1.4.0"",
+          ""from"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.1.tgz"",
-          ""from"": ""tough-cookie@>=0.12.0"",
+          ""from"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-0.12.1.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/tough-cookie/-/tough-cookie-0.12.1.tgz"",
-              ""from"": ""punycode@>=0.2.0"",
+              ""from"": ""https://registry.npmjs.org/punycode/-/punycode-1.3.1.tgz"",
-          ""from"": ""form-data@~0.1.0"",
+          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.1.4.tgz"",
-              ""from"": ""combined-stream@~0.0.4"",
+              ""from"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.5.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.5.tgz"",
-                  ""from"": ""delayed-stream@0.0.5"",
+                  ""from"": ""https://registry.npmjs.org/delayed-stream/-/delayed-stream-0.0.5.tgz"",
-              ""from"": ""mime@~1.2.11""
+              ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.11.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/mime/-/mime-1.2.11.tgz""
-              ""from"": ""async@~0.9.0""
+              ""from"": ""https://registry.npmjs.org/async/-/async-0.9.0.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.9.0.tgz""
-          ""from"": ""tunnel-agent@~0.4.0""
+          ""from"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.0.tgz""
-          ""from"": ""http-signature@~0.10.0"",
+          ""from"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
-              ""from"": ""assert-plus@0.1.2"",
+              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""from"": ""asn1@0.1.11"",
+              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""from"": ""ctype@0.5.2"",
+              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-          ""from"": ""oauth-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""from"": ""hawk@1.1.1"",
+          ""from"": ""https://registry.npmjs.org/hawk/-/hawk-1.1.1.tgz"",
-              ""from"": ""hoek@0.9.x""
+              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz"",
+              ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-              ""from"": ""boom@0.4.x"",
+              ""from"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
-              ""from"": ""cryptiles@0.2.x"",
+              ""from"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz"",
-              ""from"": ""sntp@0.2.x"",
+              ""from"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
-          ""from"": ""aws-sign2@~0.5.0""
+          ""from"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz"",
+          ""resolved"": ""https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz""
-          ""from"": ""stringstream@~0.0.4"",
+          ""from"": ""https://registry.npmjs.org/stringstream/-/stringstream-0.0.4.tgz"",
-        }
-      }
-    },
-    ""sinon"": {
-      ""version"": ""1.6.0"",
-      ""from"": ""sinon@~1.6.0"",
-      ""dependencies"": {
-        ""buster-format"": {
-          ""version"": ""0.5.6"",
-          ""from"": ""buster-format@~0.5"",
-          ""dependencies"": {
-            ""buster-core"": {
-              ""version"": ""0.6.4"",
-              ""from"": ""buster-core@=0.6.4""
-            }
-          }
-      ""from"": ""smtpapi@1.0.3"",
+      ""from"": ""https://registry.npmjs.org/smtpapi/-/smtpapi-1.0.3.tgz"","
sendgrid_sendgrid-nodejs,142f7a0626bd7836926e5c95ec952cf8f292f2f1,Merge pull request #132 from sendgrid/fix_request_version  Version bump 1.2.1,package.json,,"-  ""version"": ""1.2.0"",
+  ""version"": ""1.2.1"",","-  ""version"": ""1.2.0"",
+  ""version"": ""1.2.1"","
sendgrid_sendgrid-nodejs,142f7a0626bd7836926e5c95ec952cf8f292f2f1,Merge pull request #132 from sendgrid/fix_request_version  Version bump 1.2.1,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""1.2.0"");
+    expect(sendgrid.version).to.equal(""1.2.1"");","-    expect(sendgrid.version).to.equal(""1.2.0"");
+    expect(sendgrid.version).to.equal(""1.2.1"");"
sendgrid_sendgrid-nodejs,bab502d3b4773a2d6ecc8a7705e350acd65516c1,Merge pull request #128 from sendgrid/update-request  update request,package.json,,"-    ""request"": ""2.22.0"",
+    ""request"": ""2.40.0"",","-    ""request"": ""2.22.0"",
+    ""request"": ""2.40.0"","
sendgrid_sendgrid-nodejs,693e15fa244fce00936556db0696fd333e9c09f8,Merge pull request #127 from sendgrid/expose-smtpapi  expose & document smtpapi,lib/sendgrid.js,,"+var smtpapi_lib     = require('smtpapi');
+  this.smtpapi         = smtpapi_lib;","+var smtpapi_lib     = require('smtpapi');
+  this.smtpapi         = smtpapi_lib;"
sendgrid_sendgrid-nodejs,3ee56a4d56adc7c691c6b7fb63366728dbff0d9b,Merge pull request #123 from sendgrid/url-changes  added ability to change uri via options,lib/sendgrid.js,,"+  
+  // do this to mantain similarity to other libs
+  var uriParts = {};
+  uriParts.protocol = this.options.protocol || ""https"";
+  uriParts.host = this.options.host || ""api.sendgrid.com"";
+  uriParts.port = this.options.port || """";
+  uriParts.endpoint = this.options.endpoint || ""/api/mail.send.json"";
+  delete this.options.protocol;
+  delete this.options.host;
+  delete this.options.port;
+  delete this.options.endpoint;
+  this.options.uriParts = uriParts;
+
+  this.options.uri = this.options.uri || uriParts.protocol + ""://"" + uriParts.host + (uriParts.port ? "":"" + uriParts.port : """") + uriParts.endpoint;
-      method    : 'POST',
-      uri       : ""https://api.sendgrid.com/api/mail.send.json""
+      method    : 'POST'
-    var options = _.merge(this.options, postOptions);
+    var options = _.merge(postOptions, this.options);","+  
+  // do this to mantain similarity to other libs
+  var uriParts = {};
+  uriParts.protocol = this.options.protocol || ""https"";
+  uriParts.host = this.options.host || ""api.sendgrid.com"";
+  uriParts.port = this.options.port || """";
+  uriParts.endpoint = this.options.endpoint || ""/api/mail.send.json"";
+  delete this.options.protocol;
+  delete this.options.host;
+  delete this.options.port;
+  delete this.options.endpoint;
+  this.options.uriParts = uriParts;
+
+  this.options.uri = this.options.uri || uriParts.protocol + ""://"" + uriParts.host + (uriParts.port ? "":"" + uriParts.port : """") + uriParts.endpoint;
-      method    : 'POST',
-      uri       : ""https://api.sendgrid.com/api/mail.send.json""
+      method    : 'POST'
-    var options = _.merge(this.options, postOptions);
+    var options = _.merge(postOptions, this.options);"
sendgrid_sendgrid-nodejs,3ee56a4d56adc7c691c6b7fb63366728dbff0d9b,Merge pull request #123 from sendgrid/url-changes  added ability to change uri via options,test/lib/sendgrid.test.js,,"+  });
+
+  it('should have uri set to the default', function() {
+    expect(sendgrid.options.uri).to.equal(""https://api.sendgrid.com/api/mail.send.json"");
+  });
+
+  it('should allow uri to change', function() {
+    var options   = { ""protocol"" : ""http"", ""host"" : ""sendgrid.org"", ""endpoint"" : ""/send"", ""port"" : ""80"" };
+    var sendgrid2 = require('../../lib/sendgrid')(API_USER, API_KEY, options);
+    expect(sendgrid2.options.uri).to.equal(""http://sendgrid.org:80/send"");","+  });
+
+  it('should have uri set to the default', function() {
+    expect(sendgrid.options.uri).to.equal(""https://api.sendgrid.com/api/mail.send.json"");
+  });
+
+  it('should allow uri to change', function() {
+    var options   = { ""protocol"" : ""http"", ""host"" : ""sendgrid.org"", ""endpoint"" : ""/send"", ""port"" : ""80"" };
+    var sendgrid2 = require('../../lib/sendgrid')(API_USER, API_KEY, options);
+    expect(sendgrid2.options.uri).to.equal(""http://sendgrid.org:80/send"");"
sendgrid_sendgrid-nodejs,665e6cf9d6a2377881fdb10ad909453ddd4c5d92,Merge pull request #107 from sandfox/master  remove hardcoded shrinkwrap dependency resolution to main npm registry.,npm-shrinkwrap.json,,"-      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"",","-      ""resolved"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"","
sendgrid_sendgrid-nodejs,7824bbbcef2ab02a1111c1a727ee362dea4f2168,Merge pull request #102 from sendgrid/sm-better-try-catch  Give a more detailed try/catch. return the original body,lib/sendgrid.js,,"+        // be more granular with the error message
+        e.message = e.message + "" JSONPARSEERROR when parsing: "" + body;","+        // be more granular with the error message
+        e.message = e.message + "" JSONPARSEERROR when parsing: "" + body;"
sendgrid_sendgrid-nodejs,7824bbbcef2ab02a1111c1a727ee362dea4f2168,Merge pull request #102 from sendgrid/sm-better-try-catch  Give a more detailed try/catch. return the original body,npm-shrinkwrap.json,,"-  ""version"": ""0.4.1"",
+  ""version"": ""0.4.2"",","-  ""version"": ""0.4.1"",
+  ""version"": ""0.4.2"","
sendgrid_sendgrid-nodejs,7824bbbcef2ab02a1111c1a727ee362dea4f2168,Merge pull request #102 from sendgrid/sm-better-try-catch  Give a more detailed try/catch. return the original body,package.json,,"-  ""version"": ""0.4.1"",
+  ""version"": ""0.4.2"",","-  ""version"": ""0.4.1"",
+  ""version"": ""0.4.2"","
sendgrid_sendgrid-nodejs,7824bbbcef2ab02a1111c1a727ee362dea4f2168,Merge pull request #102 from sendgrid/sm-better-try-catch  Give a more detailed try/catch. return the original body,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""0.4.1"");
+    expect(sendgrid.version).to.equal(""0.4.2"");","-    expect(sendgrid.version).to.equal(""0.4.1"");
+    expect(sendgrid.version).to.equal(""0.4.2"");"
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,lib/email.js,,"+  if (this.bcc)         { smtp.bcc          = this.bcc; }
+","+  if (this.bcc)         { smtp.bcc          = this.bcc; }
+"
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,npm-shrinkwrap.json,,"-  ""version"": ""0.4.0"",
+  ""version"": ""0.4.1"",","-  ""version"": ""0.4.0"",
+  ""version"": ""0.4.1"","
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,package.json,,"-  ""version"": ""0.4.0"",
+  ""version"": ""0.4.1"",","-  ""version"": ""0.4.0"",
+  ""version"": ""0.4.1"","
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,test/integration/sendgrid.test.js,,"+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has array of BCCs', function(done) {
+      payload.subject += ""has array of BCCs"";
+      payload.bcc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+    it('has array of BCCs', function(done) {
+      payload.subject += ""has array of BCCs"";
+      payload.bcc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+","+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has array of BCCs', function(done) {
+      payload.subject += ""has array of BCCs"";
+      payload.bcc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+    it('has array of BCCs', function(done) {
+      payload.subject += ""has array of BCCs"";
+      payload.bcc = ['sendgrid-nodejs@mailinator.com']
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+"
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,test/lib/email.test.js,,"+    it('should have multiple BCCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.bcc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.bcc).to.equal(payload.bcc);
+    });
+
+    it('should have multiple BCCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.bcc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.bcc).to.equal(payload.bcc);
+    });
+","+    it('should have multiple BCCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.bcc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.bcc).to.equal(payload.bcc);
+    });
+
+    it('should have multiple BCCs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.bcc     = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.bcc).to.equal(payload.bcc);
+    });
+"
sendgrid_sendgrid-nodejs,01cf0d103998ae0a70d2086c6b13eece329dcc5f,Merge pull request #101 from sendgrid/sm-bcc  Fix bcc in smtp. Version bump 0.4.1,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""0.4.0"");
+    expect(sendgrid.version).to.equal(""0.4.1"");","-    expect(sendgrid.version).to.equal(""0.4.0"");
+    expect(sendgrid.version).to.equal(""0.4.1"");"
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,lib/email.js,,"-  // auto handle any To arrays
-  if ((this.to instanceof Array) && (this.to.length > 0)) {
-    var first_to  = this.to[0];
-    var self      = this;
-    this.to.forEach(function(to) {
-      self.addTo(to);
-    });
-    this.to = first_to;
-  }
+  if (this.smtpapi.to && this.smtpapi.to.length)  { web.to = """"; }
-  if (data.to.length <= 0 && this.smtpapi.to && this.smtpapi.to.length > 0) {
+  if (this.smtpapi.to && this.smtpapi.to.length > 0) {","-  // auto handle any To arrays
-  if ((this.to instanceof Array) && (this.to.length > 0)) {
-    var first_to  = this.to[0];
-    var self      = this;
-    this.to.forEach(function(to) {
-      self.addTo(to);
-    });
-    this.to = first_to;
-  }
+  if (this.smtpapi.to && this.smtpapi.to.length)  { web.to = """"; }
-  if (data.to.length <= 0 && this.smtpapi.to && this.smtpapi.to.length > 0) {
+  if (this.smtpapi.to && this.smtpapi.to.length > 0) {"
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,npm-shrinkwrap.json,,"-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"",","-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"","
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,package.json,,"-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"",","-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"","
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,test/integration/sendgrid.test.js,,"+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has multiple array of TOs using addTo', function(done) {
+      payload.subject += ""has multiple array of TOs using addTo"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      sendgrid.send(email, function(err, json) {","+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has multiple array of TOs using addTo', function(done) {
+      payload.subject += ""has multiple array of TOs using addTo"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      sendgrid.send(email, function(err, json) {"
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,test/lib/email.test.js,,"+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.from);
+    });
+
+
+    });
+
+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.from);","+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.from);
+    });
+
+
+    });
+
+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.from);"
sendgrid_sendgrid-nodejs,8ceebe95fecf2b35a7ec15bccc716fff5f80e9e3,Merge branch 'master' of github.com:sendgrid/sendgrid-nodejs,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""0.3.2"");
+    expect(sendgrid.version).to.equal(""0.4.0"");","-    expect(sendgrid.version).to.equal(""0.3.2"");
+    expect(sendgrid.version).to.equal(""0.4.0"");"
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,lib/email.js,,"-  // auto handle any To arrays
-  if ((this.to instanceof Array) && (this.to.length > 0)) {
-    var first_to  = this.to[0];
-    var self      = this;
-    this.to.forEach(function(to) {
-      self.addTo(to);
-    });
-    this.to = first_to;
-  }
+  if (this.smtpapi.to && this.smtpapi.to.length)  { web.to = """"; }
-  if (data.to.length <= 0 && this.smtpapi.to && this.smtpapi.to.length > 0) {
+  if (this.smtpapi.to && this.smtpapi.to.length > 0) {","-  // auto handle any To arrays
-  if ((this.to instanceof Array) && (this.to.length > 0)) {
-    var first_to  = this.to[0];
-    var self      = this;
-    this.to.forEach(function(to) {
-      self.addTo(to);
-    });
-    this.to = first_to;
-  }
+  if (this.smtpapi.to && this.smtpapi.to.length)  { web.to = """"; }
-  if (data.to.length <= 0 && this.smtpapi.to && this.smtpapi.to.length > 0) {
+  if (this.smtpapi.to && this.smtpapi.to.length > 0) {"
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,npm-shrinkwrap.json,,"-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"",","-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"","
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,package.json,,"-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"",","-  ""version"": ""0.3.2"",
+  ""version"": ""0.4.0"","
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,test/integration/sendgrid.test.js,,"+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has multiple array of TOs using addTo', function(done) {
+      payload.subject += ""has multiple array of TOs using addTo"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      sendgrid.send(email, function(err, json) {","+        expect(err).to.be.null;
+
+        done();
+      });
+    });
+
+    it('has multiple array of TOs using addTo', function(done) {
+      payload.subject += ""has multiple array of TOs using addTo"";
+      payload.to = [process.env.TO, 'sendgrid-nodejs@mailinator.com']
+      var email  = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      sendgrid.send(email, function(err, json) {"
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,test/lib/email.test.js,,"+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.from);
+    });
+
+
+    });
+
+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.from);","+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toWebFormat();
+
+      expect(format.to).to.equal(payload.from);
+    });
+
+
+    });
+
+    it('should have multiple TOs if as an array', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.to);
+    });
+
+    it('should have not have multiple TOs if as an array but also set on smtp-api via addTo', function() {
+      var payload     = Object.create(default_payload);
+      payload.to      = ['david.tomberlin@sendgrid.com', 'otherguy@sendgrid.com'];
+      var email       = new Email(payload);
+      email.addTo(payload.to[0]);
+      email.addTo(payload.to[1]);
+
+      var format      = email.toSmtpFormat();
+
+      expect(format.to).to.equal(payload.from);"
sendgrid_sendgrid-nodejs,3004e1af0fe619864fe1725fd0882c0f7a9b037c,Merge pull request #100 from sendgrid/sm-multiple-tos  Multiple tos should stay in an array unless using addTo,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""0.3.2"");
+    expect(sendgrid.version).to.equal(""0.4.0"");","-    expect(sendgrid.version).to.equal(""0.3.2"");
+    expect(sendgrid.version).to.equal(""0.4.0"");"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,lib/email.js,,"-var _               = require('underscore');
+var _               = require('lodash');
-  if(params.toname != null) {
+  if(params.toname !== null) {
-  if(params.fromname != null) {
+  if(params.fromname !== null) {
-  }
+  };
+
-      var content;
-      
+
-    headers       : this.headers 
-  }; 
+    headers       : this.headers
+  };
-  
+
-  } 
+  }","-var _               = require('underscore');
+var _               = require('lodash');
-  if(params.toname != null) {
+  if(params.toname !== null) {
-  if(params.fromname != null) {
+  if(params.fromname !== null) {
-  }
+  };
+
-      var content;
-      
+
-    headers       : this.headers 
-  }; 
+    headers       : this.headers
+  };
-  
+
-  } 
+  }"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,lib/file_handler.js,,"+""use strict"";
+
-var _ = require('underscore');
+var _ = require('lodash');
-}
+};","+""use strict"";
+
-var _ = require('underscore');
+var _ = require('lodash');
-}
+};"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,lib/sendgrid.js,,"-var _               = require('underscore');
+var _               = require('lodash');
+  this.options.web  = this.options.web || {};
-  }
+  };
-    _sendWeb(email, callback);
-  };
+    _sendWeb.bind(this)(email, callback);
+  }.bind(this);
-    var req   = request({
+    var postOptions = {
-    }, function(err, resp, body) {
+    };
+
+    var options = _.merge(this.options.web, postOptions);
+
+    var req   = request(options, function(err, resp, body) {
+
+    var _reqFormAppend = function(field, value) {
+      reqForm.append(field, value);
+    };
+
-            reqForm.append(field, value);
-          }else{
-            value.forEach(function(each){
-              reqForm.append(field, each);
-            });
+            //reqForm.append(field, value);
+            _reqFormAppend.bind(this)(field, value);
+          } else {
+            value.forEach(_reqFormAppend.bind(this, field));
-  }
+  };
-      port: parseInt(_this.port),
+      port: parseInt(_this.port, 10),
-    }
+    };
+
+
-  }
+  };","-var _               = require('underscore');
+var _               = require('lodash');
+  this.options.web  = this.options.web || {};
-  }
+  };
-    _sendWeb(email, callback);
-  };
+    _sendWeb.bind(this)(email, callback);
+  }.bind(this);
-    var req   = request({
+    var postOptions = {
-    }, function(err, resp, body) {
+    };
+
+    var options = _.merge(this.options.web, postOptions);
+
+    var req   = request(options, function(err, resp, body) {
+
+    var _reqFormAppend = function(field, value) {
+      reqForm.append(field, value);
+    };
+
-            reqForm.append(field, value);
-          }else{
-            value.forEach(function(each){
-              reqForm.append(field, each);
-            });
+            //reqForm.append(field, value);
+            _reqFormAppend.bind(this)(field, value);
+          } else {
+            value.forEach(_reqFormAppend.bind(this, field));
-  }
+  };
-      port: parseInt(_this.port),
+      port: parseInt(_this.port, 10),
-    }
+    };
+
+
-  }
+  };"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,lib/smtpapi_headers.js,,"-var _ = require('underscore');
+""use strict"";
+
+var _ = require('lodash');
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};","-var _ = require('underscore');
+""use strict"";
+
+var _ = require('lodash');
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};
-}
+};"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,npm-shrinkwrap.json,,"-    ""underscore"": {
-      ""version"": ""1.4.4"",
-      ""from"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz"",
-      ""resolved"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz""
-    },
-      ""from"": ""https://registry.npmjs.org/nodemailer/-/nodemailer-0.4.4.tgz"",
+      ""from"": ""nodemailer@0.4.4"",
-          ""from"": ""mailcomposer@0.1.34"",
-          ""resolved"": ""https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.34.tgz"",
+          ""from"": ""mailcomposer@~0.1"",
-              ""version"": ""0.2.12"",
-              ""from"": ""mimelib@0.2.12"",
+              ""version"": ""0.2.13"",
+              ""from"": ""mimelib@~0.2"",
+              ""resolved"": ""https://registry.npmjs.org/mimelib/-/mimelib-0.2.13.tgz"",
-                  ""version"": ""0.1.6"",
-                  ""from"": ""encoding@0.1.6"",
-                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.6.tgz"",
+                  ""version"": ""0.1.7"",
+                  ""from"": ""encoding@~0.1"",
+                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.7.tgz"",
-                      ""version"": ""0.2.7"",
-                      ""from"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz"",
-                      ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz""
+                      ""version"": ""0.2.11"",
+                      ""from"": ""iconv-lite@~0.2.11""
-                  ""from"": ""addressparser@0.1.3"",
-                  ""resolved"": ""https://registry.npmjs.org/addressparser/-/addressparser-0.1.3.tgz""
+                  ""from"": ""addressparser@~0.1""
-          ""version"": ""0.3.4"",
-          ""from"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
+          ""version"": ""0.3.13"",
+          ""from"": ""simplesmtp@~0.2 || ~0.3"",
+          ""resolved"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.13.tgz"",
-              ""from"": ""rai@0.1.7"",
-              ""resolved"": ""https://registry.npmjs.org/rai/-/rai-0.1.7.tgz""
+              ""from"": ""rai@~0.1""
-              ""from"": ""xoauth2@0.1.8"",
-              ""resolved"": ""https://registry.npmjs.org/xoauth2/-/xoauth2-0.1.8.tgz""
+              ""from"": ""xoauth2@~0.1""
-      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
+      ""from"": ""mime@1.2.9"",
-      ""from"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"",
+      ""from"": ""request@2.22.0"",
-          ""from"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz""
+          ""from"": ""qs@~0.6.0""
-          ""from"": ""json-stringify-safe@4.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-4.0.0.tgz""
+          ""from"": ""json-stringify-safe@~4.0.0""
-          ""from"": ""forever-agent@0.5.0"",
-          ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz""
+          ""from"": ""forever-agent@~0.5.0""
-          ""from"": ""tunnel-agent@0.3.0"",
-          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz""
+          ""from"": ""tunnel-agent@~0.3.0""
-          ""from"": ""http-signature@0.10.0"",
-          ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
+          ""from"": ""http-signature@~0.10.0"",
-              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz""
+              ""from"": ""assert-plus@0.1.2""
-              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz""
+              ""from"": ""asn1@0.1.11""
-              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz""
+              ""from"": ""ctype@0.5.2""
-          ""from"": ""hawk@0.13.1"",
-          ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-0.13.1.tgz"",
+          ""from"": ""hawk@~0.13.0"",
-              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz""
+              ""from"": ""hoek@0.8.x""
-              ""from"": ""boom@0.4.2"",
-              ""resolved"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
+              ""from"": ""boom@0.4.x"",
-                  ""from"": ""hoek@0.9.1"",
-                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
+                  ""from"": ""hoek@0.9.x""
-              ""from"": ""cryptiles@0.2.2"",
-              ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz""
+              ""from"": ""cryptiles@0.2.x""
-              ""from"": ""sntp@0.2.4"",
-              ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
+              ""from"": ""sntp@0.2.x"",
-                  ""from"": ""hoek@0.9.1"",
-                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
+                  ""from"": ""hoek@0.9.x""
-          ""from"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz""
+          ""from"": ""aws-sign@~0.3.0""
-          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz""
+          ""from"": ""oauth-sign@~0.3.0""
-          ""from"": ""cookie-jar@0.3.0"",
-          ""resolved"": ""https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz""
+          ""from"": ""cookie-jar@~0.3.0""
-          ""version"": ""1.4.0"",
-          ""from"": ""node-uuid@1.4.0"",
-          ""resolved"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.0.tgz""
+          ""version"": ""1.4.1"",
+          ""from"": ""node-uuid@~1.4.0""
-          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
+          ""from"": ""form-data@0.0.8"",
-              ""from"": ""combined-stream@0.0.4"",
-              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz"",
+              ""from"": ""combined-stream@~0.0.4"",
-              ""from"": ""async@0.2.9"",
-              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.2.9.tgz""
+              ""from"": ""async@~0.2.7""
+    },
+    ""lodash"": {
+      ""version"": ""2.0.0"",
+      ""from"": ""lodash@2.0.0""","-    ""underscore"": {
-      ""version"": ""1.4.4"",
-      ""from"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz"",
-      ""resolved"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz""
-    },
-      ""from"": ""https://registry.npmjs.org/nodemailer/-/nodemailer-0.4.4.tgz"",
+      ""from"": ""nodemailer@0.4.4"",
-          ""from"": ""mailcomposer@0.1.34"",
-          ""resolved"": ""https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.34.tgz"",
+          ""from"": ""mailcomposer@~0.1"",
-              ""version"": ""0.2.12"",
-              ""from"": ""mimelib@0.2.12"",
+              ""version"": ""0.2.13"",
+              ""from"": ""mimelib@~0.2"",
+              ""resolved"": ""https://registry.npmjs.org/mimelib/-/mimelib-0.2.13.tgz"",
-                  ""version"": ""0.1.6"",
-                  ""from"": ""encoding@0.1.6"",
-                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.6.tgz"",
+                  ""version"": ""0.1.7"",
+                  ""from"": ""encoding@~0.1"",
+                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.7.tgz"",
-                      ""version"": ""0.2.7"",
-                      ""from"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz"",
-                      ""resolved"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz""
+                      ""version"": ""0.2.11"",
+                      ""from"": ""iconv-lite@~0.2.11""
-                  ""from"": ""addressparser@0.1.3"",
-                  ""resolved"": ""https://registry.npmjs.org/addressparser/-/addressparser-0.1.3.tgz""
+                  ""from"": ""addressparser@~0.1""
-          ""version"": ""0.3.4"",
-          ""from"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
+          ""version"": ""0.3.13"",
+          ""from"": ""simplesmtp@~0.2 || ~0.3"",
+          ""resolved"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.13.tgz"",
-              ""from"": ""rai@0.1.7"",
-              ""resolved"": ""https://registry.npmjs.org/rai/-/rai-0.1.7.tgz""
+              ""from"": ""rai@~0.1""
-              ""from"": ""xoauth2@0.1.8"",
-              ""resolved"": ""https://registry.npmjs.org/xoauth2/-/xoauth2-0.1.8.tgz""
+              ""from"": ""xoauth2@~0.1""
-      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
+      ""from"": ""mime@1.2.9"",
-      ""from"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"",
+      ""from"": ""request@2.22.0"",
-          ""from"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz""
+          ""from"": ""qs@~0.6.0""
-          ""from"": ""json-stringify-safe@4.0.0"",
-          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-4.0.0.tgz""
+          ""from"": ""json-stringify-safe@~4.0.0""
-          ""from"": ""forever-agent@0.5.0"",
-          ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz""
+          ""from"": ""forever-agent@~0.5.0""
-          ""from"": ""tunnel-agent@0.3.0"",
-          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz""
+          ""from"": ""tunnel-agent@~0.3.0""
-          ""from"": ""http-signature@0.10.0"",
-          ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
+          ""from"": ""http-signature@~0.10.0"",
-              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz""
+              ""from"": ""assert-plus@0.1.2""
-              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz""
+              ""from"": ""asn1@0.1.11""
-              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz""
+              ""from"": ""ctype@0.5.2""
-          ""from"": ""hawk@0.13.1"",
-          ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-0.13.1.tgz"",
+          ""from"": ""hawk@~0.13.0"",
-              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz"",
-              ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz""
+              ""from"": ""hoek@0.8.x""
-              ""from"": ""boom@0.4.2"",
-              ""resolved"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
+              ""from"": ""boom@0.4.x"",
-                  ""from"": ""hoek@0.9.1"",
-                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
+                  ""from"": ""hoek@0.9.x""
-              ""from"": ""cryptiles@0.2.2"",
-              ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz""
+              ""from"": ""cryptiles@0.2.x""
-              ""from"": ""sntp@0.2.4"",
-              ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
+              ""from"": ""sntp@0.2.x"",
-                  ""from"": ""hoek@0.9.1"",
-                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
+                  ""from"": ""hoek@0.9.x""
-          ""from"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz""
+          ""from"": ""aws-sign@~0.3.0""
-          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz""
+          ""from"": ""oauth-sign@~0.3.0""
-          ""from"": ""cookie-jar@0.3.0"",
-          ""resolved"": ""https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz""
+          ""from"": ""cookie-jar@~0.3.0""
-          ""version"": ""1.4.0"",
-          ""from"": ""node-uuid@1.4.0"",
-          ""resolved"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.0.tgz""
+          ""version"": ""1.4.1"",
+          ""from"": ""node-uuid@~1.4.0""
-          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
-          ""resolved"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
+          ""from"": ""form-data@0.0.8"",
-              ""from"": ""combined-stream@0.0.4"",
-              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz"",
+              ""from"": ""combined-stream@~0.0.4"",
-              ""from"": ""async@0.2.9"",
-              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.2.9.tgz""
+              ""from"": ""async@~0.2.7""
+    },
+    ""lodash"": {
+      ""version"": ""2.0.0"",
+      ""from"": ""lodash@2.0.0"""
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,package.json,,"-    ""underscore"": ""1.4.4"",
-    ""request"": ""2.22.0""
+    ""request"": ""2.22.0"",
+    ""lodash"": ""2.0.0""","-    ""underscore"": ""1.4.4"",
-    ""request"": ""2.22.0""
+    ""request"": ""2.22.0"",
+    ""lodash"": ""2.0.0"""
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,test/lib/sendgrid.test.js,,"+  });
+
+  it('should have web options agent global', function() {
+    var options   = { web: { pool: global.http.globalAgent } };
+    var sendgrid2 = require('../../lib/sendgrid')(API_USER, API_KEY, options);
+    expect(sendgrid2.options.web.pool).to.equal(http.globalAgent);","+  });
+
+  it('should have web options agent global', function() {
+    var options   = { web: { pool: global.http.globalAgent } };
+    var sendgrid2 = require('../../lib/sendgrid')(API_USER, API_KEY, options);
+    expect(sendgrid2.options.web.pool).to.equal(http.globalAgent);"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,test/lib/smtpapi_header.test.js,,"-var _ = require('underscore');
+var _ = require('lodash');","-var _ = require('underscore');
+var _ = require('lodash');"
sendgrid_sendgrid-nodejs,6f5f390c17efd80526dcdc57daef7d655e223588,Merge pull request #99 from sendgrid/request-options  Request options,test/test_helper.js,,+global.http = require('http');,+global.http = require('http');
sendgrid_sendgrid-nodejs,9f8fe874643bf2b7b1151182adcdb01f630f23da,Merge pull request #90 from sendgrid/pr/89  From pr/89. Fixes error.data to error.message thanks to @timhaines,lib/sendgrid.js,,"-      if(error) { return callback(new Error(error.data), null);}
+      if(error) { return callback(new Error(error.message), null);}","-      if(error) { return callback(new Error(error.data), null);}
+      if(error) { return callback(new Error(error.message), null);}"
sendgrid_sendgrid-nodejs,9f8fe874643bf2b7b1151182adcdb01f630f23da,Merge pull request #90 from sendgrid/pr/89  From pr/89. Fixes error.data to error.message thanks to @timhaines,test/integration/sendgrid.test.js,,"-        expect(err.message).to.equal(""501 Syntax error"");
+        expect(err.message).to.equal(""Mail from command failed - 501 Syntax error"");
+        
+        done();
+      });
+    });
+
+    it('has a blank TO', function(done) {
+      payload.subject += ""has a blank TO"";
+      payload.to = """";
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err.message).to.equal(""Can't send mail - no recipients defined"");","-        expect(err.message).to.equal(""501 Syntax error"");
+        expect(err.message).to.equal(""Mail from command failed - 501 Syntax error"");
+        
+        done();
+      });
+    });
+
+    it('has a blank TO', function(done) {
+      payload.subject += ""has a blank TO"";
+      payload.to = """";
+
+      sendgrid.send(payload, function(err, json) {
+        expect(err.message).to.equal(""Can't send mail - no recipients defined"");"
sendgrid_sendgrid-nodejs,862518a60b0e7125b31b68539f4a3e2a6c6b9ebe,Merge pull request #85 from sendgrid/pr/84  Pr/84,lib/sendgrid.js,,"+var Sendgrid = function(api_user, api_key, options) {
-module.exports = function(api_user, api_key) {
-  var self;
+  if( !(this instanceof Sendgrid) ) {
+    return new Sendgrid(api_user, api_key, options);
+  }
-  var send = function(email, callback) {
-    web(email, callback);
+  var _this         = this;
+  this.options      = options || {};
+  this.options.port = this.options.port || 587;
+
+  var send = function() {
+    if ( _this.options.api === 'smtp') {
+      smtp.apply(this, arguments);
+      return true;
+    }
+
+    web.apply( this, arguments );
-    self            = this;
-
-    self            = this;
-      port: parseInt(self.port),
+      port: parseInt(_this.port),
-    var smtpTransport = nodemailer.createTransport(self.SMTP, smtp_settings);
+    var smtpTransport = nodemailer.createTransport(_this.SMTP, smtp_settings);
-  return {
-    version         : package_json.version,
-    port            : 587,
-    SMTP            : ""SMTP"",
-    Email           : Email,
-    SmtpapiHeaders  : SmtpapiHeaders,
-    api_user        : api_user,
-    api_key         : api_key,
-    web             : web,
-    smtp            : smtp,
-    send            : send
-  };
-}
+  this.version         = package_json.version;
+  this.SMTP            = ""SMTP"";
+  this.Email           = Email;
+  this.SmtpapiHeaders  = SmtpapiHeaders;
+  this.api_user        = api_user;
+  this.api_key         = api_key;
+  this.web             = web;
+  this.smtp            = smtp;
+  this.send            = send;
+  this.options         = this.options;
+  this.port            = this.options.port;
+  return this;
+};
+
+module.exports = Sendgrid;","+var Sendgrid = function(api_user, api_key, options) {
-module.exports = function(api_user, api_key) {
-  var self;
+  if( !(this instanceof Sendgrid) ) {
+    return new Sendgrid(api_user, api_key, options);
+  }
-  var send = function(email, callback) {
-    web(email, callback);
+  var _this         = this;
+  this.options      = options || {};
+  this.options.port = this.options.port || 587;
+
+  var send = function() {
+    if ( _this.options.api === 'smtp') {
+      smtp.apply(this, arguments);
+      return true;
+    }
+
+    web.apply( this, arguments );
-    self            = this;
-
-    self            = this;
-      port: parseInt(self.port),
+      port: parseInt(_this.port),
-    var smtpTransport = nodemailer.createTransport(self.SMTP, smtp_settings);
+    var smtpTransport = nodemailer.createTransport(_this.SMTP, smtp_settings);
-  return {
-    version         : package_json.version,
-    port            : 587,
-    SMTP            : ""SMTP"",
-    Email           : Email,
-    SmtpapiHeaders  : SmtpapiHeaders,
-    api_user        : api_user,
-    api_key         : api_key,
-    web             : web,
-    smtp            : smtp,
-    send            : send
-  };
-}
+  this.version         = package_json.version;
+  this.SMTP            = ""SMTP"";
+  this.Email           = Email;
+  this.SmtpapiHeaders  = SmtpapiHeaders;
+  this.api_user        = api_user;
+  this.api_key         = api_key;
+  this.web             = web;
+  this.smtp            = smtp;
+  this.send            = send;
+  this.options         = this.options;
+  this.port            = this.options.port;
+  return this;
+};
+
+module.exports = Sendgrid;"
sendgrid_sendgrid-nodejs,862518a60b0e7125b31b68539f4a3e2a6c6b9ebe,Merge pull request #85 from sendgrid/pr/84  Pr/84,npm-shrinkwrap.json,,"-  ""version"": ""0.3.0-rc.1.6"",
+  ""version"": ""0.3.0-rc.1.7"",
-      ""from"": ""underscore@1.4.4"",
+      ""from"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz"",
-      ""from"": ""nodemailer@0.4.4"",
+      ""from"": ""https://registry.npmjs.org/nodemailer/-/nodemailer-0.4.4.tgz"",
-          ""from"": ""mailcomposer@~0.1"",
+          ""from"": ""mailcomposer@0.1.34"",
+          ""resolved"": ""https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.34.tgz"",
-              ""from"": ""mimelib@~0.2"",
+              ""from"": ""mimelib@0.2.12"",
-                  ""from"": ""encoding@~0.1"",
+                  ""from"": ""encoding@0.1.6"",
+                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.6.tgz"",
-                      ""from"": ""iconv-lite@0.2.7"",
+                      ""from"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz"",
-                  ""from"": ""addressparser@~0.1""
+                  ""from"": ""addressparser@0.1.3"",
+                  ""resolved"": ""https://registry.npmjs.org/addressparser/-/addressparser-0.1.3.tgz""
-          ""from"": ""simplesmtp@~0.2 || ~0.3"",
+          ""from"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
-              ""from"": ""rai@~0.1""
+              ""from"": ""rai@0.1.7"",
+              ""resolved"": ""https://registry.npmjs.org/rai/-/rai-0.1.7.tgz""
-              ""from"": ""xoauth2@~0.1""
+              ""from"": ""xoauth2@0.1.8"",
+              ""resolved"": ""https://registry.npmjs.org/xoauth2/-/xoauth2-0.1.8.tgz""
-      ""from"": ""mime@1.2.9"",
+      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
-      ""from"": ""request@2.22.0"",
+      ""from"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"",
-          ""from"": ""qs@~0.6.0"",
+          ""from"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz"",
-          ""from"": ""json-stringify-safe@~4.0.0""
+          ""from"": ""json-stringify-safe@4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-4.0.0.tgz""
-          ""from"": ""forever-agent@~0.5.0""
+          ""from"": ""forever-agent@0.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz""
-          ""from"": ""tunnel-agent@~0.3.0""
+          ""from"": ""tunnel-agent@0.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz""
-          ""from"": ""http-signature@~0.10.0"",
+          ""from"": ""http-signature@0.10.0"",
+          ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
-              ""from"": ""assert-plus@0.1.2"",
+              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""from"": ""asn1@0.1.11"",
+              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""from"": ""ctype@0.5.2"",
+              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-          ""from"": ""hawk@~0.13.0"",
+          ""from"": ""hawk@0.13.1"",
+          ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-0.13.1.tgz"",
-              ""from"": ""hoek@0.8.x"",
+              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz"",
-              ""from"": ""boom@0.4.x"",
+              ""from"": ""boom@0.4.2"",
+              ""resolved"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
-                  ""from"": ""hoek@0.9.x""
+                  ""from"": ""hoek@0.9.1"",
+                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-              ""from"": ""cryptiles@0.2.x""
+              ""from"": ""cryptiles@0.2.2"",
+              ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz""
-              ""from"": ""sntp@0.2.x"",
+              ""from"": ""sntp@0.2.4"",
+              ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
-                  ""from"": ""hoek@0.9.x""
+                  ""from"": ""hoek@0.9.1"",
+                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-          ""from"": ""aws-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz"",
-          ""from"": ""oauth-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""from"": ""cookie-jar@~0.3.0""
+          ""from"": ""cookie-jar@0.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz""
-          ""from"": ""node-uuid@~1.4.0""
+          ""from"": ""node-uuid@1.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.0.tgz""
-          ""from"": ""form-data@0.0.8"",
+          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
-              ""from"": ""combined-stream@~0.0.4"",
+              ""from"": ""combined-stream@0.0.4"",
+              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz"",
-              ""from"": ""async@~0.2.7""
+              ""from"": ""async@0.2.9"",
+              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.2.9.tgz""","-  ""version"": ""0.3.0-rc.1.6"",
+  ""version"": ""0.3.0-rc.1.7"",
-      ""from"": ""underscore@1.4.4"",
+      ""from"": ""https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz"",
-      ""from"": ""nodemailer@0.4.4"",
+      ""from"": ""https://registry.npmjs.org/nodemailer/-/nodemailer-0.4.4.tgz"",
-          ""from"": ""mailcomposer@~0.1"",
+          ""from"": ""mailcomposer@0.1.34"",
+          ""resolved"": ""https://registry.npmjs.org/mailcomposer/-/mailcomposer-0.1.34.tgz"",
-              ""from"": ""mimelib@~0.2"",
+              ""from"": ""mimelib@0.2.12"",
-                  ""from"": ""encoding@~0.1"",
+                  ""from"": ""encoding@0.1.6"",
+                  ""resolved"": ""https://registry.npmjs.org/encoding/-/encoding-0.1.6.tgz"",
-                      ""from"": ""iconv-lite@0.2.7"",
+                      ""from"": ""https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.7.tgz"",
-                  ""from"": ""addressparser@~0.1""
+                  ""from"": ""addressparser@0.1.3"",
+                  ""resolved"": ""https://registry.npmjs.org/addressparser/-/addressparser-0.1.3.tgz""
-          ""from"": ""simplesmtp@~0.2 || ~0.3"",
+          ""from"": ""https://registry.npmjs.org/simplesmtp/-/simplesmtp-0.3.4.tgz"",
-              ""from"": ""rai@~0.1""
+              ""from"": ""rai@0.1.7"",
+              ""resolved"": ""https://registry.npmjs.org/rai/-/rai-0.1.7.tgz""
-              ""from"": ""xoauth2@~0.1""
+              ""from"": ""xoauth2@0.1.8"",
+              ""resolved"": ""https://registry.npmjs.org/xoauth2/-/xoauth2-0.1.8.tgz""
-      ""from"": ""mime@1.2.9"",
+      ""from"": ""https://registry.npmjs.org/mime/-/mime-1.2.9.tgz"",
-      ""from"": ""request@2.22.0"",
+      ""from"": ""https://registry.npmjs.org/request/-/request-2.22.0.tgz"",
-          ""from"": ""qs@~0.6.0"",
+          ""from"": ""https://registry.npmjs.org/qs/-/qs-0.6.5.tgz"",
-          ""from"": ""json-stringify-safe@~4.0.0""
+          ""from"": ""json-stringify-safe@4.0.0"",
+          ""resolved"": ""https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-4.0.0.tgz""
-          ""from"": ""forever-agent@~0.5.0""
+          ""from"": ""forever-agent@0.5.0"",
+          ""resolved"": ""https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.0.tgz""
-          ""from"": ""tunnel-agent@~0.3.0""
+          ""from"": ""tunnel-agent@0.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.3.0.tgz""
-          ""from"": ""http-signature@~0.10.0"",
+          ""from"": ""http-signature@0.10.0"",
+          ""resolved"": ""https://registry.npmjs.org/http-signature/-/http-signature-0.10.0.tgz"",
-              ""from"": ""assert-plus@0.1.2"",
+              ""from"": ""https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.2.tgz"",
-              ""from"": ""asn1@0.1.11"",
+              ""from"": ""https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz"",
-              ""from"": ""ctype@0.5.2"",
+              ""from"": ""https://registry.npmjs.org/ctype/-/ctype-0.5.2.tgz"",
-          ""from"": ""hawk@~0.13.0"",
+          ""from"": ""hawk@0.13.1"",
+          ""resolved"": ""https://registry.npmjs.org/hawk/-/hawk-0.13.1.tgz"",
-              ""from"": ""hoek@0.8.x"",
+              ""from"": ""https://registry.npmjs.org/hoek/-/hoek-0.8.5.tgz"",
-              ""from"": ""boom@0.4.x"",
+              ""from"": ""boom@0.4.2"",
+              ""resolved"": ""https://registry.npmjs.org/boom/-/boom-0.4.2.tgz"",
-                  ""from"": ""hoek@0.9.x""
+                  ""from"": ""hoek@0.9.1"",
+                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-              ""from"": ""cryptiles@0.2.x""
+              ""from"": ""cryptiles@0.2.2"",
+              ""resolved"": ""https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz""
-              ""from"": ""sntp@0.2.x"",
+              ""from"": ""sntp@0.2.4"",
+              ""resolved"": ""https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz"",
-                  ""from"": ""hoek@0.9.x""
+                  ""from"": ""hoek@0.9.1"",
+                  ""resolved"": ""https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz""
-          ""from"": ""aws-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/aws-sign/-/aws-sign-0.3.0.tgz"",
-          ""from"": ""oauth-sign@~0.3.0"",
+          ""from"": ""https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz"",
-          ""from"": ""cookie-jar@~0.3.0""
+          ""from"": ""cookie-jar@0.3.0"",
+          ""resolved"": ""https://registry.npmjs.org/cookie-jar/-/cookie-jar-0.3.0.tgz""
-          ""from"": ""node-uuid@~1.4.0""
+          ""from"": ""node-uuid@1.4.0"",
+          ""resolved"": ""https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.0.tgz""
-          ""from"": ""form-data@0.0.8"",
+          ""from"": ""https://registry.npmjs.org/form-data/-/form-data-0.0.8.tgz"",
-              ""from"": ""combined-stream@~0.0.4"",
+              ""from"": ""combined-stream@0.0.4"",
+              ""resolved"": ""https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.4.tgz"",
-              ""from"": ""async@~0.2.7""
+              ""from"": ""async@0.2.9"",
+              ""resolved"": ""https://registry.npmjs.org/async/-/async-0.2.9.tgz"""
sendgrid_sendgrid-nodejs,862518a60b0e7125b31b68539f4a3e2a6c6b9ebe,Merge pull request #85 from sendgrid/pr/84  Pr/84,package.json,,"-  ""version"": ""0.3.0-rc.1.6"",
+  ""version"": ""0.3.0-rc.1.7"",","-  ""version"": ""0.3.0-rc.1.6"",
+  ""version"": ""0.3.0-rc.1.7"","
sendgrid_sendgrid-nodejs,862518a60b0e7125b31b68539f4a3e2a6c6b9ebe,Merge pull request #85 from sendgrid/pr/84  Pr/84,test/integration/sendgrid.test.js,,"-  beforeEach(function() {
-    sendgrid  = new SendGrid(API_USER, API_KEY);
-  });
-
-      payload = Object.create(default_payload);
+      sendgrid  = new SendGrid(API_USER, API_KEY);
+      payload   = Object.create(default_payload);
+      sendgrid      = new SendGrid(API_USER, API_KEY, {api: 'smtp'});
-      sendgrid.smtp({}, function(err, json) {
+      sendgrid.send({}, function(err, json) {
-        sendgrid.smtp(payload);
+        sendgrid.send(payload);
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {","-  beforeEach(function() {
-    sendgrid  = new SendGrid(API_USER, API_KEY);
-  });
-
-      payload = Object.create(default_payload);
+      sendgrid  = new SendGrid(API_USER, API_KEY);
+      payload   = Object.create(default_payload);
+      sendgrid      = new SendGrid(API_USER, API_KEY, {api: 'smtp'});
-      sendgrid.smtp({}, function(err, json) {
+      sendgrid.send({}, function(err, json) {
-        sendgrid.smtp(payload);
+        sendgrid.send(payload);
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(payload, function(err, json) {
+      sendgrid.send(payload, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {
-      sendgrid.smtp(email, function(err, json) {
+      sendgrid.send(email, function(err, json) {"
sendgrid_sendgrid-nodejs,862518a60b0e7125b31b68539f4a3e2a6c6b9ebe,Merge pull request #85 from sendgrid/pr/84  Pr/84,test/lib/sendgrid.test.js,,"-    expect(sendgrid.version).to.equal(""0.3.0-rc.1.6"");
+    expect(sendgrid.version).to.equal(""0.3.0-rc.1.7"");
-  it('SMTP_PORT should be set and settable', function() {
+  it('should attach a options object to self', function() {
+    expect( typeof sendgrid.options).to.equal('object');
+  });
+
+  it('port should be set and settable', function() {
+  });
+
+  it('options.port should be set and settable', function() {
+    expect(sendgrid.options.port).to.equal(587);
+    var sendgrid2 = require('../../lib/sendgrid')('username', 'password', {api: 'smtp', port: 465}); 
+    expect(sendgrid2.options.port).to.equal(465);","-    expect(sendgrid.version).to.equal(""0.3.0-rc.1.6"");
+    expect(sendgrid.version).to.equal(""0.3.0-rc.1.7"");
-  it('SMTP_PORT should be set and settable', function() {
+  it('should attach a options object to self', function() {
+    expect( typeof sendgrid.options).to.equal('object');
+  });
+
+  it('port should be set and settable', function() {
+  });
+
+  it('options.port should be set and settable', function() {
+    expect(sendgrid.options.port).to.equal(587);
+    var sendgrid2 = require('../../lib/sendgrid')('username', 'password', {api: 'smtp', port: 465}); 
+    expect(sendgrid2.options.port).to.equal(465);"
sendgrid_sendgrid-nodejs,b1aace211a04261e9b5bd3e96882249bd0301e4c,Merge remote-tracking branch 'me/master'  * me/master:   Add badge from fury.io   Fix ;,test/test_helper.js,,"-global.sendgrid       = require('../lib/sendgrid')(API_USER, API_KEY)
+global.sendgrid       = require('../lib/sendgrid')(API_USER, API_KEY);","-global.sendgrid       = require('../lib/sendgrid')(API_USER, API_KEY)
+global.sendgrid       = require('../lib/sendgrid')(API_USER, API_KEY);"
sendgrid_sendgrid-nodejs,06bc03f046e2374702b79db69ce940bec9c79a45,Merge pull request #83 from rayshih/master  fix no form data added while value in payloads is an array,lib/sendgrid.js,,"-          reqForm.append(field, value);
+          if(!Array.isArray(value)){
+            reqForm.append(field, value);
+          }else{
+            value.forEach(function(each){
+              reqForm.append(field, each);
+            });
+          }","-          reqForm.append(field, value);
+          if(!Array.isArray(value)){
+            reqForm.append(field, value);
+          }else{
+            value.forEach(function(each){
+              reqForm.append(field, each);
+            });
+          }"
sendgrid_sendgrid-nodejs,0e52ccbc57826665bf240ec2f5935f7b3ca15c1d,Merge pull request #75 from timhaines/add-message-id  Add optional nodeMailerOptions argument to sendgrid.smtp,lib/sendgrid.js,,"+var _               = require('underscore');
-   * @param    {Email|Object}  email     An email object or a hash that has
-   *                                     the values for the email to be sent.
-   * @param    {Function}      callback  A function to call when the processing is done.
-   *                                     This parameter is optional.
+   * @param    {Email|Object}  email                     An email object or a hash that has
+   *                                                     the values for the email to be sent.
+   * @param    {Object}        nodeMailerOptions         Extra options for nodeMailer. i.e. Message-Id
+   *                                                     This parameter is optional.
+   * @param    {Function}      callback                  A function to call when the processing is done.
+   *                                                     This parameter is optional.
-  var smtp = function(email, callback) {
+  var smtp = function(email, nodeMailerOptions, callback) {
-    var callback    = callback || function() { };
+
+    // Support a callback without nodeMailerOptions
+    if (! callback && typeof nodeMailerOptions === ""function"") {
+      callback = nodeMailerOptions;
+      nodeMailerOptions = null;
+    }
+
+    var callback = callback || function() { };
-    _sendSmtp(email, callback);
+    _sendSmtp(email, nodeMailerOptions, callback);
-  var _sendSmtp = function(email, callback) {
+  var _sendSmtp = function(email, nodeMailerOptions, callback) {
-    smtpTransport.sendMail(email.toSmtpFormat(), function(error, response) {
+    var smtpParams = email.toSmtpFormat();
+
+    if (_.isObject(nodeMailerOptions)) {
+      _.extend(smtpParams, nodeMailerOptions);
+    }
+
+    smtpTransport.sendMail(smtpParams, function(error, response) {
-    SmtpapiHeaders  : SmtpapiHeaders, 
+    SmtpapiHeaders  : SmtpapiHeaders,","+var _               = require('underscore');
-   * @param    {Email|Object}  email     An email object or a hash that has
-   *                                     the values for the email to be sent.
-   * @param    {Function}      callback  A function to call when the processing is done.
-   *                                     This parameter is optional.
+   * @param    {Email|Object}  email                     An email object or a hash that has
+   *                                                     the values for the email to be sent.
+   * @param    {Object}        nodeMailerOptions         Extra options for nodeMailer. i.e. Message-Id
+   *                                                     This parameter is optional.
+   * @param    {Function}      callback                  A function to call when the processing is done.
+   *                                                     This parameter is optional.
-  var smtp = function(email, callback) {
+  var smtp = function(email, nodeMailerOptions, callback) {
-    var callback    = callback || function() { };
+
+    // Support a callback without nodeMailerOptions
+    if (! callback && typeof nodeMailerOptions === ""function"") {
+      callback = nodeMailerOptions;
+      nodeMailerOptions = null;
+    }
+
+    var callback = callback || function() { };
-    _sendSmtp(email, callback);
+    _sendSmtp(email, nodeMailerOptions, callback);
-  var _sendSmtp = function(email, callback) {
+  var _sendSmtp = function(email, nodeMailerOptions, callback) {
-    smtpTransport.sendMail(email.toSmtpFormat(), function(error, response) {
+    var smtpParams = email.toSmtpFormat();
+
+    if (_.isObject(nodeMailerOptions)) {
+      _.extend(smtpParams, nodeMailerOptions);
+    }
+
+    smtpTransport.sendMail(smtpParams, function(error, response) {
-    SmtpapiHeaders  : SmtpapiHeaders, 
+    SmtpapiHeaders  : SmtpapiHeaders,"
sendgrid_sendgrid-nodejs,ba28e9c6965e9458ba05d0b5e93c43125e121f97,Merge pull request #72 from shtylman/fix-error-cb  use error object for 'err' callback param,lib/sendgrid.js,,"-        return callback(error, null);
+        return callback(new Error(error), null);
-    }); 
+    });","-        return callback(error, null);
+        return callback(new Error(error), null);
-    }); 
+    });"
sendgrid_sendgrid-nodejs,ba28e9c6965e9458ba05d0b5e93c43125e121f97,Merge pull request #72 from shtylman/fix-error-cb  use error object for 'err' callback param,test/lib/sendgrid.test.js,,"-        expect(err).to.equal(""some error"");
+        expect(err.stack);
+        expect(err.message).to.equal(""some error"");","-        expect(err).to.equal(""some error"");
+        expect(err.stack);
+        expect(err.message).to.equal(""some error"");"
sendgrid_sendgrid-nodejs,a95cbfaee276114c2e7985dcb8f2d02d6111b465,Merges in pull request from @shtylman for standard nodejs error handling,lib/sendgrid.js,"-var querystring = require('querystring');
-var https = require('https');
-var nodemailer = require('nodemailer');
-var _ = require('underscore');
-var path = require('path');
-var mime = require('mime');
+var package_json  = require('./../package.json');
+var nodemailer    = require('nodemailer');
+var request       = require('request');
+var Email         = require('./email');
-var Email = require('./email');
-  this.api_user = api_user;
-  this.api_key = api_key;
+  this.api_user     = api_user;
+  this.api_key      = api_key;
+  this.version      = package_json.version;
+  this.SMTP         = ""SMTP"";
+  if (process.env.NODE_ENV == ""test"") {
+    this.SMTP = ""STUB"";
+  }
- * Sends an email via REST and returns true if the
+ * Sends an email via web. See .web method for more details.
+ *
+ */
+SendGrid.prototype.send = function(email, callback) {
+  this.web(email, callback);
+}
+
+/*
+ * Sends an email via web and returns true if the
-SendGrid.prototype.send = function(email, callback) {
+SendGrid.prototype.web = function(email, callback) {
+  var api_user  = this.api_user;
+  var api_key   = this.api_key;
+
-
-  var boundary = Math.random();
-  function send_rest() {
-    var post_data;
-    var options = {
-      host: 'sendgrid.com',
-      path: '/api/mail.send.json',
-      method: 'POST'
-    };
+  function send_web() {
+    var req   = request({
+      method    : 'POST',
+      uri       : ""https://sendgrid.com/api/mail.send.json""
+    }, function(err, resp, body) {
+      if (err) {
+        return cb(false, err);
+      } else {
+        try {
+          var json = JSON.parse(body);
+          return cb(json.message == 'success', json.errors);
+        } catch (err) {
+          cb(false, ""Invalid JSON response from server"");
+        }
+      } 
+    }); 
-    if (email.hasFiles()) {
-      post_data = self.getMultipartData(email, boundary);
-      var length = 0;
-      for (var buf in post_data) {
-        length += post_data[buf].length;
+    var form          = email.toWebFormat();
+    form['api_user']  = api_user;
+    form['api_key']   = api_key;
+
+    var reqForm = req.form();
+    for (var field in form) {
+      var value = form[field];
+      if (value && value.filename) {
+        if (value.cid) {
+          reqForm.append(""content[""+value.filename+""]"", value.cid);
+        }
+        reqForm.append(""files[""+value.filename+""]"", value.content, {filename: value.filename, contentType: value.contentType});
+      } else {
+        try {
+          reqForm.append(field, value);
+        } catch(err) {}
-      options.headers = {
-        'Content-Type': 'multipart/form-data; boundary=' + boundary,
-        'Content-Length': length
-      };
-    } else {
-      post_data = self.getPostData(email);
-      options.headers = {
-        'Content-Type': 'application/x-www-form-urlencoded',
-        'Content-Length': post_data.length
-      };
-
-    var request = https.request(options, function(res) {
-      res.setEncoding('utf8');
-      var content = '';
-      res.on('data', function(chunk) {
-        content += chunk;
-      });
-      res.on('end', function() {
-        var json = JSON.parse(content);
-        cb(json.message == 'success', json.errors);
-      });
-    });
-
-    // If the email has files, it will be a multipart request.
-    // TODO: make this feel less dirty.
-    if (email.hasFiles()) {
-      for (var key in post_data) {
-        request.write(post_data[key]);
-      }
-    } else {
-      request.write(post_data);
-    }
-
-    request.end();
-  if (email.hasFiles()) {
-    email.processFiles(function(success, message) {
-      if (success) {
-        send_rest();
-      } else {
-        cb(false, message);
-      }
-    });
-  } else {
-    send_rest();
-  }
+  send_web();
-  smtpTransport = nodemailer.createTransport(""SMTP"", {
+  smtpTransport = nodemailer.createTransport(this.SMTP, {
-        return cb(false, response);
+        return cb(false, error.data);
-  if (_.size(email.files) > 0) {
-    email.processFiles(function(success, message) {
-      if (success) {
-        send_smtp();
-      } else {
-        cb(false, message);
-      }
-    });
-  } else {
-    send_smtp();
-  }
+  send_smtp();
-/*
- * Function for internal use.
- *
- * Used for returning the parameters for sending an email via REST.
- *
- * This method is only used when there are no attachments on the email object.
- *
- * @param   {Email}  email  The email object to be sent via REST.
- * @return  {String}        Querystring format of the email to be sent.
- */
-SendGrid.prototype.getPostData = function(email) {
-  var data = {
-    api_user: this.api_user,
-    api_key: this.api_key
-  }
-
-  _.extend(data, email.toWebFormat());
-
-  return querystring.stringify(data);
-};
-
-/*
- * Function for internal use.
- *
- * Used for returning the parameters for sending an email via REST.
- *
- * This method is used when there are attachments on the email object.
- *
- * @param   {Email}   email     The email object to be sent via REST.
- * @param   {String}  boundary  The boundary to use between multipart sections.
- * @return  {Array[Buffer]}     An array of buffers for each section of
- *                              the multipart/form-data request.
- */
-SendGrid.prototype.getMultipartData = function(email, boundary) {
-  var data = [];
-  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
-  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
-
-  _(email.toWebFormat()).each(function(v, k) {
-    data.push(new Buffer(encodeField(boundary, k, v)));
-  });
-
-  _(email.files).each(function(file) {
-    data.push(encodeFile(boundary, file.contentType, 'files[' + file.filename + ']', file.filename));
-    data.push(file.content);
-    data.push(new Buffer('\r\n'));
-  });
-
-  return data;
-};
-
-/*
- * Function for encoding a field as a multipart/form-data request.
- *
- * @param   {String}  boundary  The boundary to use between requests.
- * @param   {String}  name      The name of the parameter.
- * @param   {String}  value     The value of the parameter.
- * @return  {String}            The string representing the multipart/form-data section.
- */
-function encodeField(boundary, name, value) {
-    var return_part = ""--"" + boundary + ""\r\n"";
-    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
-    return_part += value + ""\r\n"";
-    return return_part;
-}
-
-/*
- * Function for encoding a file as a multipart/form-data request.
- *
- * @param   {String}  boundary  The boundary to use between requests.
- * @param   {String}  type      The Content-Type of the file
- * @param   {String}  name      The name of the parameter.
- * @param   {String}  filename  The name of the file.
- * @return  {String}            The string representing the multipart/form-data section.
- */
-function encodeFile(boundary, type, name, filename) {
-    var return_part = ""--"" + boundary + ""\r\n"";
-    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
-    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
-    return return_part;
-}
-","-        var json = JSON.parse(content);
-        cb(json.message == 'success', json.errors);
+        try {
+          var json = JSON.parse(content);
+        } catch (err) {
+          return cb(err);
+        }
+
+        var err = undefined;
+        if (json.message !== 'success') {
+          var msg = 'sendgrid error';
+          if (json.errors) {
+            msg = json.errors.shift();
+          }
+
+          return cb(new Error(msg));
+        }
+
+        cb(err);","-var querystring = require('querystring');
-var https = require('https');
-var nodemailer = require('nodemailer');
-var _ = require('underscore');
-var path = require('path');
-var mime = require('mime');
+var package_json  = require('./../package.json');
+var nodemailer    = require('nodemailer');
+var request       = require('request');
+var Email         = require('./email');
-var Email = require('./email');
-  this.api_user = api_user;
-  this.api_key = api_key;
+  this.api_user     = api_user;
+  this.api_key      = api_key;
+  this.version      = package_json.version;
+  this.SMTP         = ""SMTP"";
+  if (process.env.NODE_ENV == ""test"") {
+    this.SMTP = ""STUB"";
+  }
- * Sends an email via REST and returns true if the
+ * Sends an email via web. See .web method for more details.
+ *
+ */
+SendGrid.prototype.send = function(email, callback) {
+  this.web(email, callback);
+}
+
+/*
+ * Sends an email via web and returns true if the
-SendGrid.prototype.send = function(email, callback) {
+SendGrid.prototype.web = function(email, callback) {
+  var api_user  = this.api_user;
+  var api_key   = this.api_key;
+
-
-  var boundary = Math.random();
-  function send_rest() {
-    var post_data;
-    var options = {
-      host: 'sendgrid.com',
-      path: '/api/mail.send.json',
-      method: 'POST'
-    };
+  function send_web() {
+    var req   = request({
+      method    : 'POST',
+      uri       : ""https://sendgrid.com/api/mail.send.json""
+    }, function(err, resp, body) {
+      try {
+        var json = JSON.parse(body);
+      } catch (err) {
+        return cb(err);
+      }
-    if (email.hasFiles()) {
-      post_data = self.getMultipartData(email, boundary);
-      var length = 0;
-      for (var buf in post_data) {
-        length += post_data[buf].length;
+      var err = undefined;
+      if (json.message !== 'success') {
+        var msg = 'sendgrid error';
+        if (json.errors) {
+          msg = json.errors.shift();
+        }
+
+        return cb(new Error(msg));
-      options.headers = {
-        'Content-Type': 'multipart/form-data; boundary=' + boundary,
-        'Content-Length': length
-      };
-    } else {
-      post_data = self.getPostData(email);
-      options.headers = {
-        'Content-Type': 'application/x-www-form-urlencoded',
-        'Content-Length': post_data.length
-      };
+
+      cb(err);
+
+      //if (err) {
+      //  return cb(false, err);
+      //} else {
+      //  try {
+      //    var json = JSON.parse(body);
+      //    return cb(json.message == 'success', json.errors);
+      //  } catch (err) {
+      //    cb(false, ""Invalid JSON response from server"");
+      //  }
+      //} 
+    }); 
+
+    var form          = email.toWebFormat();
+    form['api_user']  = api_user;
+    form['api_key']   = api_key;
+
+    var reqForm = req.form();
+    for (var field in form) {
+      var value = form[field];
+      if (value && value.filename) {
+        if (value.cid) {
+          reqForm.append(""content[""+value.filename+""]"", value.cid);
+        }
+        reqForm.append(""files[""+value.filename+""]"", value.content, {filename: value.filename, contentType: value.contentType});
+      } else {
+        try {
+          reqForm.append(field, value);
+        } catch(err) {}
+      }
-
-    var request = https.request(options, function(res) {
-      res.setEncoding('utf8');
-      var content = '';
-      res.on('data', function(chunk) {
-        content += chunk;
-      });
-      res.on('end', function() {
-        var json = JSON.parse(content);
-        cb(json.message == 'success', json.errors);
-      });
-    });
-
-    // If the email has files, it will be a multipart request.
-    // TODO: make this feel less dirty.
-    if (email.hasFiles()) {
-      for (var key in post_data) {
-        request.write(post_data[key]);
-      }
-    } else {
-      request.write(post_data);
-    }
-
-    request.end();
-  if (email.hasFiles()) {
-    email.processFiles(function(success, message) {
-      if (success) {
-        send_rest();
-      } else {
-        cb(false, message);
-      }
-    });
-  } else {
-    send_rest();
-  }
+  send_web();
-  smtpTransport = nodemailer.createTransport(""SMTP"", {
+  smtpTransport = nodemailer.createTransport(this.SMTP, {
-        return cb(false, response);
+        return cb(false, error.data);
-  if (_.size(email.files) > 0) {
-    email.processFiles(function(success, message) {
-      if (success) {
-        send_smtp();
-      } else {
-        cb(false, message);
-      }
-    });
-  } else {
-    send_smtp();
-  }
+  send_smtp();
-/*
- * Function for internal use.
- *
- * Used for returning the parameters for sending an email via REST.
- *
- * This method is only used when there are no attachments on the email object.
- *
- * @param   {Email}  email  The email object to be sent via REST.
- * @return  {String}        Querystring format of the email to be sent.
- */
-SendGrid.prototype.getPostData = function(email) {
-  var data = {
-    api_user: this.api_user,
-    api_key: this.api_key
-  }
-
-  _.extend(data, email.toWebFormat());
-
-  return querystring.stringify(data);
-};
-
-/*
- * Function for internal use.
- *
- * Used for returning the parameters for sending an email via REST.
- *
- * This method is used when there are attachments on the email object.
- *
- * @param   {Email}   email     The email object to be sent via REST.
- * @param   {String}  boundary  The boundary to use between multipart sections.
- * @return  {Array[Buffer]}     An array of buffers for each section of
- *                              the multipart/form-data request.
- */
-SendGrid.prototype.getMultipartData = function(email, boundary) {
-  var data = [];
-  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
-  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
-
-  _(email.toWebFormat()).each(function(v, k) {
-    data.push(new Buffer(encodeField(boundary, k, v)));
-  });
-
-  _(email.files).each(function(file) {
-    data.push(encodeFile(boundary, file.contentType, 'files[' + file.filename + ']', file.filename));
-    data.push(file.content);
-    data.push(new Buffer('\r\n'));
-  });
-
-  return data;
-};
-
-/*
- * Function for encoding a field as a multipart/form-data request.
- *
- * @param   {String}  boundary  The boundary to use between requests.
- * @param   {String}  name      The name of the parameter.
- * @param   {String}  value     The value of the parameter.
- * @return  {String}            The string representing the multipart/form-data section.
- */
-function encodeField(boundary, name, value) {
-    var return_part = ""--"" + boundary + ""\r\n"";
-    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
-    return_part += value + ""\r\n"";
-    return return_part;
-}
-
-/*
- * Function for encoding a file as a multipart/form-data request.
- *
- * @param   {String}  boundary  The boundary to use between requests.
- * @param   {String}  type      The Content-Type of the file
- * @param   {String}  name      The name of the parameter.
- * @param   {String}  filename  The name of the file.
- * @return  {String}            The string representing the multipart/form-data section.
- */
-function encodeFile(boundary, type, name, filename) {
-    var return_part = ""--"" + boundary + ""\r\n"";
-    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
-    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
-    return return_part;
-}
-"
sendgrid_sendgrid-nodejs,2cef20db9dce98c1821ad51d84ec6ff1c828145f,Merge pull request #59 from kienpham2000/patch-1  make valid homepage url so npm won't WARN,package.json,,"-  ""homepage"": ""sendgrid.com"",
+  ""homepage"": ""http://sendgrid.com"",","-  ""homepage"": ""sendgrid.com"",
+  ""homepage"": ""http://sendgrid.com"","
sendgrid_sendgrid-nodejs,e7f9c1c62c37ee7b96afc11c0117ea1a6ad8f0db,Merge pull request #36 from sendgrid/upgrade-nodemailer-dependencies  Upgrade nodemailer dependencies and document tests,index.js,,"-module.exports.SendGrid = require('./lib/sendgrid');
-module.exports.Email = require('./lib/email');
-module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');
+module.exports = {
+  SendGrid: require('./lib/sendgrid'),
+  Email: require('./lib/email'),
+  SmtpapiHeaders: require('./lib/smtpapi_headers')
+};","-module.exports.SendGrid = require('./lib/sendgrid');
-module.exports.Email = require('./lib/email');
-module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');
+module.exports = {
+  SendGrid: require('./lib/sendgrid'),
+  Email: require('./lib/email'),
+  SmtpapiHeaders: require('./lib/smtpapi_headers')
+};"
sendgrid_sendgrid-nodejs,e7f9c1c62c37ee7b96afc11c0117ea1a6ad8f0db,Merge pull request #36 from sendgrid/upgrade-nodemailer-dependencies  Upgrade nodemailer dependencies and document tests,lib/sendgrid.js,,"-  var self = this;
+  var self = this
+    , smtpTransport;
-  nodemailer.SMTP = {
-    host: 'smtp.sendgrid.net',
-    use_authentication: true,
-    ssl: true,
-    user: this.api_user,
-    pass: this.api_key
-  };
+  smtpTransport = nodemailer.createTransport(""SMTP"", {
+    service: 'SendGrid',
+    auth: {
+      user: this.api_user,
+      pass: this.api_key
+    }
+  });
-    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-      callback(success, error);
+    smtpTransport.sendMail(email.toSmtpFormat(), function(error, response) {
+      smtpTransport.close();
+      if(error) {
+        return callback(false, response);
+      }
+      return callback(true, response);","-  var self = this;
+  var self = this
+    , smtpTransport;
-  nodemailer.SMTP = {
-    host: 'smtp.sendgrid.net',
-    use_authentication: true,
-    ssl: true,
-    user: this.api_user,
-    pass: this.api_key
-  };
+  smtpTransport = nodemailer.createTransport(""SMTP"", {
+    service: 'SendGrid',
+    auth: {
+      user: this.api_user,
+      pass: this.api_key
+    }
+  });
-    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-      callback(success, error);
+    smtpTransport.sendMail(email.toSmtpFormat(), function(error, response) {
+      smtpTransport.close();
+      if(error) {
+        return callback(false, response);
+      }
+      return callback(true, response);"
sendgrid_sendgrid-nodejs,e7f9c1c62c37ee7b96afc11c0117ea1a6ad8f0db,Merge pull request #36 from sendgrid/upgrade-nodemailer-dependencies  Upgrade nodemailer dependencies and document tests,test/config.sample.js,,"+var test_setup = {
+  api_user: '<username>',
+  api_key: '<password/api_key>',
+  single_to: '<your_email>',
+  multi_to: ['<your_email>', '<another_email>'],
+  from: '<your_email>'
+}
+module.exports = test_setup;","+var test_setup = {
+  api_user: '<username>',
+  api_key: '<password/api_key>',
+  single_to: '<your_email>',
+  multi_to: ['<your_email>', '<another_email>'],
+  from: '<your_email>'
+}
+module.exports = test_setup;"
sendgrid_sendgrid-nodejs,e7f9c1c62c37ee7b96afc11c0117ea1a6ad8f0db,Merge pull request #36 from sendgrid/upgrade-nodemailer-dependencies  Upgrade nodemailer dependencies and document tests,test/test_helper.js,,"-global.setup = require('./test.setup');
+global.setup = require('./config');","-global.setup = require('./test.setup');
+global.setup = require('./config');"
sendgrid_sendgrid-nodejs,2ec848449b8b607c22200f57e92aa96140833bea,Merge pull request #29 from partkyle/category-array  category should be an array,lib/smtpapi_headers.js,,"-  this.category = val;
+  if (_.isArray(val)) {
+    this.category = val;
+  } else {
+    this.category = [val];
+  }","-  this.category = val;
+  if (_.isArray(val)) {
+    this.category = val;
+  } else {
+    this.category = [val];
+  }"
sendgrid_sendgrid-nodejs,2ec848449b8b607c22200f57e92aa96140833bea,Merge pull request #29 from partkyle/category-array  category should be an array,test/lib/smtpapi_header.test.js,+var _ = require('underscore');,"-      expect(header.category).to.equal(categories[0]);
+      expect(header.category).to.eql([categories[0]]);","+var _ = require('underscore');
-      expect(header.category).to.equal(categories[0]);
+      expect(header.category).to.eql([categories[0]]);"
sendgrid_sendgrid-nodejs,38253876c111310b96036f6287c66a6f05b9dd7d,Merge pull request #28 from siyegen/global-fix  Global fix,test/integration/sendgrid.test.js,,+var _ = require('underscore');,+var _ = require('underscore');
sendgrid_sendgrid-nodejs,38253876c111310b96036f6287c66a6f05b9dd7d,Merge pull request #28 from siyegen/global-fix  Global fix,test/lib/smtpapi_header.test.js,,+var _ = require('underscore');,+var _ = require('underscore');
sendgrid_sendgrid-nodejs,38253876c111310b96036f6287c66a6f05b9dd7d,Merge pull request #28 from siyegen/global-fix  Global fix,test/test_helper.js,,-global._ = require('underscore');,-global._ = require('underscore');
sendgrid_sendgrid-nodejs,001665b4cc88189eda47eb7ee2765e5fdc39c697,Merge pull request #27 from partkyle/heroku-integration  Heroku integration,lib/email.js,,+var _ = require('underscore');,+var _ = require('underscore');
sendgrid_sendgrid-nodejs,001665b4cc88189eda47eb7ee2765e5fdc39c697,Merge pull request #27 from partkyle/heroku-integration  Heroku integration,package.json,,"-    ""node"": ""~0.6.0""
+    ""node"": "">= 0.4.7""","-    ""node"": ""~0.6.0""
+    ""node"": "">= 0.4.7"""
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,lib/email.js,,"-var querystring = require('querystring');
-var _ = require('underscore');
-var fs = require('fs');
+var http = require('http');
+var Step = require('step');
-
+var FileHandler = require('./file_handler');
+
+/**
+ * Class to handle storing the properties relative to an email.
+ *
+ * @param  {Object}          params
+ * @param  {string|array}    params.to       The to address(es) of the email
+ * @param  {string}          params.from     The from address of the email
+ * @param  {SmtpapiHeaders}  params.smtpapi  The SendGrid x-smtpapi headers object
+ * @param  {string}          params.subject  The subject of the email
+ * @param  {string}          params.text     The text/plain content of an email
+ * @param  {string}          params.html     The text/html content of an email
+ * @param  {string|array}    params.bcc      The bcc address(es) of the email
+ * @param  {Date}            params.date     The date of the email
+ * @param  {object}          params.headers  The custom headers on an email
+ */
-  /*
-   * Default parameters for sending mail
-   */
-  var default_mail_params = {
-    to: [],
-    from: '',
-    smtpapi: new SmtpapiHeaders(),
-    subject: '',
-    text: '',
-    html: '',
-    bcc: [],
-    replyto: '',
-    date: new Date(),
-    files: {},
-    file_data: {},
-    headers: {}
-  };
-
-  _.extend(this, default_mail_params, params);
+
+  params = params || {};
+
+  this.to      = params.to      || [];
+  this.from    = params.from    || '';
+  this.smtpapi = params.smtpapi || new SmtpapiHeaders();
+  this.subject = params.subject || '';
+  this.text    = params.text    || '';
+  this.html    = params.html    || '';
+  this.bcc     = params.bcc     || [];
+  this.replyto = params.replyto || '';
+  this.date    = params.date    || new Date();
+  this.headers = params.headers || {};
+
+  // auto handle calling the constructor for the file handler
+  this.files = [];
+  if (params.files) {
+    params.files.forEach(function(file) {
+      this.files.push(new FileHandler(file));
+    }, this);
+  }
-/*
+/**
- * @return {Boolean} The result of the validation
+ * @return  {Boolean}  The result of the validation
-}
-
+};
+
+/**
+ * This method sets the headers on an email, if the value passed in is an object.
+ *
+ * @param  {object}  val  An object of custom headers
+ */
-}
-
-Email.prototype.addHeaders = function(val){
+};
+
+/**
+ * This method will add a header, or multiple headers, to an email.
+ *
+ * @param  {object}  val  An object of custom headers
+ */
+Email.prototype.addHeaders = function(val) {
-}
-
+};
+
+/**
+ * This method is a proxy for adding a to address to the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addTo
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for the add sub val on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSubVal
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setUniqueArgs
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addUniqueArgs
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setCategory
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addCategory
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setSection
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSection
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addFilterSetting
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setFilterSetting
+ */
-}
-
-Email.prototype.addFile = function(filename, filepath) {
-  this.files[filename] = filepath;
-}
-
+};
+
+/**
+ * This method adds a file to the email object as an attachment
+ * It uses the FileHandler object.
+ *
+ * @param  {object}  file_object  The file object
+ *
+ * @see FileHandler
+ */
+Email.prototype.addFile = function(file_object) {
+  this.files.push(new FileHandler(file_object));
+};
+
+/**
+ * This method is used to process files. It uses step.js to asychronously load the contents of each file.
+ *
+ * @param  {function}  callback  The callback to call when the method returns
+ */
-  var attachments_count = _.size(this.files);
-  _(this.files).each(function(v, k) {
-    fs.readFile(v, function(error, data) {
-      attachments_count--;
-      if (error) {
-        return callback(false, error);
-      } else {
-        self.file_data[k] = data;
-      }
-
-      if (attachments_count == 0) {
-        callback(true);
-      }
-    });
-  });
-}
-
+
+  function handleFiles() {
+    for(var i in self.files) {
+      self.files[i].loadContent(this.parallel());
+    }
+  };
+
+  function finish(err, messages) {
+    if (err) {
+      callback(false, messages);
+    } else {
+      callback(true);
+    }
+  };
+
+  Step(handleFiles, finish);
+};
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.send
+ * using the web api
+ *
+ * @see SendGrid.send
+ */
-}
-
+};
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.smtp
+ * using the smtp api
+ *
+ * @see SendGrid.smtp
+ */
-  if (_.size(this.file_data) > 0) {
+  if (_.size(this.files) > 0) {
-    _(this.file_data).each(function(v, k) {
-      attachments.push({filename: k, contents: v});
+    _(this.files).each(function(file) {
+      attachments.push({filename: file.filename, contents: file.content});
-}
-
-/*
+};
+
+/**
-}
-
+};
+
+/**
+ * This method is used to show if there are files on this email object
+ *
+ * @return boolean
+ */
-}
-
+};
+
+// export the object as the only object in this module","-var querystring = require('querystring');
-var _ = require('underscore');
-var fs = require('fs');
+var http = require('http');
+var Step = require('step');
-
+var FileHandler = require('./file_handler');
+
+/**
+ * Class to handle storing the properties relative to an email.
+ *
+ * @param  {Object}          params
+ * @param  {string|array}    params.to       The to address(es) of the email
+ * @param  {string}          params.from     The from address of the email
+ * @param  {SmtpapiHeaders}  params.smtpapi  The SendGrid x-smtpapi headers object
+ * @param  {string}          params.subject  The subject of the email
+ * @param  {string}          params.text     The text/plain content of an email
+ * @param  {string}          params.html     The text/html content of an email
+ * @param  {string|array}    params.bcc      The bcc address(es) of the email
+ * @param  {Date}            params.date     The date of the email
+ * @param  {object}          params.headers  The custom headers on an email
+ */
-  /*
-   * Default parameters for sending mail
-   */
-  var default_mail_params = {
-    to: [],
-    from: '',
-    smtpapi: new SmtpapiHeaders(),
-    subject: '',
-    text: '',
-    html: '',
-    bcc: [],
-    replyto: '',
-    date: new Date(),
-    files: {},
-    file_data: {},
-    headers: {}
-  };
-
-  _.extend(this, default_mail_params, params);
+
+  params = params || {};
+
+  this.to      = params.to      || [];
+  this.from    = params.from    || '';
+  this.smtpapi = params.smtpapi || new SmtpapiHeaders();
+  this.subject = params.subject || '';
+  this.text    = params.text    || '';
+  this.html    = params.html    || '';
+  this.bcc     = params.bcc     || [];
+  this.replyto = params.replyto || '';
+  this.date    = params.date    || new Date();
+  this.headers = params.headers || {};
+
+  // auto handle calling the constructor for the file handler
+  this.files = [];
+  if (params.files) {
+    params.files.forEach(function(file) {
+      this.files.push(new FileHandler(file));
+    }, this);
+  }
-/*
+/**
- * @return {Boolean} The result of the validation
+ * @return  {Boolean}  The result of the validation
-}
-
+};
+
+/**
+ * This method sets the headers on an email, if the value passed in is an object.
+ *
+ * @param  {object}  val  An object of custom headers
+ */
-}
-
-Email.prototype.addHeaders = function(val){
+};
+
+/**
+ * This method will add a header, or multiple headers, to an email.
+ *
+ * @param  {object}  val  An object of custom headers
+ */
+Email.prototype.addHeaders = function(val) {
-}
-
+};
+
+/**
+ * This method is a proxy for adding a to address to the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addTo
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for the add sub val on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSubVal
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setUniqueArgs
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addUniqueArgs
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setCategory
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addCategory
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setSection
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSection
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for adding a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addFilterSetting
+ */
-}
-
+};
+
+/**
+ * This method is a proxy for setting a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setFilterSetting
+ */
-}
-
-Email.prototype.addFile = function(filename, filepath) {
-  this.files[filename] = filepath;
-}
-
+};
+
+/**
+ * This method adds a file to the email object as an attachment
+ * It uses the FileHandler object.
+ *
+ * @param  {object}  file_object  The file object
+ *
+ * @see FileHandler
+ */
+Email.prototype.addFile = function(file_object) {
+  this.files.push(new FileHandler(file_object));
+};
+
+/**
+ * This method is used to process files. It uses step.js to asychronously load the contents of each file.
+ *
+ * @param  {function}  callback  The callback to call when the method returns
+ */
-  var attachments_count = _.size(this.files);
-  _(this.files).each(function(v, k) {
-    fs.readFile(v, function(error, data) {
-      attachments_count--;
-      if (error) {
-        return callback(false, error);
-      } else {
-        self.file_data[k] = data;
-      }
-
-      if (attachments_count == 0) {
-        callback(true);
-      }
-    });
-  });
-}
-
+
+  function handleFiles() {
+    for(var i in self.files) {
+      self.files[i].loadContent(this.parallel());
+    }
+  };
+
+  function finish(err, messages) {
+    if (err) {
+      callback(false, messages);
+    } else {
+      callback(true);
+    }
+  };
+
+  Step(handleFiles, finish);
+};
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.send
+ * using the web api
+ *
+ * @see SendGrid.send
+ */
-}
-
+};
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.smtp
+ * using the smtp api
+ *
+ * @see SendGrid.smtp
+ */
-  if (_.size(this.file_data) > 0) {
+  if (_.size(this.files) > 0) {
-    _(this.file_data).each(function(v, k) {
-      attachments.push({filename: k, contents: v});
+    _(this.files).each(function(file) {
+      attachments.push({filename: file.filename, contents: file.content});
-}
-
-/*
+};
+
+/**
-}
-
+};
+
+/**
+ * This method is used to show if there are files on this email object
+ *
+ * @return boolean
+ */
-}
-
+};
+
+// export the object as the only object in this module"
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,lib/sendgrid.js,,"- * @param    {Email|Object}  email     An email object or a hash that has
- *                                    the values for the email to be sent.
- * @param    {Function}      callback  A function to call when the processing is done.
+ * @param  {Email|Object}  email     An email object or a hash that has
+ *                                   the values for the email to be sent.
+ * @param  {Function}      callback  A function to call when the processing is done.
-        callback.call(null, json.message == 'success', json.errors);
+        callback(json.message == 'success', json.errors);
-      callback.call(self, success, error);
+      callback(success, error);
-  _(email.files).each(function(filepath, filename) {
-    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
-    data.push(new Buffer(email.file_data[filename]));
+  _(email.files).each(function(file) {
+    data.push(encodeFile(boundary, file.contentType, 'files[' + file.filename + ']', file.filename));
+    data.push(file.content);","- * @param    {Email|Object}  email     An email object or a hash that has
- *                                    the values for the email to be sent.
- * @param    {Function}      callback  A function to call when the processing is done.
+ * @param  {Email|Object}  email     An email object or a hash that has
+ *                                   the values for the email to be sent.
+ * @param  {Function}      callback  A function to call when the processing is done.
-        callback.call(null, json.message == 'success', json.errors);
+        callback(json.message == 'success', json.errors);
-      callback.call(self, success, error);
+      callback(success, error);
-  _(email.files).each(function(filepath, filename) {
-    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
-    data.push(new Buffer(email.file_data[filename]));
+  _(email.files).each(function(file) {
+    data.push(encodeFile(boundary, file.contentType, 'files[' + file.filename + ']', file.filename));
+    data.push(file.content);"
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,package.json,,"-    ""mime"": ""*""
+    ""mime"": ""*"",
+    ""step"": "">= 0.0.5""","-    ""mime"": ""*""
+    ""mime"": ""*"",
+    ""step"": "">= 0.0.5"""
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,test/index.test.js,,"-    index.should.not.be.undefined;
+    expect(index).to.not.be.undefined;
-    index.SendGrid.should.not.be.undefined;
+    expect(index.SendGrid).to.not.be.undefined;
-    index.Email.should.not.be.undefined;
+    expect(index.Email).to.not.be.undefined;
-    index.SmtpapiHeaders.should.not.be.undefined;
+    expect(index.SmtpapiHeaders).to.not.be.undefined;","-    index.should.not.be.undefined;
+    expect(index).to.not.be.undefined;
-    index.SendGrid.should.not.be.undefined;
+    expect(index.SendGrid).to.not.be.undefined;
-    index.Email.should.not.be.undefined;
+    expect(index.Email).to.not.be.undefined;
-    index.SmtpapiHeaders.should.not.be.undefined;
+    expect(index.SmtpapiHeaders).to.not.be.undefined;"
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,test/integration/attachments.test.js,,"-var Email = require('../../lib/Email');
+var Email = require('../../lib/email');
-  it('should be able to send files via web', function(done) {
-    var mail = new Email({
-      to: setup.single_to,
-      from: setup.from,
-      subject: '(Web) File attachments',
-      text: 'test of files',
-      files: {
-        'Logo.png': __dirname + '/../assets/logo.png',
-        'Secret.txt': __dirname + '/../assets/secret.txt'
-      }
+  describe('web', function() {
+    var mail;
+    beforeEach(function() {
+      mail = new Email({
+        to: setup.single_to,
+        from: setup.from,
+        text: 'test of web files'
+      });
-    sendgrid.send(mail, function(success, message) {
-      expect(success).to.be.true;
-      done();
+    it('should be able to send files via path', function(done) {
+      var file = {
+        filename: 'logo.png',
+        path: __dirname + '/../assets/logo.png'
+      };
+
+      mail.subject = '(Web-path) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via url', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+
+      mail.subject = '(Web-url) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via content', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      };
+
+      mail.subject = '(Web-content) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
-  it('should be able to send files via Smtp', function(done) {
-    var mail = new Email({
-      to: setup.single_to,
-      from: setup.from,
-      subject: '(Smtp) File attachments',
-      text: 'test of files',
-      files: {
-        'Logo.png': __dirname + '/../assets/logo.png',
-        'Secret.txt': __dirname + '/../assets/secret.txt'
-      }
+  describe('smtp', function() {
+    var mail;
+    beforeEach(function() {
+      mail = new Email({
+        to: setup.single_to,
+        from: setup.from,
+        text: 'test of smtp files'
+      });
-    sendgrid.smtp(mail, function(success, message) {
-      expect(success).to.be.true;
-      done();
+    it('should be able to send files via path', function(done) {
+      var file = {
+        filename: 'logo.png',
+        path: __dirname + '/../assets/logo.png'
+      };
+
+      mail.subject = '(Smtp-path) File attachments';
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via url', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+
+      mail.subject = '(Smtp-url) File attachments';
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via content', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      };
+
+      mail.subject = '(Smtp-content) File attachments';
+      mail.addFile(file);
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send multiple files via content', function(done) {
+      mail.subject = '(Smtp-content) File attachments';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      mail.addFile({
+        filename: 'hello_snowman2.txt',
+        content: new Buffer(""Hello ☃, I hope you melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should respond with an error when no content is given', function(done) {
+      mail.subject = '(Smtp-content) File attachments (failure expected)';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.false;
+        expect(message).to.equal('File was not included');
+        done();
+      });
+    });
+
+    it('should respond with an error when no content is given, even if other files are successful', function(done) {
+      mail.subject = '(Smtp-content) File attachments (failure expected)';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        contentType: 'text/plain'
+      });
+      mail.addFile({
+        filename: 'hello_snowman2.txt',
+        content: new Buffer(""Hello ☃, I hope you melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.false;
+        expect(message).to.equal('File was not included');
+        done();
+      });","-var Email = require('../../lib/Email');
+var Email = require('../../lib/email');
-  it('should be able to send files via web', function(done) {
-    var mail = new Email({
-      to: setup.single_to,
-      from: setup.from,
-      subject: '(Web) File attachments',
-      text: 'test of files',
-      files: {
-        'Logo.png': __dirname + '/../assets/logo.png',
-        'Secret.txt': __dirname + '/../assets/secret.txt'
-      }
+  describe('web', function() {
+    var mail;
+    beforeEach(function() {
+      mail = new Email({
+        to: setup.single_to,
+        from: setup.from,
+        text: 'test of web files'
+      });
-    sendgrid.send(mail, function(success, message) {
-      expect(success).to.be.true;
-      done();
+    it('should be able to send files via path', function(done) {
+      var file = {
+        filename: 'logo.png',
+        path: __dirname + '/../assets/logo.png'
+      };
+
+      mail.subject = '(Web-path) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via url', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+
+      mail.subject = '(Web-url) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via content', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      };
+
+      mail.subject = '(Web-content) File attachments';
+      mail.addFile(file);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
-  it('should be able to send files via Smtp', function(done) {
-    var mail = new Email({
-      to: setup.single_to,
-      from: setup.from,
-      subject: '(Smtp) File attachments',
-      text: 'test of files',
-      files: {
-        'Logo.png': __dirname + '/../assets/logo.png',
-        'Secret.txt': __dirname + '/../assets/secret.txt'
-      }
+  describe('smtp', function() {
+    var mail;
+    beforeEach(function() {
+      mail = new Email({
+        to: setup.single_to,
+        from: setup.from,
+        text: 'test of smtp files'
+      });
-    sendgrid.smtp(mail, function(success, message) {
-      expect(success).to.be.true;
-      done();
+    it('should be able to send files via path', function(done) {
+      var file = {
+        filename: 'logo.png',
+        path: __dirname + '/../assets/logo.png'
+      };
+
+      mail.subject = '(Smtp-path) File attachments';
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via url', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+
+      mail.subject = '(Smtp-url) File attachments';
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send files via content', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      };
+
+      mail.subject = '(Smtp-content) File attachments';
+      mail.addFile(file);
+      mail.addFile(file);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send multiple files via content', function(done) {
+      mail.subject = '(Smtp-content) File attachments';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      mail.addFile({
+        filename: 'hello_snowman2.txt',
+        content: new Buffer(""Hello ☃, I hope you melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should respond with an error when no content is given', function(done) {
+      mail.subject = '(Smtp-content) File attachments (failure expected)';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.false;
+        expect(message).to.equal('File was not included');
+        done();
+      });
+    });
+
+    it('should respond with an error when no content is given, even if other files are successful', function(done) {
+      mail.subject = '(Smtp-content) File attachments (failure expected)';
+      mail.addFile({
+        filename: 'hello_snowman.txt',
+        contentType: 'text/plain'
+      });
+      mail.addFile({
+        filename: 'hello_snowman2.txt',
+        content: new Buffer(""Hello ☃, I hope you melt"", 'utf-8'),
+        contentType: 'text/plain'
+      });
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.false;
+        expect(message).to.equal('File was not included');
+        done();
+      });"
sendgrid_sendgrid-nodejs,55bfad05a56a6ba13d1248a02be6231a23624a1f,Merge pull request #26 from partkyle/file-handler  File handler rewrite,test/lib/email.test.js,,"-var querystring = require('querystring')
+var querystring = require('querystring');
+var fs = require('fs');
-  it('should support file attachments', function() {
-    var email = new Email();
-    email.addFile('file1', files[0]);
-    expect(email.files).to.eql({'file1': files[0]});
-    email.addFile('file2', files[1]);
-    expect(email.files).to.eql({'file1': files[0], 'file2': files[1]});
+  describe('files', function() {
+    it('should support adding attachments via path', function() {
+      var email = new Email();
+      email.addFile({filename: 'path-image.png', path: files[0]});
+      expect(email.files[0].filename).to.equal('path-image.png');
+      expect(email.files[0].contentType).to.equal('image/png');
+    });
+
+    it('should support attachments via url', function() {
+      var email = new Email();
+      email.addFile({filename: 'url-image.jpg', url: 'http://i.imgur.com/2fDh8.jpg'});
+      expect(email.files[0].filename).to.equal('url-image.jpg');
+      expect(email.files[0].contentType).to.equal('image/jpeg');
+    });
+
+    it('should support attachments via content', function() {
+      var email = new Email();
+      fs.readFile(files[0], function(err, data) {
+        expect(err).to.not.be.ok;
+        email.addFile({filename: 'content-image.png', content: data, contentType: 'image/png'});
+        expect(email.files[0].filename).to.equal('content-image.png');
+        expect(email.files[0].contentType).to.equal('image/png');
+      });
+    });
+
+  describe('file handling the constructor', function() {
+    it('should be able to add content files easily', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8')
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.eql(file.content);
+        done();
+      });
+    });
+
+    it('should be able to add url files easily', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      expect(email.files[0].filename).to.equal(file.filename);
+      expect(email.files[0].content).to.eql(file.content);
+      expect(email.files[0].contentType).to.equal('image/jpeg');
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.not.be.undefined;
+        done();
+      });
+    });
+
+    it('should be able to add path files easily', function(done) {
+      var file = {
+        path: __dirname + '/../assets/secret.txt'
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.not.be.undefined;
+        done();
+      });
+    });
+  });","-var querystring = require('querystring')
+var querystring = require('querystring');
+var fs = require('fs');
-  it('should support file attachments', function() {
-    var email = new Email();
-    email.addFile('file1', files[0]);
-    expect(email.files).to.eql({'file1': files[0]});
-    email.addFile('file2', files[1]);
-    expect(email.files).to.eql({'file1': files[0], 'file2': files[1]});
+  describe('files', function() {
+    it('should support adding attachments via path', function() {
+      var email = new Email();
+      email.addFile({filename: 'path-image.png', path: files[0]});
+      expect(email.files[0].filename).to.equal('path-image.png');
+      expect(email.files[0].contentType).to.equal('image/png');
+    });
+
+    it('should support attachments via url', function() {
+      var email = new Email();
+      email.addFile({filename: 'url-image.jpg', url: 'http://i.imgur.com/2fDh8.jpg'});
+      expect(email.files[0].filename).to.equal('url-image.jpg');
+      expect(email.files[0].contentType).to.equal('image/jpeg');
+    });
+
+    it('should support attachments via content', function() {
+      var email = new Email();
+      fs.readFile(files[0], function(err, data) {
+        expect(err).to.not.be.ok;
+        email.addFile({filename: 'content-image.png', content: data, contentType: 'image/png'});
+        expect(email.files[0].filename).to.equal('content-image.png');
+        expect(email.files[0].contentType).to.equal('image/png');
+      });
+    });
+
+  describe('file handling the constructor', function() {
+    it('should be able to add content files easily', function(done) {
+      var file = {
+        filename: 'hello_snowman.txt',
+        content: new Buffer(""Hello ☃, I hope you don't melt"", 'utf-8')
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.eql(file.content);
+        done();
+      });
+    });
+
+    it('should be able to add url files easily', function(done) {
+      var file = {
+        filename: 'icon.jpg',
+        url: 'http://i.imgur.com/2fDh8.jpg'
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      expect(email.files[0].filename).to.equal(file.filename);
+      expect(email.files[0].content).to.eql(file.content);
+      expect(email.files[0].contentType).to.equal('image/jpeg');
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.not.be.undefined;
+        done();
+      });
+    });
+
+    it('should be able to add path files easily', function(done) {
+      var file = {
+        path: __dirname + '/../assets/secret.txt'
+      };
+      var email = new Email({
+        files: [
+          file
+        ]
+      });
+
+      email.files[0].loadContent(function(error, message) {
+        expect(error).to.not.be.true;
+        expect(email.files[0].content).to.not.be.undefined;
+        done();
+      });
+    });
+  });"
sendgrid_sendgrid-nodejs,7503c831e2bf9d370b728eaa88e4bc9f2f9c0036,Merge branch 'documentation' into file-handler  Conflicts: 	lib/email.js,lib/email.js,"-var step = require('step');
+var Step = require('step');
-  step(
-    function handleFiles() {
-      for(var i in self.files) {
-        self.files[i].loadContent(this.parallel());
-      }
-    },
-    function finish(err, messages) {
-      if (err) {
-        callback(false, messages);
-      } else {
-        callback(true);
-      }
+
+  function handleFiles() {
+    for(var i in self.files) {
+      self.files[i].loadContent(this.parallel());
-  );
+  };
+
+  function finish(err, messages) {
+    if (err) {
+      callback(false, messages);
+    } else {
+      callback(true);
+    }
+  };
+
+  Step(handleFiles, finish);","+/**
+ * Class to handle storing the properties relative to an email.
+ *
+ * @param {Object} params
+ *    @param {string|array}   to      The to address(es) of the email
+ *    @param {string}         from    The from address of the email
+ *    @param {SmtpapiHeaders} smtpapi The SendGrid x-smtpapi headers object
+ *    @param {string}         subject The subject of the email
+ *    @param {string}         text    The text/plain content of an email
+ *    @param {string}         html    The text/html content of an email
+ *    @param {string|array}   bcc     The bcc address(es) of the email
+ *    @param {Date}           date    The date of the email
+ *    @param {object}         headers The custom headers on an email
+ */
-/*
+/**
+/**
+ * This method sets the headers on an email, if the value passed in is an object.
+ *
+ * @param {object} val An object of custom headers
+ */
+/**
+ * This method will add a header, or multiple headers, to an email.
+ *
+ * @param {object} val An object of custom headers
+ */
+/**
+ * This method is a proxy for adding a to address to the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addTo
+ */
+/**
+ * This method is a proxy for the add sub val on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSubVal
+ */
+/**
+ * This method is a proxy for setting unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setUniqueArgs
+ */
+/**
+ * This method is a proxy for adding unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addUniqueArgs
+ */
+/**
+ * This method is a proxy for setting categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setCategory
+ */
+/**
+ * This method is a proxy for adding categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addCategory
+ */
+/**
+ * This method is a proxy for setting sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setSection
+ */
+/**
+ * This method is a proxy for adding sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSection
+ */
+/**
+ * This method is a proxy for adding a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addFilterSetting
+ */
+/**
+ * This method is a proxy for setting a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setFilterSetting
+ */
+/**
+ * This method adds a file to the email object as an attachment
+ * It uses the FileHandler object.
+ *
+ * @param {object} file_object The file object
+ *
+ * @see FileHandler
+ */
+/**
+ * This method is used to process files. It uses step.js to asychronously load the contents of each file.
+ *
+ * @param {function} callback The callback to call when the method returns
+ */
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.send
+ * using the web api
+ *
+ * @see SendGrid.send
+ */
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.smtp
+ * using the smtp api
+ *
+ * @see SendGrid.smtp
+ */
-/*
+/**
+/**
+ * This method is used to show if there are files on this email object
+ *
+ * @return boolean
+ */
+// export the object as the only object in this module","-var step = require('step');
+var Step = require('step');
+/**
+ * Class to handle storing the properties relative to an email.
+ *
+ * @param {Object} params
+ *    @param {string|array}   to      The to address(es) of the email
+ *    @param {string}         from    The from address of the email
+ *    @param {SmtpapiHeaders} smtpapi The SendGrid x-smtpapi headers object
+ *    @param {string}         subject The subject of the email
+ *    @param {string}         text    The text/plain content of an email
+ *    @param {string}         html    The text/html content of an email
+ *    @param {string|array}   bcc     The bcc address(es) of the email
+ *    @param {Date}           date    The date of the email
+ *    @param {object}         headers The custom headers on an email
+ */
-/*
+/**
+/**
+ * This method sets the headers on an email, if the value passed in is an object.
+ *
+ * @param {object} val An object of custom headers
+ */
+/**
+ * This method will add a header, or multiple headers, to an email.
+ *
+ * @param {object} val An object of custom headers
+ */
+/**
+ * This method is a proxy for adding a to address to the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addTo
+ */
+/**
+ * This method is a proxy for the add sub val on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSubVal
+ */
+/**
+ * This method is a proxy for setting unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setUniqueArgs
+ */
+/**
+ * This method is a proxy for adding unique args on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addUniqueArgs
+ */
+/**
+ * This method is a proxy for setting categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setCategory
+ */
+/**
+ * This method is a proxy for adding categories on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addCategory
+ */
+/**
+ * This method is a proxy for setting sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setSection
+ */
+/**
+ * This method is a proxy for adding sections on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addSection
+ */
+/**
+ * This method is a proxy for adding a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.addFilterSetting
+ */
+/**
+ * This method is a proxy for setting a filter setting on the SmtpapiHeaders
+ *
+ * @see SmtpapiHeaders.setFilterSetting
+ */
+/**
+ * This method adds a file to the email object as an attachment
+ * It uses the FileHandler object.
+ *
+ * @param {object} file_object The file object
+ *
+ * @see FileHandler
+ */
+/**
+ * This method is used to process files. It uses step.js to asychronously load the contents of each file.
+ *
+ * @param {function} callback The callback to call when the method returns
+ */
-  step(
-    function handleFiles() {
-      for(var i in self.files) {
-        self.files[i].loadContent(this.parallel());
-      }
-    },
-    function finish(err, messages) {
-      if (err) {
-        callback(false, messages);
-      } else {
-        callback(true);
-      }
+
+  function handleFiles() {
+    for(var i in self.files) {
+      self.files[i].loadContent(this.parallel());
-  );
-};
-
+  };
+
+  function finish(err, messages) {
+    if (err) {
+      callback(false, messages);
+    } else {
+      callback(true);
+    }
+  };
+
+  Step(handleFiles, finish);
+};
+
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.send
+ * using the web api
+ *
+ * @see SendGrid.send
+ */
+/**
+ * This method returns the email object is a format to be consumed by the SendGrid.smtp
+ * using the smtp api
+ *
+ * @see SendGrid.smtp
+ */
-/*
+/**
+/**
+ * This method is used to show if there are files on this email object
+ *
+ * @return boolean
+ */
+// export the object as the only object in this module"
sendgrid_sendgrid-nodejs,0c376653324b80b90e6b0be337d7783165e42af6,Merge remote-tracking branch 'mine/file-handler' into file-handler,test/integration/attachments.test.js,-,"-var Email = require('../../lib/Email');
+var Email = require('../../lib/email');","-var Email = require('../../lib/Email');
+var Email = require('../../lib/email');
-"
sendgrid_sendgrid-nodejs,a3d99eab02f34f48697e0a2a2c387365680d9a09,Merge branch 'master' into file-handler,package.json,"-    ""mime"": ""*""
+    ""mime"": ""*"",
+    ""step"": "">= 0.0.5""","-  ""name"": ""sendgrid-nodejs"",
+  ""name"": ""sendgrid"",
-  ""version"": ""0.1.0-1"",
+  ""version"": ""0.1.0-2"",","-  ""name"": ""sendgrid-nodejs"",
+  ""name"": ""sendgrid"",
-  ""version"": ""0.1.0-1"",
+  ""version"": ""0.1.0-2"",
-    ""mime"": ""*""
+    ""mime"": ""*"",
+    ""step"": "">= 0.0.5"""
sendgrid_sendgrid-nodejs,61ee7cb5dbd69467855f5625d8187bae02004507,Merge remote-tracking branch 'upstream/master'  Conflicts: 	package.json,package.json,"-  ""contributors"": [""Kyle Partridge <kyle.partridge@sendgrid.com>"",
-                  ""David Tomberlin <david.tomberlin@sendgrid.com>""],
+  ""contributors"": [
+    ""Kyle Partridge <kyle.partridge@sendgrid.com>"",
+    ""David Tomberlin <david.tomberlin@sendgrid.com>""
+  ],
-  ""version"": ""0.1.0-1"",
+  ""version"": ""0.1.0-2"",
-    ""url"": ""https://github.com/sendgrid/sendgrid-nodejs""
+    ""url"": ""git://github.com/sendgrid/sendgrid-nodejs.git""","-  ""name"": ""sendgrid-nodejs"",
+  ""name"": ""sendgrid"",
-  ""version"": ""0.1.0-1"",
+  ""version"": ""0.1.0-2"",","-  ""name"": ""sendgrid-nodejs"",
+  ""name"": ""sendgrid"",
-  ""version"": ""0.1.0-1"",
+  ""version"": ""0.1.0-2"","
sendgrid_sendgrid-nodejs,a799d4a4971cd222a1f46e14008fe53dd9bb2814,Merge pull request #25 from siyegen/enhance-test.setup-usage  Enhance test.setup usage,test/integration/attachments.test.js,,"-
-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      to: single_to,
-      from: t_from,
+      to: setup.single_to,
+      from: setup.from,
-      to: single_to,
-      from: t_from,
+      to: setup.single_to,
+      from: setup.from,","-
-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      to: single_to,
-      from: t_from,
+      to: setup.single_to,
+      from: setup.from,
-      to: single_to,
-      from: t_from,
+      to: setup.single_to,
+      from: setup.from,"
sendgrid_sendgrid-nodejs,a799d4a4971cd222a1f46e14008fe53dd9bb2814,Merge pull request #25 from siyegen/enhance-test.setup-usage  Enhance test.setup usage,test/integration/custom_headers.test.js,,"-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-
-  var sendgrid; 
+  var sendgrid;
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-        to: single_to,
-        from: t_from,
+        to: setup.single_to,
+        from: setup.from,
-        to: single_to,
-        from: t_from,
+        to: setup.single_to,
+        from: setup.from,","-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-
-  var sendgrid; 
+  var sendgrid;
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-        to: single_to,
-        from: t_from,
+        to: setup.single_to,
+        from: setup.from,
-        to: single_to,
-        from: t_from,
+        to: setup.single_to,
+        from: setup.from,"
sendgrid_sendgrid-nodejs,a799d4a4971cd222a1f46e14008fe53dd9bb2814,Merge pull request #25 from siyegen/enhance-test.setup-usage  Enhance test.setup usage,test/integration/filters/unsubscribe.test.js,,"-
-var test = require('../../test.setup');
-    sendgrid = new SendGrid(test.user, test.pass);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      to: test.single_to,
-      from: test.from,
+      to: setup.single_to,
+      from: setup.from,","-
-var test = require('../../test.setup');
-    sendgrid = new SendGrid(test.user, test.pass);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      to: test.single_to,
-      from: test.from,
+      to: setup.single_to,
+      from: setup.from,"
sendgrid_sendgrid-nodejs,a799d4a4971cd222a1f46e14008fe53dd9bb2814,Merge pull request #25 from siyegen/enhance-test.setup-usage  Enhance test.setup usage,test/integration/sendgrid.test.js,,"-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-var multi_to = require('../test.setup').multi_to;
-
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      params.to = multi_to;
+      params.to = setup.multi_to;
-      mail.addTo(single_to);
+      mail.addTo(setup.single_to);
-      mail.addTo(multi_to);
+      mail.addTo(setup.multi_to);
-      mail.addTo(single_to);
+      mail.addTo(setup.single_to);
-      mail.addTo(multi_to);
+      mail.addTo(setup.multi_to);
-        from: t_from,
+        from: setup.from,
-      mail.addTo('kyle.partridge@sendgrid.com');
-      mail.addTo('david.tomberlin@sendgrid.com');
+      mail.addTo(setup.multi_to);","-var api_user = require('../test.setup').user;
-var api_key = require('../test.setup').pass;
-var single_to = require('../test.setup').single_to;
-var t_from = require('../test.setup').from;
-var multi_to = require('../test.setup').multi_to;
-
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-  to: single_to,
-  from: t_from,
+  to: setup.single_to,
+  from: setup.from,
-    sendgrid = new SendGrid(api_user, api_key);
+    sendgrid = new SendGrid(setup.api_user, setup.api_key);
-      params.to = multi_to;
+      params.to = setup.multi_to;
-      mail.addTo(single_to);
+      mail.addTo(setup.single_to);
-      mail.addTo(multi_to);
+      mail.addTo(setup.multi_to);
-      mail.addTo(single_to);
+      mail.addTo(setup.single_to);
-      mail.addTo(multi_to);
+      mail.addTo(setup.multi_to);
-        from: t_from,
+        from: setup.from,
-      mail.addTo('kyle.partridge@sendgrid.com');
-      mail.addTo('david.tomberlin@sendgrid.com');
+      mail.addTo(setup.multi_to);"
sendgrid_sendgrid-nodejs,a799d4a4971cd222a1f46e14008fe53dd9bb2814,Merge pull request #25 from siyegen/enhance-test.setup-usage  Enhance test.setup usage,test/test_helper.js,,+global.setup = require('./test.setup');,+global.setup = require('./test.setup');
sendgrid_sendgrid-nodejs,776c749de8e0111f3dd3e679f5b2f85d8fd21405,Merge remote-tracking branch 'upstream/master' into enhance-test.setup-usage,lib/email.js,,"-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-Email.prototype.checkAddTo = function(data) {
+/*
+ * There needs to be at least 1 to address, or else the mail won't send.
+ * This method modifies the data that will be sent via either Rest or SMTP.
+ *
+ * @param  {object}  data  The data parameter to send via Rest or SMTP
+ */
+Email.prototype.updateMissingTo = function(data) {","-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-Email.prototype.checkAddTo = function(data) {
+/*
+ * There needs to be at least 1 to address, or else the mail won't send.
+ * This method modifies the data that will be sent via either Rest or SMTP.
+ *
+ * @param  {object}  data  The data parameter to send via Rest or SMTP
+ */
+Email.prototype.updateMissingTo = function(data) {"
sendgrid_sendgrid-nodejs,e1c8bcdd2d0b4927f7a874402baf86ddb468d32b,Merge pull request #24 from siyegen/mult-to-smtp-fix  Fixed pulling data.to from data.from in case of smtpapi,lib/email.js,,"-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-Email.prototype.checkAddTo = function(data) {
+/*
+ * There needs to be at least 1 to address, or else the mail won't send.
+ * This method modifies the data that will be sent via either Rest or SMTP.
+ *
+ * @param  {object}  data  The data parameter to send via Rest or SMTP
+ */
+Email.prototype.updateMissingTo = function(data) {
-    data.to = data.from;
+    data.to = this.from;","-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-  // there needs to be at least 1 to address.
-  // If it is missing, just copy over the from.
-  // Only do this is we have a value for the to
-  // address on this.smtpapi
-  this.checkAddTo(data);
+  this.updateMissingTo(data);
-Email.prototype.checkAddTo = function(data) {
+/*
+ * There needs to be at least 1 to address, or else the mail won't send.
+ * This method modifies the data that will be sent via either Rest or SMTP.
+ *
+ * @param  {object}  data  The data parameter to send via Rest or SMTP
+ */
+Email.prototype.updateMissingTo = function(data) {
-    data.to = data.from;
+    data.to = this.from;"
sendgrid_sendgrid-nodejs,e692ffd605f498125ffff4ea07968b14936f3159,Merge pull request #22 from partkyle/test-unsubscribe  Test unsubscribe filter,package.json,,"-  ""contributors"": ['Kyle Partridge <kyle.partridge@sendgrid.com>',
-                  'David Tomberlin <david.tomberlin@sendgrid.com>'],
+  ""contributors"": [""Kyle Partridge <kyle.partridge@sendgrid.com>"",
+                  ""David Tomberlin <david.tomberlin@sendgrid.com>""],","-  ""contributors"": ['Kyle Partridge <kyle.partridge@sendgrid.com>',
-                  'David Tomberlin <david.tomberlin@sendgrid.com>'],
+  ""contributors"": [""Kyle Partridge <kyle.partridge@sendgrid.com>"",
+                  ""David Tomberlin <david.tomberlin@sendgrid.com>""],"
sendgrid_sendgrid-nodejs,5265945b7e7be771a551db200fb39b3302339c84,Merge pull request #21 from siyegen/fix-to-address-on-format  fixed issue for web and smtp format,lib/email.js,,"-  if (_.isEmpty(data.to)) {
-    data.to = data.from;
-  }
+  // Only do this is we have a value for the to
+  // address on this.smtpapi
+  this.checkAddTo(data);
-  // If it is missing, just copy the sender.
-  if (_.isEmpty(data.to)) {
-    data.to = data.sender;
-  }
+  // If it is missing, just copy over the from.
+  // Only do this is we have a value for the to
+  // address on this.smtpapi
+  this.checkAddTo(data);
+}
+
+Email.prototype.checkAddTo = function(data) {
+  if (_.isEmpty(data.to) && this.smtpapi.to && !_.isEmpty(this.smtpapi.to)) {
+    data.to = data.from;
+  }","-  if (_.isEmpty(data.to)) {
-    data.to = data.from;
-  }
+  // Only do this is we have a value for the to
+  // address on this.smtpapi
+  this.checkAddTo(data);
-  // If it is missing, just copy the sender.
-  if (_.isEmpty(data.to)) {
-    data.to = data.sender;
-  }
+  // If it is missing, just copy over the from.
+  // Only do this is we have a value for the to
+  // address on this.smtpapi
+  this.checkAddTo(data);
+}
+
+Email.prototype.checkAddTo = function(data) {
+  if (_.isEmpty(data.to) && this.smtpapi.to && !_.isEmpty(this.smtpapi.to)) {
+    data.to = data.from;
+  }"
sendgrid_sendgrid-nodejs,5265945b7e7be771a551db200fb39b3302339c84,Merge pull request #21 from siyegen/fix-to-address-on-format  fixed issue for web and smtp format,test/lib/email.test.js,,"+  });
+
+  it('should not have a to address if there is no to or no smtpapi.to set via Smtp Api', function() {
+    var email = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
+    var smtpFormat = email.toSmtpFormat();
+    expect(smtpFormat.to).to.be.empty;","+  });
+
+  it('should not have a to address if there is no to or no smtpapi.to set via Smtp Api', function() {
+    var email = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
+    var smtpFormat = email.toSmtpFormat();
+    expect(smtpFormat.to).to.be.empty;"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,package.json,,"-    ""should"": "">= 0.4.2""
+    ""chai"": "">= 0.1.6""","-    ""should"": "">= 0.4.2""
+    ""chai"": "">= 0.1.6"""
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/integration/attachments.test.js,,"-var api_user = 'kylep';
-var api_key = 'testing';
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
-      to: 'kyle.partridge@sendgrid.com',
-      from: 'david.tomberlin@sendgrid.com',
+      to: single_to,
+      from: t_from,
-      if (!success) assert.ok(false, message);
+      expect(success).to.be.true;
-      to: 'kyle.partridge@sendgrid.com',
-      from: 'david.tomberlin@sendgrid.com',
+      to: single_to,
+      from: t_from,
-      if (!success) assert.ok(false, message);
+      expect(success).to.be.true;","-var api_user = 'kylep';
-var api_key = 'testing';
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
-      to: 'kyle.partridge@sendgrid.com',
-      from: 'david.tomberlin@sendgrid.com',
+      to: single_to,
+      from: t_from,
-      if (!success) assert.ok(false, message);
+      expect(success).to.be.true;
-      to: 'kyle.partridge@sendgrid.com',
-      from: 'david.tomberlin@sendgrid.com',
+      to: single_to,
+      from: t_from,
-      if (!success) assert.ok(false, message);
+      expect(success).to.be.true;"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/integration/custom_headers.test.js,,"-var api_user = 'kylep';
-var api_key = 'testing';
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
-        to: 'kyle.partridge@sendgrid.com',
-        from: 'david.tomberlin@sendgrid.com',
+        to: single_to,
+        from: t_from,
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-        if (!success) assert.ok(false, message);
+        expect(success).to.be.true;
-        to: 'kyle.partridge@sendgrid.com',
-        from: 'david.tomberlin@sendgrid.com',
+        to: single_to,
+        from: t_from,
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-        if (!success) assert.ok(false, message);
+        expect(success).to.be.true;","-var api_user = 'kylep';
-var api_key = 'testing';
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
-        to: 'kyle.partridge@sendgrid.com',
-        from: 'david.tomberlin@sendgrid.com',
+        to: single_to,
+        from: t_from,
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-        if (!success) assert.ok(false, message);
+        expect(success).to.be.true;
-        to: 'kyle.partridge@sendgrid.com',
-        from: 'david.tomberlin@sendgrid.com',
+        to: single_to,
+        from: t_from,
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-        if (!success) assert.ok(false, message);
+        expect(success).to.be.true;"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/lib/email.test.js,,"-      text_params[key].should.eql(mail[key]);
+      expect(text_params[key]).to.eql(mail[key]);
-    webFormat.to.should.equal(text_params.to);
-    webFormat.from.should.equal(text_params.from);
-    webFormat.subject.should.equal(text_params.subject);
-    webFormat.text.should.equal(text_params.text);
+    expect(webFormat.to).to.equal(text_params.to);
+    expect(webFormat.from).to.equal(text_params.from);
+    expect(webFormat.subject).to.equal(text_params.subject);
+    expect(webFormat.text).to.equal(text_params.text);
+  });
+
+  it('should not have a to address if there is no to or no smtpapi.to set via Web Api', function() {
+    var email = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
+    var webFormat = email.toWebFormat();
+    expect(webFormat.to).to.be.empty;
-    smtpFormat.to.should.equal(text_params.to);
-    smtpFormat.sender.should.equal(text_params.from);
-    smtpFormat.subject.should.equal(text_params.subject);
-    smtpFormat.body.should.equal(text_params.text);
+    expect(smtpFormat.to).to.equal(text_params.to);
+    expect(smtpFormat.sender).to.equal(text_params.from);
+    expect(smtpFormat.subject).to.equal(text_params.subject);
+    expect(smtpFormat.body).to.equal(text_params.text);
-    email.files.should.eql({'file1': files[0]});
+    expect(email.files).to.eql({'file1': files[0]});
-    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+    expect(email.files).to.eql({'file1': files[0], 'file2': files[1]});
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.fox.should.eql('hound');
+      expect(mail.headers.fox).to.eql('hound');
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.should.not.eql(custom_headers);
-      mail.headers.cow.should.eql('in my mind');
+      expect(mail.headers).not.to.eql(custom_headers);
+      expect(mail.headers.cow).to.eql('in my mind');","-      text_params[key].should.eql(mail[key]);
+      expect(text_params[key]).to.eql(mail[key]);
-    webFormat.to.should.equal(text_params.to);
-    webFormat.from.should.equal(text_params.from);
-    webFormat.subject.should.equal(text_params.subject);
-    webFormat.text.should.equal(text_params.text);
+    expect(webFormat.to).to.equal(text_params.to);
+    expect(webFormat.from).to.equal(text_params.from);
+    expect(webFormat.subject).to.equal(text_params.subject);
+    expect(webFormat.text).to.equal(text_params.text);
+  });
+
+  it('should not have a to address if there is no to or no smtpapi.to set via Web Api', function() {
+    var email = new Email({from: 'test@test.com', subject: 'testing', text: 'testing'});
+    var webFormat = email.toWebFormat();
+    expect(webFormat.to).to.be.empty;
-    smtpFormat.to.should.equal(text_params.to);
-    smtpFormat.sender.should.equal(text_params.from);
-    smtpFormat.subject.should.equal(text_params.subject);
-    smtpFormat.body.should.equal(text_params.text);
+    expect(smtpFormat.to).to.equal(text_params.to);
+    expect(smtpFormat.sender).to.equal(text_params.from);
+    expect(smtpFormat.subject).to.equal(text_params.subject);
+    expect(smtpFormat.body).to.equal(text_params.text);
-    email.files.should.eql({'file1': files[0]});
+    expect(email.files).to.eql({'file1': files[0]});
-    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+    expect(email.files).to.eql({'file1': files[0], 'file2': files[1]});
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.fox.should.eql('hound');
+      expect(mail.headers.fox).to.eql('hound');
-      mail.headers.should.eql(custom_headers);
+      expect(mail.headers).to.eql(custom_headers);
-      mail.headers.should.not.eql(custom_headers);
-      mail.headers.cow.should.eql('in my mind');
+      expect(mail.headers).not.to.eql(custom_headers);
+      expect(mail.headers.cow).to.eql('in my mind');"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/integration/sendgrid.test.js,,"+var SendGrid = require('../../lib/sendgrid');
+var Email = require('../../lib/email');
+
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
+var multi_to = require('../test.setup').multi_to;
+
+var text_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Subject',
+  text: 'This is an email.'
+};
+
+var html_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Subject',
+  html: '<b>This is an email.</b>'
+};
+
+var smtp_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Smtp Email',
+  text: 'This is an email.'
+};
+
+var unicode_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Unicode Email!',
+  text: 'I can haz unicode? ✔'
+};
+
+describe('SendGrid', function () {
+  var sendgrid;
+  beforeEach(function() {
+    sendgrid = new SendGrid(api_user, api_key);
+  });
+
+  describe('Web Api', function() {
+    it('should be able to send text messages', function(done) {
+      var mail = new Email(text_params);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send html messages', function(done) {
+      var mail = new Email(html_params);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should allow a user to easily send email', function(done) {
+      sendgrid.send(text_params, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = multi_to;
+      sendgrid.send(params, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(single_to);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(multi_to);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.false;
+        done();
+      });
+    });
+  });
+
+  describe('Smtp Api', function() {
+    it('should send an email', function(done) {
+      var mail = new Email(smtp_params);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should allow unicode in emails', function(done) {
+      var mail = new Email(unicode_params);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(single_to);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(multi_to);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.smtp(mail, function(success, message) {
+        if (success) assert.ok(false, 'An error should have been reported');
+        done();
+      });
+    });
+  });
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: t_from,
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+  })
+});","+var SendGrid = require('../../lib/sendgrid');
+var Email = require('../../lib/email');
+
+var api_user = require('../test.setup').user;
+var api_key = require('../test.setup').pass;
+var single_to = require('../test.setup').single_to;
+var t_from = require('../test.setup').from;
+var multi_to = require('../test.setup').multi_to;
+
+var text_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Subject',
+  text: 'This is an email.'
+};
+
+var html_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Subject',
+  html: '<b>This is an email.</b>'
+};
+
+var smtp_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Smtp Email',
+  text: 'This is an email.'
+};
+
+var unicode_params = {
+  to: single_to,
+  from: t_from,
+  subject: 'Unicode Email!',
+  text: 'I can haz unicode? ✔'
+};
+
+describe('SendGrid', function () {
+  var sendgrid;
+  beforeEach(function() {
+    sendgrid = new SendGrid(api_user, api_key);
+  });
+
+  describe('Web Api', function() {
+    it('should be able to send text messages', function(done) {
+      var mail = new Email(text_params);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send html messages', function(done) {
+      var mail = new Email(html_params);
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should allow a user to easily send email', function(done) {
+      sendgrid.send(text_params, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = multi_to;
+      sendgrid.send(params, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(single_to);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(multi_to);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.false;
+        done();
+      });
+    });
+  });
+
+  describe('Smtp Api', function() {
+    it('should send an email', function(done) {
+      var mail = new Email(smtp_params);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should allow unicode in emails', function(done) {
+      var mail = new Email(unicode_params);
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(single_to);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(multi_to);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.smtp(mail, function(success, message) {
+        if (success) assert.ok(false, 'An error should have been reported');
+        done();
+      });
+    });
+  });
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: t_from,
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        expect(success).to.be.true;
+        done();
+      });
+    });
+  })
+});"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/lib/smtpapi_header.test.js,,"-    header.to.should.eql(['kyle.partridge@sendgrid.com']);
+    expect(header.to).to.eql(['kyle.partridge@sendgrid.com']);
-    header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+    expect(header.to).to.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.secret_test.should.eql('rawr');
+      expect(header.unique_args.secret_test).to.eql('rawr');
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.should.not.eql(unique_args);
-      header.unique_args.apple.should.eql('pie');
+      expect(header.unique_args).not.to.eql(unique_args);
+      expect(header.unique_args.apple).to.eql('pie');
-      header.category.should.equal(categories[0]);
+      expect(header.category).to.equal(categories[0]);
-      header.category.should.eql(categories);
+      expect(header.category).to.eql(categories);
-      header.category.should.eql(categories);
+      expect(header.category).to.eql(categories);
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.not.eql(section_args);
-      header.section.cow.should.eql('moo');
+      expect(header.section).not.to.eql(section_args);
+      expect(header.section.cow).to.eql('moo');
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.not.eql(section_args);
-      header.section['-sectionName1-'].should.eql('cows are nice');
+      expect(header.section).to.not.eql(section_args);
+      expect(header.section['-sectionName1-']).to.eql('cows are nice');
-      header.filters.should.eql({
+      expect(header.filters).to.eql({
-      header.filters.should.eql(filters);
+      expect(header.filters).to.eql(filters);
-      parse.to.should.eql(header.to);
-      parse.unique_args.should.eql(header.unique_args);
-      parse.filters.should.eql(header.filters);
+      expect(parse.to).to.eql(header.to);
+      expect(parse.unique_args).to.eql(header.unique_args);
+      expect(parse.filters).to.eql(header.filters);
-      assert(_.isUndefined(JSON.parse(json).to), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).to)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).sub), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).sub)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).unique_args), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).unique_args)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).category), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).category)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).filters), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).filters)).to.be.true;
-      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-      header.unique_args.should.eql({foo: 'bar'});
-      header.filters.should.eql({
+      expect(header.to).to.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      expect(header.unique_args).to.eql({foo: 'bar'});
+      expect(header.filters).to.eql({","-    header.to.should.eql(['kyle.partridge@sendgrid.com']);
+    expect(header.to).to.eql(['kyle.partridge@sendgrid.com']);
-    header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+    expect(header.to).to.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.secret_test.should.eql('rawr');
+      expect(header.unique_args.secret_test).to.eql('rawr');
-      header.unique_args.should.eql(unique_args);
+      expect(header.unique_args).to.eql(unique_args);
-      header.unique_args.should.not.eql(unique_args);
-      header.unique_args.apple.should.eql('pie');
+      expect(header.unique_args).not.to.eql(unique_args);
+      expect(header.unique_args.apple).to.eql('pie');
-      header.category.should.equal(categories[0]);
+      expect(header.category).to.equal(categories[0]);
-      header.category.should.eql(categories);
+      expect(header.category).to.eql(categories);
-      header.category.should.eql(categories);
+      expect(header.category).to.eql(categories);
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.not.eql(section_args);
-      header.section.cow.should.eql('moo');
+      expect(header.section).not.to.eql(section_args);
+      expect(header.section.cow).to.eql('moo');
-      header.section.should.eql(section_args);
+      expect(header.section).to.eql(section_args);
-      header.section.should.not.eql(section_args);
-      header.section['-sectionName1-'].should.eql('cows are nice');
+      expect(header.section).to.not.eql(section_args);
+      expect(header.section['-sectionName1-']).to.eql('cows are nice');
-      header.filters.should.eql({
+      expect(header.filters).to.eql({
-      header.filters.should.eql(filters);
+      expect(header.filters).to.eql(filters);
-      parse.to.should.eql(header.to);
-      parse.unique_args.should.eql(header.unique_args);
-      parse.filters.should.eql(header.filters);
+      expect(parse.to).to.eql(header.to);
+      expect(parse.unique_args).to.eql(header.unique_args);
+      expect(parse.filters).to.eql(header.filters);
-      assert(_.isUndefined(JSON.parse(json).to), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).to)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).sub), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).sub)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).unique_args), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).unique_args)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).category), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).category)).to.be.true;
-      assert(_.isUndefined(JSON.parse(json).filters), 'should be empty');
+      expect(_.isUndefined(JSON.parse(json).filters)).to.be.true;
-      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-      header.unique_args.should.eql({foo: 'bar'});
-      header.filters.should.eql({
+      expect(header.to).to.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      expect(header.unique_args).to.eql({foo: 'bar'});
+      expect(header.filters).to.eql({"
sendgrid_sendgrid-nodejs,349b16aa0855181ac184387ff1accda1ac989545,Merge pull request #20 from siyegen/convert-to-chai  Converted test to chai and moved test info into separate file,test/test_helper.js,,"-global.should = require('should');
-global.assert = require('assert');
+global.expect = require('chai').expect;","-global.should = require('should');
-global.assert = require('assert');
+global.expect = require('chai').expect;"
sendgrid_sendgrid-nodejs,fdaa032294789e61d827df3e69e0670d09253c4a,Merge pull request #18 from partkyle/master  Updated package.json,package.json,,"-  ""version"": ""0.0.0-1"",
+  ""version"": ""0.0.1"",
-    ""test"": ""jasmine-node spec""
+    ""test"": ""make test""","-  ""version"": ""0.0.0-1"",
+  ""version"": ""0.0.1"",
-    ""test"": ""jasmine-node spec""
+    ""test"": ""make test"""
sendgrid_sendgrid-nodejs,3e24aa7196232c49dd5de04c6e796ad5978c64e8,Merge remote-tracking branch 'upstream/master',lib/email.js,,"-
-function EmailHeaders() {
-
-}
-    headers: new EmailHeaders()
+    headers: {}
-  return false;
+  //TODO: add validation
+}
+
+Email.prototype.setHeaders = function(val) {
+  if (_.isObject(val)) {
+    this.headers = val;
+  }
+}
+
+Email.prototype.addHeaders = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.headers, val);
+  }
-    replyto: this.replyto
+    replyto: this.replyto,
+    headers: JSON.stringify(this.headers)
-    headers: {
-      ""x-smtpapi"": this.smtpapi.toJson()
-    }
+    headers: this.headers
+  data.headers['x-smtpapi'] = this.smtpapi.toJson();","-
-function EmailHeaders() {
-
-}
-    headers: new EmailHeaders()
+    headers: {}
-  return false;
+  //TODO: add validation
+}
+
+Email.prototype.setHeaders = function(val) {
+  if (_.isObject(val)) {
+    this.headers = val;
+  }
+}
+
+Email.prototype.addHeaders = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.headers, val);
+  }
-    replyto: this.replyto
+    replyto: this.replyto,
+    headers: JSON.stringify(this.headers)
-    headers: {
-      ""x-smtpapi"": this.smtpapi.toJson()
-    }
+    headers: this.headers
+  data.headers['x-smtpapi'] = this.smtpapi.toJson();"
sendgrid_sendgrid-nodejs,3e24aa7196232c49dd5de04c6e796ad5978c64e8,Merge remote-tracking branch 'upstream/master',test/lib/email.test.js,,"-    it('should invalidate when there are no parameters', function() {
-      var mail = new Email();
+    it('should invalidate when there are no parameters');
-      mail.validate().should.be.false;
+    it('should return true when the mail is valid');
+  });
+
+  describe('custom headers', function() {
+    var mail;
+    var custom_headers = {cow: 'moo', panda: 'brawr'};
+    beforeEach(function() {
+      mail = new Email();
-    it('should return true when the mail is valid', function() {
-      var mail = new Email(text_params);
+    it('should allow setting custom headers via setHeaders', function() {
+      mail.setHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+    });
-      mail.validate().should.be.true;
+    it('should allow setting custom headers one at a time with addHeaders', function() {
+      for(var key in custom_headers) {
+        var args = {};
+        args[key] = custom_headers[key];
+        mail.addHeaders(args);
+      }
+
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({fox: 'hound'});
+      mail.headers.fox.should.eql('hound');
+
+    it('should overwrite headers when calling addHeaders with the same value', function() {
+      mail.addHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({cow: 'in my mind'});
+      mail.headers.should.not.eql(custom_headers);
+      mail.headers.cow.should.eql('in my mind');
+    });
+","-    it('should invalidate when there are no parameters', function() {
-      var mail = new Email();
+    it('should invalidate when there are no parameters');
-      mail.validate().should.be.false;
+    it('should return true when the mail is valid');
+  });
+
+  describe('custom headers', function() {
+    var mail;
+    var custom_headers = {cow: 'moo', panda: 'brawr'};
+    beforeEach(function() {
+      mail = new Email();
-    it('should return true when the mail is valid', function() {
-      var mail = new Email(text_params);
+    it('should allow setting custom headers via setHeaders', function() {
+      mail.setHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+    });
-      mail.validate().should.be.true;
+    it('should allow setting custom headers one at a time with addHeaders', function() {
+      for(var key in custom_headers) {
+        var args = {};
+        args[key] = custom_headers[key];
+        mail.addHeaders(args);
+      }
+
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({fox: 'hound'});
+      mail.headers.fox.should.eql('hound');
+
+    it('should overwrite headers when calling addHeaders with the same value', function() {
+      mail.addHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({cow: 'in my mind'});
+      mail.headers.should.not.eql(custom_headers);
+      mail.headers.cow.should.eql('in my mind');
+    });
+"
sendgrid_sendgrid-nodejs,0d61a7a1ab6afca25959e91d98200035f6592281,Merge pull request #17 from siyegen/custom-headers  Custom headers,lib/email.js,,"-
-function EmailHeaders() {
-
-}
-    headers: new EmailHeaders()
+    headers: {}
-  return false;
+  //TODO: add validation
+}
+
+Email.prototype.setHeaders = function(val) {
+  if (_.isObject(val)) {
+    this.headers = val;
+  }
+}
+
+Email.prototype.addHeaders = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.headers, val);
+  }
-    replyto: this.replyto
+    replyto: this.replyto,
+    headers: JSON.stringify(this.headers)
-    headers: {
-      ""x-smtpapi"": this.smtpapi.toJson()
-    }
+    headers: this.headers
+  data.headers['x-smtpapi'] = this.smtpapi.toJson();","-
-function EmailHeaders() {
-
-}
-    headers: new EmailHeaders()
+    headers: {}
-  return false;
+  //TODO: add validation
+}
+
+Email.prototype.setHeaders = function(val) {
+  if (_.isObject(val)) {
+    this.headers = val;
+  }
+}
+
+Email.prototype.addHeaders = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.headers, val);
+  }
-    replyto: this.replyto
+    replyto: this.replyto,
+    headers: JSON.stringify(this.headers)
-    headers: {
-      ""x-smtpapi"": this.smtpapi.toJson()
-    }
+    headers: this.headers
+  data.headers['x-smtpapi'] = this.smtpapi.toJson();"
sendgrid_sendgrid-nodejs,0d61a7a1ab6afca25959e91d98200035f6592281,Merge pull request #17 from siyegen/custom-headers  Custom headers,test/lib/email.test.js,,"-    it('should invalidate when there are no parameters', function() {
-      var mail = new Email();
+    it('should invalidate when there are no parameters');
-      mail.validate().should.be.false;
+    it('should return true when the mail is valid');
+  });
+
+  describe('custom headers', function() {
+    var mail;
+    var custom_headers = {cow: 'moo', panda: 'brawr'};
+    beforeEach(function() {
+      mail = new Email();
-    it('should return true when the mail is valid', function() {
-      var mail = new Email(text_params);
+    it('should allow setting custom headers via setHeaders', function() {
+      mail.setHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+    });
-      mail.validate().should.be.true;
+    it('should allow setting custom headers one at a time with addHeaders', function() {
+      for(var key in custom_headers) {
+        var args = {};
+        args[key] = custom_headers[key];
+        mail.addHeaders(args);
+      }
+
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({fox: 'hound'});
+      mail.headers.fox.should.eql('hound');
+
+    it('should overwrite headers when calling addHeaders with the same value', function() {
+      mail.addHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({cow: 'in my mind'});
+      mail.headers.should.not.eql(custom_headers);
+      mail.headers.cow.should.eql('in my mind');
+    });
+","-    it('should invalidate when there are no parameters', function() {
-      var mail = new Email();
+    it('should invalidate when there are no parameters');
-      mail.validate().should.be.false;
+    it('should return true when the mail is valid');
+  });
+
+  describe('custom headers', function() {
+    var mail;
+    var custom_headers = {cow: 'moo', panda: 'brawr'};
+    beforeEach(function() {
+      mail = new Email();
-    it('should return true when the mail is valid', function() {
-      var mail = new Email(text_params);
+    it('should allow setting custom headers via setHeaders', function() {
+      mail.setHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+    });
-      mail.validate().should.be.true;
+    it('should allow setting custom headers one at a time with addHeaders', function() {
+      for(var key in custom_headers) {
+        var args = {};
+        args[key] = custom_headers[key];
+        mail.addHeaders(args);
+      }
+
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({fox: 'hound'});
+      mail.headers.fox.should.eql('hound');
+
+    it('should overwrite headers when calling addHeaders with the same value', function() {
+      mail.addHeaders(custom_headers);
+      mail.headers.should.eql(custom_headers);
+      mail.addHeaders({cow: 'in my mind'});
+      mail.headers.should.not.eql(custom_headers);
+      mail.headers.cow.should.eql('in my mind');
+    });
+"
sendgrid_sendgrid-nodejs,7980b6799df0ab67206db031671d7d3e3aa60ad8,Merge remote-tracking branch 'upstream/master',lib/sendgrid.js,,"-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      method: 'POST',
+      method: 'POST'
+
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {","-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      method: 'POST',
+      method: 'POST'
+
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {"
sendgrid_sendgrid-nodejs,7980b6799df0ab67206db031671d7d3e3aa60ad8,Merge remote-tracking branch 'upstream/master',test/integration/attachments.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,7980b6799df0ab67206db031671d7d3e3aa60ad8,Merge remote-tracking branch 'upstream/master',test/lib/sendgrid.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,6759618c16e67d361ff6f1f57ab59b3152a22962,Merge remote-tracking branch 'upstream/master' into custom-headers,lib/sendgrid.js,,"-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      method: 'POST',
+      method: 'POST'
+
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {","-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      method: 'POST',
+      method: 'POST'
+
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {"
sendgrid_sendgrid-nodejs,6759618c16e67d361ff6f1f57ab59b3152a22962,Merge remote-tracking branch 'upstream/master' into custom-headers,test/integration/attachments.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,6759618c16e67d361ff6f1f57ab59b3152a22962,Merge remote-tracking branch 'upstream/master' into custom-headers,test/lib/sendgrid.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,217ed28a36b2e156b74d705fc017efe88e1696ab,Merge pull request #16 from partkyle/fix-sending  Fix Posting of non-multipart data,lib/sendgrid.js,"-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {","-      method: 'POST',
+      method: 'POST'
+
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+","-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      method: 'POST',
+      method: 'POST'
+
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);
-    for (var key in post_data) {
-      request.write(post_data[key]);
+    // If the email has files, it will be a multipart request.
+    // TODO: make this feel less dirty.
+    if (email.hasFiles()) {
+      for (var key in post_data) {
+        request.write(post_data[key]);
+      }
+    } else {
+      request.write(post_data);
+
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {"
sendgrid_sendgrid-nodejs,a3a7b743b2b6cde14498561fe1d637243f7cb75c,Merge pull request #15 from partkyle/documentation  Documentation,lib/sendgrid.js,"+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);","-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {","-var fs = require('fs');
-function SendGrid(credentials) {
-  this.api_user = credentials.api_user;
-  this.api_key = credentials.api_key;
+/*
+ * Class for handling communications with SendGrid.
+ *
+ * @param  {String}  api_user  The SendGrid username.
+ * @param  {String}  api_key   The key credentials for SendGrid.
+ */
+function SendGrid(api_user, api_key) {
+  this.api_user = api_user;
+  this.api_key = api_key;
-var boundary = Math.random();
-
-/*
- * Sends an email and returns true if the
+/*
+ * Sends an email via REST and returns true if the
- * @returns {Boolean}
-*/
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                    the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+
+  var boundary = Math.random();
-      post_data = self.getMultipartData(email);
+      post_data = self.getMultipartData(email, boundary);
+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);
+/*
+ * Sends an email via SMTP and returns true if the
+ * message was sent successfully.
+ *
+ * @param    {Email|Object}  email     An email object or a hash that has
+ *                                     the values for the email to be sent.
+ * @param    {Function}      callback  A function to call when the processing is done.
+ */
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is only used when there are no attachments on the email object.
+ *
+ * @param   {Email}  email  The email object to be sent via REST.
+ * @return  {String}        Querystring format of the email to be sent.
+ */
-SendGrid.prototype.getMultipartData = function(email) {
+/*
+ * Function for internal use.
+ *
+ * Used for returning the parameters for sending an email via REST.
+ *
+ * This method is used when there are attachments on the email object.
+ *
+ * @param   {Email}   email     The email object to be sent via REST.
+ * @param   {String}  boundary  The boundary to use between multipart sections.
+ * @return  {Array[Buffer]}     An array of buffers for each section of
+ *                              the multipart/form-data request.
+ */
+SendGrid.prototype.getMultipartData = function(email, boundary) {
-function encodeField(boundary,name,value) {
+/*
+ * Function for encoding a field as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  value     The value of the parameter.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeField(boundary, name, value) {
-function encodeFile(boundary,type,name,filename) {
+/*
+ * Function for encoding a file as a multipart/form-data request.
+ *
+ * @param   {String}  boundary  The boundary to use between requests.
+ * @param   {String}  type      The Content-Type of the file
+ * @param   {String}  name      The name of the parameter.
+ * @param   {String}  filename  The name of the file.
+ * @return  {String}            The string representing the multipart/form-data section.
+ */
+function encodeFile(boundary, type, name, filename) {"
sendgrid_sendgrid-nodejs,a3a7b743b2b6cde14498561fe1d637243f7cb75c,Merge pull request #15 from partkyle/documentation  Documentation,test/integration/attachments.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,a3a7b743b2b6cde14498561fe1d637243f7cb75c,Merge pull request #15 from partkyle/documentation  Documentation,test/lib/sendgrid.test.js,,"-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);","-var credentials = {
-  api_user: 'kylep',
-  api_key: 'testing'
-}
+var api_user = 'kylep';
+var api_key = 'testing';
-    sendgrid = new SendGrid(credentials);
+    sendgrid = new SendGrid(api_user, api_key);"
sendgrid_sendgrid-nodejs,95f6b17a4d618058137bfdc680e1d642361b528e,Merge pull request #14 from partkyle/fix-rest-chunks  Fix rest chunks,lib/sendgrid.js,,"+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);","+      var content = '';
-        var json = JSON.parse(chunk);
+        content += chunk;
+      });
+      res.on('end', function() {
+        var json = JSON.parse(content);"
sendgrid_sendgrid-nodejs,967d1766b1a3a52967e10f67c6c956b0749fc9d6,Merge remote-tracking branch 'upstream/master',lib/email.js,,"+var fs = require('fs');
-    files: [],
+    files: {},
+    file_data: {},
+Email.prototype.addFile = function(filename, filepath) {
+  this.files[filename] = filepath;
+}
+
+Email.prototype.processFiles = function(callback) {
+  var self = this;
+  var attachments_count = _.size(this.files);
+  _(this.files).each(function(v, k) {
+    fs.readFile(v, function(error, data) {
+      attachments_count--;
+      if (error) {
+        return callback(false, error);
+      } else {
+        self.file_data[k] = data;
+      }
+
+      if (attachments_count == 0) {
+        callback(true);
+      }
+    });
+  });
+}
+
-    replyto: this.replyto,
-    date: this.date,
-    files: this.files,
-    headers: this.headers
+    replyto: this.replyto
+  if (_.size(this.file_data) > 0) {
+    var attachments = [];
+    _(this.file_data).each(function(v, k) {
+      attachments.push({filename: k, contents: v});
+    });
+    data.attachments = attachments;
+  }
+
+Email.prototype.hasFiles = function() {
+  return _(this.files).size() > 0;
+}
+","+var fs = require('fs');
-    files: [],
+    files: {},
+    file_data: {},
+Email.prototype.addFile = function(filename, filepath) {
+  this.files[filename] = filepath;
+}
+
+Email.prototype.processFiles = function(callback) {
+  var self = this;
+  var attachments_count = _.size(this.files);
+  _(this.files).each(function(v, k) {
+    fs.readFile(v, function(error, data) {
+      attachments_count--;
+      if (error) {
+        return callback(false, error);
+      } else {
+        self.file_data[k] = data;
+      }
+
+      if (attachments_count == 0) {
+        callback(true);
+      }
+    });
+  });
+}
+
-    replyto: this.replyto,
-    date: this.date,
-    files: this.files,
-    headers: this.headers
+    replyto: this.replyto
+  if (_.size(this.file_data) > 0) {
+    var attachments = [];
+    _(this.file_data).each(function(v, k) {
+      attachments.push({filename: k, contents: v});
+    });
+    data.attachments = attachments;
+  }
+
+Email.prototype.hasFiles = function() {
+  return _(this.files).size() > 0;
+}
+"
sendgrid_sendgrid-nodejs,967d1766b1a3a52967e10f67c6c956b0749fc9d6,Merge remote-tracking branch 'upstream/master',lib/sendgrid.js,,"+var fs = require('fs');
+var path = require('path');
+var mime = require('mime');
+var boundary = Math.random();
+
+  var self = this;
+
-  var post_data = this.getPostData(email);
-  var options = {
-    host: 'sendgrid.com',
-    path: '/api/mail.send.json',
-    method: 'POST',
-    headers: {
-      'Content-Type': 'application/x-www-form-urlencoded',
-      'Content-Length': post_data.length
+
+  function send_rest() {
+    var post_data;
+    var options = {
+      host: 'sendgrid.com',
+      path: '/api/mail.send.json',
+      method: 'POST',
+    };
+    if (email.hasFiles()) {
+      post_data = self.getMultipartData(email);
+      var length = 0;
+      for (var buf in post_data) {
+        length += post_data[buf].length;
+      }
+      options.headers = {
+        'Content-Type': 'multipart/form-data; boundary=' + boundary,
+        'Content-Length': length
+      };
+    } else {
+      post_data = self.getPostData(email);
+      options.headers = {
+        'Content-Type': 'application/x-www-form-urlencoded',
+        'Content-Length': post_data.length
+      };
-  };
-  var request = https.request(options, function(res) {
-    res.setEncoding('utf8');
-    res.on('data', function(chunk) {
-      var json = JSON.parse(chunk);
-      callback.call(null, json.message == 'success', json.errors);
+    var request = https.request(options, function(res) {
+      res.setEncoding('utf8');
+      res.on('data', function(chunk) {
+        var json = JSON.parse(chunk);
+        callback.call(null, json.message == 'success', json.errors);
+      });
-  });
-  request.write(post_data);
-  request.end();
+    for (var key in post_data) {
+      request.write(post_data[key]);
+    }
+    request.end();
+  }
+
+  if (email.hasFiles()) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_rest();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_rest();
+  }
+  // SMTP settings
+  function send_smtp() {
+    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
+      callback.call(self, success, error);
+    });
+  }
+
-  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-    callback.call(self, success, error);
-  });
-}
+  if (_.size(email.files) > 0) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_smtp();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_smtp();
+  }
+};
-SendGrid.prototype.getPostData = function(params) {
+SendGrid.prototype.getPostData = function(email) {
-  _.extend(data, params.toWebFormat());
+
+  _.extend(data, email.toWebFormat());
+SendGrid.prototype.getMultipartData = function(email) {
+  var data = [];
+  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
+  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
+
+  _(email.toWebFormat()).each(function(v, k) {
+    data.push(new Buffer(encodeField(boundary, k, v)));
+  });
+
+  _(email.files).each(function(filepath, filename) {
+    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
+    data.push(new Buffer(email.file_data[filename]));
+    data.push(new Buffer('\r\n'));
+  });
+
+  return data;
+};
+
+function encodeField(boundary,name,value) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
+    return_part += value + ""\r\n"";
+    return return_part;
+}
+
+function encodeFile(boundary,type,name,filename) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
+    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
+    return return_part;
+}
+","+var fs = require('fs');
+var path = require('path');
+var mime = require('mime');
+var boundary = Math.random();
+
+  var self = this;
+
-  var post_data = this.getPostData(email);
-  var options = {
-    host: 'sendgrid.com',
-    path: '/api/mail.send.json',
-    method: 'POST',
-    headers: {
-      'Content-Type': 'application/x-www-form-urlencoded',
-      'Content-Length': post_data.length
+
+  function send_rest() {
+    var post_data;
+    var options = {
+      host: 'sendgrid.com',
+      path: '/api/mail.send.json',
+      method: 'POST',
+    };
+    if (email.hasFiles()) {
+      post_data = self.getMultipartData(email);
+      var length = 0;
+      for (var buf in post_data) {
+        length += post_data[buf].length;
+      }
+      options.headers = {
+        'Content-Type': 'multipart/form-data; boundary=' + boundary,
+        'Content-Length': length
+      };
+    } else {
+      post_data = self.getPostData(email);
+      options.headers = {
+        'Content-Type': 'application/x-www-form-urlencoded',
+        'Content-Length': post_data.length
+      };
-  };
-  var request = https.request(options, function(res) {
-    res.setEncoding('utf8');
-    res.on('data', function(chunk) {
-      var json = JSON.parse(chunk);
-      callback.call(null, json.message == 'success', json.errors);
+    var request = https.request(options, function(res) {
+      res.setEncoding('utf8');
+      res.on('data', function(chunk) {
+        var json = JSON.parse(chunk);
+        callback.call(null, json.message == 'success', json.errors);
+      });
-  });
-  request.write(post_data);
-  request.end();
+    for (var key in post_data) {
+      request.write(post_data[key]);
+    }
+    request.end();
+  }
+
+  if (email.hasFiles()) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_rest();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_rest();
+  }
+  // SMTP settings
+  function send_smtp() {
+    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
+      callback.call(self, success, error);
+    });
+  }
+
-  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-    callback.call(self, success, error);
-  });
-}
+  if (_.size(email.files) > 0) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_smtp();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_smtp();
+  }
+};
-SendGrid.prototype.getPostData = function(params) {
+SendGrid.prototype.getPostData = function(email) {
-  _.extend(data, params.toWebFormat());
+
+  _.extend(data, email.toWebFormat());
+SendGrid.prototype.getMultipartData = function(email) {
+  var data = [];
+  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
+  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
+
+  _(email.toWebFormat()).each(function(v, k) {
+    data.push(new Buffer(encodeField(boundary, k, v)));
+  });
+
+  _(email.files).each(function(filepath, filename) {
+    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
+    data.push(new Buffer(email.file_data[filename]));
+    data.push(new Buffer('\r\n'));
+  });
+
+  return data;
+};
+
+function encodeField(boundary,name,value) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
+    return_part += value + ""\r\n"";
+    return return_part;
+}
+
+function encodeFile(boundary,type,name,filename) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
+    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
+    return return_part;
+}
+"
sendgrid_sendgrid-nodejs,967d1766b1a3a52967e10f67c6c956b0749fc9d6,Merge remote-tracking branch 'upstream/master',package.json,,"-    ""nodemailer"": ""*""
+    ""nodemailer"": ""*"",
+    ""mime"": ""*"",
+    ""restler"": ""*""","-    ""nodemailer"": ""*""
+    ""nodemailer"": ""*"",
+    ""mime"": ""*"",
+    ""restler"": ""*"""
sendgrid_sendgrid-nodejs,967d1766b1a3a52967e10f67c6c956b0749fc9d6,Merge remote-tracking branch 'upstream/master',test/lib/email.test.js,,"+var querystring = require('querystring')
+
+var files = [
+  __dirname + '/../assets/logo.png',
+  __dirname + '/../assets/sendgrid.txt'
+]
+  it('should support file attachments', function() {
+    var email = new Email();
+    email.addFile('file1', files[0]);
+    email.files.should.eql({'file1': files[0]});
+    email.addFile('file2', files[1]);
+    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+  });
+","+var querystring = require('querystring')
+
+var files = [
+  __dirname + '/../assets/logo.png',
+  __dirname + '/../assets/sendgrid.txt'
+]
+  it('should support file attachments', function() {
+    var email = new Email();
+    email.addFile('file1', files[0]);
+    email.files.should.eql({'file1': files[0]});
+    email.addFile('file2', files[1]);
+    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+  });
+"
sendgrid_sendgrid-nodejs,967d1766b1a3a52967e10f67c6c956b0749fc9d6,Merge remote-tracking branch 'upstream/master',test/lib/sendgrid.test.js,"-  api_key: 'testing'
+  api_key: 'nope'",,
sendgrid_sendgrid-nodejs,249bebb86edcfddeb24a7c17e4c6f27e4c380407,Merge pull request #13 from partkyle/file-attach  File Attachments,lib/email.js,"+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+","+var fs = require('fs');
-    files: [],
+    files: {},
+    file_data: {},
+Email.prototype.addFile = function(filename, filepath) {
+  this.files[filename] = filepath;
+}
+
+Email.prototype.processFiles = function(callback) {
+  var self = this;
+  var attachments_count = _.size(this.files);
+  _(this.files).each(function(v, k) {
+    fs.readFile(v, function(error, data) {
+      attachments_count--;
+      if (error) {
+        return callback(false, error);
+      } else {
+        self.file_data[k] = data;
+      }
+
+      if (attachments_count == 0) {
+        callback(true);
+      }
+    });
+  });
+}
+
-    replyto: this.replyto,
-    date: this.date,
-    files: this.files,
-    headers: this.headers
+    replyto: this.replyto
+  if (_.size(this.file_data) > 0) {
+    var attachments = [];
+    _(this.file_data).each(function(v, k) {
+      attachments.push({filename: k, contents: v});
+    });
+    data.attachments = attachments;
+  }
+
+Email.prototype.hasFiles = function() {
+  return _(this.files).size() > 0;
+}
+","+var fs = require('fs');
-    files: [],
+    files: {},
+    file_data: {},
+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+
+}
+
+Email.prototype.addFile = function(filename, filepath) {
+  this.files[filename] = filepath;
+}
+
+Email.prototype.processFiles = function(callback) {
+  var self = this;
+  var attachments_count = _.size(this.files);
+  _(this.files).each(function(v, k) {
+    fs.readFile(v, function(error, data) {
+      attachments_count--;
+      if (error) {
+        return callback(false, error);
+      } else {
+        self.file_data[k] = data;
+      }
+
+      if (attachments_count == 0) {
+        callback(true);
+      }
+    });
+  });
-    replyto: this.replyto,
-    date: this.date,
-    files: this.files,
-    headers: this.headers
+    replyto: this.replyto
+  if (_.size(this.file_data) > 0) {
+    var attachments = [];
+    _(this.file_data).each(function(v, k) {
+      attachments.push({filename: k, contents: v});
+    });
+    data.attachments = attachments;
+  }
+
+Email.prototype.hasFiles = function() {
+  return _(this.files).size() > 0;
+}
+"
sendgrid_sendgrid-nodejs,249bebb86edcfddeb24a7c17e4c6f27e4c380407,Merge pull request #13 from partkyle/file-attach  File Attachments,lib/sendgrid.js,,"+var fs = require('fs');
+var path = require('path');
+var mime = require('mime');
+var boundary = Math.random();
+
+  var self = this;
+
-  var post_data = this.getPostData(email);
-  var options = {
-    host: 'sendgrid.com',
-    path: '/api/mail.send.json',
-    method: 'POST',
-    headers: {
-      'Content-Type': 'application/x-www-form-urlencoded',
-      'Content-Length': post_data.length
+
+  function send_rest() {
+    var post_data;
+    var options = {
+      host: 'sendgrid.com',
+      path: '/api/mail.send.json',
+      method: 'POST',
+    };
+    if (email.hasFiles()) {
+      post_data = self.getMultipartData(email);
+      var length = 0;
+      for (var buf in post_data) {
+        length += post_data[buf].length;
+      }
+      options.headers = {
+        'Content-Type': 'multipart/form-data; boundary=' + boundary,
+        'Content-Length': length
+      };
+    } else {
+      post_data = self.getPostData(email);
+      options.headers = {
+        'Content-Type': 'application/x-www-form-urlencoded',
+        'Content-Length': post_data.length
+      };
-  };
-  var request = https.request(options, function(res) {
-    res.setEncoding('utf8');
-    res.on('data', function(chunk) {
-      var json = JSON.parse(chunk);
-      callback.call(null, json.message == 'success', json.errors);
+    var request = https.request(options, function(res) {
+      res.setEncoding('utf8');
+      res.on('data', function(chunk) {
+        var json = JSON.parse(chunk);
+        callback.call(null, json.message == 'success', json.errors);
+      });
-  });
-  request.write(post_data);
-  request.end();
+    for (var key in post_data) {
+      request.write(post_data[key]);
+    }
+    request.end();
+  }
+
+  if (email.hasFiles()) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_rest();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_rest();
+  }
+  // SMTP settings
+  function send_smtp() {
+    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
+      callback.call(self, success, error);
+    });
+  }
+
-  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-    callback.call(self, success, error);
-  });
-}
+  if (_.size(email.files) > 0) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_smtp();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_smtp();
+  }
+};
-SendGrid.prototype.getPostData = function(params) {
+SendGrid.prototype.getPostData = function(email) {
-  _.extend(data, params.toWebFormat());
+
+  _.extend(data, email.toWebFormat());
+SendGrid.prototype.getMultipartData = function(email) {
+  var data = [];
+  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
+  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
+
+  _(email.toWebFormat()).each(function(v, k) {
+    data.push(new Buffer(encodeField(boundary, k, v)));
+  });
+
+  _(email.files).each(function(filepath, filename) {
+    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
+    data.push(new Buffer(email.file_data[filename]));
+    data.push(new Buffer('\r\n'));
+  });
+
+  return data;
+};
+
+function encodeField(boundary,name,value) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
+    return_part += value + ""\r\n"";
+    return return_part;
+}
+
+function encodeFile(boundary,type,name,filename) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
+    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
+    return return_part;
+}
+","+var fs = require('fs');
+var path = require('path');
+var mime = require('mime');
+var boundary = Math.random();
+
+  var self = this;
+
-  var post_data = this.getPostData(email);
-  var options = {
-    host: 'sendgrid.com',
-    path: '/api/mail.send.json',
-    method: 'POST',
-    headers: {
-      'Content-Type': 'application/x-www-form-urlencoded',
-      'Content-Length': post_data.length
+
+  function send_rest() {
+    var post_data;
+    var options = {
+      host: 'sendgrid.com',
+      path: '/api/mail.send.json',
+      method: 'POST',
+    };
+    if (email.hasFiles()) {
+      post_data = self.getMultipartData(email);
+      var length = 0;
+      for (var buf in post_data) {
+        length += post_data[buf].length;
+      }
+      options.headers = {
+        'Content-Type': 'multipart/form-data; boundary=' + boundary,
+        'Content-Length': length
+      };
+    } else {
+      post_data = self.getPostData(email);
+      options.headers = {
+        'Content-Type': 'application/x-www-form-urlencoded',
+        'Content-Length': post_data.length
+      };
-  };
-  var request = https.request(options, function(res) {
-    res.setEncoding('utf8');
-    res.on('data', function(chunk) {
-      var json = JSON.parse(chunk);
-      callback.call(null, json.message == 'success', json.errors);
+    var request = https.request(options, function(res) {
+      res.setEncoding('utf8');
+      res.on('data', function(chunk) {
+        var json = JSON.parse(chunk);
+        callback.call(null, json.message == 'success', json.errors);
+      });
-  });
-  request.write(post_data);
-  request.end();
+    for (var key in post_data) {
+      request.write(post_data[key]);
+    }
+    request.end();
+  }
+
+  if (email.hasFiles()) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_rest();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_rest();
+  }
+  // SMTP settings
+  function send_smtp() {
+    nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
+      callback.call(self, success, error);
+    });
+  }
+
-  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-    callback.call(self, success, error);
-  });
-}
+  if (_.size(email.files) > 0) {
+    email.processFiles(function(success, message) {
+      if (success) {
+        send_smtp();
+      } else {
+        callback(false, message);
+      }
+    });
+  } else {
+    send_smtp();
+  }
+};
-SendGrid.prototype.getPostData = function(params) {
+SendGrid.prototype.getPostData = function(email) {
-  _.extend(data, params.toWebFormat());
+
+  _.extend(data, email.toWebFormat());
+SendGrid.prototype.getMultipartData = function(email) {
+  var data = [];
+  data.push(new Buffer(encodeField(boundary, 'api_user', this.api_user)));
+  data.push(new Buffer(encodeField(boundary, 'api_key', this.api_key)));
+
+  _(email.toWebFormat()).each(function(v, k) {
+    data.push(new Buffer(encodeField(boundary, k, v)));
+  });
+
+  _(email.files).each(function(filepath, filename) {
+    data.push(encodeFile(boundary, mime.lookup(filepath), 'files[' + filename + ']', path.basename(filepath)));
+    data.push(new Buffer(email.file_data[filename]));
+    data.push(new Buffer('\r\n'));
+  });
+
+  return data;
+};
+
+function encodeField(boundary,name,value) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""\r\n\r\n"";
+    return_part += value + ""\r\n"";
+    return return_part;
+}
+
+function encodeFile(boundary,type,name,filename) {
+    var return_part = ""--"" + boundary + ""\r\n"";
+    return_part += ""Content-Disposition: form-data; name=\"""" + name + ""\""; filename=\"""" + filename + ""\""\r\n"";
+    return_part += ""Content-Type: "" + type + ""\r\n\r\n"";
+    return return_part;
+}
+"
sendgrid_sendgrid-nodejs,249bebb86edcfddeb24a7c17e4c6f27e4c380407,Merge pull request #13 from partkyle/file-attach  File Attachments,package.json,,"-    ""nodemailer"": ""*""
+    ""nodemailer"": ""*"",
+    ""mime"": ""*"",
+    ""restler"": ""*""","-    ""nodemailer"": ""*""
+    ""nodemailer"": ""*"",
+    ""mime"": ""*"",
+    ""restler"": ""*"""
sendgrid_sendgrid-nodejs,249bebb86edcfddeb24a7c17e4c6f27e4c380407,Merge pull request #13 from partkyle/file-attach  File Attachments,test/lib/email.test.js,,"+var querystring = require('querystring')
+
+var files = [
+  __dirname + '/../assets/logo.png',
+  __dirname + '/../assets/sendgrid.txt'
+]
+  it('should support file attachments', function() {
+    var email = new Email();
+    email.addFile('file1', files[0]);
+    email.files.should.eql({'file1': files[0]});
+    email.addFile('file2', files[1]);
+    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+  });
+","+var querystring = require('querystring')
+
+var files = [
+  __dirname + '/../assets/logo.png',
+  __dirname + '/../assets/sendgrid.txt'
+]
+  it('should support file attachments', function() {
+    var email = new Email();
+    email.addFile('file1', files[0]);
+    email.files.should.eql({'file1': files[0]});
+    email.addFile('file2', files[1]);
+    email.files.should.eql({'file1': files[0], 'file2': files[1]});
+  });
+"
sendgrid_sendgrid-nodejs,3281e9b0a7f50eefef2c0e3029182d5a364e8e39,Merge remote-tracking branch 'upstream/master',lib/email.js,,"+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+","+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+"
sendgrid_sendgrid-nodejs,3281e9b0a7f50eefef2c0e3029182d5a364e8e39,Merge remote-tracking branch 'upstream/master',lib/smtpapi_headers.js,,"+  this.section = {};
+SmtpapiHeaders.prototype.setSection = function(val){
+  if (_.isObject(val)) {
+    this.section = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addSection = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.section, val);
+  }
+}
+","+  this.section = {};
+SmtpapiHeaders.prototype.setSection = function(val){
+  if (_.isObject(val)) {
+    this.section = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addSection = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.section, val);
+  }
+}
+"
sendgrid_sendgrid-nodejs,3281e9b0a7f50eefef2c0e3029182d5a364e8e39,Merge remote-tracking branch 'upstream/master',test/lib/sendgrid.test.js,"-  api_key: 'testing'
+  api_key: 'nope'","-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');","-  api_key: 'testing'
+  api_key: 'nope'
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');"
sendgrid_sendgrid-nodejs,3281e9b0a7f50eefef2c0e3029182d5a364e8e39,Merge remote-tracking branch 'upstream/master',test/lib/smtpapi_header.test.js,,"-    it('should overwrite when calling the with a value that already exists', function() {
+    it('should overwrite when calling addUniqueArgs with a value that already exists', function() {
+    });
+  });
+
+  describe('sections', function() {
+    var section_args = {'-sectionName1-': 'text 1', '-sectionName2-': 'text 2'};
+    it('should allow setting a single section', function() {
+      header.setSection(section_args);
+      header.section.should.eql(section_args);
+    });
+
+    it('should allow adding section args one at a time', function() {
+      for (var key in section_args) {
+        var args = {};
+        args[key] = section_args[key];
+        header.addSection(args);
+      }
+      header.section.should.eql(section_args);
+      header.addSection({cow: 'moo'});
+      header.section.should.not.eql(section_args);
+      header.section.cow.should.eql('moo');
+    });
+
+    it('should overwrite section when calling addSection with a value that already exists', function() {
+      header.addSection(section_args);
+      header.section.should.eql(section_args);
+      header.addSection({'-sectionName1-': 'cows are nice'});
+      header.section.should.not.eql(section_args);
+      header.section['-sectionName1-'].should.eql('cows are nice');","-    it('should overwrite when calling the with a value that already exists', function() {
+    it('should overwrite when calling addUniqueArgs with a value that already exists', function() {
+    });
+  });
+
+  describe('sections', function() {
+    var section_args = {'-sectionName1-': 'text 1', '-sectionName2-': 'text 2'};
+    it('should allow setting a single section', function() {
+      header.setSection(section_args);
+      header.section.should.eql(section_args);
+    });
+
+    it('should allow adding section args one at a time', function() {
+      for (var key in section_args) {
+        var args = {};
+        args[key] = section_args[key];
+        header.addSection(args);
+      }
+      header.section.should.eql(section_args);
+      header.addSection({cow: 'moo'});
+      header.section.should.not.eql(section_args);
+      header.section.cow.should.eql('moo');
+    });
+
+    it('should overwrite section when calling addSection with a value that already exists', function() {
+      header.addSection(section_args);
+      header.section.should.eql(section_args);
+      header.addSection({'-sectionName1-': 'cows are nice'});
+      header.section.should.not.eql(section_args);
+      header.section['-sectionName1-'].should.eql('cows are nice');"
sendgrid_sendgrid-nodejs,d5b552ca848c32252564d39370306c18ee1b365f,Merge pull request #12 from siyegen/section-header  section and sub sending tests,test/lib/sendgrid.test.js,,"-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');","-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
-        if (!success) should.fail(message);
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support substitution values', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-',['Panda', 'Cow']);
+      mail.html = 'You are a <strong>-name-</strong>';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should support sections being set in the email', function(done) {
+      var mail = new Email(smtp_params);
+      mail.addTo(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      mail.addSubVal('-name-', ['Kyle', 'David']);
+      mail.addSubVal('-meme-', ['-kyleSection-', '-davidSection-']);
+      mail.addSection({'-kyleSection-': 'I heard you liked batman so I killed your parents'});
+      mail.addSection({'-davidSection-': 'Metal gear?!!?!!!!eleven'});
+      mail.html = ""Yo -name-!<br /> Here's a meme for you:<br /> -meme-"";
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
-        if (success) should.fail('An error should have been reported');
+        if (success) assert.ok(false, 'An error should have been reported');"
sendgrid_sendgrid-nodejs,f2b80fd508c11fbac6b77d6087b56c3f4976bbc4,Merge pull request #11 from siyegen/section-header  test for adding sections pass,lib/email.js,,"+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+","+Email.prototype.setSection = function(val) {
+  this.smtpapi.setSection(val);
+}
+
+Email.prototype.addSection = function(val) {
+  this.smtpapi.addSection(val);
+}
+"
sendgrid_sendgrid-nodejs,f2b80fd508c11fbac6b77d6087b56c3f4976bbc4,Merge pull request #11 from siyegen/section-header  test for adding sections pass,lib/smtpapi_headers.js,,"+  this.section = {};
+SmtpapiHeaders.prototype.setSection = function(val){
+  if (_.isObject(val)) {
+    this.section = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addSection = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.section, val);
+  }
+}
+","+  this.section = {};
+SmtpapiHeaders.prototype.setSection = function(val){
+  if (_.isObject(val)) {
+    this.section = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addSection = function(val){
+  if (_.isObject(val)) {
+    _.extend(this.section, val);
+  }
+}
+"
sendgrid_sendgrid-nodejs,f2b80fd508c11fbac6b77d6087b56c3f4976bbc4,Merge pull request #11 from siyegen/section-header  test for adding sections pass,test/lib/smtpapi_header.test.js,,"-    it('should overwrite when calling the with a value that already exists', function() {
+    it('should overwrite when calling addUniqueArgs with a value that already exists', function() {
+    });
+  });
+
+  describe('sections', function() {
+    var section_args = {'-sectionName1-': 'text 1', '-sectionName2-': 'text 2'};
+    it('should allow setting a single section', function() {
+      header.setSection(section_args);
+      header.section.should.eql(section_args);
+    });
+
+    it('should allow adding section args one at a time', function() {
+      for (var key in section_args) {
+        var args = {};
+        args[key] = section_args[key];
+        header.addSection(args);
+      }
+      header.section.should.eql(section_args);
+      header.addSection({cow: 'moo'});
+      header.section.should.not.eql(section_args);
+      header.section.cow.should.eql('moo');
+    });
+
+    it('should overwrite section when calling addSection with a value that already exists', function() {
+      header.addSection(section_args);
+      header.section.should.eql(section_args);
+      header.addSection({'-sectionName1-': 'cows are nice'});
+      header.section.should.not.eql(section_args);
+      header.section['-sectionName1-'].should.eql('cows are nice');","-    it('should overwrite when calling the with a value that already exists', function() {
+    it('should overwrite when calling addUniqueArgs with a value that already exists', function() {
+    });
+  });
+
+  describe('sections', function() {
+    var section_args = {'-sectionName1-': 'text 1', '-sectionName2-': 'text 2'};
+    it('should allow setting a single section', function() {
+      header.setSection(section_args);
+      header.section.should.eql(section_args);
+    });
+
+    it('should allow adding section args one at a time', function() {
+      for (var key in section_args) {
+        var args = {};
+        args[key] = section_args[key];
+        header.addSection(args);
+      }
+      header.section.should.eql(section_args);
+      header.addSection({cow: 'moo'});
+      header.section.should.not.eql(section_args);
+      header.section.cow.should.eql('moo');
+    });
+
+    it('should overwrite section when calling addSection with a value that already exists', function() {
+      header.addSection(section_args);
+      header.section.should.eql(section_args);
+      header.addSection({'-sectionName1-': 'cows are nice'});
+      header.section.should.not.eql(section_args);
+      header.section['-sectionName1-'].should.eql('cows are nice');"
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',index.js,,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',lib/email.js,,"-
-function SmtpapiHeaders() {
-
-}
+var SmtpapiHeaders = require('./smtpapi_headers');
-  this.params = _.extend(default_mail_params, params);
+  _.extend(this, default_mail_params, params);
-*/
+ */
+Email.prototype.addTo = function(to) {
+  this.smtpapi.addTo(to);
+}
+
+Email.prototype.addSubVal = function(key, val) {
+  this.smtpapi.addSubVal(key, val);
+}
+
+Email.prototype.setUniqueArgs = function(val) {
+  this.smtpapi.setUniqueArgs(val);
+}
+
+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+Email.prototype.setCategory = function(val) {
+  this.smtpapi.setCategory(val);
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+}
+
+Email.prototype.addFilterSetting = function(filter, setting, val) {
+  this.smtpapi.addFilterSetting(filter, setting, val);
+}
+
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+
+Email.prototype.toWebFormat = function() {
+  var data = {
+    to: this.to,
+    from: this.from,
+    'x-smtpapi': this.smtpapi.toJson(),
+    subject: this.subject,
+    text: this.text,
+    html: this.html,
+    bcc: this.bcc,
+    replyto: this.replyto,
+    date: this.date,
+    files: this.files,
+    headers: this.headers
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy over the from.
+  if (_.isEmpty(data.to)) {
+    data.to = data.from;
+  }
+
+  return data;
+}
+
+Email.prototype.toSmtpFormat = function() {
+  var data = {
+    to: this.to,
+    sender: this.from,
+    subject: this.subject,
+    body: this.text,
+    html: this.html,
+    reply_to: this.replyto,
+    headers: {
+      ""x-smtpapi"": this.smtpapi.toJson()
+    }
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy the sender.
+  if (_.isEmpty(data.to)) {
+    data.to = data.sender;
+  }
+
+  return data;
+}
+","-
-function SmtpapiHeaders() {
-
-}
+var SmtpapiHeaders = require('./smtpapi_headers');
-  this.params = _.extend(default_mail_params, params);
+  _.extend(this, default_mail_params, params);
-*/
+ */
+Email.prototype.addTo = function(to) {
+  this.smtpapi.addTo(to);
+}
+
+Email.prototype.addSubVal = function(key, val) {
+  this.smtpapi.addSubVal(key, val);
+}
+
+Email.prototype.setUniqueArgs = function(val) {
+  this.smtpapi.setUniqueArgs(val);
+}
+
+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+Email.prototype.setCategory = function(val) {
+  this.smtpapi.setCategory(val);
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+}
+
+Email.prototype.addFilterSetting = function(filter, setting, val) {
+  this.smtpapi.addFilterSetting(filter, setting, val);
+}
+
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+
+Email.prototype.toWebFormat = function() {
+  var data = {
+    to: this.to,
+    from: this.from,
+    'x-smtpapi': this.smtpapi.toJson(),
+    subject: this.subject,
+    text: this.text,
+    html: this.html,
+    bcc: this.bcc,
+    replyto: this.replyto,
+    date: this.date,
+    files: this.files,
+    headers: this.headers
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy over the from.
+  if (_.isEmpty(data.to)) {
+    data.to = data.from;
+  }
+
+  return data;
+}
+
+Email.prototype.toSmtpFormat = function() {
+  var data = {
+    to: this.to,
+    sender: this.from,
+    subject: this.subject,
+    body: this.text,
+    html: this.html,
+    reply_to: this.replyto,
+    headers: {
+      ""x-smtpapi"": this.smtpapi.toJson()
+    }
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy the sender.
+  if (_.isEmpty(data.to)) {
+    data.to = data.sender;
+  }
+
+  return data;
+}
+"
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',lib/sendgrid.js,,"+
+var Email = require('./email');
-  var post_data = this.getPostData(email.params || email);
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
+  var post_data = this.getPostData(email);
-  email = email.params || email;
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
-  nodemailer.send_mail({
-    sender: email.from,
-    to: email.to,
-    subject: email.subject,
-    body: email.text,
-    html: email.html
-  }, function(error, success) {
+  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-
-  _(params).each(function(v, k) {
-    data[k] = v;
-  });
+  _.extend(data, params.toWebFormat());","+
+var Email = require('./email');
-  var post_data = this.getPostData(email.params || email);
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
+  var post_data = this.getPostData(email);
-  email = email.params || email;
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
-  nodemailer.send_mail({
-    sender: email.from,
-    to: email.to,
-    subject: email.subject,
-    body: email.text,
-    html: email.html
-  }, function(error, success) {
+  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-
-  _(params).each(function(v, k) {
-    data[k] = v;
-  });
+  _.extend(data, params.toWebFormat());"
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',test/index.test.js,,"+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });","+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });"
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',test/lib/email.test.js,,"-      text_params[key].should.eql(mail.params[key]);
+      text_params[key].should.eql(mail[key]);
+  });
+
+  it('should return a Web Api format as expected', function() {
+    var email = new Email(text_params);
+    var webFormat = email.toWebFormat();
+    webFormat.to.should.equal(text_params.to);
+    webFormat.from.should.equal(text_params.from);
+    webFormat.subject.should.equal(text_params.subject);
+    webFormat.text.should.equal(text_params.text);
+  });
+
+  it('should return an Smtp Api format as expected', function() {
+    var email = new Email(text_params);
+    var smtpFormat = email.toSmtpFormat();
+    smtpFormat.to.should.equal(text_params.to);
+    smtpFormat.sender.should.equal(text_params.from);
+    smtpFormat.subject.should.equal(text_params.subject);
+    smtpFormat.body.should.equal(text_params.text);","-      text_params[key].should.eql(mail.params[key]);
+      text_params[key].should.eql(mail[key]);
+  });
+
+  it('should return a Web Api format as expected', function() {
+    var email = new Email(text_params);
+    var webFormat = email.toWebFormat();
+    webFormat.to.should.equal(text_params.to);
+    webFormat.from.should.equal(text_params.from);
+    webFormat.subject.should.equal(text_params.subject);
+    webFormat.text.should.equal(text_params.text);
+  });
+
+  it('should return an Smtp Api format as expected', function() {
+    var email = new Email(text_params);
+    var smtpFormat = email.toSmtpFormat();
+    smtpFormat.to.should.equal(text_params.to);
+    smtpFormat.sender.should.equal(text_params.from);
+    smtpFormat.subject.should.equal(text_params.subject);
+    smtpFormat.body.should.equal(text_params.text);"
sendgrid_sendgrid-nodejs,f565424a7a68a3b7c1e5132bf8b8da4ed0832892,Merge remote-tracking branch 'upstream/master',test/lib/sendgrid.test.js,"-  api_key: 'testing'
+  api_key: 'nope'","-var should = require('should');
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        if (success) should.fail('An error should have been reported');
+        done();
+      });
+    });
-    it('should report errors back to the user', function(done) {
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: 'kyle.partridge@sendgrid.com',
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+  })","-var should = require('should');
-  api_key: 'testing'
+  api_key: 'nope'
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        if (success) should.fail('An error should have been reported');
+        done();
+      });
+    });
-    it('should report errors back to the user', function(done) {
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: 'kyle.partridge@sendgrid.com',
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+  })"
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,index.js,,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,lib/email.js,,"-
-function SmtpapiHeaders() {
-
-}
+var SmtpapiHeaders = require('./smtpapi_headers');
-  this.params = _.extend(default_mail_params, params);
+  _.extend(this, default_mail_params, params);
-*/
+ */
+Email.prototype.addTo = function(to) {
+  this.smtpapi.addTo(to);
+}
+
+Email.prototype.addSubVal = function(key, val) {
+  this.smtpapi.addSubVal(key, val);
+}
+
+Email.prototype.setUniqueArgs = function(val) {
+  this.smtpapi.setUniqueArgs(val);
+}
+
+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+Email.prototype.setCategory = function(val) {
+  this.smtpapi.setCategory(val);
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+}
+
+Email.prototype.addFilterSetting = function(filter, setting, val) {
+  this.smtpapi.addFilterSetting(filter, setting, val);
+}
+
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+
+Email.prototype.toWebFormat = function() {
+  var data = {
+    to: this.to,
+    from: this.from,
+    'x-smtpapi': this.smtpapi.toJson(),
+    subject: this.subject,
+    text: this.text,
+    html: this.html,
+    bcc: this.bcc,
+    replyto: this.replyto,
+    date: this.date,
+    files: this.files,
+    headers: this.headers
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy over the from.
+  if (_.isEmpty(data.to)) {
+    data.to = data.from;
+  }
+
+  return data;
+}
+
+Email.prototype.toSmtpFormat = function() {
+  var data = {
+    to: this.to,
+    sender: this.from,
+    subject: this.subject,
+    body: this.text,
+    html: this.html,
+    reply_to: this.replyto,
+    headers: {
+      ""x-smtpapi"": this.smtpapi.toJson()
+    }
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy the sender.
+  if (_.isEmpty(data.to)) {
+    data.to = data.sender;
+  }
+
+  return data;
+}
+","-
-function SmtpapiHeaders() {
-
-}
+var SmtpapiHeaders = require('./smtpapi_headers');
-  this.params = _.extend(default_mail_params, params);
+  _.extend(this, default_mail_params, params);
-*/
+ */
+Email.prototype.addTo = function(to) {
+  this.smtpapi.addTo(to);
+}
+
+Email.prototype.addSubVal = function(key, val) {
+  this.smtpapi.addSubVal(key, val);
+}
+
+Email.prototype.setUniqueArgs = function(val) {
+  this.smtpapi.setUniqueArgs(val);
+}
+
+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+Email.prototype.setCategory = function(val) {
+  this.smtpapi.setCategory(val);
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+}
+
+Email.prototype.addFilterSetting = function(filter, setting, val) {
+  this.smtpapi.addFilterSetting(filter, setting, val);
+}
+
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+
+Email.prototype.toWebFormat = function() {
+  var data = {
+    to: this.to,
+    from: this.from,
+    'x-smtpapi': this.smtpapi.toJson(),
+    subject: this.subject,
+    text: this.text,
+    html: this.html,
+    bcc: this.bcc,
+    replyto: this.replyto,
+    date: this.date,
+    files: this.files,
+    headers: this.headers
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy over the from.
+  if (_.isEmpty(data.to)) {
+    data.to = data.from;
+  }
+
+  return data;
+}
+
+Email.prototype.toSmtpFormat = function() {
+  var data = {
+    to: this.to,
+    sender: this.from,
+    subject: this.subject,
+    body: this.text,
+    html: this.html,
+    reply_to: this.replyto,
+    headers: {
+      ""x-smtpapi"": this.smtpapi.toJson()
+    }
+  };
+
+  // there needs to be at least 1 to address.
+  // If it is missing, just copy the sender.
+  if (_.isEmpty(data.to)) {
+    data.to = data.sender;
+  }
+
+  return data;
+}
+"
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,lib/sendgrid.js,,"+
+var Email = require('./email');
-  var post_data = this.getPostData(email.params || email);
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
+  var post_data = this.getPostData(email);
-  email = email.params || email;
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
-  nodemailer.send_mail({
-    sender: email.from,
-    to: email.to,
-    subject: email.subject,
-    body: email.text,
-    html: email.html
-  }, function(error, success) {
+  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-
-  _(params).each(function(v, k) {
-    data[k] = v;
-  });
+  _.extend(data, params.toWebFormat());","+
+var Email = require('./email');
-  var post_data = this.getPostData(email.params || email);
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
+  var post_data = this.getPostData(email);
-  email = email.params || email;
+  if (email.constructor !== Email) {
+    email = new Email(email);
+  }
-  nodemailer.send_mail({
-    sender: email.from,
-    to: email.to,
-    subject: email.subject,
-    body: email.text,
-    html: email.html
-  }, function(error, success) {
+  nodemailer.send_mail(email.toSmtpFormat(), function(error, success) {
-
-  _(params).each(function(v, k) {
-    data[k] = v;
-  });
+  _.extend(data, params.toWebFormat());"
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,test/index.test.js,,"+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });","+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });"
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,test/lib/email.test.js,,"-      text_params[key].should.eql(mail.params[key]);
+      text_params[key].should.eql(mail[key]);
+  });
+
+  it('should return a Web Api format as expected', function() {
+    var email = new Email(text_params);
+    var webFormat = email.toWebFormat();
+    webFormat.to.should.equal(text_params.to);
+    webFormat.from.should.equal(text_params.from);
+    webFormat.subject.should.equal(text_params.subject);
+    webFormat.text.should.equal(text_params.text);
+  });
+
+  it('should return an Smtp Api format as expected', function() {
+    var email = new Email(text_params);
+    var smtpFormat = email.toSmtpFormat();
+    smtpFormat.to.should.equal(text_params.to);
+    smtpFormat.sender.should.equal(text_params.from);
+    smtpFormat.subject.should.equal(text_params.subject);
+    smtpFormat.body.should.equal(text_params.text);","-      text_params[key].should.eql(mail.params[key]);
+      text_params[key].should.eql(mail[key]);
+  });
+
+  it('should return a Web Api format as expected', function() {
+    var email = new Email(text_params);
+    var webFormat = email.toWebFormat();
+    webFormat.to.should.equal(text_params.to);
+    webFormat.from.should.equal(text_params.from);
+    webFormat.subject.should.equal(text_params.subject);
+    webFormat.text.should.equal(text_params.text);
+  });
+
+  it('should return an Smtp Api format as expected', function() {
+    var email = new Email(text_params);
+    var smtpFormat = email.toSmtpFormat();
+    smtpFormat.to.should.equal(text_params.to);
+    smtpFormat.sender.should.equal(text_params.from);
+    smtpFormat.subject.should.equal(text_params.subject);
+    smtpFormat.body.should.equal(text_params.text);"
sendgrid_sendgrid-nodejs,48da6cfd8f227d36f9e8d003881da75fe688e48b,Merge pull request #10 from partkyle/x-smtpapi  X Smtpapi headers support for SMTP and Web Apis,test/lib/sendgrid.test.js,,"-var should = require('should');
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        if (success) should.fail('An error should have been reported');
+        done();
+      });
+    });
-    it('should report errors back to the user', function(done) {
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: 'kyle.partridge@sendgrid.com',
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+  })","-var should = require('should');
+
+    it('should be able to send to multiple recipients', function(done) {
+      var params = _.clone(text_params);
+      params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Web)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.send(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+      var mail = new Email({});
+      sendgrid.send(mail, function(success, message) {
+        if (success) should.fail('An error should have been reported');
+        done();
+      });
+    });
-    it('should report errors back to the user', function(done) {
+    it('should support the reply_to field', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' Reply To Test';
+      mail.replyto = 'noreply@sendgrid.com';
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should support filters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    // this test will most likely fail until node_modules is updated
+    it('should support filters with unicode parameters', function(done) {
+      var mail = new Email(smtp_params);
+      mail.subject += ' filters w/ unicode ✔ (Smtp)';
+      mail.addFilterSetting('footer', 'enable', 1);
+      mail.addFilterSetting('footer', 'text/plain', 'This is mah footer with a ✔ in it!');
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+
+    it('should report errors to the user', function(done) {
+
+  describe('x-smtpapi', function(done) {
+    function setupEmail() {
+      var mail = new Email({
+        from: 'kyle.partridge@sendgrid.com',
+        subject: 'Multiple Recipients with headers',
+        text: 'Multiple recipients through x-smtpapi test'
+      });
+      mail.addTo('kyle.partridge@sendgrid.com');
+      mail.addTo('david.tomberlin@sendgrid.com');
+
+      return mail;
+    }
+
+    it('should be able to send an email to mutiple recipients through the Web Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(Web) ' + mail.subject;
+      sendgrid.send(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+
+    it('should be able to send an email to mutiple recipients through the Smtp Api', function(done) {
+      var mail = setupEmail();
+      mail.subject = '(SMTP) ' + mail.subject;
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) assert.ok(false, message);
+        done();
+      });
+    });
+  })"
sendgrid_sendgrid-nodejs,4f6c83b75a24cfba733e634f1a4df1758d9d0a87,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,lib/smtpapi_headers.js,,"-  var json = JSON.stringify(this);
+  var data = _.clone(this);
+  _.each(data, function(v, k, list) {
+    if (_.isEmpty(v)) {
+      delete list[k];
+    }
+  });
+  var json = JSON.stringify(data);","-  var json = JSON.stringify(this);
+  var data = _.clone(this);
+  _.each(data, function(v, k, list) {
+    if (_.isEmpty(v)) {
+      delete list[k];
+    }
+  });
+  var json = JSON.stringify(data);"
sendgrid_sendgrid-nodejs,4f6c83b75a24cfba733e634f1a4df1758d9d0a87,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,test/lib/smtpapi_header.test.js,"-      JSON.parse(header.toJson()).should.eql(header);
+
+      var parse = JSON.parse(header.toJson());
+      parse.to.should.eql(header.to);
+      parse.unique_args.should.eql(header.unique_args);
+      parse.filters.should.eql(header.filters);
+
+    it('should not remove any parameters on this object', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+
+      // call the json method to test if it removed anything
+      header.toJson();
+
+      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      header.unique_args.should.eql({foo: 'bar'});
+      header.filters.should.eql({
+        footer: {
+          settings: {
+            enable: 1,
+            'text/html': '<b>boo</b>'
+          }
+        }
+      });
+    });","-
-      assert(!_.isEmpty(JSON.parse(json).to), 'should be empty');
+      console.log(""value of to: %s "", JSON.parse(json).to);
+      assert(_.isUndefined(JSON.parse(json).to), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).sub), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).sub), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).unique_args), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).unique_args), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).category), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).category), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).filters), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).filters), 'should be empty');","-      JSON.parse(header.toJson()).should.eql(header);
+
+      var parse = JSON.parse(header.toJson());
+      parse.to.should.eql(header.to);
+      parse.unique_args.should.eql(header.unique_args);
+      parse.filters.should.eql(header.filters);
-
-      assert(!_.isEmpty(JSON.parse(json).to), 'should be empty');
+      console.log(""value of to: %s "", JSON.parse(json).to);
+      assert(_.isUndefined(JSON.parse(json).to), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).sub), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).sub), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).unique_args), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).unique_args), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).category), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).category), 'should be empty');
-      assert(!_.isEmpty(JSON.parse(json).filters), 'should be empty');
+      assert(_.isUndefined(JSON.parse(json).filters), 'should be empty');
+    });
+
+    it('should not remove any parameters on this object', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+
+      // call the json method to test if it removed anything
+      header.toJson();
+
+      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
+      header.unique_args.should.eql({foo: 'bar'});
+      header.filters.should.eql({
+        footer: {
+          settings: {
+            enable: 1,
+            'text/html': '<b>boo</b>'
+          }
+        }
+      });"
sendgrid_sendgrid-nodejs,040b1cd635083659d1d91f1bbabf138c19f2b97b,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/sendgrid.test.js,,"+
+    it('should be able to send to multiple recipients', function(done) {
+      text_params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(text_params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });","+
+    it('should be able to send to multiple recipients', function(done) {
+      text_params.to = ['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com'];
+      sendgrid.send(text_params, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });"
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,index.js,,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');,+module.exports.SmtpapiHeaders = require('./lib/smtpapi_headers');
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,lib/sendgrid.js,,"-    },
-    debug:true
+    }","-    },
-    debug:true
+    }"
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/index.test.js,,"+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });","+  it('should export the SmtpapiHeaders object', function() {
+    index.SmtpapiHeaders.should.not.be.undefined;
+  });"
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/email.test.js,,"-  it('should allow to field to be set via addTo', function() {
-    var mail = new Email(text_params);
-    mail.addTo('siyegen@gmail.com');
-    mail.
-  });
-","-  it('should allow to field to be set via addTo', function() {
-    var mail = new Email(text_params);
-    mail.addTo('siyegen@gmail.com');
-    mail.
-  });
-"
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/sendgrid.test.js,,-var should = require('should');,-var should = require('should');
sendgrid_sendgrid-nodejs,e8314bb62bace94e5af2c51c61b7fb8071db80c4,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/smtpapi_header.test.js,"+
+  describe('json', function() {
+    it('should produce valid json', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+      JSON.parse(header.toJson()).should.eql(header);
+    });
+  });","+
+  describe('json', function() {
+    it('should produce valid json', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+      JSON.parse(header.toJson()).should.eql(header);
+    });
+
+    it('should not include the ""to"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).to), 'should be empty');
+    });
+
+    it('should not include the ""sub"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).sub), 'should be empty');
+    });
+
+    it('should not include the ""unique_args"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).unique_args), 'should be empty');
+    });
+
+    it('should not include the ""category"" parameter when there are none', function() {
+      header.addUniqueArgs({food: 'bar'});
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).category), 'should be empty');
+    });
+
+    it('should not include the ""filters"" parameter when there are none', function() {
+      header.addUniqueArgs({food: 'bar'});
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).filters), 'should be empty');
+    });
+  });","+
+  describe('json', function() {
+    it('should produce valid json', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+      JSON.parse(header.toJson()).should.eql(header);
+    });
+
+    it('should not include the ""to"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).to), 'should be empty');
+    });
+
+    it('should not include the ""sub"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).sub), 'should be empty');
+    });
+
+    it('should not include the ""unique_args"" parameter when there are none', function() {
+      header.setCategory('nothing');
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).unique_args), 'should be empty');
+    });
+
+    it('should not include the ""category"" parameter when there are none', function() {
+      header.addUniqueArgs({food: 'bar'});
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).category), 'should be empty');
+    });
+
+    it('should not include the ""filters"" parameter when there are none', function() {
+      header.addUniqueArgs({food: 'bar'});
+      var json = header.toJson();
+
+      assert(!_.isEmpty(JSON.parse(json).filters), 'should be empty');
+    });
+  });"
sendgrid_sendgrid-nodejs,70fee2c8f8c1233a274743aaa456188a17d4d7e5,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/smtpapi_header.test.js,,"+
+  describe('json', function() {
+    it('should produce valid json', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+      JSON.parse(header.toJson()).should.eql(header);
+    });
+  });","+
+  describe('json', function() {
+    it('should produce valid json', function() {
+      header.addTo('kyle.partridge@sendgrid.com');
+      header.addTo(['david.tomberlin@sendgrid.com']);
+      header.addUniqueArgs({foo: 'bar'});
+      header.addFilterSetting('footer', 'enable', 1);
+      header.addFilterSetting('footer', 'text/html', '<b>boo</b>');
+      JSON.parse(header.toJson()).should.eql(header);
+    });
+  });"
sendgrid_sendgrid-nodejs,e903a504119a422be7861f9d08662996cc4246eb,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,lib/email.js,"+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);","+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+","+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);
+Email.prototype.setFilterSetting = function(filters) {
+  this.smtpapi.setFilterSetting(filters);
+}
+"
sendgrid_sendgrid-nodejs,e903a504119a422be7861f9d08662996cc4246eb,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,lib/smtpapi_headers.js,"+var _ = require('underscore');
+
-  this.data = {};
+  this.to = [];
+  this.sub = {};
+  this.unique_args = {};
+  this.category = [];
+  this.filters = {};
-  if (!this.data['to']) {
-    this.data['to'] = [];
-  }
-  if (typeof to == 'object') {
-    this.data['to'] = this.data['to'].concat(to);
+  if (_.isArray(to)) {
+    this.to = this.to.concat(to);
-    this.data['to'].push(to);
+    this.to.push(to);
-  if (!this.data['sub']) {
-    this.data['sub'] = {};
-  }
-  if (typeof val == 'object') {
-    this.data['sub'][key] = val;
+  if (_.isArray(val)) {
+    this.sub[key] = val;
-    this.data['sub'][key] = [val];
+    this.sub[key] = [val];
-  if (typeof val == 'object') {
-    this.data['unique_args'] = val;
+  if (_.isObject(val)) {
+    this.unique_args = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addUniqueArgs = function(val) {
+  if (_.isObject(val)) {
+    _.extend(this.unique_args, val);
-  this.data['category'] = val;
+  this.category = val;
+}
+
+SmtpapiHeaders.prototype.addCategory = function(val) {
+  if (_.isArray(val)) {
+    this.category.concat(val);
+  } else {
+    this.category.push(val);
+  }
-  if (!this.data['filters']) {
-    this.data['filters'] = {};
+  if (!this.filters[filter]) {
+    this.filters[filter] = {};
-  if (!this.data['filters'][filter]) {
-    this.data['filters'][filter] = {};
+  if (!this.filters[filter]['settings']) {
+    this.filters[filter]['settings'] = {};
-  if (!this.data['filters'][filter]['settings']) {
-    this.data['filters'][filter]['settings'] = {};
-  }
-
-  this.data['filters'][filter]['settings'][setting] = val;
+  this.filters[filter]['settings'][setting] = val;
-  var json = JSON.stringify(this.data);
+  var json = JSON.stringify(this);","+var _ = require('underscore');
+
-  this.data = {};
+  this.to = [];
+  this.sub = {};
+  this.unique_args = {};
+  this.category = [];
+  this.filters = {};
-  if (!this.data['to']) {
-    this.data['to'] = [];
-  }
-  if (typeof to == 'object') {
-    this.data['to'] = this.data['to'].concat(to);
+  if (_.isArray(to)) {
+    this.to = this.to.concat(to);
-    this.data['to'].push(to);
+    this.to.push(to);
-  if (!this.data['sub']) {
-    this.data['sub'] = {};
-  }
-  if (typeof val == 'object') {
-    this.data['sub'][key] = val;
+  if (_.isArray(val)) {
+    this.sub[key] = val;
-    this.data['sub'][key] = [val];
+    this.sub[key] = [val];
-  if (typeof val == 'object') {
-    this.data['unique_args'] = val;
+  if (_.isObject(val)) {
+    this.unique_args = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addUniqueArgs = function(val) {
+  if (_.isObject(val)) {
+    _.extend(this.unique_args, val);
-  this.data['category'] = val;
+  this.category = val;
+}
+
+SmtpapiHeaders.prototype.addCategory = function(val) {
+  if (_.isArray(val)) {
+    this.category.concat(val);
+  } else {
+    this.category.push(val);
+  }
+}
+
+SmtpapiHeaders.prototype.setFilterSetting = function(filters) {
+  this.filters = filters;
-  if (!this.data['filters']) {
-    this.data['filters'] = {};
+  if (!this.filters[filter]) {
+    this.filters[filter] = {};
-  if (!this.data['filters'][filter]) {
-    this.data['filters'][filter] = {};
+  if (!this.filters[filter]['settings']) {
+    this.filters[filter]['settings'] = {};
-  if (!this.data['filters'][filter]['settings']) {
-    this.data['filters'][filter]['settings'] = {};
-  }
-
-  this.data['filters'][filter]['settings'][setting] = val;
+  this.filters[filter]['settings'][setting] = val;
-  var json = JSON.stringify(this.data);
+  var json = JSON.stringify(this);","+var _ = require('underscore');
+
-  this.data = {};
+  this.to = [];
+  this.sub = {};
+  this.unique_args = {};
+  this.category = [];
+  this.filters = {};
-  if (!this.data['to']) {
-    this.data['to'] = [];
-  }
-  if (typeof to == 'object') {
-    this.data['to'] = this.data['to'].concat(to);
+  if (_.isArray(to)) {
+    this.to = this.to.concat(to);
-    this.data['to'].push(to);
+    this.to.push(to);
-  if (!this.data['sub']) {
-    this.data['sub'] = {};
-  }
-  if (typeof val == 'object') {
-    this.data['sub'][key] = val;
+  if (_.isArray(val)) {
+    this.sub[key] = val;
-    this.data['sub'][key] = [val];
+    this.sub[key] = [val];
-  if (typeof val == 'object') {
-    this.data['unique_args'] = val;
+  if (_.isObject(val)) {
+    this.unique_args = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addUniqueArgs = function(val) {
+  if (_.isObject(val)) {
+    _.extend(this.unique_args, val);
-  this.data['category'] = val;
+  this.category = val;
+}
+
+SmtpapiHeaders.prototype.addCategory = function(val) {
+  if (_.isArray(val)) {
+    this.category.concat(val);
+  } else {
+    this.category.push(val);
+  }
+}
+
+SmtpapiHeaders.prototype.setFilterSetting = function(filters) {
+  this.filters = filters;
-  if (!this.data['filters']) {
-    this.data['filters'] = {};
+  if (!this.filters[filter]) {
+    this.filters[filter] = {};
-  if (!this.data['filters'][filter]) {
-    this.data['filters'][filter] = {};
+  if (!this.filters[filter]['settings']) {
+    this.filters[filter]['settings'] = {};
-  if (!this.data['filters'][filter]['settings']) {
-    this.data['filters'][filter]['settings'] = {};
-  }
-
-  this.data['filters'][filter]['settings'][setting] = val;
+  this.filters[filter]['settings'][setting] = val;
-  var json = JSON.stringify(this.data);
+  var json = JSON.stringify(this);"
sendgrid_sendgrid-nodejs,f996e4a8fd9a6c1e08f269b98aebca7869783f8c,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,lib/email.js,,"+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);","+Email.prototype.addUniqueArgs = function (val) {
+  this.smtpapi.addUniqueArgs(val);
+}
+
+}
+
+Email.prototype.addCategory = function(val) {
+  this.smtpapi.addCategory(val);"
sendgrid_sendgrid-nodejs,f996e4a8fd9a6c1e08f269b98aebca7869783f8c,Merge remote-tracking branch 'siyegen/x-smtpapi' into x-smtpapi,lib/smtpapi_headers.js,,"+var _ = require('underscore');
+
-  this.data = {};
+  this.to = [];
+  this.sub = {};
+  this.unique_args = {};
+  this.category = [];
+  this.filters = {};
-  if (!this.data['to']) {
-    this.data['to'] = [];
-  }
-  if (typeof to == 'object') {
-    this.data['to'] = this.data['to'].concat(to);
+  if (_.isArray(to)) {
+    this.to = this.to.concat(to);
-    this.data['to'].push(to);
+    this.to.push(to);
-  if (!this.data['sub']) {
-    this.data['sub'] = {};
-  }
-  if (typeof val == 'object') {
-    this.data['sub'][key] = val;
+  if (_.isArray(val)) {
+    this.sub[key] = val;
-    this.data['sub'][key] = [val];
+    this.sub[key] = [val];
-  if (typeof val == 'object') {
-    this.data['unique_args'] = val;
+  if (_.isObject(val)) {
+    this.unique_args = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addUniqueArgs = function(val) {
+  if (_.isObject(val)) {
+    _.extend(this.unique_args, val);
-  this.data['category'] = val;
+  this.category = val;
+}
+
+SmtpapiHeaders.prototype.addCategory = function(val) {
+  if (_.isArray(val)) {
+    this.category.concat(val);
+  } else {
+    this.category.push(val);
+  }
-  if (!this.data['filters']) {
-    this.data['filters'] = {};
+  if (!this.filters[filter]) {
+    this.filters[filter] = {};
-  if (!this.data['filters'][filter]) {
-    this.data['filters'][filter] = {};
+  if (!this.filters[filter]['settings']) {
+    this.filters[filter]['settings'] = {};
-  if (!this.data['filters'][filter]['settings']) {
-    this.data['filters'][filter]['settings'] = {};
-  }
-
-  this.data['filters'][filter]['settings'][setting] = val;
+  this.filters[filter]['settings'][setting] = val;
-  var json = JSON.stringify(this.data);
+  var json = JSON.stringify(this);","+var _ = require('underscore');
+
-  this.data = {};
+  this.to = [];
+  this.sub = {};
+  this.unique_args = {};
+  this.category = [];
+  this.filters = {};
-  if (!this.data['to']) {
-    this.data['to'] = [];
-  }
-  if (typeof to == 'object') {
-    this.data['to'] = this.data['to'].concat(to);
+  if (_.isArray(to)) {
+    this.to = this.to.concat(to);
-    this.data['to'].push(to);
+    this.to.push(to);
-  if (!this.data['sub']) {
-    this.data['sub'] = {};
-  }
-  if (typeof val == 'object') {
-    this.data['sub'][key] = val;
+  if (_.isArray(val)) {
+    this.sub[key] = val;
-    this.data['sub'][key] = [val];
+    this.sub[key] = [val];
-  if (typeof val == 'object') {
-    this.data['unique_args'] = val;
+  if (_.isObject(val)) {
+    this.unique_args = val;
+  }
+}
+
+SmtpapiHeaders.prototype.addUniqueArgs = function(val) {
+  if (_.isObject(val)) {
+    _.extend(this.unique_args, val);
-  this.data['category'] = val;
+  this.category = val;
+}
+
+SmtpapiHeaders.prototype.addCategory = function(val) {
+  if (_.isArray(val)) {
+    this.category.concat(val);
+  } else {
+    this.category.push(val);
+  }
-  if (!this.data['filters']) {
-    this.data['filters'] = {};
+  if (!this.filters[filter]) {
+    this.filters[filter] = {};
-  if (!this.data['filters'][filter]) {
-    this.data['filters'][filter] = {};
+  if (!this.filters[filter]['settings']) {
+    this.filters[filter]['settings'] = {};
-  if (!this.data['filters'][filter]['settings']) {
-    this.data['filters'][filter]['settings'] = {};
-  }
-
-  this.data['filters'][filter]['settings'][setting] = val;
+  this.filters[filter]['settings'][setting] = val;
-  var json = JSON.stringify(this.data);
+  var json = JSON.stringify(this);"
sendgrid_sendgrid-nodejs,77125fc60d2f2fd802bac8cc946d6bba682e69d6,Merge remote-tracking branch 'kyle/x-smtpapi' into x-smtpapi,test/lib/smtpapi_header.test.js,,"-  describe('recipients', function() {
-    it('should allow multiple to addresses', function() {
-      header.addTo('kyle.partridge@sendgrid.com');
-      header.to.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addTo('david.tomberlin@sendgrid.com');
-      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
-
-    it('should allow multiple cc addresses', function() {
-      header.addCc('kyle.partridge@sendgrid.com');
-      header.cc.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addCc('david.tomberlin@sendgrid.com');
-      header.cc.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
-
-    it('should allow multiple bcc addresses', function() {
-      header.addBcc('kyle.partridge@sendgrid.com');
-      header.bcc.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addBcc('david.tomberlin@sendgrid.com');
-      header.bcc.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
+  it('should allow multiple to addresses', function() {
+    header.addTo('kyle.partridge@sendgrid.com');
+    header.to.should.eql(['kyle.partridge@sendgrid.com']);
+    header.addTo('david.tomberlin@sendgrid.com');
+    header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);","-  describe('recipients', function() {
-    it('should allow multiple to addresses', function() {
-      header.addTo('kyle.partridge@sendgrid.com');
-      header.to.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addTo('david.tomberlin@sendgrid.com');
-      header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
-
-    it('should allow multiple cc addresses', function() {
-      header.addCc('kyle.partridge@sendgrid.com');
-      header.cc.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addCc('david.tomberlin@sendgrid.com');
-      header.cc.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
-
-    it('should allow multiple bcc addresses', function() {
-      header.addBcc('kyle.partridge@sendgrid.com');
-      header.bcc.should.eql(['kyle.partridge@sendgrid.com']);
-      header.addBcc('david.tomberlin@sendgrid.com');
-      header.bcc.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);
-    });
+  it('should allow multiple to addresses', function() {
+    header.addTo('kyle.partridge@sendgrid.com');
+    header.to.should.eql(['kyle.partridge@sendgrid.com']);
+    header.addTo('david.tomberlin@sendgrid.com');
+    header.to.should.eql(['kyle.partridge@sendgrid.com', 'david.tomberlin@sendgrid.com']);"
sendgrid_sendgrid-nodejs,d262b7c00ffd95d15f770008bb2500e61f5dc1fe,Merge pull request #9 from partkyle/unicode-test  Added a simple test for sending unicode email.,test/lib/sendgrid.test.js,,"+};
+
+var unicode_params = {
+  to: 'kyle.partridge@sendgrid.com',
+  from: 'kyle.partridge@sendgrid.com',
+  subject: 'Unicode Email!',
+  text: 'I can haz unicode? ✔'
+    it('should allow unicode in emails', function(done) {
+      var mail = new Email(unicode_params);
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+","+};
+
+var unicode_params = {
+  to: 'kyle.partridge@sendgrid.com',
+  from: 'kyle.partridge@sendgrid.com',
+  subject: 'Unicode Email!',
+  text: 'I can haz unicode? ✔'
+    it('should allow unicode in emails', function(done) {
+      var mail = new Email(unicode_params);
+      sendgrid.smtp(mail, function(success, message) {
+        if (!success) should.fail(message);
+        done();
+      });
+    });
+"
sendgrid_sendgrid-nodejs,18e416a0346f2c192c581206c5cbc3f15b03ef14,"Merge pull request #8 from siyegen/master  Fixed SendGrid export, added test",index.js,,"-module.exports.SendGrid = require('./lib/SendGrid');
+module.exports.SendGrid = require('./lib/sendgrid');","-module.exports.SendGrid = require('./lib/SendGrid');
+module.exports.SendGrid = require('./lib/sendgrid');"
sendgrid_sendgrid-nodejs,18e416a0346f2c192c581206c5cbc3f15b03ef14,"Merge pull request #8 from siyegen/master  Fixed SendGrid export, added test",test/index.test.js,,"+var index = require('../index');
+
-    require('../index').should.not.be.undefined;
+    index.should.not.be.undefined;
+  });
+  it('should export the SendGrid object', function() {
+    index.SendGrid.should.not.be.undefined;
+  });
+  it('should export the Email object', function() {
+    index.Email.should.not.be.undefined;","+var index = require('../index');
+
-    require('../index').should.not.be.undefined;
+    index.should.not.be.undefined;
+  });
+  it('should export the SendGrid object', function() {
+    index.SendGrid.should.not.be.undefined;
+  });
+  it('should export the Email object', function() {
+    index.Email.should.not.be.undefined;"
sendgrid_sendgrid-nodejs,0ce48002f8b4978bc7cce311a26a1bad784b32ee,Merge remote-tracking branch 'kyle/test-index',test/index.test.js,,"+  it('should export the SendGrid object', function() {
+    require('../index').SendGrid.should.not.be.undefined;
+  });
+  it('should export the Email object', function() {
+    require('../index').Email.should.not.be.undefined;
+  });","+  it('should export the SendGrid object', function() {
+    require('../index').SendGrid.should.not.be.undefined;
+  });
+  it('should export the Email object', function() {
+    require('../index').Email.should.not.be.undefined;
+  });"
sendgrid_sendgrid-nodejs,112ecf9101a4bd8222cb953b3a5a6640bd6c413c,"Merge pull request #7 from siyegen/master  Fixed exports, increased version number",index.js,,"+module.exports.SendGrid = require('./lib/SendGrid');
+module.exports.Email = require('./lib/email');","+module.exports.SendGrid = require('./lib/SendGrid');
+module.exports.Email = require('./lib/email');"
sendgrid_sendgrid-nodejs,112ecf9101a4bd8222cb953b3a5a6640bd6c413c,"Merge pull request #7 from siyegen/master  Fixed exports, increased version number",package.json,,"-  ""version"": ""0.0.0"",
+  ""version"": ""0.0.0-1"",","-  ""version"": ""0.0.0"",
+  ""version"": ""0.0.0-1"","
sendgrid_sendgrid-nodejs,afd265466914077e256f3d6903bd076508a05819,Merge pull request #6 from partkyle/master  Fixed node version issue,package.json,,"-    ""node"": ""~0.6.6""
+    ""node"": ""~0.6.0""","-    ""node"": ""~0.6.6""
+    ""node"": ""~0.6.0"""
sendgrid_sendgrid-nodejs,a1c88db954624bcf6b8b6d9c73db7c03210ef452,Merge pull request #5 from partkyle/integration  Merge in rewrite for Web and Smtp api,index.js,,"-// Copyright SendGrid, Inc.
-// http://www.Sendgrid.com
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the
-// ""Software""), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to permit
-// persons to whom the Software is furnished to do so, subject to the
-// following conditions:
-//
-// The above copyright notice and this permission notice shall be included
-// in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-// USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-module.exports = require(""./lib/sendgrid"");","-// Copyright SendGrid, Inc.
-// http://www.Sendgrid.com
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the
-// ""Software""), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to permit
-// persons to whom the Software is furnished to do so, subject to the
-// following conditions:
-//
-// The above copyright notice and this permission notice shall be included
-// in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-// USE OR OTHER DEALINGS IN THE SOFTWARE.
-
-module.exports = require(""./lib/sendgrid"");"
sendgrid_sendgrid-nodejs,a1c88db954624bcf6b8b6d9c73db7c03210ef452,Merge pull request #5 from partkyle/integration  Merge in rewrite for Web and Smtp api,lib/sendgrid.js,,"-// Copyright SendGrid, Inc.
-// http://www.Sendgrid.com
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the
-// ""Software""), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to permit
-// persons to whom the Software is furnished to do so, subject to the
-// following conditions:
-//
-// The above copyright notice and this permission notice shall be included
-// in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-// USE OR OTHER DEALINGS IN THE SOFTWARE.
+""use strict"";
-/**
- * Description
+var querystring = require('querystring');
+var https = require('https');
+var nodemailer = require('nodemailer');
+var _ = require('underscore');
+
+function SendGrid(credentials) {
+  this.api_user = credentials.api_user;
+  this.api_key = credentials.api_key;
+}
+
+/*
+ * Sends an email and returns true if the
+ * message was sent successfully.
- * @param {Object} from Pair of name and email address(es)
- * @param {Object} to Pair of name and email address(es)
- * @param {Array} cc Email address(es)
- * @param {Array} bcc Email address(es)
- * @param {String} subject Subject of the email
- * @param {Date} date Must be a valid RFC 2822 formatted date, http://www.faqs.org/rfcs/rfc2822
- * @param {Object} headers A collection of key/value pairs in JSON format.
- * Each key represents a header name and the value the header value.
- * Ex: {""X-Accept-Language"": ""en"", ""X-Mailer"": ""MyApp""}
- * @param {String} html HTML body
- * @param {String} text Text body
- * @param {Object} transport - transport object
- */
-var path = require('path'),
-    header = require('./header');
+ * @returns {Boolean}
+*/
+SendGrid.prototype.send = function(email, callback) {
+  var post_data = this.getPostData(email.params || email);
+  var options = {
+    host: 'sendgrid.com',
+    path: '/api/mail.send.json',
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/x-www-form-urlencoded',
+      'Content-Length': post_data.length
+    }
+  };
-exports.Http = require('./http').Http;
-exports.Smtp = require('./smtp').Smtp;
+  var request = https.request(options, function(res) {
+    res.setEncoding('utf8');
+    res.on('data', function(chunk) {
+      var json = JSON.parse(chunk);
+      callback.call(null, json.message == 'success', json.errors);
+    });
+  });
-exports.Sendgrid = function(transport) {
-  this.from_address = '';
-  this.to = [];
-  this.to_name = [];
-  this.subject = '';
-  this.date = null;
-  this.text = '';
-  this.html = '';
-  this.cc = [];
-  this.bcc = [];
-  this.headers = {};
-  this.header = new header.Header;
-  this.attachments = [];
+  request.write(post_data);
+  request.end();
+};
+SendGrid.prototype.smtp = function(email, callback) {
+  var self = this;
-  this.addTo = function(recipients) {
-    if(typeof recipients == 'string') {
-      this.to.push(recipients);
-    }else if(Array.isArray(recipients)) {
-      this.to = this.to.concat(recipients);
-    }else {
-      for(var firstKey in recipients) break;
-      if(typeof recipients[firstKey] == 'string') {
-        for(var email in recipients){
-          this.to.push(email);
-          this.to_name.push(recipients[email]);
-        }
-      }else {
-        //handle case with subvals like: {
-        //        'example1@example.com': {'name': 'Name 1', 'code': 'Code 1'},
-        //        'example2@example.com': {'name': 'Name 2', 'code': 'Code 2'},
-        //    }
-        var subvals = {};
-        var to = [];
-        for(var email in recipients) {
-          to.push(email);
-          for(var subval in recipients[email]) {
-            if(!subvals[subval]) {
-              subvals[subval] = [];
-            }
-            subvals[subval].push(recipients[email][subval]);
-          }
+  nodemailer.SMTP = {
+    host: 'smtp.sendgrid.net',
+    use_authentication: true,
+    ssl: true,
+    user: this.api_user,
+    pass: this.api_key
+  };
-          for(var subval in subvals) {
-            if(subvals[subval].length != to.length) {
-              this.header = new header.Header;
-              throw ""Sub values count should be equal to recipients count"";
-            }
-            this.header.addSubVal(subval, subvals[subval]);
-          }
+  email = email.params || email;
-          this.header.addTo(to);
-          this.to = [transport.username];
-        }
+  nodemailer.send_mail({
+    sender: email.from,
+    to: email.to,
+    subject: email.subject,
+    body: email.text,
+    html: email.html
+  }, function(error, success) {
+    callback.call(self, success, error);
+  });
-      }
-    }
+}
+
+SendGrid.prototype.getPostData = function(params) {
+  var data = {
+    api_user: this.api_user,
+    api_key: this.api_key
+  _(params).each(function(v, k) {
+    data[k] = v;
+  });
+  return querystring.stringify(data);
+};
-  this.getTo = function() {
-    return this.to;
-  }
-
-
-  this.getToString = function() {
-    var to = '';
-    for(var key in this.to) {
-      to += this.to[key] + ',';
-    }
-    return to;
-  }
-
-
-  this.setSubject = function(subject) {
-    this.subject = subject;
-  }
-
-
-  this.getSubject = function() {
-    return this.subject;
-  }
-
-
-  this.getFromAddress = function() {
-    return this.from_address;
-  }
-
-
-  this.setFromAddress = function(value) {
-    this.from_address = value;
-  }
-
-
-  this.getFromName = function() {
-    return this.from_name;
-  }
-
-
-  this.setFromName = function(value) {
-    this.from_name = value;
-  }
-
-
-  this.getReplyTo = function() {
-    return this.reply_to;
-  }
-
-
-  this.setReplyTo = function(value) {
-    this.reply_to = value;
-  }
-
-
-  this.getHeader = function() {
-    return this.header;
-  }
-
-
-  this.getHeaders = function() {
-    return this.headers;
-  }
-
-
-  this.setHeaders = function(value) {
-    this.headers = value;
-  }
-
-
-  this.addHeader = function(header, value) {
-    this.headers[header] = value;
-  }
-
-
-  this.getDate = function() {
-    return this.date;
-  }
-
-
-  this.setDate = function(value) {
-    this.date = value;
-  }
-
-
-  this.getText = function() {
-    return this.text;
-  }
-
-
-  this.setText = function(value) {
-    this.text = value;
-  }
-
-
-  this.getHtml = function() {
-    return this.html;
-  }
-
-
-  this.setHtml = function(value) {
-    this.html = value;
-  }
-
-
-  this.getToName = function() {
-    return this.to_name;
-  }
-
-
-  this.setToName = function(value) {
-    this.to_name = value;
-  }
-
-
-  this.addBCC = function(recipients) {
-    if(typeof recipients == 'string') {
-      this.bcc.push(recipients);
-    }else if(Array.isArray(recipients)) {
-      this.bcc = this.bcc.concat(recipients);
-    }
-  }
-
-
-  this.getBCC = function(recipients) {
-    return this.bcc;
-  }
-
-
-  this.addAttachment = function(name, file, cid) {
-    if(file.length < 65535 && !path.existsSync(file)) {
-      throw ""File don't exist."";
-    }
-    this.attachments.push({'name': name, 'file': file, 'cid': cid});
-  }
-
-
-  this.getAttachments = function() {
-    return this.attachments;
-  }
-
-
-  this.setCategory = function(category) {
-    this.header.setCategory(category);
-  }
-
-
-  this.setUniqueArgs = function(val) {
-    this.header.setUniqueArgs(val);
-  }
-
-
-  this.addFilterSetting = function(filter, setting, val) {
-    this.header.addFilterSetting(filter, setting, val);
-  }
-
-
-  this.deliver = function(options, callback) {
-    if(options.from_address) {
-      this.from_address = options.from_address;
-    }
-
-    if(options.to) {
-      this.to = [];
-      this.to_name = [];
-      this.addTo(options.to);
-    }
-
-    if(options.subject) {
-      this.subject = options.subject;
-    }
-
-    if(options.html) {
-      this.html = options.html;
-    }
-
-    if(options.text) {
-      this.text = options.text;
-    }
-
-    if(options.cc) {
-      this.cc = [];
-      this.addCC(options.cc);
-    }
-
-    if(options.bcc) {
-      this.bcc = [];
-      this.addBCC(options.bcc);
-    }
-
-    if(options.headers) {
-      this.setHeaders(options.headers);
-    }
-
-    transport.deliver(this, callback);
-  }
-
-
-  //apps list and settings
-  var RE_TEXT = /<\%\s*\%>/;
-  var RE_HTML = /<\%\s*[^\s]+\s*\%>/;
-
-  var apps = { 'Gravatar': { filter: 'gravatar' },
-                     'OpenTracking': { 'filter': 'opentrack' },
-                     'ClickTracking': { 'filter': 'clicktrack',
-                                          'settings': {
-                                            'text': {
-                                              'setting': 'enable_text'
-                                            }
-                                          }
-                     },
-                     'SpamCheck': { 'filter': 'spamcheck',
-                                      'settings': {
-                                        'score': {
-                                          'setting': 'maxscore',
-                                        },
-                                        'url': {
-                                          'setting': 'url'
-                                        }
-                                      }
-                     },
-                     'Unsubscribe': {
-                       'filter': 'subscriptiontrack',
-                       'settings': {
-                         'text': {
-                           'setting': 'text/plain',
-                           'validation': function(x){ if(!RE_TEXT.test(x)) throw 'Missing substitution tag in text'; }
-                         },
-                         'html': {
-                           'setting': 'text/html',
-                           'validation': function(x){ if(!RE_HTML.test(x)) throw 'Missing substitution tag in html'; }
-                         },
-                         'replace': {
-                           'setting': 'replace',
-                         },
-                       },
-                     },
-                     'Footer': {
-                       'filter': 'footer',
-                       'settings': {
-                         'text': { 'setting': 'text/plain' },
-                         'html': { 'setting': 'text/html' },
-                       },
-                     },
-                     'GoogleAnalytics': {
-                       'filter': 'ganalytics',
-                       'settings': {
-                         'source': { 'setting': 'utm_source' },
-                         'medium': { 'setting': 'utm_medium' },
-                         'term': { 'setting': 'utm_term' },
-                         'content': { 'setting': 'utm_content' },
-                         'campaign': { 'setting': 'utm_campaign' },
-                       },
-                     },
-                     'DomainKeys': {
-                       'filter': 'domainkeys',
-                       'settings': {
-                         'domain': { 'setting': 'domain' },
-                         'sender': { 'setting': 'sender' },
-                       },
-                     },
-                     'Template': {
-                       'filter': 'template',
-                       'validation': function(x){ if(!x['html']) throw 'Missing html template'; },
-                       'settings': {
-                         'html': {
-                           'setting': 'text/html',
-                           'validation': function(x){ if(!RE_TEXT.test(x)) throw 'Missing body substitution tag in template'; }
-                         },
-                       },
-                     },
-                     'Twitter': {
-                       'filter': 'twitter',
-                       'validation': function(x){ if(!x['username'] || !x['password']) throw 'Missing twitter username/password'; },
-                       'settings': {
-                         'username': { 'setting': 'username' },
-                         'password': { 'setting': 'password' },
-                       },
-                     },
-                     'Bcc': {
-                       'filter': 'bcc',
-                       'validation': function(x){ if(!x['email']) throw 'Missing bcc email'; },
-                       'settings': {
-                         'email': { 'setting': 'email' },
-                       },
-                     },
-                     'BypassListManagement': {
-                       'filter': 'bypass_list_management',
-                     },
-
-      }
-
-
-  this.generateFilterFunctions = function() {
-    var self = this;
-
-    var enableFilter = function(name, params) {
-      var required_params = apps[name].settings || {};
-
-      //validate parameters
-      if(apps[name].validation) {
-        apps[name].validation(params);
-      }
-
-      for(var param in params) {
-        if(!required_params[param]) {
-          throw ""Unknown app setting "" + param;
-        }
-
-        //check per-argument validation
-        if(required_params[param].validation) {
-          required_params[param].validation(params[param]);
-        }
-      }
-
-      params['enable'] = 1;
-      for(var param in params) {
-        self.header.addFilterSetting(name, param, params[param]);
-      }
-    }
-
-    var disableFilter = function(name) {
-      self.header.addFilterSetting(name, 'enable', 0);
-    }
-
-    var _enableFilter = function(name) {
-      return function(params){
-        enableFilter(name, params);
-      };
-    }
-
-    var _disableFilter = function(name) {
-      return function(){
-        disableFilter(name);
-      };
-    }
-
-    for(var app in apps) {
-      this['enable' + app] = _enableFilter(app);
-      this['disable' + app] = _disableFilter(app);
-    }
-  }
-
-  this.generateFilterFunctions();
-};
+module.exports = SendGrid;","-// Copyright SendGrid, Inc.
-// http://www.Sendgrid.com
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the
-// ""Software""), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to permit
-// persons to whom the Software is furnished to do so, subject to the
-// following conditions:
-//
-// The above copyright notice and this permission notice shall be included
-// in all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-// USE OR OTHER DEALINGS IN THE SOFTWARE.
+""use strict"";
-/**
- * Description
+var querystring = require('querystring');
+var https = require('https');
+var nodemailer = require('nodemailer');
+var _ = require('underscore');
+
+function SendGrid(credentials) {
+  this.api_user = credentials.api_user;
+  this.api_key = credentials.api_key;
+}
+
+/*
+ * Sends an email and returns true if the
+ * message was sent successfully.
- * @param {Object} from Pair of name and email address(es)
- * @param {Object} to Pair of name and email address(es)
- * @param {Array} cc Email address(es)
- * @param {Array} bcc Email address(es)
- * @param {String} subject Subject of the email
- * @param {Date} date Must be a valid RFC 2822 formatted date, http://www.faqs.org/rfcs/rfc2822
- * @param {Object} headers A collection of key/value pairs in JSON format.
- * Each key represents a header name and the value the header value.
- * Ex: {""X-Accept-Language"": ""en"", ""X-Mailer"": ""MyApp""}
- * @param {String} html HTML body
- * @param {String} text Text body
- * @param {Object} transport - transport object
- */
-var path = require('path'),
-    header = require('./header');
+ * @returns {Boolean}
+*/
+SendGrid.prototype.send = function(email, callback) {
+  var post_data = this.getPostData(email.params || email);
+  var options = {
+    host: 'sendgrid.com',
+    path: '/api/mail.send.json',
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/x-www-form-urlencoded',
+      'Content-Length': post_data.length
+    }
+  };
-exports.Http = require('./http').Http;
-exports.Smtp = require('./smtp').Smtp;
+  var request = https.request(options, function(res) {
+    res.setEncoding('utf8');
+    res.on('data', function(chunk) {
+      var json = JSON.parse(chunk);
+      callback.call(null, json.message == 'success', json.errors);
+    });
+  });
-exports.Sendgrid = function(transport) {
-  this.from_address = '';
-  this.to = [];
-  this.to_name = [];
-  this.subject = '';
-  this.date = null;
-  this.text = '';
-  this.html = '';
-  this.cc = [];
-  this.bcc = [];
-  this.headers = {};
-  this.header = new header.Header;
-  this.attachments = [];
+  request.write(post_data);
+  request.end();
+};
+SendGrid.prototype.smtp = function(email, callback) {
+  var self = this;
-  this.addTo = function(recipients) {
-    if(typeof recipients == 'string') {
-      this.to.push(recipients);
-    }else if(Array.isArray(recipients)) {
-      this.to = this.to.concat(recipients);
-    }else {
-      for(var firstKey in recipients) break;
-      if(typeof recipients[firstKey] == 'string') {
-        for(var email in recipients){
-          this.to.push(email);
-          this.to_name.push(recipients[email]);
-        }
-      }else {
-        //handle case with subvals like: {
-        //        'example1@example.com': {'name': 'Name 1', 'code': 'Code 1'},
-        //        'example2@example.com': {'name': 'Name 2', 'code': 'Code 2'},
-        //    }
-        var subvals = {};
-        var to = [];
-        for(var email in recipients) {
-          to.push(email);
-          for(var subval in recipients[email]) {
-            if(!subvals[subval]) {
-              subvals[subval] = [];
-            }
-            subvals[subval].push(recipients[email][subval]);
-          }
+  nodemailer.SMTP = {
+    host: 'smtp.sendgrid.net',
+    use_authentication: true,
+    ssl: true,
+    user: this.api_user,
+    pass: this.api_key
+  };
-          for(var subval in subvals) {
-            if(subvals[subval].length != to.length) {
-              this.header = new header.Header;
-              throw ""Sub values count should be equal to recipients count"";
-            }
-            this.header.addSubVal(subval, subvals[subval]);
-          }
+  email = email.params || email;
-          this.header.addTo(to);
-          this.to = [transport.username];
-        }
+  nodemailer.send_mail({
+    sender: email.from,
+    to: email.to,
+    subject: email.subject,
+    body: email.text,
+    html: email.html
+  }, function(error, success) {
+    callback.call(self, success, error);
+  });
-      }
-    }
+}
+
+SendGrid.prototype.getPostData = function(params) {
+  var data = {
+    api_user: this.api_user,
+    api_key: this.api_key
+  _(params).each(function(v, k) {
+    data[k] = v;
+  });
+  return querystring.stringify(data);
+};
-  this.getTo = function() {
-    return this.to;
-  }
-
-
-  this.getToString = function() {
-    var to = '';
-    for(var key in this.to) {
-      to += this.to[key] + ',';
-    }
-    return to;
-  }
-
-
-  this.setSubject = function(subject) {
-    this.subject = subject;
-  }
-
-
-  this.getSubject = function() {
-    return this.subject;
-  }
-
-
-  this.getFromAddress = function() {
-    return this.from_address;
-  }
-
-
-  this.setFromAddress = function(value) {
-    this.from_address = value;
-  }
-
-
-  this.getFromName = function() {
-    return this.from_name;
-  }
-
-
-  this.setFromName = function(value) {
-    this.from_name = value;
-  }
-
-
-  this.getReplyTo = function() {
-    return this.reply_to;
-  }
-
-
-  this.setReplyTo = function(value) {
-    this.reply_to = value;
-  }
-
-
-  this.getHeader = function() {
-    return this.header;
-  }
-
-
-  this.getHeaders = function() {
-    return this.headers;
-  }
-
-
-  this.setHeaders = function(value) {
-    this.headers = value;
-  }
-
-
-  this.addHeader = function(header, value) {
-    this.headers[header] = value;
-  }
-
-
-  this.getDate = function() {
-    return this.date;
-  }
-
-
-  this.setDate = function(value) {
-    this.date = value;
-  }
-
-
-  this.getText = function() {
-    return this.text;
-  }
-
-
-  this.setText = function(value) {
-    this.text = value;
-  }
-
-
-  this.getHtml = function() {
-    return this.html;
-  }
-
-
-  this.setHtml = function(value) {
-    this.html = value;
-  }
-
-
-  this.getToName = function() {
-    return this.to_name;
-  }
-
-
-  this.setToName = function(value) {
-    this.to_name = value;
-  }
-
-
-  this.addBCC = function(recipients) {
-    if(typeof recipients == 'string') {
-      this.bcc.push(recipients);
-    }else if(Array.isArray(recipients)) {
-      this.bcc = this.bcc.concat(recipients);
-    }
-  }
-
-
-  this.getBCC = function(recipients) {
-    return this.bcc;
-  }
-
-
-  this.addAttachment = function(name, file, cid) {
-    if(file.length < 65535 && !path.existsSync(file)) {
-      throw ""File don't exist."";
-    }
-    this.attachments.push({'name': name, 'file': file, 'cid': cid});
-  }
-
-
-  this.getAttachments = function() {
-    return this.attachments;
-  }
-
-
-  this.setCategory = function(category) {
-    this.header.setCategory(category);
-  }
-
-
-  this.setUniqueArgs = function(val) {
-    this.header.setUniqueArgs(val);
-  }
-
-
-  this.addFilterSetting = function(filter, setting, val) {
-    this.header.addFilterSetting(filter, setting, val);
-  }
-
-
-  this.deliver = function(options, callback) {
-    if(options.from_address) {
-      this.from_address = options.from_address;
-    }
-
-    if(options.to) {
-      this.to = [];
-      this.to_name = [];
-      this.addTo(options.to);
-    }
-
-    if(options.subject) {
-      this.subject = options.subject;
-    }
-
-    if(options.html) {
-      this.html = options.html;
-    }
-
-    if(options.text) {
-      this.text = options.text;
-    }
-
-    if(options.cc) {
-      this.cc = [];
-      this.addCC(options.cc);
-    }
-
-    if(options.bcc) {
-      this.bcc = [];
-      this.addBCC(options.bcc);
-    }
-
-    if(options.headers) {
-      this.setHeaders(options.headers);
-    }
-
-    transport.deliver(this, callback);
-  }
-
-
-  //apps list and settings
-  var RE_TEXT = /<\%\s*\%>/;
-  var RE_HTML = /<\%\s*[^\s]+\s*\%>/;
-
-  var apps = { 'Gravatar': { filter: 'gravatar' },
-                     'OpenTracking': { 'filter': 'opentrack' },
-                     'ClickTracking': { 'filter': 'clicktrack',
-                                          'settings': {
-                                            'text': {
-                                              'setting': 'enable_text'
-                                            }
-                                          }
-                     },
-                     'SpamCheck': { 'filter': 'spamcheck',
-                                      'settings': {
-                                        'score': {
-                                          'setting': 'maxscore',
-                                        },
-                                        'url': {
-                                          'setting': 'url'
-                                        }
-                                      }
-                     },
-                     'Unsubscribe': {
-                       'filter': 'subscriptiontrack',
-                       'settings': {
-                         'text': {
-                           'setting': 'text/plain',
-                           'validation': function(x){ if(!RE_TEXT.test(x)) throw 'Missing substitution tag in text'; }
-                         },
-                         'html': {
-                           'setting': 'text/html',
-                           'validation': function(x){ if(!RE_HTML.test(x)) throw 'Missing substitution tag in html'; }
-                         },
-                         'replace': {
-                           'setting': 'replace',
-                         },
-                       },
-                     },
-                     'Footer': {
-                       'filter': 'footer',
-                       'settings': {
-                         'text': { 'setting': 'text/plain' },
-                         'html': { 'setting': 'text/html' },
-                       },
-                     },
-                     'GoogleAnalytics': {
-                       'filter': 'ganalytics',
-                       'settings': {
-                         'source': { 'setting': 'utm_source' },
-                         'medium': { 'setting': 'utm_medium' },
-                         'term': { 'setting': 'utm_term' },
-                         'content': { 'setting': 'utm_content' },
-                         'campaign': { 'setting': 'utm_campaign' },
-                       },
-                     },
-                     'DomainKeys': {
-                       'filter': 'domainkeys',
-                       'settings': {
-                         'domain': { 'setting': 'domain' },
-                         'sender': { 'setting': 'sender' },
-                       },
-                     },
-                     'Template': {
-                       'filter': 'template',
-                       'validation': function(x){ if(!x['html']) throw 'Missing html template'; },
-                       'settings': {
-                         'html': {
-                           'setting': 'text/html',
-                           'validation': function(x){ if(!RE_TEXT.test(x)) throw 'Missing body substitution tag in template'; }
-                         },
-                       },
-                     },
-                     'Twitter': {
-                       'filter': 'twitter',
-                       'validation': function(x){ if(!x['username'] || !x['password']) throw 'Missing twitter username/password'; },
-                       'settings': {
-                         'username': { 'setting': 'username' },
-                         'password': { 'setting': 'password' },
-                       },
-                     },
-                     'Bcc': {
-                       'filter': 'bcc',
-                       'validation': function(x){ if(!x['email']) throw 'Missing bcc email'; },
-                       'settings': {
-                         'email': { 'setting': 'email' },
-                       },
-                     },
-                     'BypassListManagement': {
-                       'filter': 'bypass_list_management',
-                     },
-
-      }
-
-
-  this.generateFilterFunctions = function() {
-    var self = this;
-
-    var enableFilter = function(name, params) {
-      var required_params = apps[name].settings || {};
-
-      //validate parameters
-      if(apps[name].validation) {
-        apps[name].validation(params);
-      }
-
-      for(var param in params) {
-        if(!required_params[param]) {
-          throw ""Unknown app setting "" + param;
-        }
-
-        //check per-argument validation
-        if(required_params[param].validation) {
-          required_params[param].validation(params[param]);
-        }
-      }
-
-      params['enable'] = 1;
-      for(var param in params) {
-        self.header.addFilterSetting(name, param, params[param]);
-      }
-    }
-
-    var disableFilter = function(name) {
-      self.header.addFilterSetting(name, 'enable', 0);
-    }
-
-    var _enableFilter = function(name) {
-      return function(params){
-        enableFilter(name, params);
-      };
-    }
-
-    var _disableFilter = function(name) {
-      return function(){
-        disableFilter(name);
-      };
-    }
-
-    for(var app in apps) {
-      this['enable' + app] = _enableFilter(app);
-      this['disable' + app] = _disableFilter(app);
-    }
-  }
-
-  this.generateFilterFunctions();
-};
+module.exports = SendGrid;"
sendgrid_sendgrid-nodejs,a1c88db954624bcf6b8b6d9c73db7c03210ef452,Merge pull request #5 from partkyle/integration  Merge in rewrite for Web and Smtp api,package.json,,"-  ""description"": ""A NodeJS implementation of the SendGrid Api"",
-  ""version"": ""0.0.1"",
+  ""description"": ""A NodeJS implementation of the SendGrid Api."",
+  ""version"": ""0.0.0"",
-    ""nodemailer"": "">= 0.1.22"",
-    ""mime"": "">= 1.2.2""
+    ""underscore"": "">=1.2.4"",
+    ""nodemailer"": ""*""
-    ""mocha"": ""*"",
-    ""should"": ""*""
+    ""mocha"": "">= 0.9.0"",
+    ""should"": "">= 0.4.2""
+  },
+  ""scripts"": {
+    ""test"": ""jasmine-node spec""","-  ""description"": ""A NodeJS implementation of the SendGrid Api"",
-  ""version"": ""0.0.1"",
+  ""description"": ""A NodeJS implementation of the SendGrid Api."",
+  ""version"": ""0.0.0"",
-    ""nodemailer"": "">= 0.1.22"",
-    ""mime"": "">= 1.2.2""
+    ""underscore"": "">=1.2.4"",
+    ""nodemailer"": ""*""
-    ""mocha"": ""*"",
-    ""should"": ""*""
+    ""mocha"": "">= 0.9.0"",
+    ""should"": "">= 0.4.2""
+  },
+  ""scripts"": {
+    ""test"": ""jasmine-node spec"""
sendgrid_sendgrid-nodejs,a1c88db954624bcf6b8b6d9c73db7c03210ef452,Merge pull request #5 from partkyle/integration  Merge in rewrite for Web and Smtp api,test/index.test.js,,"-var should = require('should');
-
-describe('index', function() {
-  it('should have a sendgrid object', function() {
-    should.exist(require('../index').Sendgrid);
+describe(""index.js"", function () {
+  it(""should exist"", function () {
+    require('../index').should.not.be.undefined;
-})
+});","-var should = require('should');
-
-describe('index', function() {
-  it('should have a sendgrid object', function() {
-    should.exist(require('../index').Sendgrid);
+describe(""index.js"", function () {
+  it(""should exist"", function () {
+    require('../index').should.not.be.undefined;
-})
+});"
sendgrid_sendgrid-nodejs,33f270a6ed90ce630c1f16313285ee148506672e,Merge pull request #4 from partkyle/mocha  fixed an error,test/smtp.test.js,,"-        sg.deliver({from_address:'from@example.com', to: null, subject:'subject 1', html:'<b>Html 1</b>',}, function(err, message) {
+        sg.deliver({from_address:'from@example.com', to: null, subject:'subject 1', html:'<b>Html 1</b>'}, function(err, message) {","-        sg.deliver({from_address:'from@example.com', to: null, subject:'subject 1', html:'<b>Html 1</b>',}, function(err, message) {
+        sg.deliver({from_address:'from@example.com', to: null, subject:'subject 1', html:'<b>Html 1</b>'}, function(err, message) {"
sendgrid_sendgrid-nodejs,5056d0173c2f774a222e9c394b6b3a537cb97802,Merge pull request #2 from partkyle/mocha  Using mocha for tests,package.json,,"-  ""devDependencies"": {}
+  ""devDependencies"": {
+    ""mocha"": ""*"",
+    ""should"": ""*""
+  }","-  ""devDependencies"": {}
+  ""devDependencies"": {
+    ""mocha"": ""*"",
+    ""should"": ""*""
+  }"
