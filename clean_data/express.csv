repo,commit,commit_msg,file,left_diff,right_diff,merged_diff
expressjs_express,f9256ef36fa97da0c1f2b90e789a694e97fa59de,Merge branch '5.0' into 5-merge,lib/response.js,"- * Module variables.
- * @private
- */
-
-var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-
-/**
-  var m = schemaAndHostRegExp.exec(loc);
-  var pos = m ? m[0].length + 1 : 0;
-
-  // Only encode after host to avoid invalid encoding which can introduce
-  // vulnerabilities (e.g. `\\` to `%5C`).
-  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
-
-  return this.set('Location', loc);
+  return this.set('Location', encodeUrl(loc));
-      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to ' + u + '</p>'","-var pathIsAbsolute = require('path-is-absolute');
+var pathIsAbsolute = require('path').isAbsolute;","-var pathIsAbsolute = require('path-is-absolute');
+var pathIsAbsolute = require('path').isAbsolute;
-
-/**
- * Module variables.
- * @private
- */
-
-var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-  var m = schemaAndHostRegExp.exec(loc);
-  var pos = m ? m[0].length + 1 : 0;
-
-  // Only encode after host to avoid invalid encoding which can introduce
-  // vulnerabilities (e.g. `\\` to `%5C`).
-  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
-
-  return this.set('Location', loc);
+  return this.set('Location', encodeUrl(loc));
-      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to ' + u + '</p>'"
expressjs_express,f9256ef36fa97da0c1f2b90e789a694e97fa59de,Merge branch '5.0' into 5-merge,package.json,"+<<<<<<< HEAD
+=======
+  ""version"": ""4.20.0"",
+>>>>>>> master
-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",
-    ""merge-descriptors"": ""1.0.1"",
+    ""merge-descriptors"": ""1.0.3"",
-    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
-    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"",
+    ""test-ci"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=html --reporter=text npm test"",","-    ""accepts"": ""~1.3.8"",
+    ""accepts"": ""^2.0.0"",
-    ""content-disposition"": ""0.5.4"",
+    ""content-disposition"": ""^1.0.0"",
-    ""cookie-signature"": ""1.0.6"",
-    ""debug"": ""3.1.0"",
+    ""cookie-signature"": ""^1.2.1"",
+    ""debug"": ""4.3.6"",
-    ""finalhandler"": ""1.2.0"",
-    ""fresh"": ""0.5.2"",
+    ""finalhandler"": ""^2.0.0"",
+    ""fresh"": ""2.0.0"",
-    ""merge-descriptors"": ""1.0.1"",
+    ""merge-descriptors"": ""^2.0.0"",
-    ""mime-types"": ""~2.1.34"",
+    ""mime-types"": ""^3.0.0"",
-    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.11.0"",
+    ""qs"": ""6.13.0"",
-    ""router"": ""2.0.0-beta.2"",
+    ""router"": ""^2.0.0"",
-    ""send"": ""1.0.0-beta.2"",
-    ""serve-static"": ""2.0.0-beta.2"",
+    ""send"": ""^1.0.0"",
+    ""serve-static"": ""^2.0.0"",
-    ""type-is"": ""~1.6.18"",
+    ""type-is"": ""^2.0.0"",","-    ""accepts"": ""~1.3.8"",
+    ""accepts"": ""^2.0.0"",
-    ""content-disposition"": ""0.5.4"",
+    ""content-disposition"": ""^1.0.0"",
-    ""cookie-signature"": ""1.0.6"",
-    ""debug"": ""3.1.0"",
+    ""cookie-signature"": ""^1.2.1"",
+    ""debug"": ""4.3.6"",
-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",
-    ""finalhandler"": ""1.2.0"",
-    ""fresh"": ""0.5.2"",
+    ""finalhandler"": ""^2.0.0"",
+    ""fresh"": ""2.0.0"",
-    ""merge-descriptors"": ""1.0.1"",
+    ""merge-descriptors"": ""^2.0.0"",
-    ""mime-types"": ""~2.1.34"",
+    ""mime-types"": ""^3.0.0"",
-    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.11.0"",
+    ""qs"": ""6.13.0"",
-    ""router"": ""2.0.0-beta.2"",
+    ""router"": ""^2.0.0"",
-    ""send"": ""1.0.0-beta.2"",
-    ""serve-static"": ""2.0.0-beta.2"",
+    ""send"": ""^1.0.0"",
+    ""serve-static"": ""^2.0.0"",
-    ""type-is"": ""~1.6.18"",
+    ""type-is"": ""^2.0.0"",
-    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
-    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"",
+    ""test-ci"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=html --reporter=text npm test"","
expressjs_express,f9256ef36fa97da0c1f2b90e789a694e97fa59de,Merge branch '5.0' into 5-merge,test/app.router.js,"+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+        if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+          this.skip()
+        }
+
+    if (supportsRegexp('(?<foo>.*)')) {
+      it('should populate req.params with named captures', function(done){
+        var app = express();
+        var re = new RegExp('^/user/(?<userId>[0-9]+)/(view|edit)?$');
+
+        app.get(re, function(req, res){
+          var id = req.params.userId
+            , op = req.params[0];
+          res.end(op + 'ing user ' + id);
+        });
+
+        request(app)
+        .get('/user/10/edit')
+        .expect('editing user 10', done);
+      })
+    }
+
+function supportsRegexp(source) {
+  try {
+    new RegExp(source)
+    return true
+  } catch (e) {
+    return false
+  }
+}","-      router.get('/(.*).(.*)', function (req, res) {
+      router.get(/^\/(.*)\.(.*)/, function (req, res) {
-      app.use('/user/id:(\\d+)', router);
+      app.use(/^\/user\/id:(\d+)/, router);
-      router.get('/(.*)', function (req, res) {
+      router.get(/\/(.*)/, function (req, res) {
-      app.use('/user/id:(\\d+)/name:(\\w+)', router);
+      app.use(/^\/user\/id:(\d+)\/name:(\w+)/, router);
-      router.get('/name:(\\w+)', function(req, res){
+      router.get(/\/name:(\w+)/, function(req, res){
-      app.use('/user/id:(\\d+)', router);
+      app.use(/\/user\/id:(\d+)/, router);
-      router.get('/user:(\\w+)/*', function (req, res, next) {
+      router.get(/\/user:(\w+)\//, function (req, res, next) {
-      app.use('/user/id:(\\d+)', function (req, res, next) {
+      app.use(/\/user\/id:(\d+)/, function (req, res, next) {
-      app.get('/user(s?)/:user/:op', function(req, res){
-        res.end(req.params.op + 'ing ' + req.params.user + (req.params[0] ? ' (old)' : ''));
+      app.get('/user{s}/:user/:op', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user + (req.url.startsWith('/users') ? ' (old)' : ''));
-      app.get('/user/:user/:op?', function(req, res){
+      app.get('/user/:user{/:op}', function(req, res){
-      app.get('/user/:user/:op?', function(req, res){
+      app.get('/user/:user{/:op}', function(req, res){
-      app.get('/user/:user*', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user[0])
-      app.get('/user/:user*', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user.join('/'))
-      app.get('/user/:user*', function (req, res) {
+      app.get('/user{/*user}', function (req, res) {
-      app.get('/user/:user+', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user[0])
-      app.get('/user/:user+', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user.join('/'))
-      app.get('/user/:user+', function (req, res) {
+      app.get('/user/*user', function (req, res) {
-      app.get('/:name.:format?', function(req, res){
+      app.get('/:name{.:format}', function(req, res){
-      app.get('/foo/:bar?', function(req, res, next){
+      app.get('/foo{/:bar}', function(req, res, next){
-      app.get('/foo/:bar?', function(req, res, next){
+      app.get('/foo{/:bar}', function(req, res, next){
-    app.get('/:path+', function (req, res, next) {
+    app.get('/*path', function (req, res, next) {
-    app.get('/(.*)', function (req, res, next) {
+    app.get('/*splat', function (req, res, next) {","+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+        if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+          this.skip()
+        }
+
+    if (supportsRegexp('(?<foo>.*)')) {
+      it('should populate req.params with named captures', function(done){
+        var app = express();
+        var re = new RegExp('^/user/(?<userId>[0-9]+)/(view|edit)?$');
+
+        app.get(re, function(req, res){
+          var id = req.params.userId
+            , op = req.params[0];
+          res.end(op + 'ing user ' + id);
+        });
+
+        request(app)
+        .get('/user/10/edit')
+        .expect('editing user 10', done);
+      })
+    }
-      router.get('/(.*).(.*)', function (req, res) {
+      router.get(/^\/(.*)\.(.*)/, function (req, res) {
-      app.use('/user/id:(\\d+)', router);
+      app.use(/^\/user\/id:(\d+)/, router);
-      router.get('/(.*)', function (req, res) {
+      router.get(/\/(.*)/, function (req, res) {
-      app.use('/user/id:(\\d+)/name:(\\w+)', router);
+      app.use(/^\/user\/id:(\d+)\/name:(\w+)/, router);
-      router.get('/name:(\\w+)', function(req, res){
+      router.get(/\/name:(\w+)/, function(req, res){
-      app.use('/user/id:(\\d+)', router);
+      app.use(/\/user\/id:(\d+)/, router);
-      router.get('/user:(\\w+)/*', function (req, res, next) {
+      router.get(/\/user:(\w+)\//, function (req, res, next) {
-      app.use('/user/id:(\\d+)', function (req, res, next) {
+      app.use(/\/user\/id:(\d+)/, function (req, res, next) {
-      app.get('/user(s?)/:user/:op', function(req, res){
-        res.end(req.params.op + 'ing ' + req.params.user + (req.params[0] ? ' (old)' : ''));
+      app.get('/user{s}/:user/:op', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user + (req.url.startsWith('/users') ? ' (old)' : ''));
-      app.get('/user/:user/:op?', function(req, res){
+      app.get('/user/:user{/:op}', function(req, res){
-      app.get('/user/:user/:op?', function(req, res){
+      app.get('/user/:user{/:op}', function(req, res){
-      app.get('/user/:user*', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user[0])
-      app.get('/user/:user*', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user.join('/'))
-      app.get('/user/:user*', function (req, res) {
+      app.get('/user{/*user}', function (req, res) {
-      app.get('/user/:user+', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user[0])
-      app.get('/user/:user+', function (req, res) {
-        res.end(req.params.user)
+      app.get('/user/*user', function (req, res) {
+        res.end(req.params.user.join('/'))
-      app.get('/user/:user+', function (req, res) {
+      app.get('/user/*user', function (req, res) {
-      app.get('/:name.:format?', function(req, res){
+      app.get('/:name{.:format}', function(req, res){
-      app.get('/foo/:bar?', function(req, res, next){
+      app.get('/foo{/:bar}', function(req, res, next){
-      app.get('/foo/:bar?', function(req, res, next){
+      app.get('/foo{/:bar}', function(req, res, next){
-    app.get('/:path+', function (req, res, next) {
+    app.get('/*path', function (req, res, next) {
-    app.get('/(.*)', function (req, res, next) {
+    app.get('/*splat', function (req, res, next) {
+
+function supportsRegexp(source) {
+  try {
+    new RegExp(source)
+    return true
+  } catch (e) {
+    return false
+  }
+}"
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-/**
- * Set status `code`.
- *
- * @param {Number} code
- * @return {ServerResponse}
+ * Set the HTTP status code for the response.
+ *
+ * Expects an integer value between 100 and 999 inclusive.
+ * Throws an error if the provided status code is not an integer or if it's outside the allowable range.
+ *
+ * @param {number} code - The HTTP status code to set.
+ * @return {ServerResponse} - Returns itself for chaining methods.
+ * @throws {TypeError} If `code` is not an integer.
+ * @throws {RangeError} If `code` is outside the range 100 to 999.
-  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
-    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
-  }
+  // Check if the status code is not an integer
+  if (!Number.isInteger(code)) {
+    throw new TypeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be an integer.`);
+  }
+  // Check if the status code is outside of Node's valid range
+  if (code < 100 || code > 999) {
+    throw new RangeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be greater than 99 and less than 1000.`);
+  }
+
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  if (req.fresh) this.statusCode = 304;
+  if (req.fresh) this.status(304);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  this.statusCode = statusCode;
+  this.status(statusCode);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  if (options) {
-    if (options.maxAge) {
-      deprecate('res.clearCookie: Passing ""options.maxAge"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
-    }
-    if (options.expires) {
-      deprecate('res.clearCookie: Passing ""options.expires"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
-    }
-  }
-  var opts = merge({ expires: new Date(1), path: '/' }, options);
+  // Force cookie expiration by setting expires to the past
+  const opts = { path: '/', ...options, expires: new Date(1)};
+  // ensure maxAge is not passed
+  delete opts.maxAge
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  this.statusCode = status;
+  this.status(status);
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to ' + u + '</p>'","-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-/**
- * Set status `code`.
- *
- * @param {Number} code
- * @return {ServerResponse}
+ * Set the HTTP status code for the response.
+ *
+ * Expects an integer value between 100 and 999 inclusive.
+ * Throws an error if the provided status code is not an integer or if it's outside the allowable range.
+ *
+ * @param {number} code - The HTTP status code to set.
+ * @return {ServerResponse} - Returns itself for chaining methods.
+ * @throws {TypeError} If `code` is not an integer.
+ * @throws {RangeError} If `code` is outside the range 100 to 999.
-  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
-    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
-  }
+  // Check if the status code is not an integer
+  if (!Number.isInteger(code)) {
+    throw new TypeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be an integer.`);
+  }
+  // Check if the status code is outside of Node's valid range
+  if (code < 100 || code > 999) {
+    throw new RangeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be greater than 99 and less than 1000.`);
+  }
+
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  if (req.fresh) this.statusCode = 304;
+  if (req.fresh) this.status(304);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  this.statusCode = statusCode;
+  this.status(statusCode);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  if (options) {
-    if (options.maxAge) {
-      deprecate('res.clearCookie: Passing ""options.maxAge"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
-    }
-    if (options.expires) {
-      deprecate('res.clearCookie: Passing ""options.expires"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
-    }
-  }
-  var opts = merge({ expires: new Date(1), path: '/' }, options);
+  // Force cookie expiration by setting expires to the past
+  const opts = { path: '/', ...options, expires: new Date(1)};
+  // ensure maxAge is not passed
+  delete opts.maxAge
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to ' + u + '</p>'
-  this.statusCode = status;
+  this.status(status);
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,package.json,"-  ""version"": ""4.19.2"",
+  ""version"": ""5.0.0-beta.3"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 18""","-  ""version"": ""4.19.2"",
+  ""version"": ""4.20.0"",
-    ""body-parser"": ""1.20.2"",
+    ""body-parser"": ""1.20.3"",
-    ""merge-descriptors"": ""1.0.1"",
+    ""merge-descriptors"": ""1.0.3"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-to-regexp"": ""0.1.10"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""0.19.0"",
+    ""serve-static"": ""1.16.0"",","-  ""version"": ""4.19.2"",
+<<<<<<< HEAD
+  ""version"": ""5.0.0-beta.3"",
+=======
+  ""version"": ""4.20.0"",
+>>>>>>> master
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""merge-descriptors"": ""1.0.1"",
+    ""merge-descriptors"": ""1.0.3"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 18"""
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {","+
+    if (supportsRegexp('(?<foo>.*)')) {
+      it('should populate req.params with named captures', function(done){
+        var app = express();
+        var re = new RegExp('^/user/(?<userId>[0-9]+)/(view|edit)?$');
+
+        app.get(re, function(req, res){
+          var id = req.params.userId
+            , op = req.params[0];
+          res.end(op + 'ing user ' + id);
+        });
+
+        request(app)
+        .get('/user/10/edit')
+        .expect('editing user 10', done);
+      })
+    }
+
+function supportsRegexp(source) {
+  try {
+    new RegExp(source)
+    return true
+  } catch (e) {
+    return false
+  }
+}","+var describePromises = global.Promise ? describe : describe.skip
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
+
+    if (supportsRegexp('(?<foo>.*)')) {
+      it('should populate req.params with named captures', function(done){
+        var app = express();
+        var re = new RegExp('^/user/(?<userId>[0-9]+)/(view|edit)?$');
+
+        app.get(re, function(req, res){
+          var id = req.params.userId
+            , op = req.params[0];
+          res.end(op + 'ing user ' + id);
+        });
+
+        request(app)
+        .get('/user/10/edit')
+        .expect('editing user 10', done);
+      })
+    }
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {
+
+function supportsRegexp(source) {
+  try {
+    new RegExp(source)
+    return true
+  } catch (e) {
+    return false
+  }
+}"
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,test/express.static.js,"-        .expect('Content-Type', 'text/plain; charset=UTF-8')
+        .expect('Content-Type', 'text/plain; charset=utf-8')","-        .expect(301, /<a href=""\/users\/"">/, done)
+        .expect(301, /\/users\//, done)
-        .expect(301, />Redirecting to <a href=""\/snow%20%E2%98%83\/"">\/snow%20%E2%98%83\/<\/a></, done)
+        .expect(301, />Redirecting to \/snow%20%E2%98%83\/</, done)","-        .expect('Content-Type', 'text/plain; charset=UTF-8')
+        .expect('Content-Type', 'text/plain; charset=utf-8')
-        .expect(301, /<a href=""\/users\/"">/, done)
+        .expect(301, /\/users\//, done)
-        .expect(301, />Redirecting to <a href=""\/snow%20%E2%98%83\/"">\/snow%20%E2%98%83\/<\/a></, done)
+        .expect(301, />Redirecting to \/snow%20%E2%98%83\/</, done)"
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,test/express.urlencoded.js,"-  it('should 500 if stream not readable', function (done) {
-    var app = express()
-
-    app.use(function (req, res, next) {
-      req.on('end', next)
-      req.resume()
-    })
-
-    app.use(express.urlencoded())
-
-    app.use(function (err, req, res, next) {
-      res.status(err.status || 500)
-      res.send('[' + err.type + '] ' + err.message)
-    })
-
-    app.post('/', function (req, res) {
-      res.json(req.body)
-    })
-
-    request(app)
-      .post('/')
-      .set('Content-Type', 'application/x-www-form-urlencoded')
-      .send('user=tobi')
-      .expect(500, '[stream.not.readable] stream is not readable', done)
-  })
-
-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-        .expect('{}')","-        for (var i = 0; i < 500; i++) {
+        for (var i = 0; i < 32; i++) {
-            assert.strictEqual(depth, 500)
+            assert.strictEqual(depth, 32)","-  it('should 500 if stream not readable', function (done) {
-    var app = express()
-
-    app.use(function (req, res, next) {
-      req.on('end', next)
-      req.resume()
-    })
-
-    app.use(express.urlencoded())
-
-    app.use(function (err, req, res, next) {
-      res.status(err.status || 500)
-      res.send('[' + err.type + '] ' + err.message)
-    })
-
-    app.post('/', function (req, res) {
-      res.json(req.body)
-    })
-
-    request(app)
-      .post('/')
-      .set('Content-Type', 'application/x-www-form-urlencoded')
-      .send('user=tobi')
-      .expect(500, '[stream.not.readable] stream is not readable', done)
-  })
-
-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-        for (var i = 0; i < 500; i++) {
+        for (var i = 0; i < 32; i++) {
-            assert.strictEqual(depth, 500)
+            assert.strictEqual(depth, 32)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-        .expect('{}')"
expressjs_express,e5feb9fcc9ab2c8a770a5380d79e135d86889a4c,Merge tag '4.20.0' into 5.0,test/res.redirect.js,"-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);","-      .expect(302, '<p>Found. Redirecting to <a href=""http://google.com"">http://google.com</a></p>', done)
+      .expect(302, '<p>Found. Redirecting to http://google.com</p>', done)
-      .expect(302, '<p>Found. Redirecting to <a href=""%3Cla&#39;me%3E"">%3Cla&#39;me%3E</a></p>', done)
-    })
+      .expect(302, '<p>Found. Redirecting to %3Cla&#39;me%3E</p>', done)
+    })
+
+    it('should not render evil javascript links in anchor href (prevent XSS)', function(done){
+      var app = express();
+      var xss = 'javascript:eval(document.body.innerHTML=`<p>XSS</p>`);';
+      var encodedXss = 'javascript:eval(document.body.innerHTML=%60%3Cp%3EXSS%3C/p%3E%60);';
+
+      app.use(function(req, res){
+        res.redirect(xss);
+      });
+
+      request(app)
+      .get('/')
+      .set('Host', 'http://example.com')
+      .set('Accept', 'text/html')
+      .expect('Content-Type', /html/)
+      .expect('Location', encodedXss)
+      .expect(302, '<p>Found. Redirecting to ' + encodedXss +'</p>', done);
+    });
-      .expect(301, '<p>Moved Permanently. Redirecting to <a href=""http://google.com"">http://google.com</a></p>', done);
+      .expect(301, '<p>Moved Permanently. Redirecting to http://google.com</p>', done);","-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);
-      .expect(302, '<p>Found. Redirecting to <a href=""http://google.com"">http://google.com</a></p>', done)
+      .expect(302, '<p>Found. Redirecting to http://google.com</p>', done)
-      .expect(302, '<p>Found. Redirecting to <a href=""%3Cla&#39;me%3E"">%3Cla&#39;me%3E</a></p>', done)
-    })
+      .expect(302, '<p>Found. Redirecting to %3Cla&#39;me%3E</p>', done)
+    })
+
+    it('should not render evil javascript links in anchor href (prevent XSS)', function(done){
+      var app = express();
+      var xss = 'javascript:eval(document.body.innerHTML=`<p>XSS</p>`);';
+      var encodedXss = 'javascript:eval(document.body.innerHTML=%60%3Cp%3EXSS%3C/p%3E%60);';
+
+      app.use(function(req, res){
+        res.redirect(xss);
+      });
+
+      request(app)
+      .get('/')
+      .set('Host', 'http://example.com')
+      .set('Accept', 'text/html')
+      .expect('Content-Type', /html/)
+      .expect('Location', encodedXss)
+      .expect(302, '<p>Found. Redirecting to ' + encodedXss +'</p>', done);
+    });
-      .expect(301, '<p>Moved Permanently. Redirecting to <a href=""http://google.com"">http://google.com</a></p>', done);
+      .expect(301, '<p>Moved Permanently. Redirecting to http://google.com</p>', done);"
expressjs_express,ea4970605272847b4531605c20531a5312d516b1,Merge branch 'master' into 5-merge,package.json,"-  ""version"": ""4.19.2"",
+  ""version"": ""5.0.0-beta.3"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 18""","-    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
-    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"",
+    ""test-ci"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=html --reporter=text npm test"",","-  ""version"": ""4.19.2"",
+  ""version"": ""5.0.0-beta.3"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 18""
-    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
-    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"",
+    ""test-ci"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --exclude examples --exclude test --exclude benchmarks --reporter=html --reporter=text npm test"","
expressjs_express,dde1f7d6e8d8058edb8c95c8a75a5a58444369de,Merge branch '5.0' into 5-merge,lib/response.js,"- * Module variables.
- * @private
- */
-
-var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-
-/**
+  if (options) {
+    if (options.maxAge) {
+      deprecate('res.clearCookie: Passing ""options.maxAge"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+    if (options.expires) {
+      deprecate('res.clearCookie: Passing ""options.expires"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+  }
-  var m = schemaAndHostRegExp.exec(loc);
-  var pos = m ? m[0].length + 1 : 0;
-
-  // Only encode after host to avoid invalid encoding which can introduce
-  // vulnerabilities (e.g. `\\` to `%5C`).
-  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
-
-  return this.set('Location', loc);
+  return this.set('Location', encodeUrl(loc));","-var deprecate = require('depd')('express');
- * Set status `code`.
- *
- * @param {Number} code
- * @return {ServerResponse}
+ * Set the HTTP status code for the response.
+ *
+ * Expects an integer value between 100 and 999 inclusive.
+ * Throws an error if the provided status code is not an integer or if it's outside the allowable range.
+ *
+ * @param {number} code - The HTTP status code to set.
+ * @return {ServerResponse} - Returns itself for chaining methods.
+ * @throws {TypeError} If `code` is not an integer.
+ * @throws {RangeError} If `code` is outside the range 100 to 999.
-  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
-    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
-  }
+  // Check if the status code is not an integer
+  if (!Number.isInteger(code)) {
+    throw new TypeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be an integer.`);
+  }
+  // Check if the status code is outside of Node's valid range
+  if (code < 100 || code > 999) {
+    throw new RangeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be greater than 99 and less than 1000.`);
+  }
+
-  if (req.fresh) this.statusCode = 304;
+  if (req.fresh) this.status(304);
-  this.statusCode = statusCode;
+  this.status(statusCode);
-  var opts = merge({ expires: new Date(1), path: '/' }, options);
+  // Force cookie expiration by setting expires to the past
+  const opts = { path: '/', ...options, expires: new Date(1)};
+  // ensure maxAge is not passed
+  delete opts.maxAge
-  this.statusCode = status;
+  this.status(status);","-var deprecate = require('depd')('express');
- * Module variables.
- * @private
- */
-
-var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-
-/**
- * Set status `code`.
- *
- * @param {Number} code
- * @return {ServerResponse}
+ * Set the HTTP status code for the response.
+ *
+ * Expects an integer value between 100 and 999 inclusive.
+ * Throws an error if the provided status code is not an integer or if it's outside the allowable range.
+ *
+ * @param {number} code - The HTTP status code to set.
+ * @return {ServerResponse} - Returns itself for chaining methods.
+ * @throws {TypeError} If `code` is not an integer.
+ * @throws {RangeError} If `code` is outside the range 100 to 999.
-  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
-    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
-  }
+  // Check if the status code is not an integer
+  if (!Number.isInteger(code)) {
+    throw new TypeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be an integer.`);
+  }
+  // Check if the status code is outside of Node's valid range
+  if (code < 100 || code > 999) {
+    throw new RangeError(`Invalid status code: ${JSON.stringify(code)}. Status code must be greater than 99 and less than 1000.`);
+  }
+
-  if (req.fresh) this.statusCode = 304;
+  if (req.fresh) this.status(304);
-  this.statusCode = statusCode;
+  this.status(statusCode);
-  var opts = merge({ expires: new Date(1), path: '/' }, options);
+  // Force cookie expiration by setting expires to the past
+  const opts = { path: '/', ...options, expires: new Date(1)};
+  // ensure maxAge is not passed
+  delete opts.maxAge
-  var m = schemaAndHostRegExp.exec(loc);
-  var pos = m ? m[0].length + 1 : 0;
-
-  // Only encode after host to avoid invalid encoding which can introduce
-  // vulnerabilities (e.g. `\\` to `%5C`).
-  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
-
-  return this.set('Location', loc);
+  return this.set('Location', encodeUrl(loc));
-  this.statusCode = status;
+  this.status(status);"
expressjs_express,dde1f7d6e8d8058edb8c95c8a75a5a58444369de,Merge branch '5.0' into 5-merge,package.json,"-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",","-    ""array-flatten"": ""3.0.0"",
-    ""node"": "">= 4""
+    ""node"": "">= 18""","-    ""array-flatten"": ""3.0.0"",
-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",
-    ""node"": "">= 4""
+    ""node"": "">= 18"""
expressjs_express,dde1f7d6e8d8058edb8c95c8a75a5a58444369de,Merge branch '5.0' into 5-merge,test/res.clearCookie.js,"+
+    it('should set expires when passed', function(done) {
+      var expiresAt = new Date()
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { expires: expiresAt }).end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Set-Cookie', 'sid=; Path=/; Expires=' + expiresAt.toUTCString() )
+      .expect(200, done)
+    })
+
+    it('should set both maxAge and expires when passed', function(done) {
+      var maxAgeInMs = 10000
+      var expiresAt = new Date()
+      var expectedExpires = new Date(expiresAt.getTime() + maxAgeInMs)
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { expires: expiresAt, maxAge: maxAgeInMs }).end();
+      });
+
+      request(app)
+      .get('/')
+      // yes, this is the behavior. When we set a max-age, we also set expires to a date 10 sec ahead of expires
+      // even if we set max-age only, we will also set an expires 10 sec in the future
+      .expect('Set-Cookie', 'sid=; Max-Age=10; Path=/; Expires=' + expectedExpires.toUTCString())
+      .expect(200, done)
+    })","+
+    it('should ignore maxAge', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { path: '/admin', maxAge: 1000 }).end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Set-Cookie', 'sid=; Path=/admin; Expires=Thu, 01 Jan 1970 00:00:00 GMT')
+      .expect(200, done)
+    })
+
+    it('should ignore user supplied expires param', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { path: '/admin', expires: new Date() }).end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Set-Cookie', 'sid=; Path=/admin; Expires=Thu, 01 Jan 1970 00:00:00 GMT')
+      .expect(200, done)
+    })","+
+    it('should ignore maxAge', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { path: '/admin', maxAge: 1000 }).end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Set-Cookie', 'sid=; Path=/admin; Expires=Thu, 01 Jan 1970 00:00:00 GMT')
+      .expect(200, done)
+    })
+
+    it('should ignore user supplied expires param', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.clearCookie('sid', { path: '/admin', expires: new Date() }).end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Set-Cookie', 'sid=; Path=/admin; Expires=Thu, 01 Jan 1970 00:00:00 GMT')
+      .expect(200, done)
+    })"
expressjs_express,c96c690dc087d121137c97318215e03a432395c5,Merge branch 'master' into 5.0,lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-var urlParse = require('url').parse;
-var charsetRegExp = /;\s*charset\s*=/;
+var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  var loc = String(url);
+  var loc;
-  }
-
-  var lowerLoc = loc.toLowerCase();
-  var encodedUrl = encodeUrl(loc);
-  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
-    try {
-      var parsedUrl = urlParse(loc);
-      var parsedEncodedUrl = urlParse(encodedUrl);
-      // Because this can encode the host, check that we did not change the host
-      if (parsedUrl.host !== parsedEncodedUrl.host) {
-        // If the host changes after encodeUrl, return the original url
-        return this.set('Location', loc);
-      }
-    } catch (e) {
-      // If parse fails, return the original url
-      return this.set('Location', loc);
-    }
-  }
-
-  // set location
-  return this.set('Location', encodedUrl);
+  } else {
+    loc = String(url);
+  }
+
+  var m = schemaAndHostRegExp.exec(loc);
+  var pos = m ? m[0].length + 1 : 0;
+
+  // Only encode after host to avoid invalid encoding which can introduce
+  // vulnerabilities (e.g. `\\` to `%5C`).
+  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
+
+  return this.set('Location', loc);
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-var urlParse = require('url').parse;
+  if (options) {
+    if (options.maxAge) {
+      deprecate('res.clearCookie: Passing ""options.maxAge"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+    if (options.expires) {
+      deprecate('res.clearCookie: Passing ""options.expires"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+  }
-  var loc = String(url);
+  var loc;
-  }
-
-  var lowerLoc = loc.toLowerCase();
-  var encodedUrl = encodeUrl(loc);
-  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
-    try {
-      var parsedUrl = urlParse(loc);
-      var parsedEncodedUrl = urlParse(encodedUrl);
-      // Because this can encode the host, check that we did not change the host
-      if (parsedUrl.host !== parsedEncodedUrl.host) {
-        // If the host changes after encodeUrl, return the original url
-        return this.set('Location', loc);
-      }
-    } catch (e) {
-      // If parse fails, return the original url
-      return this.set('Location', loc);
-    }
-  }
-
-  // set location
-  return this.set('Location', encodedUrl);
+  } else {
+    loc = String(url);
+  }
+
+  return this.set('Location', encodeUrl(loc));","-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-var urlParse = require('url').parse;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
+  if (options) {
+    if (options.maxAge) {
+      deprecate('res.clearCookie: Passing ""options.maxAge"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+    if (options.expires) {
+      deprecate('res.clearCookie: Passing ""options.expires"" is deprecated. In v5.0.0 of Express, this option will be ignored, as res.clearCookie will automatically set cookies to expire immediately. Please update your code to omit this option.');
+    }
+  }
-  var loc = String(url);
+  var loc;
-  }
-
-  var lowerLoc = loc.toLowerCase();
-  var encodedUrl = encodeUrl(loc);
-  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
-    try {
-      var parsedUrl = urlParse(loc);
-      var parsedEncodedUrl = urlParse(encodedUrl);
-      // Because this can encode the host, check that we did not change the host
-      if (parsedUrl.host !== parsedEncodedUrl.host) {
-        // If the host changes after encodeUrl, return the original url
-        return this.set('Location', loc);
-      }
-    } catch (e) {
-      // If parse fails, return the original url
-      return this.set('Location', loc);
-    }
-  }
-
-  // set location
-  return this.set('Location', encodedUrl);
+  } else {
+    loc = String(url);
+  }
+
+  return this.set('Location', encodeUrl(loc));
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,c96c690dc087d121137c97318215e03a432395c5,Merge branch 'master' into 5.0,package.json,"-  ""version"": ""4.19.1"",
+  ""version"": ""5.0.0-beta.3"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4""","-  ""version"": ""4.19.1"",
+  ""version"": ""4.19.2"",
-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",","-  ""version"": ""4.19.1"",
+  ""version"": ""5.0.0-beta.3"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.20.2"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""encodeurl"": ""~1.0.2"",
+    ""encodeurl"": ""~2.0.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""once"": ""1.4.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.18.0"",
-    ""serve-static"": ""1.15.0"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4"""
expressjs_express,c96c690dc087d121137c97318215e03a432395c5,Merge branch 'master' into 5.0,test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {","+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+
+        if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+          this.skip()
+        }","+var describePromises = global.Promise ? describe : describe.skip
+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
+        if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+          this.skip()
+        }
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {"
expressjs_express,c96c690dc087d121137c97318215e03a432395c5,Merge branch 'master' into 5.0,test/res.location.js,"+  , assert = require('assert')
-    it('should not encode bad ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        // This is here to show a basic check one might do which
-        // would pass but then the location header would still be bad
-        if (url.parse(req.query.q).host !== 'google.com') {
-          res.status(400).end('Bad url');
-        }
-        res.location(req.query.q).end();
-      });
-
-      request(app)
-        .get('/?q=http://google.com' + encodeURIComponent('\\@apple.com'))
-        .expect(200)
-        .expect('Location', 'http://google.com\\@apple.com')
-        .end(function (err) {
-          if (err) {
-            throw err;
-          }
-
-          // This ensures that our protocol check is case insensitive
-          request(app)
-            .get('/?q=HTTP://google.com' + encodeURIComponent('\\@apple.com'))
-            .expect(200)
-            .expect('Location', 'HTTP://google.com\\@apple.com')
-            .end(done)
-        });
-    });
-
-    it('should not touch already-encoded sequences in ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.location('https://google.com?q=%A710').end()
-      })
-
-      request(app)
-      .get('/')
-      .expect('Location', 'https://google.com?q=%A710')
-      .expect(200, done)
-    })
-
+    it('should encode data uri', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('data:text/javascript,export default () => { }').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'data:text/javascript,export%20default%20()%20=%3E%20%7B%20%7D')
+        .expect(200, done)
+    })
+
+    it('should encode data uri', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('data:text/javascript,export default () => { }').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'data:text/javascript,export%20default%20()%20=%3E%20%7B%20%7D')
+        .expect(200, done)
+    })
+
+    it('should consistently handle non-string input: boolean', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location(true).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'true')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: object', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location({}).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '[object%20Object]')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: array', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location([]).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+    it('should consistently handle empty string input', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+
+
+  describe('location header encoding', function() {
+    function createRedirectServerForDomain (domain) {
+      var app = express();
+      app.use(function (req, res) {
+        var host = url.parse(req.query.q, false, true).host;
+        // This is here to show a basic check one might do which
+        // would pass but then the location header would still be bad
+        if (host !== domain) {
+          res.status(400).end('Bad host: ' + host + ' !== ' + domain);
+        }
+        res.location(req.query.q).end();
+      });
+      return app;
+    }
+
+    function testRequestedRedirect (app, inputUrl, expected, expectedHost, done) {
+      return request(app)
+        // Encode uri because old supertest does not and is required
+        // to test older node versions. New supertest doesn't re-encode
+        // so this works in both.
+        .get('/?q=' + encodeURIComponent(inputUrl))
+        .expect('') // No body.
+        .expect(200)
+        .expect('Location', expected)
+        .end(function (err, res) {
+          if (err) {
+            console.log('headers:', res.headers)
+            console.error('error', res.error, err);
+            return done(err, res);
+          }
+
+          // Parse the hosts from the input URL and the Location header
+          var inputHost = url.parse(inputUrl, false, true).host;
+          var locationHost = url.parse(res.headers['location'], false, true).host;
+
+          assert.strictEqual(locationHost, expectedHost);
+
+          // Assert that the hosts are the same
+          if (inputHost !== locationHost) {
+            return done(new Error('Hosts do not match: ' + inputHost + "" !== "" +  locationHost));
+          }
+
+          return done(null, res);
+        });
+    }
+
+    it('should not touch already-encoded sequences in ""url""', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com?q=%A710',
+        'https://google.com?q=%A710',
+        'google.com',
+        done
+      );
+    });
+
+    it('should consistently handle relative urls', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/foo/bar',
+        '/foo/bar',
+        null,
+        done
+      );
+    });
+
+    it('should not encode urls in such a way that they can bypass redirect allow lists', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com',
+        'http://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should not be case sensitive', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'HTTP://google.com\\@apple.com',
+        'HTTP://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work with https', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\\@apple.com',
+        'https://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should correctly encode schemaless paths', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        '//google.com\\@apple.com/',
+        '//google.com\\@apple.com/',
+        'google.com',
+        done
+      );
+    });
+
+    it('should percent encode backslashes in the path', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com/foo\\bar\\baz',
+        'https://google.com/foo%5Cbar%5Cbaz',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode backslashes in the path after the first backslash that triggered path parsing', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\\@app\\l\\e.com',
+        'https://google.com\\@app%5Cl%5Ce.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should escape header splitting for old node versions', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode unicode correctly', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/%e2%98%83',
+        '/%e2%98%83',
+        null,
+        done
+      );
+    });
+
+    it('should encode unicode correctly even with a bad host', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%e2%98%83',
+        'http://google.com\\@apple.com/%e2%98%83',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work correctly despite using deprecated url.parse', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\'.bb.com/1.html',
+        'https://google.com\'.bb.com/1.html',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode file uri path', function (done) {
+      var app = createRedirectServerForDomain('');
+      testRequestedRedirect(
+        app,
+        'file:///etc\\passwd',
+        'file:///etc%5Cpasswd',
+        '',
+        done
+      );
+    });
+  });","+  , assert = require('assert')
-    it('should not encode bad ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        // This is here to show a basic check one might do which
-        // would pass but then the location header would still be bad
-        if (url.parse(req.query.q).host !== 'google.com') {
-          res.status(400).end('Bad url');
-        }
-        res.location(req.query.q).end();
-      });
-
-      request(app)
-        .get('/?q=http://google.com' + encodeURIComponent('\\@apple.com'))
-        .expect(200)
-        .expect('Location', 'http://google.com\\@apple.com')
-        .end(function (err) {
-          if (err) {
-            throw err;
-          }
-
-          // This ensures that our protocol check is case insensitive
-          request(app)
-            .get('/?q=HTTP://google.com' + encodeURIComponent('\\@apple.com'))
-            .expect(200)
-            .expect('Location', 'HTTP://google.com\\@apple.com')
-            .end(done)
-        });
-    });
-
-    it('should not touch already-encoded sequences in ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.location('https://google.com?q=%A710').end()
-      })
-
-      request(app)
-      .get('/')
-      .expect('Location', 'https://google.com?q=%A710')
-      .expect(200, done)
-    })
-
+    it('should encode data uri', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('data:text/javascript,export default () => { }').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'data:text/javascript,export%20default%20()%20=%3E%20%7B%20%7D')
+        .expect(200, done)
+    })
+
+    it('should consistently handle non-string input: boolean', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location(true).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'true')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: object', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location({}).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '[object%20Object]')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: array', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location([]).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+    it('should consistently handle empty string input', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+
+
+  describe('location header encoding', function() {
+    function createRedirectServerForDomain (domain) {
+      var app = express();
+      app.use(function (req, res) {
+        var host = url.parse(req.query.q, false, true).host;
+        // This is here to show a basic check one might do which
+        // would pass but then the location header would still be bad
+        if (host !== domain) {
+          res.status(400).end('Bad host: ' + host + ' !== ' + domain);
+        }
+        res.location(req.query.q).end();
+      });
+      return app;
+    }
+
+    function testRequestedRedirect (app, inputUrl, expected, expectedHost, done) {
+      return request(app)
+        // Encode uri because old supertest does not and is required
+        // to test older node versions. New supertest doesn't re-encode
+        // so this works in both.
+        .get('/?q=' + encodeURIComponent(inputUrl))
+        .expect('') // No body.
+        .expect(200)
+        .expect('Location', expected)
+        .end(function (err, res) {
+          if (err) {
+            console.log('headers:', res.headers)
+            console.error('error', res.error, err);
+            return done(err, res);
+          }
+
+          // Parse the hosts from the input URL and the Location header
+          var inputHost = url.parse(inputUrl, false, true).host;
+          var locationHost = url.parse(res.headers['location'], false, true).host;
+
+          assert.strictEqual(locationHost, expectedHost);
+
+          // Assert that the hosts are the same
+          if (inputHost !== locationHost) {
+            return done(new Error('Hosts do not match: ' + inputHost + "" !== "" +  locationHost));
+          }
+
+          return done(null, res);
+        });
+    }
+
+    it('should not touch already-encoded sequences in ""url""', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com?q=%A710',
+        'https://google.com?q=%A710',
+        'google.com',
+        done
+      );
+    });
+
+    it('should consistently handle relative urls', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/foo/bar',
+        '/foo/bar',
+        null,
+        done
+      );
+    });
+
+    it('should not encode urls in such a way that they can bypass redirect allow lists', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com',
+        'http://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should not be case sensitive', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'HTTP://google.com\\@apple.com',
+        'HTTP://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work with https', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\\@apple.com',
+        'https://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should correctly encode schemaless paths', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        '//google.com\\@apple.com/',
+        '//google.com\\@apple.com/',
+        'google.com',
+        done
+      );
+    });
+
+    it('should keep backslashes in the path', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com/foo\\bar\\baz',
+        'https://google.com/foo\\bar\\baz',
+        'google.com',
+        done
+      );
+    });
+
+    it('should escape header splitting for old node versions', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode unicode correctly', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/%e2%98%83',
+        '/%e2%98%83',
+        null,
+        done
+      );
+    });
+
+    it('should encode unicode correctly even with a bad host', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%e2%98%83',
+        'http://google.com\\@apple.com/%e2%98%83',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work correctly despite using deprecated url.parse', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\'.bb.com/1.html',
+        'https://google.com\'.bb.com/1.html',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode file uri path', function (done) {
+      var app = createRedirectServerForDomain('');
+      testRequestedRedirect(
+        app,
+        'file:///etc\\passwd',
+        'file:///etc\\passwd',
+        '',
+        done
+      );
+    });
+  });","+  , assert = require('assert')
-    it('should not encode bad ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        // This is here to show a basic check one might do which
-        // would pass but then the location header would still be bad
-        if (url.parse(req.query.q).host !== 'google.com') {
-          res.status(400).end('Bad url');
-        }
-        res.location(req.query.q).end();
-      });
-
-      request(app)
-        .get('/?q=http://google.com' + encodeURIComponent('\\@apple.com'))
-        .expect(200)
-        .expect('Location', 'http://google.com\\@apple.com')
-        .end(function (err) {
-          if (err) {
-            throw err;
-          }
-
-          // This ensures that our protocol check is case insensitive
-          request(app)
-            .get('/?q=HTTP://google.com' + encodeURIComponent('\\@apple.com'))
-            .expect(200)
-            .expect('Location', 'HTTP://google.com\\@apple.com')
-            .end(done)
-        });
-    });
-
-    it('should not touch already-encoded sequences in ""url""', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.location('https://google.com?q=%A710').end()
-      })
-
-      request(app)
-      .get('/')
-      .expect('Location', 'https://google.com?q=%A710')
-      .expect(200, done)
-    })
-
+    it('should encode data uri1', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('data:text/javascript,export default () => { }').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'data:text/javascript,export%20default%20()%20=%3E%20%7B%20%7D')
+        .expect(200, done)
+    })
+
+    it('should encode data uri2', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('data:text/javascript,export default () => { }').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'data:text/javascript,export%20default%20()%20=%3E%20%7B%20%7D')
+        .expect(200, done)
+    })
+
+    it('should consistently handle non-string input: boolean', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location(true).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', 'true')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: object', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location({}).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '[object%20Object]')
+        .expect(200, done)
+    });
+
+    it('should consistently handle non-string inputs: array', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location([]).end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+    it('should consistently handle empty string input', function (done) {
+      var app = express()
+      app.use(function (req, res) {
+        res.location('').end();
+      });
+
+      request(app)
+        .get('/')
+        .expect('Location', '')
+        .expect(200, done)
+    });
+
+
+
+  describe('location header encoding', function() {
+    function createRedirectServerForDomain (domain) {
+      var app = express();
+      app.use(function (req, res) {
+        var host = url.parse(req.query.q, false, true).host;
+        // This is here to show a basic check one might do which
+        // would pass but then the location header would still be bad
+        if (host !== domain) {
+          res.status(400).end('Bad host: ' + host + ' !== ' + domain);
+        }
+        res.location(req.query.q).end();
+      });
+      return app;
+    }
+
+    function testRequestedRedirect (app, inputUrl, expected, expectedHost, done) {
+      return request(app)
+        // Encode uri because old supertest does not and is required
+        // to test older node versions. New supertest doesn't re-encode
+        // so this works in both.
+        .get('/?q=' + encodeURIComponent(inputUrl))
+        .expect('') // No body.
+        .expect(200)
+        .expect('Location', expected)
+        .end(function (err, res) {
+          if (err) {
+            console.log('headers:', res.headers)
+            console.error('error', res.error, err);
+            return done(err, res);
+          }
+
+          // Parse the hosts from the input URL and the Location header
+          var inputHost = url.parse(inputUrl, false, true).host;
+          var locationHost = url.parse(res.headers['location'], false, true).host;
+
+          assert.strictEqual(locationHost, expectedHost);
+
+          // Assert that the hosts are the same
+          if (inputHost !== locationHost) {
+            return done(new Error('Hosts do not match: ' + inputHost + "" !== "" +  locationHost));
+          }
+
+          return done(null, res);
+        });
+    }
+
+    it('should not touch already-encoded sequences in ""url""', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com?q=%A710',
+        'https://google.com?q=%A710',
+        'google.com',
+        done
+      );
+    });
+
+    it('should consistently handle relative urls', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/foo/bar',
+        '/foo/bar',
+        null,
+        done
+      );
+    });
+
+    it('should not encode urls in such a way that they can bypass redirect allow lists', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com',
+        'http://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should not be case sensitive', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'HTTP://google.com\\@apple.com',
+        'HTTP://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work with https', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\\@apple.com',
+        'https://google.com\\@apple.com',
+        'google.com',
+        done
+      );
+    });
+
+    it('should correctly encode schemaless paths', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        '//google.com\\@apple.com/',
+        '//google.com\\@apple.com/',
+        'google.com',
+        done
+      );
+    });
+
+    it('should keep backslashes in the path', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com/foo\\bar\\baz',
+        'https://google.com/foo\\bar\\baz',
+        'google.com',
+        done
+      );
+    });
+
+    it('should escape header splitting for old node versions', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'http://google.com\\@apple.com/%0d%0afoo:%20bar',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode unicode correctly', function (done) {
+      var app = createRedirectServerForDomain(null);
+      testRequestedRedirect(
+        app,
+        '/%e2%98%83',
+        '/%e2%98%83',
+        null,
+        done
+      );
+    });
+
+    it('should encode unicode correctly even with a bad host', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'http://google.com\\@apple.com/%e2%98%83',
+        'http://google.com\\@apple.com/%e2%98%83',
+        'google.com',
+        done
+      );
+    });
+
+    it('should work correctly despite using deprecated url.parse', function (done) {
+      var app = createRedirectServerForDomain('google.com');
+      testRequestedRedirect(
+        app,
+        'https://google.com\'.bb.com/1.html',
+        'https://google.com\'.bb.com/1.html',
+        'google.com',
+        done
+      );
+    });
+
+    it('should encode file uri path', function (done) {
+      var app = createRedirectServerForDomain('');
+      testRequestedRedirect(
+        app,
+        'file:///etc\\passwd',
+        'file:///etc\\passwd',
+        '',
+        done
+      );
+    });
+  });"
expressjs_express,c96c690dc087d121137c97318215e03a432395c5,Merge branch 'master' into 5.0,test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+
+          if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+            this.skip()
+          }","+var shouldSkipQuery = require('./support/utils').shouldSkipQuery
+
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
+          if (method === 'query' && shouldSkipQuery(process.versions.node)) {
+            this.skip()
+          }
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');"
expressjs_express,6415f7035b3675ec4eaee3b91973d7d3b0464ca9,Merge tag '4.19.2' into 5.0  4.19.2,lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-var urlParse = require('url').parse;
+var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-  var loc = String(url);
+  var loc;
-  }
-
-  var lowerLoc = loc.toLowerCase();
-  var encodedUrl = encodeUrl(loc);
-  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
-    try {
-      var parsedUrl = urlParse(loc);
-      var parsedEncodedUrl = urlParse(encodedUrl);
-      // Because this can encode the host, check that we did not change the host
-      if (parsedUrl.host !== parsedEncodedUrl.host) {
-        // If the host changes after encodeUrl, return the original url
-        return this.set('Location', loc);
-      }
-    } catch (e) {
-      // If parse fails, return the original url
-      return this.set('Location', loc);
-    }
-  }
-
-  // set location
-  return this.set('Location', encodedUrl);
+  } else {
+    loc = String(url);
+  }
+
+  var m = schemaAndHostRegExp.exec(loc);
+  var pos = m ? m[0].length + 1 : 0;
+
+  // Only encode after host to avoid invalid encoding which can introduce
+  // vulnerabilities (e.g. `\\` to `%5C`).
+  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
+
+  return this.set('Location', loc);","-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-var urlParse = require('url').parse;
-var charsetRegExp = /;\s*charset\s*=/;
+var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  var loc = String(url);
+  var loc;
-  }
-
-  var lowerLoc = loc.toLowerCase();
-  var encodedUrl = encodeUrl(loc);
-  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
-    try {
-      var parsedUrl = urlParse(loc);
-      var parsedEncodedUrl = urlParse(encodedUrl);
-      // Because this can encode the host, check that we did not change the host
-      if (parsedUrl.host !== parsedEncodedUrl.host) {
-        // If the host changes after encodeUrl, return the original url
-        return this.set('Location', loc);
-      }
-    } catch (e) {
-      // If parse fails, return the original url
-      return this.set('Location', loc);
-    }
-  }
-
-  // set location
-  return this.set('Location', encodedUrl);
+  } else {
+    loc = String(url);
+  }
+
+  var m = schemaAndHostRegExp.exec(loc);
+  var pos = m ? m[0].length + 1 : 0;
+
+  // Only encode after host to avoid invalid encoding which can introduce
+  // vulnerabilities (e.g. `\\` to `%5C`).
+  loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
+
+  return this.set('Location', loc);
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,60fb1d2acd7fbee2bbcc2e0702709cc0a7be40dd,Merge tag '4.19.1' into 5.x  4.19.1,lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-  var loc = url;
+  var loc = String(url);","-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses.message[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  var loc = url;
+  var loc = String(url);
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,examples/downloads/index.js,"-app.get('/files/:file(*)', function(req, res, next){
+app.get('/files/:file+', function (req, res, next) {","-var resolvePath = require('resolve-path')
-  var filePath = resolvePath(FILES_DIR, req.params.file)
-
-  res.download(filePath, function (err) {
+  res.download(req.params.file, { root: FILES_DIR }, function (err) {","-var resolvePath = require('resolve-path')
-app.get('/files/:file(*)', function(req, res, next){
-  var filePath = resolvePath(FILES_DIR, req.params.file)
-
-  res.download(filePath, function (err) {
+app.get('/files/:file+', function (req, res, next) {
+  res.download(req.params.file, { root: FILES_DIR }, function (err) {"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
+var flatten = require('array-flatten').flatten
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-  this.set('query parser', 'extended');
+  this.set('query parser', 'simple')
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","+
+/**
+ * Module variables.
+ * @private
+ */
+
+var hasOwnProperty = Object.prototype.hasOwnProperty
-    return this.settings[setting];
+    var settings = this.settings
+
+    while (settings && settings !== Object.prototype) {
+      if (hasOwnProperty.call(settings, setting)) {
+        return settings[setting]
+      }
+
+      settings = Object.getPrototypeOf(settings)
+    }
+
+    return undefined","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
+var flatten = require('array-flatten').flatten
+var Router = require('router');
+
+/**
+ * Module variables.
+ * @private
+ */
+
+var hasOwnProperty = Object.prototype.hasOwnProperty
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-  this.set('query parser', 'extended');
+  this.set('query parser', 'simple')
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    return this.settings[setting];
+    var settings = this.settings
+
+    while (settings && settings !== Object.prototype) {
+      if (hasOwnProperty.call(settings, setting)) {
+        return settings[setting]
+      }
+
+      settings = Object.getPrototypeOf(settings)
+    }
+
+    return undefined
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","+var createError = require('http-errors')
+var urlParse = require('url').parse;
+  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
+    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
+  }
-    chunk = statuses[chunk]
+    chunk = statuses.message[chunk]
+  // alter headers for 205
+  if (this.statusCode === 205) {
+    this.set('Content-Length', '0')
+    this.removeHeader('Transfer-Encoding')
+    chunk = ''
+  }
+
-  var body = statuses[statusCode] || String(statusCode)
+  var body = statuses.message[statusCode] || String(statusCode)
+  // support optional filename, where options may be in it's place
+  if (typeof filename === 'object' &&
+    (typeof options === 'function' || options === undefined)) {
+    name = null
+    opts = filename
+  }
+
-  var fullPath = resolve(path);
+  var fullPath = !opts.root
+    ? resolve(path)
+    : path
-  var fn = obj.default;
-  if (fn) delete obj.default;
-  var keys = Object.keys(obj);
+  var keys = Object.keys(obj)
+    .filter(function (v) { return v !== 'default' })
-  } else if (fn) {
-    fn();
+  } else if (obj.default) {
+    obj.default(req, this, next)
-    var err = new Error('Not Acceptable');
-    err.status = err.statusCode = 406;
-    err.types = normalizeTypes(keys).map(function(o){ return o.value });
-    next(err);
+    next(createError(406, {
+      types: normalizeTypes(keys).map(function (o) { return o.value })
+    }))
-  if ('maxAge' in opts) {
-    opts.expires = new Date(Date.now() + opts.maxAge);
-    opts.maxAge /= 1000;
+  if (opts.maxAge != null) {
+    var maxAge = opts.maxAge - 0
+
+    if (!isNaN(maxAge)) {
+      opts.expires = new Date(Date.now() + maxAge)
+      opts.maxAge = Math.floor(maxAge / 1000)
+    }
+  var lowerLoc = loc.toLowerCase();
+  var encodedUrl = encodeUrl(loc);
+  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
+    try {
+      var parsedUrl = urlParse(loc);
+      var parsedEncodedUrl = urlParse(encodedUrl);
+      // Because this can encode the host, check that we did not change the host
+      if (parsedUrl.host !== parsedEncodedUrl.host) {
+        // If the host changes after encodeUrl, return the original url
+        return this.set('Location', loc);
+      }
+    } catch (e) {
+      // If parse fails, return the original url
+      return this.set('Location', loc);
+    }
+  }
+
-  return this.set('Location', encodeUrl(loc));
+  return this.set('Location', encodedUrl);
-      body = statuses[status] + '. Redirecting to ' + address
+      body = statuses.message[status] + '. Redirecting to ' + address
-      body = '<p>' + statuses[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
- * @param {function} replaces
+ * @param {function} replacer","+var createError = require('http-errors')
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
+var urlParse = require('url').parse;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
+  if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {
+    deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')
+  }
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
+  // alter headers for 205
+  if (this.statusCode === 205) {
+    this.set('Content-Length', '0')
+    this.removeHeader('Transfer-Encoding')
+    chunk = ''
+  }
+
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var body = statuses[statusCode] || String(statusCode)
+  var body = statuses.message[statusCode] || String(statusCode)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
+  }
+
+  // support optional filename, where options may be in it's place
+  if (typeof filename === 'object' &&
+    (typeof options === 'function' || options === undefined)) {
+    name = null
+    opts = filename
-  var fullPath = resolve(path);
+  var fullPath = !opts.root
+    ? resolve(path)
+    : path
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
-  var fn = obj.default;
-  if (fn) delete obj.default;
-  var keys = Object.keys(obj);
+  var keys = Object.keys(obj)
+    .filter(function (v) { return v !== 'default' })
-  } else if (fn) {
-    fn();
+  } else if (obj.default) {
+    obj.default(req, this, next)
-    var err = new Error('Not Acceptable');
-    err.status = err.statusCode = 406;
-    err.types = normalizeTypes(keys).map(function(o){ return o.value });
-    next(err);
+    next(createError(406, {
+      types: normalizeTypes(keys).map(function (o) { return o.value })
+    }))
+ *
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-  if ('maxAge' in opts) {
-    opts.expires = new Date(Date.now() + opts.maxAge);
-    opts.maxAge /= 1000;
+  if (opts.maxAge != null) {
+    var maxAge = opts.maxAge - 0
+
+    if (!isNaN(maxAge)) {
+      opts.expires = new Date(Date.now() + maxAge)
+      opts.maxAge = Math.floor(maxAge / 1000)
+    }
+  var lowerLoc = loc.toLowerCase();
+  var encodedUrl = encodeUrl(loc);
+  if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {
+    try {
+      var parsedUrl = urlParse(loc);
+      var parsedEncodedUrl = urlParse(encodedUrl);
+      // Because this can encode the host, check that we did not change the host
+      if (parsedUrl.host !== parsedEncodedUrl.host) {
+        // If the host changes after encodeUrl, return the original url
+        return this.set('Location', loc);
+      }
+    } catch (e) {
+      // If parse fails, return the original url
+      return this.set('Location', loc);
+    }
+  }
+
-  return this.set('Location', encodeUrl(loc));
+  return this.set('Location', encodedUrl);
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-      body = statuses[status] + '. Redirecting to ' + address
+      body = statuses.message[status] + '. Redirecting to ' + address
-      body = '<p>' + statuses[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
+      body = '<p>' + statuses.message[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-
- * @param {function} replaces
+ * @param {function} replacer"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,lib/utils.js,"-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
+var mime = require('mime-types')
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-    : { value: mime.lookup(type), params: {} };
+    : { value: (mime.lookup(type) || 'application/octet-stream'), params: {} }
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","- * also includes `.originalIndex` for stable sorting
-function acceptParams(str, index) {
+function acceptParams (str) {
-  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };
+  var ret = { value: parts[0], quality: 1, params: {} }
+ * @param {String} str","-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
+var mime = require('mime-types')
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-    : { value: mime.lookup(type), params: {} };
+    : { value: (mime.lookup(type) || 'application/octet-stream'), params: {} }
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
-/**
- * also includes `.originalIndex` for stable sorting
-function acceptParams(str, index) {
+function acceptParams (str) {
-  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };
+  var ret = { value: parts[0], quality: 1, params: {} }
-      fn = newObject;
+ * @param {String} str
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,lib/view.js,"+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;","-    var mod = this.ext.substr(1)
+    var mod = this.ext.slice(1)","-    var mod = this.ext.substr(1)
+    var mod = this.ext.slice(1)
+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,package.json,"-  ""version"": ""4.17.3"",
+  ""version"": ""5.0.0-beta.1"",
-    ""accepts"": ""~1.3.8"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.19.2"",
+    ""accepts"": ""~1.3.7"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.1"",
-    ""send"": ""0.17.2"",
-    ""serve-static"": ""1.14.2"",
+    ""send"": ""1.0.0-beta.1"",
+    ""serve-static"": ""2.0.0-beta.1"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4""","-  ""version"": ""4.17.3"",
+  ""version"": ""4.19.0"",
-    ""body-parser"": ""1.19.2"",
+    ""body-parser"": ""1.20.2"",
-    ""cookie"": ""0.4.2"",
+    ""cookie"": ""0.6.0"",
-    ""depd"": ""~1.1.2"",
+    ""depd"": ""2.0.0"",
-    ""finalhandler"": ""~1.1.2"",
+    ""finalhandler"": ""1.2.0"",
+    ""http-errors"": ""2.0.0"",
-    ""on-finished"": ""~2.3.0"",
+    ""on-finished"": ""2.4.1"",
-    ""qs"": ""6.9.7"",
+    ""qs"": ""6.11.0"",
-    ""send"": ""0.17.2"",
-    ""serve-static"": ""1.14.2"",
+    ""send"": ""0.18.0"",
+    ""serve-static"": ""1.15.0"",
-    ""statuses"": ""~1.5.0"",
+    ""statuses"": ""2.0.1"",
-    ""ejs"": ""3.1.6"",
-    ""eslint"": ""7.32.0"",
+    ""ejs"": ""3.1.9"",
+    ""eslint"": ""8.47.0"",
-    ""mocha"": ""9.2.0"",
+    ""mocha"": ""10.2.0"",
-    ""multiparty"": ""4.2.3"",
-    ""resolve-path"": ""1.4.0"",
-    ""should"": ""13.2.3"",
-    ""supertest"": ""6.2.2"",
+    ""supertest"": ""6.3.0"",","-  ""version"": ""4.17.3"",
+  ""version"": ""5.0.0-beta.1"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.19.2"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.2"",
-    ""cookie"": ""0.4.2"",
+    ""cookie"": ""0.6.0"",
-    ""debug"": ""2.6.9"",
-    ""depd"": ""~1.1.2"",
+    ""debug"": ""3.1.0"",
+    ""depd"": ""2.0.0"",
-    ""finalhandler"": ""~1.1.2"",
+    ""finalhandler"": ""1.2.0"",
+    ""http-errors"": ""2.0.0"",
-    ""on-finished"": ""~2.3.0"",
+    ""mime-types"": ""~2.1.34"",
+    ""on-finished"": ""2.4.1"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.9.7"",
+    ""qs"": ""6.11.0"",
+    ""router"": ""2.0.0-beta.2"",
-    ""send"": ""0.17.2"",
-    ""serve-static"": ""1.14.2"",
+    ""send"": ""1.0.0-beta.2"",
+    ""serve-static"": ""2.0.0-beta.2"",
-    ""statuses"": ""~1.5.0"",
+    ""statuses"": ""2.0.1"",
-    ""ejs"": ""3.1.6"",
-    ""eslint"": ""7.32.0"",
+    ""ejs"": ""3.1.9"",
+    ""eslint"": ""8.47.0"",
-    ""mocha"": ""9.2.0"",
+    ""mocha"": ""10.2.0"",
-    ""multiparty"": ""4.2.3"",
-    ""resolve-path"": ""1.4.0"",
-    ""should"": ""13.2.3"",
-    ""supertest"": ""6.2.2"",
+    ""supertest"": ""6.3.0"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4"""
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-
-    it('should be called for any URL when ""*""', function (done) {
+  })
+
+  describe('.use', function() {
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    })
+
+    it('should be called for any URL', function (done) {
-      router.all('*', function (req, res) {
+      router.use(function (req, res) {
-  })
-
-  describe('.use', function() {
-    it('should require middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
-    })
-
-    it('should reject string as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
-    })
-
-    it('should reject number as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
-    })
-
-    it('should reject null as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
-    })
-
-    it('should reject Date as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
-    })
-
-    it('should be called for any URL', function (done) {
-      var cb = after(4, done)
-      var router = new Router()
-
-      function no () {
-        throw new Error('should not be called')
-      }
-
-      router.use(function (req, res) {
-        res.end()
-      })
-
-      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
-    })
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","+  it('handle missing method', function (done) {
+    var all = false
+    var router = new Router()
+    var route = router.route('/foo')
+    var use = false
+
+    route.post(function (req, res, next) { next(new Error('should not run')) })
+    route.all(function (req, res, next) {
+      all = true
+      next()
+    })
+    route.get(function (req, res, next) { next(new Error('should not run')) })
+
+    router.get('/foo', function (req, res, next) { next(new Error('should not run')) })
+    router.use(function (req, res, next) {
+      use = true
+      next()
+    })
+
+    router.handle({ url: '/foo' }, {}, function (err) {
+      if (err) return done(err)
+      assert.ok(all)
+      assert.ok(use)
+      done()
+    })
+  })
+
+    this.timeout(5000) // long-running test
+
+
+  it('should not stack overflow with a large sync route stack', function (done) {
+    this.timeout(5000) // long-running test
+
+    var router = new Router()
+
+    router.get('/foo', function (req, res, next) {
+      req.counter = 0
+      next()
+    })
+
+    for (var i = 0; i < 6000; i++) {
+      router.get('/foo', function (req, res, next) {
+        req.counter++
+        next()
+      })
+    }
+
+    router.get('/foo', function (req, res) {
+      assert.strictEqual(req.counter, 6000)
+      res.end()
+    })
+
+    router.handle({ url: '/foo', method: 'GET' }, { end: done })
+  })
+
+  it('should not stack overflow with a large sync middleware stack', function (done) {
+    this.timeout(5000) // long-running test
+
+    var router = new Router()
+
+    router.use(function (req, res, next) {
+      req.counter = 0
+      next()
+    })
+
+    for (var i = 0; i < 6000; i++) {
+      router.use(function (req, res, next) {
+        req.counter++
+        next()
+      })
+    }
+
+    router.use(function (req, res) {
+      assert.strictEqual(req.counter, 6000)
+      res.end()
+    })
+
+    router.handle({ url: '/', method: 'GET' }, { end: done })
+  })
-      router.get('/foo/:id', function(req, res, next){
+      router.get('/foo/:id', function () {
-
-      done = after(2, done);
+      var cb = after(2, done)
+
-        done();
+        cb()
-        done();
+        cb()","-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
+  it('handle missing method', function (done) {
+    var all = false
+    var router = new Router()
+    var route = router.route('/foo')
+    var use = false
+
+    route.post(function (req, res, next) { next(new Error('should not run')) })
+    route.all(function (req, res, next) {
+      all = true
+      next()
+    })
+    route.get(function (req, res, next) { next(new Error('should not run')) })
+
+    router.get('/foo', function (req, res, next) { next(new Error('should not run')) })
+    router.use(function (req, res, next) {
+      use = true
+      next()
+    })
+
+    router.handle({ url: '/foo' }, {}, function (err) {
+      if (err) return done(err)
+      assert.ok(all)
+      assert.ok(use)
+      done()
+    })
+  })
+
+    this.timeout(5000) // long-running test
+
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
+
+  it('should not stack overflow with a large sync route stack', function (done) {
+    this.timeout(5000) // long-running test
+
+    var router = new Router()
+
+    router.get('/foo', function (req, res, next) {
+      req.counter = 0
+      next()
+    })
+
+    for (var i = 0; i < 6000; i++) {
+      router.get('/foo', function (req, res, next) {
+        req.counter++
+        next()
+      })
+    }
+
+    router.get('/foo', function (req, res) {
+      assert.strictEqual(req.counter, 6000)
+      res.end()
+    })
+
+    router.handle({ url: '/foo', method: 'GET' }, { end: done }, function (err) {
+      assert(!err, err);
+    });
+  })
+
+  it('should not stack overflow with a large sync middleware stack', function (done) {
+    this.timeout(5000) // long-running test
+
+    var router = new Router()
+
+    router.use(function (req, res, next) {
+      req.counter = 0
+      next()
+    })
+
+    for (var i = 0; i < 6000; i++) {
+      router.use(function (req, res, next) {
+        req.counter++
+        next()
+      })
+    }
+
+    router.use(function (req, res) {
+      assert.strictEqual(req.counter, 6000)
+      res.end()
+    })
+
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function (err) {
+      assert(!err, err);
+    })
+  })
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      router.get('/foo/:id', function(req, res, next){
+      router.get('/foo/:id', function () {
-
-    it('should be called for any URL when ""*""', function (done) {
+  })
+
+  describe('.use', function() {
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    })
+
+    it('should be called for any URL', function (done) {
-      router.all('*', function (req, res) {
+      router.use(function (req, res) {
-  })
-
-  describe('.use', function() {
-    it('should require middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
-    })
-
-    it('should reject string as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
-    })
-
-    it('should reject number as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
-    })
-
-    it('should reject null as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
-    })
-
-    it('should reject Date as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
-    })
-
-    it('should be called for any URL', function (done) {
-      var cb = after(4, done)
-      var router = new Router()
-
-      function no () {
-        throw new Error('should not be called')
-      }
-
-      router.use(function (req, res) {
-        res.end()
-      })
-
-      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
-    })
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+
-
-      done = after(2, done);
+      var cb = after(2, done)
+
-        done();
+        cb()
-        done();
+        cb()"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/app.param.js,"-var assert = require('assert')
-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      assert.throws(app.param.bind(app, ':name', 'bob'))
-    })
-  })
-","-      app.get('/:user', function(req, res, next) {
+      app.get('/:user', function (req, res) {
-      app.post('/:user', function(req, res, next) {
+      app.post('/:user', function (req, res) {
-      app.get('/:thing', function(req, res, next) {
+      app.get('/:thing', function (req, res) {","-var assert = require('assert')
-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      assert.throws(app.param.bind(app, ':name', 'bob'))
-    })
-  })
-
-      app.get('/:user', function(req, res, next) {
+      app.get('/:user', function (req, res) {
-      app.post('/:user', function(req, res, next) {
+      app.post('/:user', function (req, res) {
-      app.get('/:thing', function(req, res, next) {
+      app.get('/:thing', function (req, res) {"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {","-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-        .expect(200, 'foo as json', done)
+        .expect(200, 'foo as json', cb)
-      app.get('/bar', function(req, res){
+      app.get('/bar', function () {
-      app.get('/foo', function(req, res, next){
+      app.get('/foo', function (req, res) {
-      app.get('/foo', fn, function(req, res, next){
+      app.get('/foo', fn, function (req, res) {
-      router.get('/foo', fn, function (req, res, next) {
+      router.get('/foo', fn, function (req, res) {
-      router.get('/foo', function (req, res, next) {
+      router.get('/foo', function (req, res) {
-      app.get('/bar', function(req, res){
+      app.get('/bar', function () {
-      app.get('/foo', function(req, res, next){
+      app.get('/foo', function () {","+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        assert.throws(app[method].bind(app, '/', 3), /Number/)
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      app.get('/:name', function(req, res, next){
+      app.get('/:name', function (req, res) {
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-      var cb = after(2, done)
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-        .get('/api')
-        .expect(200, '', cb)
-
-      request(app)
-        .get('/api/hey')
-        .expect(200, '/hey', cb)
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+    })
+  })
+
-        .expect(200, 'foo as json', done)
+        .expect(200, 'foo as json', cb)
-      app.get('/bar', function(req, res){
+      app.get('/bar', function () {
-      app.get('/foo', function(req, res, next){
+      app.get('/foo', function (req, res) {
-      app.get('/foo', fn, function(req, res, next){
+      app.get('/foo', fn, function (req, res) {
-      router.get('/foo', fn, function (req, res, next) {
+      router.get('/foo', fn, function (req, res) {
-      router.get('/foo', function (req, res, next) {
+      router.get('/foo', function (req, res) {
-      app.get('/bar', function(req, res){
+      app.get('/bar', function () {
-      app.get('/foo', function(req, res, next){
+      app.get('/foo', function () {
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/app.use.js,"-      assert.throws(function () { app.use('/') }, /requires a middleware function/)
+      assert.throws(function () { app.use('/') }, 'TypeError: app.use() requires a middleware function')
-      assert.throws(function () { app.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { app.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { app.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { app.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { app.use('/', new Date()) }, /argument handler must be a function/)","-        .expect(200, 'forum', done)
+        .expect(200, 'forum', cb)","-        .expect(200, 'forum', done)
+        .expect(200, 'forum', cb)
-      assert.throws(function () { app.use('/') }, /requires a middleware function/)
+      assert.throws(function () { app.use('/') }, 'TypeError: app.use() requires a middleware function')
-      assert.throws(function () { app.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { app.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { app.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { app.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { app.use('/', new Date()) }, /argument handler must be a function/)"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/exports.js,"-var should = require('should');
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })","-var should = require('should');
-    express.Router.should.be.a.Function()
+    assert.strictEqual(typeof express.Router, 'function')
-    express.application.set.should.be.a.Function()
+    assert.strictEqual(typeof express.application, 'object')
+    assert.strictEqual(typeof express.application.set, 'function')
-    express.request.accepts.should.be.a.Function()
+    assert.strictEqual(typeof express.request, 'object')
+    assert.strictEqual(typeof express.request.accepts, 'function')
-    express.response.send.should.be.a.Function()
+    assert.strictEqual(typeof express.response, 'object')
+    assert.strictEqual(typeof express.response.send, 'function')
-    express().foo().should.equal('bar');
+    assert.strictEqual(express().foo(), 'bar')
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
+    assert.throws(function () { express.bodyParser() }, /Error:.*middleware.*bodyParser/)
+    assert.throws(function () { express.limit() }, /Error:.*middleware.*limit/)","-var should = require('should');
-    express.Router.should.be.a.Function()
+    assert.strictEqual(typeof express.Router, 'function')
-    express.application.set.should.be.a.Function()
+    assert.strictEqual(typeof express.application, 'object')
+    assert.strictEqual(typeof express.application.set, 'function')
-    express.request.accepts.should.be.a.Function()
+    assert.strictEqual(typeof express.request, 'object')
+    assert.strictEqual(typeof express.request.accepts, 'function')
-    express.response.send.should.be.a.Function()
+    assert.strictEqual(typeof express.response, 'object')
+    assert.strictEqual(typeof express.response.send, 'function')
-    express().foo().should.equal('bar');
+    assert.strictEqual(express().foo(), 'bar')
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/express.json.js,"-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+  it('should 400 when only whitespace', function (done) {
+    request(createApp())
+      .post('/')
+      .set('Content-Type', 'application/json')
+      .send('  \n')
+      .expect(400, '[entity.parse.failed] ' + parseError(' '), done)
+  })
+
+  it('should 500 if stream not readable', function (done) {
+    var app = express()
+
+    app.use(function (req, res, next) {
+      req.on('end', next)
+      req.resume()
+    })
+
+    app.use(express.json())
+
+    app.use(function (err, req, res, next) {
+      res.status(err.status || 500)
+      res.send('[' + err.type + '] ' + err.message)
+    })
+
+    app.post('/', function (req, res) {
+      res.json(req.body)
+    })
+
+    request(app)
+      .post('/')
+      .set('Content-Type', 'application/json')
+      .send('{""user"":""tobi""}')
+      .expect(500, '[stream.not.readable] stream is not readable', done)
+  })
+
-        .expect(400, parseError('{:'), done)
+        .expect(400, '[entity.parse.failed] ' + parseError('{:'), done)
-        .expect(400, parseError('{""user""'), done)
-    })
-
-    it('should error with type = ""entity.parse.failed""', function (done) {
-      request(this.app)
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('X-Error-Property', 'type')
-        .send(' {""user""')
-        .expect(400, 'entity.parse.failed', done)
+        .expect(400, '[entity.parse.failed] ' + parseError('{""user""'), done)
-        .expect(413, done)
-    })
-
-    it('should error with type = ""entity.too.large""', function (done) {
+        .expect(413, '[entity.too.large] request entity too large', done)
+    })
+
+    it('should 413 when over limit with chunked encoding', function (done) {
+      var app = createApp({ limit: '1kb' })
-      request(createApp({ limit: '1kb' }))
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('Content-Length', '1034')
-        .set('X-Error-Property', 'type')
-        .send(JSON.stringify({ str: buf.toString() }))
-        .expect(413, 'entity.too.large', done)
-    })
-
-    it('should 413 when over limit with chunked encoding', function (done) {
-      var buf = Buffer.alloc(1024, '.')
-      var server = createApp({ limit: '1kb' })
-      var test = request(server).post('/')
+      var test = request(app).post('/')
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a040000', 'hex'))
+      test.expect(413, done)
+    })
+
-      var server = createApp(options)
+      var app = createApp(options)
-      request(server)
+      request(app)
-      var server = createApp({ limit: '8kb' })
-      var test = request(server).post('/')
+      var app = createApp({ limit: '8kb' })
+      var test = request(app).post('/')
+      test.expect(413, done)
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a0400', 'hex'))
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-          .expect(400, parseError('#rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('#rue').replace(/#/g, 't'), done)
-          .expect(400, parseError('#rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('#rue').replace(/#/g, 't'), done)
-          .expect(400, parseError('    #rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('    #rue').replace(/#/g, 't'), done)
-      })
-
-      it('should error with type = ""entity.parse.failed""', function (done) {
-        request(this.app)
-          .post('/')
-          .set('Content-Type', 'application/json')
-          .set('X-Error-Property', 'type')
-          .send('true')
-          .expect(400, 'entity.parse.failed', done)
-          .expect(shouldContainInBody(parseError('#rue').replace('#', 't')))
+          .expect(shouldContainInBody(parseError('#rue').replace(/#/g, 't')))
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-        .expect(403, 'no arrays', done)
-    })
-
-    it('should error with type = ""entity.verify.failed""', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+        .expect(403, '[entity.verify.failed] no arrays', done)
+    })
+
+    it('should allow custom codes', function (done) {
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x5b) return
+          var err = new Error('no arrays')
+          err.status = 400
+          throw err
+        }
+      })
-        .set('X-Error-Property', 'type')
-        .expect(403, 'entity.verify.failed', done)
-    })
-
-    it('should allow custom codes', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x5b) return
-        var err = new Error('no arrays')
-        err.status = 400
-        throw err
-      } })
+        .expect(400, '[entity.verify.failed] no arrays', done)
+    })
+
+    it('should allow custom type', function (done) {
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x5b) return
+          var err = new Error('no arrays')
+          err.type = 'foo.bar'
+          throw err
+        }
+      })
-        .expect(400, 'no arrays', done)
-    })
-
-    it('should allow custom type', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x5b) return
-        var err = new Error('no arrays')
-        err.type = 'foo.bar'
-        throw err
-      } })
-
-      request(app)
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('X-Error-Property', 'type')
-        .send('[""tobi""]')
-        .expect(403, 'foo.bar', done)
+        .expect(403, '[foo.bar] no arrays', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.json())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":""tobi""}')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{""user"":""tobi""}')
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{}')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('{""name"":""论""}')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when parse error', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":')
+        .expect(400)
+        .expect('x-store-foo', 'bar')
+        .end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":""' + Buffer.alloc(1024 * 100, '.').toString() + '""}')
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""KOI8-R""', done)
-    })
-
-    it('should error with type = ""charset.unsupported""', function (done) {
-      var test = request(this.app).post('/')
-      test.set('Content-Type', 'application/json; charset=koi8-r')
-      test.set('X-Error-Property', 'type')
-      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'))
-      test.expect(415, 'charset.unsupported', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""KOI8-R""', done)
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
-    })
-
-    it('should error with type = ""encoding.unsupported""', function (done) {
-      var test = request(this.app).post('/')
-      test.set('Content-Encoding', 'nulls')
-      test.set('Content-Type', 'application/json')
-      test.set('X-Error-Property', 'type')
-      test.write(Buffer.from('000000000000', 'hex'))
-      test.expect(415, 'encoding.unsupported', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+  // The old node error message modification in body parser is catching this
+  it('should 400 when only whitespace', function (done) {
+    request(createApp())
+      .post('/')
+      .set('Content-Type', 'application/json')
+      .send('  \n')
+      .expect(400, '[entity.parse.failed] ' + parseError(' \n'), done)
+  })
+
-        .expect(400, parseError('{:'), done)
+        .expect(400, '[entity.parse.failed] ' + parseError('{:'), done)
-        .expect(400, parseError('{""user""'), done)
-    })
-
-    it('should error with type = ""entity.parse.failed""', function (done) {
-      request(this.app)
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('X-Error-Property', 'type')
-        .send(' {""user""')
-        .expect(400, 'entity.parse.failed', done)
+        .expect(400, '[entity.parse.failed] ' + parseError('{""user""'), done)
-        .expect(413, done)
-    })
-
-    it('should error with type = ""entity.too.large""', function (done) {
+        .expect(413, '[entity.too.large] request entity too large', done)
+    })
+
+    it('should 413 when over limit with chunked encoding', function (done) {
+      var app = createApp({ limit: '1kb' })
-      request(createApp({ limit: '1kb' }))
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('Content-Length', '1034')
-        .set('X-Error-Property', 'type')
-        .send(JSON.stringify({ str: buf.toString() }))
-        .expect(413, 'entity.too.large', done)
-    })
-
-    it('should 413 when over limit with chunked encoding', function (done) {
-      var buf = Buffer.alloc(1024, '.')
-      var server = createApp({ limit: '1kb' })
-      var test = request(server).post('/')
+      var test = request(app).post('/')
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a040000', 'hex'))
+      test.expect(413, done)
+    })
+
-      var server = createApp(options)
+      var app = createApp(options)
-      request(server)
+      request(app)
-      var server = createApp({ limit: '8kb' })
-      var test = request(server).post('/')
+      var app = createApp({ limit: '8kb' })
+      var test = request(app).post('/')
+      test.expect(413, done)
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a0400', 'hex'))
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-          .expect(400, parseError('#rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('#rue').replace(/#/g, 't'), done)
-          .expect(400, parseError('#rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('#rue').replace(/#/g, 't'), done)
-          .expect(400, parseError('    #rue').replace('#', 't'), done)
+          .expect(400, '[entity.parse.failed] ' + parseError('    #rue').replace(/#/g, 't'), done)
-      })
-
-      it('should error with type = ""entity.parse.failed""', function (done) {
-        request(this.app)
-          .post('/')
-          .set('Content-Type', 'application/json')
-          .set('X-Error-Property', 'type')
-          .send('true')
-          .expect(400, 'entity.parse.failed', done)
-          .expect(shouldContainInBody(parseError('#rue').replace('#', 't')))
+          .expect(shouldContainInBody(parseError('#rue').replace(/#/g, 't')))
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-        .expect(403, 'no arrays', done)
-    })
-
-    it('should error with type = ""entity.verify.failed""', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+        .expect(403, '[entity.verify.failed] no arrays', done)
+    })
+
+    it('should allow custom codes', function (done) {
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x5b) return
+          var err = new Error('no arrays')
+          err.status = 400
+          throw err
+        }
+      })
-        .set('X-Error-Property', 'type')
-        .expect(403, 'entity.verify.failed', done)
-    })
-
-    it('should allow custom codes', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x5b) return
-        var err = new Error('no arrays')
-        err.status = 400
-        throw err
-      } })
+        .expect(400, '[entity.verify.failed] no arrays', done)
+    })
+
+    it('should allow custom type', function (done) {
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x5b) return
+          var err = new Error('no arrays')
+          err.type = 'foo.bar'
+          throw err
+        }
+      })
-        .expect(400, 'no arrays', done)
-    })
-
-    it('should allow custom type', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x5b) return
-        var err = new Error('no arrays')
-        err.type = 'foo.bar'
-        throw err
-      } })
-
-      request(app)
-        .post('/')
-        .set('Content-Type', 'application/json')
-        .set('X-Error-Property', 'type')
-        .send('[""tobi""]')
-        .expect(403, 'foo.bar', done)
+        .expect(403, '[foo.bar] no arrays', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.json())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":""tobi""}')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{""user"":""tobi""}')
+        .end(done)
+    })
+
+    it('should persist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('{""name"":""论""}')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/json')
+      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when parse error', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":')
+        .expect(400)
+        .expect('x-store-foo', 'bar')
+        .end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/json')
+        .send('{""user"":""' + Buffer.alloc(1024 * 100, '.').toString() + '""}')
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""KOI8-R""', done)
-    })
-
-    it('should error with type = ""charset.unsupported""', function (done) {
-      var test = request(this.app).post('/')
-      test.set('Content-Type', 'application/json; charset=koi8-r')
-      test.set('X-Error-Property', 'type')
-      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'))
-      test.expect(415, 'charset.unsupported', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""KOI8-R""', done)
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
-    })
-
-    it('should error with type = ""encoding.unsupported""', function (done) {
-      var test = request(this.app).post('/')
-      test.set('Content-Encoding', 'nulls')
-      test.set('Content-Type', 'application/json')
-      test.set('X-Error-Property', 'type')
-      test.write(Buffer.from('000000000000', 'hex'))
-      test.expect(415, 'encoding.unsupported', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
+    // console.log(err)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/express.raw.js,"-        test.expect(200, '{}', done)
+        test.expect(200, '', done)
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
-  it('should handle duplicated middleware', function (done) {
+  it('should 500 if stream not readable', function (done) {
+    app.use(function (req, res, next) {
+      req.on('end', next)
+      req.resume()
+    })
+
-    app.use(express.raw())
+
+    app.use(function (err, req, res, next) {
+      res.status(err.status || 500)
+      res.send('[' + err.type + '] ' + err.message)
+    })
+      .expect(500, '[stream.not.readable] stream is not readable', done)
+  })
+
+  it('should handle duplicated middleware', function (done) {
+    var app = express()
+
+    app.use(express.raw())
+    app.use(express.raw())
+
+    app.post('/', function (req, res) {
+      if (Buffer.isBuffer(req.body)) {
+        res.json({ buf: req.body.toString('hex') })
+      } else {
+        res.json(req.body)
+      }
+    })
+
+    request(app)
+      .post('/')
+      .set('Content-Type', 'application/octet-stream')
+      .send('the user is tobi')
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'))
+      test.expect(413, done)
+    })
+
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a147040400', 'hex'))
+      test.expect(413, done)
+    })
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x00) throw new Error('no leading null')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x00) throw new Error('no leading null')
+        }
+      })
-      test.expect(403, 'no leading null', done)
+      test.expect(403, '[entity.verify.failed] no leading null', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x00) return
-        var err = new Error('no leading null')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x00) return
+          var err = new Error('no leading null')
+          err.status = 400
+          throw err
+        }
+      })
-      test.expect(400, 'no leading null', done)
+      test.expect(400, '[entity.verify.failed] no leading null', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x00) throw new Error('no leading null')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x00) throw new Error('no leading null')
+        }
+      })
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.raw())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        if (Buffer.isBuffer(req.body)) {
+          res.json({ buf: req.body.toString('hex') })
+        } else {
+          res.json(req.body)
+        }
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/octet-stream')
+        .send('the user is tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect({ buf: '746865207573657220697320746f6269' })
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{}')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect({ buf: '6e616d653de8aeba' })
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/octet-stream')
+        .send('the user is ' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'))
+      test.expect(413, done)
+    })
+
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a147040400', 'hex'))
+      test.expect(413, done)
+    })
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x00) throw new Error('no leading null')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x00) throw new Error('no leading null')
+        }
+      })
-      test.expect(403, 'no leading null', done)
+      test.expect(403, '[entity.verify.failed] no leading null', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x00) return
-        var err = new Error('no leading null')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x00) return
+          var err = new Error('no leading null')
+          err.status = 400
+          throw err
+        }
+      })
-      test.expect(400, 'no leading null', done)
+      test.expect(400, '[entity.verify.failed] no leading null', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x00) throw new Error('no leading null')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x00) throw new Error('no leading null')
+        }
+      })
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.raw())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        if (Buffer.isBuffer(req.body)) {
+          res.json({ buf: req.body.toString('hex') })
+        } else {
+          res.json(req.body)
+        }
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/octet-stream')
+        .send('the user is tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect({ buf: '746865207573657220697320746f6269' })
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect({ buf: '6e616d653de8aeba' })
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/octet-stream')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/octet-stream')
+        .send('the user is ' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/express.text.js,"-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+  it('should 500 if stream not readable', function (done) {
+    var app = express()
+
+    app.use(function (req, res, next) {
+      req.on('end', next)
+      req.resume()
+    })
+
+    app.use(express.text())
+
+    app.use(function (err, req, res, next) {
+      res.status(err.status || 500)
+      res.send('[' + err.type + '] ' + err.message)
+    })
+
+    app.post('/', function (req, res) {
+      res.json(req.body)
+    })
+
+    request(app)
+      .post('/')
+      .set('Content-Type', 'text/plain')
+      .send('user is tobi')
+      .expect(500, '[stream.not.readable] stream is not readable', done)
+  })
+
-      var app = createApp({ defaultCharset: 'koi8-r' })
-      var test = request(app).post('/')
+      var server = createApp({ defaultCharset: 'koi8-r' })
+      var test = request(server).post('/')
-      var app = createApp({ defaultCharset: 'koi8-r' })
-      var test = request(app).post('/')
+      var server = createApp({ defaultCharset: 'koi8-r' })
+      var test = request(server).post('/')
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Type', 'text/plain')
+      test.set('Transfer-Encoding', 'chunked')
+      test.write(buf.toString())
+      test.expect(413, done)
+    })
+
+    it('should 413 when inflated body over limit', function (done) {
-      test.set('Content-Type', 'text/plain')
-      test.set('Transfer-Encoding', 'chunked')
-      test.write(buf.toString())
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'))
+      var app = createApp({ limit: '8kb' })
-      var app = createApp({ limit: '8kb' })
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a1470404', 'hex'))
+      setTimeout(function () {
+        test.expect(413, done)
+      }, 100)
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-        .expect(403, 'no leading space', done)
+        .expect(403, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.status = 400
+          throw err
+        }
+      })
-        .expect(400, 'no leading space', done)
+        .expect(400, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.text())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'text/plain')
+        .send('user is tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('""user is tobi""')
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{}')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('""name is 论""')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b0000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'text/plain')
+        .send('user is ' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(err.message)
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
-      var app = createApp({ defaultCharset: 'koi8-r' })
-      var test = request(app).post('/')
+      var server = createApp({ defaultCharset: 'koi8-r' })
+      var test = request(server).post('/')
-      var app = createApp({ defaultCharset: 'koi8-r' })
-      var test = request(app).post('/')
+      var server = createApp({ defaultCharset: 'koi8-r' })
+      var test = request(server).post('/')
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Type', 'text/plain')
+      test.set('Transfer-Encoding', 'chunked')
+      test.write(buf.toString())
+      test.expect(413, done)
+    })
+
+    it('should 413 when inflated body over limit', function (done) {
-      test.set('Content-Type', 'text/plain')
-      test.set('Transfer-Encoding', 'chunked')
-      test.write(buf.toString())
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'))
+      var app = createApp({ limit: '8kb' })
-      var app = createApp({ limit: '8kb' })
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a1470404', 'hex'))
+      setTimeout(function () {
+        test.expect(413, done)
+      }, 100)
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-        .expect(403, 'no leading space', done)
+        .expect(403, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.status = 400
+          throw err
+        }
+      })
-        .expect(400, 'no leading space', done)
+        .expect(400, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.text())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'text/plain')
+        .send('user is tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('""user is tobi""')
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('""name is 论""')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'text/plain')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b0000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'text/plain')
+        .send('user is ' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(err.message)
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/express.urlencoded.js,"-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+  })
+
+  it('should 500 if stream not readable', function (done) {
+    var app = express()
+
+    app.use(function (req, res, next) {
+      req.on('end', next)
+      req.resume()
+    })
+
+    app.use(express.urlencoded())
+
+    app.use(function (err, req, res, next) {
+      res.status(err.status || 500)
+      res.send('[' + err.type + '] ' + err.message)
+    })
+
+    app.post('/', function (req, res) {
+      res.json(req.body)
+    })
+
+    request(app)
+      .post('/')
+      .set('Content-Type', 'application/x-www-form-urlencoded')
+      .send('user=tobi')
+      .expect(500, '[stream.not.readable] stream is not readable', done)
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
+      var app = createApp({ limit: '1kb' })
-      var app = createApp({ limit: '1kb' })
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f9204040000', 'hex'))
+      test.expect(413, done)
+    })
+
+      var app = createApp({ limit: '8kb' })
-      var app = createApp({ limit: '8kb' })
+      test.expect(413, done)
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f92040400', 'hex'))
-          .expect(413, /too many parameters/, done)
-      })
-
-      it('should error with type = ""parameters.too.many""', function (done) {
-        request(createApp({ extended: false, parameterLimit: 10 }))
-          .post('/')
-          .set('Content-Type', 'application/x-www-form-urlencoded')
-          .set('X-Error-Property', 'type')
-          .send(createManyParams(11))
-          .expect(413, 'parameters.too.many', done)
+          .expect(413, '[parameters.too.many] too many parameters', done)
-          .expect(413, /too many parameters/, done)
-      })
-
-      it('should error with type = ""parameters.too.many""', function (done) {
-        request(createApp({ extended: true, parameterLimit: 10 }))
-          .post('/')
-          .set('Content-Type', 'application/x-www-form-urlencoded')
-          .set('X-Error-Property', 'type')
-          .send(createManyParams(11))
-          .expect(413, 'parameters.too.many', done)
+          .expect(413, '[parameters.too.many] too many parameters', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-        .expect(403, 'no leading space', done)
-    })
-
-    it('should error with type = ""entity.verify.failed""', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
-
-      request(app)
-        .post('/')
-        .set('Content-Type', 'application/x-www-form-urlencoded')
-        .set('X-Error-Property', 'type')
-        .send(' user=tobi')
-        .expect(403, 'entity.verify.failed', done)
+        .expect(403, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.status = 400
+          throw err
+        }
+      })
-        .expect(400, 'no leading space', done)
+        .expect(400, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.type = 'foo.bar'
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.type = 'foo.bar'
+          throw err
+        }
+      })
-        .set('X-Error-Property', 'type')
-        .expect(403, 'foo.bar', done)
+        .expect(403, '[foo.bar] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.urlencoded())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/x-www-form-urlencoded')
+        .send('user=tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{""user"":""tobi""}')
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{}')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('{""name"":""论""}')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/x-www-form-urlencoded')
+        .send('user=' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""KOI8-R""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""KOI8-R""', done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}","+var asyncHooks = tryRequire('async_hooks')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-        test.expect(415, 'content encoding unsupported', done)
+        test.expect(415, '[encoding.unsupported] content encoding unsupported', done)
+      var app = createApp({ limit: '1kb' })
-      var app = createApp({ limit: '1kb' })
+    it('should 413 when inflated body over limit', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f9204040000', 'hex'))
+      test.expect(413, done)
+    })
+
+      var app = createApp({ limit: '8kb' })
-      var app = createApp({ limit: '8kb' })
+      test.expect(413, done)
+    })
+
+    it('should not error when inflating', function (done) {
+      var app = createApp({ limit: '1kb' })
+      var test = request(app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f92040400', 'hex'))
-          .expect(413, /too many parameters/, done)
-      })
-
-      it('should error with type = ""parameters.too.many""', function (done) {
-        request(createApp({ extended: false, parameterLimit: 10 }))
-          .post('/')
-          .set('Content-Type', 'application/x-www-form-urlencoded')
-          .set('X-Error-Property', 'type')
-          .send(createManyParams(11))
-          .expect(413, 'parameters.too.many', done)
+          .expect(413, '[parameters.too.many] too many parameters', done)
-          .expect(413, /too many parameters/, done)
-      })
-
-      it('should error with type = ""parameters.too.many""', function (done) {
-        request(createApp({ extended: true, parameterLimit: 10 }))
-          .post('/')
-          .set('Content-Type', 'application/x-www-form-urlencoded')
-          .set('X-Error-Property', 'type')
-          .send(createManyParams(11))
-          .expect(413, 'parameters.too.many', done)
+          .expect(413, '[parameters.too.many] too many parameters', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x20) throw new Error('no leading space')
+        }
+      })
-        .expect(403, 'no leading space', done)
-    })
-
-    it('should error with type = ""entity.verify.failed""', function (done) {
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x20) throw new Error('no leading space')
-      } })
-
-      request(app)
-        .post('/')
-        .set('Content-Type', 'application/x-www-form-urlencoded')
-        .set('X-Error-Property', 'type')
-        .send(' user=tobi')
-        .expect(403, 'entity.verify.failed', done)
+        .expect(403, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.status = 400
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.status = 400
+          throw err
+        }
+      })
-        .expect(400, 'no leading space', done)
+        .expect(400, '[entity.verify.failed] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] !== 0x20) return
-        var err = new Error('no leading space')
-        err.type = 'foo.bar'
-        throw err
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] !== 0x20) return
+          var err = new Error('no leading space')
+          err.type = 'foo.bar'
+          throw err
+        }
+      })
-        .set('X-Error-Property', 'type')
-        .expect(403, 'foo.bar', done)
+        .expect(403, '[foo.bar] no leading space', done)
-      var app = createApp({ verify: function (req, res, buf) {
-        if (buf[0] === 0x5b) throw new Error('no arrays')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          if (buf[0] === 0x5b) throw new Error('no arrays')
+        }
+      })
-      var app = createApp({ verify: function (req, res, buf) {
-        throw new Error('unexpected verify call')
-      } })
+      var app = createApp({
+        verify: function (req, res, buf) {
+          throw new Error('unexpected verify call')
+        }
+      })
-      test.expect(415, 'unsupported charset ""X-BOGUS""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""X-BOGUS""', done)
+    })
+  })
+
+  describeAsyncHooks('async local storage', function () {
+    before(function () {
+      var app = express()
+      var store = { foo: 'bar' }
+
+      app.use(function (req, res, next) {
+        req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+        req.asyncLocalStorage.run(store, next)
+      })
+
+      app.use(express.urlencoded())
+
+      app.use(function (req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        next()
+      })
+
+      app.use(function (err, req, res, next) {
+        var local = req.asyncLocalStorage.getStore()
+
+        if (local) {
+          res.setHeader('x-store-foo', String(local.foo))
+        }
+
+        res.status(err.status || 500)
+        res.send('[' + err.type + '] ' + err.message)
+      })
+
+      app.post('/', function (req, res) {
+        res.json(req.body)
+      })
+
+      this.app = app
+    })
+
+    it('should presist store', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/x-www-form-urlencoded')
+        .send('user=tobi')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .expect('{""user"":""tobi""}')
+        .end(done)
+    })
+
+    it('should presist store when unmatched content-type', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/fizzbuzz')
+        .send('buzz')
+        .expect(200)
+        .expect('x-store-foo', 'bar')
+        .end(done)
+    })
+
+    it('should presist store when inflated', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'))
+      test.expect(200)
+      test.expect('x-store-foo', 'bar')
+      test.expect('{""name"":""论""}')
+      test.end(done)
+    })
+
+    it('should presist store when inflate error', function (done) {
+      var test = request(this.app).post('/')
+      test.set('Content-Encoding', 'gzip')
+      test.set('Content-Type', 'application/x-www-form-urlencoded')
+      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'))
+      test.expect(400)
+      test.expect('x-store-foo', 'bar')
+      test.end(done)
+    })
+
+    it('should presist store when limit exceeded', function (done) {
+      request(this.app)
+        .post('/')
+        .set('Content-Type', 'application/x-www-form-urlencoded')
+        .send('user=' + Buffer.alloc(1024 * 100, '.').toString())
+        .expect(413)
+        .expect('x-store-foo', 'bar')
+        .end(done)
-      test.expect(415, 'unsupported charset ""KOI8-R""', done)
+      test.expect(415, '[charset.unsupported] unsupported charset ""KOI8-R""', done)
-    it('should fail on unknown encoding', function (done) {
+    it('should 415 on unknown encoding', function (done) {
-      test.expect(415, 'unsupported content encoding ""nulls""', done)
+      test.expect(415, '[encoding.unsupported] unsupported content encoding ""nulls""', done)
-    res.send(String(err[req.headers['x-error-property'] || 'message']))
+    res.send(String(req.headers['x-error-property']
+      ? err[req.headers['x-error-property']]
+      : ('[' + err.type + '] ' + err.message)))
+
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
+  }
+}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/res.download.js,"-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')","-var assert = require('assert');
+var assert = require('assert')
+var asyncHooks = tryRequire('async_hooks')
+var path = require('path')
+var utils = require('./support/utils')
+
+var FIXTURES_PATH = path.join(__dirname, 'fixtures')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+
+    describeAsyncHooks('async local storage', function () {
+      it('should presist store', function (done) {
+        var app = express()
+        var cb = after(2, done)
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/name.txt', function (err) {
+            if (err) return cb(err)
+
+            var local = req.asyncLocalStorage.getStore()
+
+            assert.strictEqual(local.foo, 'bar')
+            cb()
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'text/plain; charset=UTF-8')
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(200, 'tobi', cb)
+      })
+
+      it('should presist store on error', function (done) {
+        var app = express()
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/does-not-exist', function (err) {
+            var local = req.asyncLocalStorage.getStore()
+
+            if (local) {
+              res.setHeader('x-store-foo', String(local.foo))
+            }
+
+            res.send(err ? 'got ' + err.status + ' error' : 'no error')
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('x-store-foo', 'bar')
+          .expect('got 404 error')
+          .end(done)
+      })
+    })
+  })
+
+  describe('.download(path, options)', function () {
+    it('should allow options to res.sendFile()', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.download('test/fixtures/.name', {
+          dotfiles: 'allow',
+          maxAge: '4h'
+        })
+      })
+
+      request(app)
+        .get('/')
+        .expect(200)
+        .expect('Content-Disposition', 'attachment; filename="".name""')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
+    })
+
+    describe('with ""headers"" option', function () {
+      it('should set headers on response', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'X-Foo': 'Bar',
+              'X-Bar': 'Foo'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'Bar')
+          .expect('X-Bar', 'Foo')
+          .end(done)
+      })
+
+      it('should use last header when duplicated', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'X-Foo': 'Bar',
+              'x-foo': 'bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'bar')
+          .end(done)
+      })
+
+      it('should override Content-Type', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'Content-Type': 'text/x-custom'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Type', 'text/x-custom')
+          .end(done)
+      })
+
+      it('should not set headers on 404', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/does-not-exist', {
+            headers: {
+              'X-Foo': 'Bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(404)
+          .expect(utils.shouldNotHaveHeader('X-Foo'))
+          .end(done)
+      })
+
+      describe('when headers contains Content-Disposition', function () {
+        it('should be ignored', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.download('test/fixtures/user.html', {
+              headers: {
+                'Content-Disposition': 'inline'
+              }
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Content-Disposition', 'attachment; filename=""user.html""')
+            .end(done)
+        })
+
+        it('should be ignored case-insensitively', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.download('test/fixtures/user.html', {
+              headers: {
+                'content-disposition': 'inline'
+              }
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Content-Disposition', 'attachment; filename=""user.html""')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""root"" option', function () {
+      it('should allow relative path', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+          .end(done)
+      })
+
+      it('should allow up within root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('fake/../name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+          .end(done)
+      })
+
+      it('should reject up outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          var p = '..' + path.sep +
+            path.relative(path.dirname(FIXTURES_PATH), path.join(FIXTURES_PATH, 'name.txt'))
+
+          res.download(p, {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403)
+          .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+          .end(done)
+      })
+
+      it('should reject reading outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('../name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403)
+          .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+          .end(done)
+      })
+    })
-        res.download('test/fixtures/user.html', 'document', options, done)
+        res.download('test/fixtures/user.html', 'document', options, cb)
-      .get('/')
-      .expect(200)
-      .expect('Content-Disposition', 'attachment; filename=""document""')
-      .expect('Cache-Control', 'public, max-age=14400')
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
+        .get('/')
+        .expect(200)
+        .expect('Content-Disposition', 'attachment; filename=""document""')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
-      .get('/')
-      .expect(shouldNotHaveHeader('Content-Disposition'))
-      .expect(200, 'failed', done);
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+        .expect(200, 'failed', done)
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
-
-function shouldNotHaveHeader(header) {
-  return function (res) {
-    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header);
-  };
-}","-var assert = require('assert');
+var assert = require('assert')
+var asyncHooks = tryRequire('async_hooks')
+var path = require('path')
+var utils = require('./support/utils')
+
+var FIXTURES_PATH = path.join(__dirname, 'fixtures')
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
+    })
+
+    describeAsyncHooks('async local storage', function () {
+      it('should presist store', function (done) {
+        var app = express()
+        var cb = after(2, done)
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/name.txt', function (err) {
+            if (err) return cb(err)
+
+            var local = req.asyncLocalStorage.getStore()
+
+            assert.strictEqual(local.foo, 'bar')
+            cb()
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'text/plain; charset=utf-8')
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(200, 'tobi', cb)
+      })
+
+      it('should presist store on error', function (done) {
+        var app = express()
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/does-not-exist', function (err) {
+            var local = req.asyncLocalStorage.getStore()
+
+            if (local) {
+              res.setHeader('x-store-foo', String(local.foo))
+            }
+
+            res.send(err ? 'got ' + err.status + ' error' : 'no error')
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('x-store-foo', 'bar')
+          .expect('got 404 error')
+          .end(done)
+      })
+    })
+  })
+
+  describe('.download(path, options)', function () {
+    it('should allow options to res.sendFile()', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.download('test/fixtures/.name', {
+          dotfiles: 'allow',
+          maxAge: '4h'
+        })
+      })
+
+      request(app)
+        .get('/')
+        .expect(200)
+        .expect('Content-Disposition', 'attachment; filename="".name""')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
+    })
+
+    describe('with ""headers"" option', function () {
+      it('should set headers on response', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'X-Foo': 'Bar',
+              'X-Bar': 'Foo'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'Bar')
+          .expect('X-Bar', 'Foo')
+          .end(done)
+      })
+
+      it('should use last header when duplicated', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'X-Foo': 'Bar',
+              'x-foo': 'bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'bar')
+          .end(done)
+      })
+
+      it('should override Content-Type', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/user.html', {
+            headers: {
+              'Content-Type': 'text/x-custom'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Type', 'text/x-custom')
+          .end(done)
+      })
+
+      it('should not set headers on 404', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('test/fixtures/does-not-exist', {
+            headers: {
+              'X-Foo': 'Bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(404)
+          .expect(utils.shouldNotHaveHeader('X-Foo'))
+          .end(done)
+      })
+
+      describe('when headers contains Content-Disposition', function () {
+        it('should be ignored', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.download('test/fixtures/user.html', {
+              headers: {
+                'Content-Disposition': 'inline'
+              }
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Content-Disposition', 'attachment; filename=""user.html""')
+            .end(done)
+        })
+
+        it('should be ignored case-insensitively', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.download('test/fixtures/user.html', {
+              headers: {
+                'content-disposition': 'inline'
+              }
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Content-Disposition', 'attachment; filename=""user.html""')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""root"" option', function () {
+      it('should allow relative path', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+          .end(done)
+      })
+
+      it('should allow up within root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('fake/../name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Disposition', 'attachment; filename=""name.txt""')
+          .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+          .end(done)
+      })
+
+      it('should reject up outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          var p = '..' + path.sep +
+            path.relative(path.dirname(FIXTURES_PATH), path.join(FIXTURES_PATH, 'name.txt'))
+
+          res.download(p, {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403)
+          .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+          .end(done)
+      })
+
+      it('should reject reading outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.download('../name.txt', {
+            root: FIXTURES_PATH
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403)
+          .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+          .end(done)
+      })
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-        res.download('test/fixtures/user.html', 'document', options, done)
+        res.download('test/fixtures/user.html', 'document', options, cb)
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .get('/')
-      .expect(200)
-      .expect('Content-Disposition', 'attachment; filename=""document""')
-      .expect('Cache-Control', 'public, max-age=14400')
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
+        .get('/')
+        .expect(200)
+        .expect('Content-Disposition', 'attachment; filename=""document""')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
-      .get('/')
-      .expect(shouldNotHaveHeader('Content-Disposition'))
-      .expect(200, 'failed', done);
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Content-Disposition'))
+        .expect(200, 'failed', done)
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}
-
-function shouldNotHaveHeader(header) {
-  return function (res) {
-    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header);
-  };
-}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/res.format.js,"-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))","-    default: function(){ res.send('default') }
+    default: function (a, b, c) {
+      assert(req === a)
+      assert(res === b)
+      assert(next === c)
+      res.send('default')
+    }
-app4.get('/', function(req, res, next){
+app4.get('/', function (req, res) {
+
+      it('should be able to invoke other formatter', function (done) {
+        var app = express()
+
+        app.use(function (req, res, next) {
+          res.format({
+            json: function () { res.send('json') },
+            default: function () {
+              res.header('x-default', '1')
+              this.json()
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .set('Accept', 'text/plain')
+          .expect(200)
+          .expect('x-default', '1')
+          .expect('json')
+          .end(done)
+      })
-      router.get('/', function(req, res, next){
+      router.get('/', function (req, res) {","-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-    default: function(){ res.send('default') }
+    default: function (a, b, c) {
+      assert(req === a)
+      assert(res === b)
+      assert(next === c)
+      res.send('default')
+    }
-app4.get('/', function(req, res, next){
+app4.get('/', function (req, res) {
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
+
+      it('should be able to invoke other formatter', function (done) {
+        var app = express()
+
+        app.use(function (req, res, next) {
+          res.format({
+            json: function () { res.send('json') },
+            default: function () {
+              res.header('x-default', '1')
+              this.json()
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .set('Accept', 'text/plain')
+          .expect(200)
+          .expect('x-default', '1')
+          .expect('json')
+          .end(done)
+      })
-      router.get('/', function(req, res, next){
+      router.get('/', function (req, res) {
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/res.redirect.js,"-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);","-var assert = require('assert')
-      .head('/')
-      .expect(302)
-      .expect('Location', 'http://google.com')
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .head('/')
+        .expect(302)
+        .expect('Location', 'http://google.com')
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
-      .get('/')
-      .set('Accept', 'application/octet-stream')
-      .expect(302)
-      .expect('location', 'http://google.com')
-      .expect('content-length', '0')
-      .expect(utils.shouldNotHaveHeader('Content-Type'))
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .get('/')
+        .set('Accept', 'application/octet-stream')
+        .expect(302)
+        .expect('location', 'http://google.com')
+        .expect('content-length', '0')
+        .expect(utils.shouldNotHaveHeader('Content-Type'))
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
-
-function shouldNotHaveBody () {
-  return function (res) {
-    assert.ok(res.text === '' || res.text === undefined)
-  }
-}","-var assert = require('assert')
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-      .head('/')
-      .expect(302)
-      .expect('Location', 'http://google.com')
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .head('/')
+        .expect(302)
+        .expect('Location', 'http://google.com')
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
-      .get('/')
-      .set('Accept', 'application/octet-stream')
-      .expect(302)
-      .expect('location', 'http://google.com')
-      .expect('content-length', '0')
-      .expect(utils.shouldNotHaveHeader('Content-Type'))
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .get('/')
+        .set('Accept', 'application/octet-stream')
+        .expect(302)
+        .expect('location', 'http://google.com')
+        .expect('content-length', '0')
+        .expect(utils.shouldNotHaveHeader('Content-Type'))
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
-
-function shouldNotHaveBody () {
-  return function (res) {
-    assert.ok(res.text === '' || res.text === undefined)
-  }
-}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","-      .get('/')
-      .expect(200)
-      .expect('Content-Type', 'application/octet-stream')
-      .expect(shouldHaveBody(Buffer.from('hello')))
-      .end(done)
+        .get('/')
+        .expect(200)
+        .expect('Content-Type', 'application/octet-stream')
+        .expect(utils.shouldHaveBody(Buffer.from('hello')))
+        .end(done)
-      .head('/')
-      .expect(200)
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .head('/')
+        .expect(200)
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
+    })
+  })
+
+  describe('when .statusCode is 205', function () {
+    it('should strip Transfer-Encoding field and body, set Content-Length', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.status(205).set('Transfer-Encoding', 'chunked').send('foo')
+      })
+
+      request(app)
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+        .expect('Content-Length', '0')
+        .expect(205, '', done)
-
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
-  }
-}
-
-function shouldNotHaveBody () {
-  return function (res) {
-    assert.ok(res.text === '' || res.text === undefined)
-  }
-}","-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-      .get('/')
-      .expect(200)
-      .expect('Content-Type', 'application/octet-stream')
-      .expect(shouldHaveBody(Buffer.from('hello')))
-      .end(done)
+        .get('/')
+        .expect(200)
+        .expect('Content-Type', 'application/octet-stream')
+        .expect(utils.shouldHaveBody(Buffer.from('hello')))
+        .end(done)
-      .head('/')
-      .expect(200)
-      .expect(shouldNotHaveBody())
-      .end(done)
+        .head('/')
+        .expect(200)
+        .expect(utils.shouldNotHaveBody())
+        .end(done)
+    })
+  })
+
+  describe('when .statusCode is 205', function () {
+    it('should strip Transfer-Encoding field and body, set Content-Length', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.status(205).set('Transfer-Encoding', 'chunked').send('foo')
+      })
+
+      request(app)
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+        .expect('Content-Length', '0')
+        .expect(205, '', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
-
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
-  }
-}
-
-function shouldNotHaveBody () {
-  return function (res) {
-    assert.ok(res.text === '' || res.text === undefined)
-  }
-}"
expressjs_express,e9f9aaeebd13d0ca57e59828a96eb88cb61888bd,Merge tag '4.19.0' into 5.x  4.19.0,test/res.sendFile.js,"+var assert = require('assert')
-  , assert = require('assert');
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(2, done)
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            assert.ok(err)
-            assert.strictEqual(err.code, 'ECONNABORTED')
-            cb()
-          });
-        });
-        test.req.abort()
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(2, done)
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            assert.ok(err)
-            assert.strictEqual(err.code, 'ECONNABORTED')
-            cb()
-          });
-        });
-        test.req.abort()
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.req.abort()
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)","+var asyncHooks = tryRequire('async_hooks')
-var should = require('should');
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+    it('should error for non-absolute path', function (done) {
+      var app = createApp('name.txt')
+
+      request(app)
+        .get('/')
+        .expect(500, /TypeError: path must be absolute/, done)
+    })
+
+
+    it('should send cache-control by default', function (done) {
+      var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
+
+      request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=0')
+        .expect(200, done)
+    })
+
+    it('should not serve dotfiles by default', function (done) {
+      var app = createApp(path.resolve(__dirname, 'fixtures/.name'))
+
+      request(app)
+        .get('/')
+        .expect(404, done)
+    })
-      })
-    })
-
-    describe('with ""cacheControl"" option', function () {
-      it('should enable cacheControl by default', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=0')
-        .expect(200, done)
-      })
-
-      it('should accept cacheControl option', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { cacheControl: false })
-
-        request(app)
-        .get('/')
-        .expect(utils.shouldNotHaveHeader('Cache-Control'))
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""dotfiles"" option', function () {
-      it('should not serve dotfiles by default', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/.name'));
-
-        request(app)
-        .get('/')
-        .expect(404, done);
-      });
-
-      it('should accept dotfiles option', function(done){
-        var app = createApp(path.resolve(__dirname, 'fixtures/.name'), { dotfiles: 'allow' });
-
-        request(app)
-        .get('/')
-        .expect(200)
-        .expect(shouldHaveBody(Buffer.from('tobi')))
-        .end(done)
-      });
-    });
-
-    describe('with ""headers"" option', function () {
-      it('should accept headers option', function (done) {
-        var headers = {
-          'x-success': 'sent',
-          'x-other': 'done'
-        };
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { headers: headers });
-
-        request(app)
-        .get('/')
-        .expect('x-success', 'sent')
-        .expect('x-other', 'done')
-        .expect(200, done);
-      });
-
-      it('should ignore headers option on 404', function (done) {
-        var headers = { 'x-success': 'sent' };
-        var app = createApp(path.resolve(__dirname, 'fixtures/does-not-exist'), { headers: headers });
-
-        request(app)
-        .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-      });
-    });
-
-    describe('with ""immutable"" option', function () {
-      it('should add immutable cache-control directive', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          immutable: true,
-          maxAge: '4h'
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400, immutable')
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""maxAge"" option', function () {
-      it('should set cache-control max-age from number', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          maxAge: 14400000
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400')
-        .expect(200, done)
-      })
-
-      it('should set cache-control max-age from string', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          maxAge: '4h'
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400')
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""root"" option', function () {
-      it('should not transfer relative with without', function (done) {
-        var app = createApp('test/fixtures/name.txt');
-
-        request(app)
-        .get('/')
-        .expect(500, /must be absolute/, done);
-      })
-
-      it('should serve relative to ""root""', function (done) {
-        var app = createApp('name.txt', {root: fixtures});
-
-        request(app)
-        .get('/')
-        .expect(200, 'tobi', done);
-      })
-
-      it('should disallow requesting out of ""root""', function (done) {
-        var app = createApp('foo/../../user.html', {root: fixtures});
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-          should(err).be.ok()
-          err.status.should.equal(404);
-          res.send('got it');
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'got it', done);
+          res.send(err ? 'got ' + err.status + ' error' : 'no error')
+        });
+      });
+
+      request(app)
+        .get('/')
+        .expect(200, 'got 404 error', done)
+    })
+
+    describeAsyncHooks('async local storage', function () {
+      it('should presist store', function (done) {
+        var app = express()
+        var cb = after(2, done)
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'name.txt'), function (err) {
+            if (err) return cb(err)
+
+            var local = req.asyncLocalStorage.getStore()
+
+            assert.strictEqual(local.foo, 'bar')
+            cb()
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'text/plain; charset=UTF-8')
+          .expect(200, 'tobi', cb)
+      })
+
+      it('should presist store on error', function (done) {
+        var app = express()
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'does-not-exist'), function (err) {
+            var local = req.asyncLocalStorage.getStore()
+
+            if (local) {
+              res.setHeader('x-store-foo', String(local.foo))
+            }
+
+            res.send(err ? 'got ' + err.status + ' error' : 'no error')
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('x-store-foo', 'bar')
+          .expect('got 404 error')
+          .end(done)
+      })
+    })
+
+    describe('with ""acceptRanges"" option', function () {
+      describe('when true', function () {
+        it('should advertise byte range accepted', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Accept-Ranges', 'bytes')
+            .expect('123456789')
+            .end(done)
+        })
+
+        it('should respond to range request', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('Range', 'bytes=0-4')
+            .expect(206, '12345', done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not advertise accept-ranges', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Accept-Ranges'))
+            .end(done)
+        })
+
+        it('should not honor range requests', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('Range', 'bytes=0-4')
+            .expect(200, '123456789', done)
+        })
+      })
+    })
+
+    describe('with ""cacheControl"" option', function () {
+      describe('when true', function () {
+        it('should send cache-control header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0')
+            .end(done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not send cache-control header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Cache-Control'))
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""dotfiles"" option', function () {
+      describe('when ""allow""', function () {
+        it('should allow dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'allow'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+            .end(done)
+        })
+      })
+
+      describe('when ""deny""', function () {
+        it('should deny dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'deny'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(403)
+            .expect(/Forbidden/)
+            .end(done)
+        })
+      })
+
+      describe('when ""ignore""', function () {
+        it('should ignore dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'ignore'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(404)
+            .expect(/Not Found/)
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""headers"" option', function () {
+      it('should set headers on response', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'X-Foo': 'Bar',
+              'X-Bar': 'Foo'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'Bar')
+          .expect('X-Bar', 'Foo')
+          .end(done)
+      })
+
+      it('should use last header when duplicated', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'X-Foo': 'Bar',
+              'x-foo': 'bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'bar')
+          .end(done)
+      })
+
+      it('should override Content-Type', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'Content-Type': 'text/x-custom'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Type', 'text/x-custom')
+          .end(done)
+      })
+
+      it('should not set headers on 404', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'does-not-exist'), {
+            headers: {
+              'X-Foo': 'Bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(404)
+          .expect(utils.shouldNotHaveHeader('X-Foo'))
+          .end(done)
+      })
+    })
+
+    describe('with ""immutable"" option', function () {
+      describe('when true', function () {
+        it('should send cache-control header with immutable', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              immutable: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0, immutable')
+            .end(done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not send cache-control header with immutable', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              immutable: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""lastModified"" option', function () {
+      describe('when true', function () {
+        it('should send last-modified header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldHaveHeader('Last-Modified'))
+            .end(done)
+        })
+
+        it('should conditionally respond with if-modified-since', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('If-Modified-Since', (new Date(Date.now() + 99999).toUTCString()))
+            .expect(304, done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not have last-modified header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Last-Modified'))
+            .end(done)
+        })
+
+        it('should not honor if-modified-since', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('If-Modified-Since', (new Date(Date.now() + 99999).toUTCString()))
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Last-Modified'))
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""maxAge"" option', function () {
+      it('should set cache-control max-age to milliseconds', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 20000
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=20')
+          .end(done)
+      })
+
+      it('should cap cache-control max-age to 1 year', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 99999999999
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=31536000')
+          .end(done)
+      })
+
+      it('should min cache-control max-age to 0', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: -20000
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=0')
+          .end(done)
+      })
+
+      it('should floor cache-control max-age', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 21911.23
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=21')
+          .end(done)
+      })
+
+      describe('when cacheControl: false', function () {
+        it('should not send cache-control', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: false,
+              maxAge: 20000
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Cache-Control'))
+            .end(done)
+        })
+      })
+
+      describe('when string', function () {
+        it('should accept plain number as milliseconds', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20000'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=20')
+            .end(done)
+        })
+
+        it('should accept suffix ""s"" for seconds', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20s'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=20')
+            .end(done)
+        })
+
+        it('should accept suffix ""m"" for minutes', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20m'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=1200')
+            .end(done)
+        })
+
+        it('should accept suffix ""d"" for days', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20d'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=1728000')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""root"" option', function () {
+      it('should allow relative path', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200, 'tobi', done)
+      })
+
+      it('should allow up within root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('fake/../name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200, 'tobi', done)
+      })
+
+      it('should reject up outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('..' + path.sep + path.relative(path.dirname(fixtures), path.join(fixtures, 'name.txt')), {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403, done)
+      })
+
+      it('should reject reading outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('../name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403, done)
+      })
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
+          assert.ok(err)
+          assert.ok(!res.headersSent)
+          assert.strictEqual(err.message, 'broken!')
-        req.socket.emit('error', new Error('broken!'));
+        req.socket.destroy(new Error('broken!'))
+    })
+
+    describeAsyncHooks('async local storage', function () {
+      it('should presist store', function (done) {
+        var app = express()
+        var cb = after(2, done)
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendfile('test/fixtures/name.txt', function (err) {
+            if (err) return cb(err)
+
+            var local = req.asyncLocalStorage.getStore()
+
+            assert.strictEqual(local.foo, 'bar')
+            cb()
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'text/plain; charset=UTF-8')
+          .expect(200, 'tobi', cb)
+      })
+
+      it('should presist store on error', function (done) {
+        var app = express()
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendfile('test/fixtures/does-not-exist', function (err) {
+            var local = req.asyncLocalStorage.getStore()
+
+            if (local) {
+              res.setHeader('x-store-foo', String(local.foo))
+            }
+
+            res.send(err ? 'got ' + err.status + ' error' : 'no error')
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('x-store-foo', 'bar')
+          .expect('got 404 error')
+          .end(done)
+      })
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
+        .get('/')
+        .expect(200)
+        .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
+          .get('/')
+          .expect(404, function (err) {
+            if (err) return done(err)
+            assert.strictEqual(calls, 1)
+            done()
+          })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
+
+  describe('.sendfile(path, options)', function () {
+    it('should pass options to send module', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
+      })
+
+      request(app)
+        .get('/')
+        .expect(200, 'to', done)
+    })
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}","+var assert = require('assert')
+var asyncHooks = tryRequire('async_hooks')
-  , assert = require('assert');
-var should = require('should');
+
+var describeAsyncHooks = typeof asyncHooks.AsyncLocalStorage === 'function'
+  ? describe
+  : describe.skip
+    it('should error for non-absolute path', function (done) {
+      var app = createApp('name.txt')
+
+      request(app)
+        .get('/')
+        .expect(500, /TypeError: path must be absolute/, done)
+    })
+
+
+    it('should send cache-control by default', function (done) {
+      var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
+
+      request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=0')
+        .expect(200, done)
+    })
+
+    it('should not serve dotfiles by default', function (done) {
+      var app = createApp(path.resolve(__dirname, 'fixtures/.name'))
+
+      request(app)
+        .get('/')
+        .expect(404, done)
+    })
-      })
-    })
-
-    describe('with ""cacheControl"" option', function () {
-      it('should enable cacheControl by default', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=0')
-        .expect(200, done)
-      })
-
-      it('should accept cacheControl option', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { cacheControl: false })
-
-        request(app)
-        .get('/')
-        .expect(utils.shouldNotHaveHeader('Cache-Control'))
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""dotfiles"" option', function () {
-      it('should not serve dotfiles by default', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/.name'));
-
-        request(app)
-        .get('/')
-        .expect(404, done);
-      });
-
-      it('should accept dotfiles option', function(done){
-        var app = createApp(path.resolve(__dirname, 'fixtures/.name'), { dotfiles: 'allow' });
-
-        request(app)
-        .get('/')
-        .expect(200)
-        .expect(shouldHaveBody(Buffer.from('tobi')))
-        .end(done)
-      });
-    });
-
-    describe('with ""headers"" option', function () {
-      it('should accept headers option', function (done) {
-        var headers = {
-          'x-success': 'sent',
-          'x-other': 'done'
-        };
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { headers: headers });
-
-        request(app)
-        .get('/')
-        .expect('x-success', 'sent')
-        .expect('x-other', 'done')
-        .expect(200, done);
-      });
-
-      it('should ignore headers option on 404', function (done) {
-        var headers = { 'x-success': 'sent' };
-        var app = createApp(path.resolve(__dirname, 'fixtures/does-not-exist'), { headers: headers });
-
-        request(app)
-        .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-      });
-    });
-
-    describe('with ""immutable"" option', function () {
-      it('should add immutable cache-control directive', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          immutable: true,
-          maxAge: '4h'
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400, immutable')
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""maxAge"" option', function () {
-      it('should set cache-control max-age from number', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          maxAge: 14400000
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400')
-        .expect(200, done)
-      })
-
-      it('should set cache-control max-age from string', function (done) {
-        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
-          maxAge: '4h'
-        })
-
-        request(app)
-        .get('/')
-        .expect('Cache-Control', 'public, max-age=14400')
-        .expect(200, done)
-      })
-    })
-
-    describe('with ""root"" option', function () {
-      it('should not transfer relative with without', function (done) {
-        var app = createApp('test/fixtures/name.txt');
-
-        request(app)
-        .get('/')
-        .expect(500, /must be absolute/, done);
-      })
-
-      it('should serve relative to ""root""', function (done) {
-        var app = createApp('name.txt', {root: fixtures});
-
-        request(app)
-        .get('/')
-        .expect(200, 'tobi', done);
-      })
-
-      it('should disallow requesting out of ""root""', function (done) {
-        var app = createApp('foo/../../user.html', {root: fixtures});
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-          should(err).be.ok()
-          err.status.should.equal(404);
-          res.send('got it');
+          res.send(err ? 'got ' + err.status + ' error' : 'no error')
-      .get('/')
-      .expect(200, 'got it', done);
+        .get('/')
+        .expect(200, 'got 404 error', done)
+    })
+
+    describeAsyncHooks('async local storage', function () {
+      it('should presist store', function (done) {
+        var app = express()
+        var cb = after(2, done)
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'name.txt'), function (err) {
+            if (err) return cb(err)
+
+            var local = req.asyncLocalStorage.getStore()
+
+            assert.strictEqual(local.foo, 'bar')
+            cb()
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'text/plain; charset=utf-8')
+          .expect(200, 'tobi', cb)
+      })
+
+      it('should presist store on error', function (done) {
+        var app = express()
+        var store = { foo: 'bar' }
+
+        app.use(function (req, res, next) {
+          req.asyncLocalStorage = new asyncHooks.AsyncLocalStorage()
+          req.asyncLocalStorage.run(store, next)
+        })
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'does-not-exist'), function (err) {
+            var local = req.asyncLocalStorage.getStore()
+
+            if (local) {
+              res.setHeader('x-store-foo', String(local.foo))
+            }
+
+            res.send(err ? 'got ' + err.status + ' error' : 'no error')
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('x-store-foo', 'bar')
+          .expect('got 404 error')
+          .end(done)
+      })
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(2, done)
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            assert.ok(err)
-            assert.strictEqual(err.code, 'ECONNABORTED')
-            cb()
-          });
-        });
-        test.req.abort()
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(2, done)
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            assert.ok(err)
-            assert.strictEqual(err.code, 'ECONNABORTED')
-            cb()
-          });
-        });
-        test.req.abort()
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.req.abort()
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end(function (err) {
-        assert.ok(err)
-        server.close(cb)
-      })
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
+
+    describe('with ""acceptRanges"" option', function () {
+      describe('when true', function () {
+        it('should advertise byte range accepted', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Accept-Ranges', 'bytes')
+            .expect('123456789')
+            .end(done)
+        })
+
+        it('should respond to range request', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('Range', 'bytes=0-4')
+            .expect(206, '12345', done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not advertise accept-ranges', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Accept-Ranges'))
+            .end(done)
+        })
+
+        it('should not honor range requests', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'nums.txt'), {
+              acceptRanges: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('Range', 'bytes=0-4')
+            .expect(200, '123456789', done)
+        })
+      })
+    })
+
+    describe('with ""cacheControl"" option', function () {
+      describe('when true', function () {
+        it('should send cache-control header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0')
+            .end(done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not send cache-control header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Cache-Control'))
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""dotfiles"" option', function () {
+      describe('when ""allow""', function () {
+        it('should allow dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'allow'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldHaveBody(Buffer.from('tobi')))
+            .end(done)
+        })
+      })
+
+      describe('when ""deny""', function () {
+        it('should deny dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'deny'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(403)
+            .expect(/Forbidden/)
+            .end(done)
+        })
+      })
+
+      describe('when ""ignore""', function () {
+        it('should ignore dotfiles', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, '.name'), {
+              dotfiles: 'ignore'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(404)
+            .expect(/Not Found/)
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""headers"" option', function () {
+      it('should set headers on response', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'X-Foo': 'Bar',
+              'X-Bar': 'Foo'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'Bar')
+          .expect('X-Bar', 'Foo')
+          .end(done)
+      })
+
+      it('should use last header when duplicated', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'X-Foo': 'Bar',
+              'x-foo': 'bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('X-Foo', 'bar')
+          .end(done)
+      })
+
+      it('should override Content-Type', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            headers: {
+              'Content-Type': 'text/x-custom'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Content-Type', 'text/x-custom')
+          .end(done)
+      })
+
+      it('should not set headers on 404', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'does-not-exist'), {
+            headers: {
+              'X-Foo': 'Bar'
+            }
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(404)
+          .expect(utils.shouldNotHaveHeader('X-Foo'))
+          .end(done)
+      })
+    })
+
+    describe('with ""immutable"" option', function () {
+      describe('when true', function () {
+        it('should send cache-control header with immutable', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              immutable: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0, immutable')
+            .end(done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not send cache-control header with immutable', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              immutable: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=0')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""lastModified"" option', function () {
+      describe('when true', function () {
+        it('should send last-modified header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldHaveHeader('Last-Modified'))
+            .end(done)
+        })
+
+        it('should conditionally respond with if-modified-since', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: true
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('If-Modified-Since', (new Date(Date.now() + 99999).toUTCString()))
+            .expect(304, done)
+        })
+      })
+
+      describe('when false', function () {
+        it('should not have last-modified header', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Last-Modified'))
+            .end(done)
+        })
+
+        it('should not honor if-modified-since', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              lastModified: false
+            })
+          })
+
+          request(app)
+            .get('/')
+            .set('If-Modified-Since', (new Date(Date.now() + 99999).toUTCString()))
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Last-Modified'))
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""maxAge"" option', function () {
+      it('should set cache-control max-age to milliseconds', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 20000
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=20')
+          .end(done)
+      })
+
+      it('should cap cache-control max-age to 1 year', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 99999999999
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=31536000')
+          .end(done)
+      })
+
+      it('should min cache-control max-age to 0', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: -20000
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=0')
+          .end(done)
+      })
+
+      it('should floor cache-control max-age', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile(path.resolve(fixtures, 'user.html'), {
+            maxAge: 21911.23
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200)
+          .expect('Cache-Control', 'public, max-age=21')
+          .end(done)
+      })
+
+      describe('when cacheControl: false', function () {
+        it('should not send cache-control', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              cacheControl: false,
+              maxAge: 20000
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect(utils.shouldNotHaveHeader('Cache-Control'))
+            .end(done)
+        })
+      })
+
+      describe('when string', function () {
+        it('should accept plain number as milliseconds', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20000'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=20')
+            .end(done)
+        })
+
+        it('should accept suffix ""s"" for seconds', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20s'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=20')
+            .end(done)
+        })
+
+        it('should accept suffix ""m"" for minutes', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20m'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=1200')
+            .end(done)
+        })
+
+        it('should accept suffix ""d"" for days', function (done) {
+          var app = express()
+
+          app.use(function (req, res) {
+            res.sendFile(path.resolve(fixtures, 'user.html'), {
+              maxAge: '20d'
+            })
+          })
+
+          request(app)
+            .get('/')
+            .expect(200)
+            .expect('Cache-Control', 'public, max-age=1728000')
+            .end(done)
+        })
+      })
+    })
+
+    describe('with ""root"" option', function () {
+      it('should allow relative path', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200, 'tobi', done)
+      })
+
+      it('should allow up within root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('fake/../name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(200, 'tobi', done)
+      })
+
+      it('should reject up outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('..' + path.sep + path.relative(path.dirname(fixtures), path.join(fixtures, 'name.txt')), {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403, done)
+      })
+
+      it('should reject reading outside root', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.sendFile('../name.txt', {
+            root: fixtures
+          })
+        })
+
+        request(app)
+          .get('/')
+          .expect(403, done)
+      })
+    })
-function shouldHaveBody (buf) {
-  return function (res) {
-    var body = !Buffer.isBuffer(res.body)
-      ? Buffer.from(res.text)
-      : res.body
-    assert.ok(body, 'response has body')
-    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+function tryRequire (name) {
+  try {
+    return require(name)
+  } catch (e) {
+    return {}"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',examples/auth/index.js,"-app.use(express.urlencoded({ extended: false }))
+app.use(express.urlencoded())
+  if (!req.body) return res.sendStatus(400)","+'use strict'
+
-  if (!user) return fn(new Error('cannot find user'));
+  if (!user) return fn(null, null)
-    fn(new Error('invalid password'));
+    fn(null, null)
-app.post('/login', function(req, res){
+app.post('/login', function (req, res, next) {
+    if (err) return next(err)","+'use strict'
+
-app.use(express.urlencoded({ extended: false }))
+app.use(express.urlencoded())
-  if (!user) return fn(new Error('cannot find user'));
+  if (!user) return fn(null, null)
-    fn(new Error('invalid password'));
+    fn(null, null)
-app.post('/login', function(req, res){
+app.post('/login', function (req, res, next) {
+  if (!req.body) return res.sendStatus(400)
+    if (err) return next(err)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',examples/cookies/index.js,"-app.use(express.urlencoded({ extended: false }))
+app.use(express.urlencoded())
-  if (req.body.remember) res.cookie('remember', 1, { maxAge: minute });
+
+  if (req.body && req.body.remember) {
+    res.cookie('remember', 1, { maxAge: minute })
+  }
+","+'use strict'
+","+'use strict'
+
-app.use(express.urlencoded({ extended: false }))
+app.use(express.urlencoded())
-  if (req.body.remember) res.cookie('remember', 1, { maxAge: minute });
+
+  if (req.body && req.body.remember) {
+    res.cookie('remember', 1, { maxAge: minute })
+  }
+"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',examples/downloads/index.js,"-app.get('/files/:file(*)', function(req, res, next){
+app.get('/files/:file+', function (req, res, next) {","+'use strict'
+
+var resolvePath = require('resolve-path')
+
+
+// path to where the files are stored on disk
+var FILES_DIR = path.join(__dirname, 'files')
-  var filePath = path.join(__dirname, 'files', req.params.file);
+  var filePath = resolvePath(FILES_DIR, req.params.file)","+'use strict'
+
+var resolvePath = require('resolve-path')
+
+
+// path to where the files are stored on disk
+var FILES_DIR = path.join(__dirname, 'files')
-app.get('/files/:file(*)', function(req, res, next){
-  var filePath = path.join(__dirname, 'files', req.params.file);
+app.get('/files/:file+', function (req, res, next) {
+  var filePath = resolvePath(FILES_DIR, req.params.file)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',examples/search/index.js,"-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);",+'use strict',"+'use strict'
-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","- * ocurred. Be sure to check `res.headersSent` if you plan to respond.
+ * occurred. Be sure to check `res.headersSent` if you plan to respond.","-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var mime = require('mime-types')
+var pathIsAbsolute = require('path-is-absolute');
-var mime = send.mime;
-
-/**
- * Module variables.
- * @private
- */
-
-var charsetRegExp = /;\s*charset\s*=/;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.jsonp(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.headersSent`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * ocurred. Be sure to check `res.headersSent` if you plan to respond.
+ * occurred. Be sure to check `res.headersSent` if you plan to respond.
- * Set _Content-Type_ response header with `type` through `mime.lookup()`
+ * Set _Content-Type_ response header with `type` through `mime.contentType()`
+ * When no mapping is found though `mime.contentType()`, the type is set to
+ * ""application/octet-stream"".
-    ? mime.lookup(type)
+    ? (mime.contentType(type) || 'application/octet-stream')
+ * When the set header is ""Content-Type"", the type is expanded to include
+ * the charset if not present using `mime.contentType()`.
+ *
-      if (!charsetRegExp.test(value)) {
-        var charset = mime.charsets.lookup(value.split(';')[0]);
-        if (charset) value += '; charset=' + charset.toLowerCase();
-      }
+      value = mime.contentType(value)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',lib/utils.js,"-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
+var mime = require('mime-types')
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-    : { value: mime.lookup(type), params: {} };
+    : { value: (mime.lookup(type) || 'application/octet-stream'), params: {} }
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","-    val = val.split(/ *, */);
+    val = val.split(',')
+      .map(function (v) { return v.trim() })","-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
+var mime = require('mime-types')
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-    : { value: mime.lookup(type), params: {} };
+    : { value: (mime.lookup(type) || 'application/octet-stream'), params: {} }
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-    val = val.split(/ *, */);
+    val = val.split(',')
+      .map(function (v) { return v.trim() })
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',package.json,"-  ""version"": ""4.17.2"",
+  ""version"": ""5.0.0-beta.1"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.19.1"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-beta.1"",
-    ""send"": ""0.17.2"",
-    ""serve-static"": ""1.14.2"",
+    ""send"": ""1.0.0-beta.1"",
+    ""serve-static"": ""2.0.0-beta.1"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4""","-  ""version"": ""4.17.2"",
+  ""version"": ""4.17.3"",
-    ""accepts"": ""~1.3.7"",
+    ""accepts"": ""~1.3.8"",
-    ""body-parser"": ""1.19.1"",
+    ""body-parser"": ""1.19.2"",
-    ""cookie"": ""0.4.1"",
+    ""cookie"": ""0.4.2"",
-    ""qs"": ""6.9.6"",
+    ""qs"": ""6.9.7"",
-    ""istanbul"": ""0.4.5"",
-    ""mocha"": ""9.1.3"",
+    ""mocha"": ""9.2.0"",
-    ""multiparty"": ""4.2.2"",
+    ""multiparty"": ""4.2.3"",
+    ""nyc"": ""15.1.0"",
+    ""resolve-path"": ""1.4.0"",
-    ""supertest"": ""6.1.6"",
+    ""supertest"": ""6.2.2"",
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"",","-  ""version"": ""4.17.2"",
+  ""version"": ""5.0.0-beta.1"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.19.1"",
+    ""array-flatten"": ""3.0.0"",
+    ""body-parser"": ""2.0.0-beta.1"",
-    ""cookie"": ""0.4.1"",
+    ""cookie"": ""0.4.2"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
+    ""mime-types"": ""~2.1.34"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.9.6"",
+    ""qs"": ""6.9.7"",
+    ""router"": ""2.0.0-beta.1"",
-    ""send"": ""0.17.2"",
-    ""serve-static"": ""1.14.2"",
+    ""send"": ""1.0.0-beta.1"",
+    ""serve-static"": ""2.0.0-beta.1"",
-    ""istanbul"": ""0.4.5"",
-    ""mocha"": ""9.1.3"",
+    ""mocha"": ""9.2.0"",
-    ""multiparty"": ""4.2.2"",
+    ""multiparty"": ""4.2.3"",
+    ""nyc"": ""15.1.0"",
+    ""resolve-path"": ""1.4.0"",
-    ""supertest"": ""6.1.6"",
+    ""supertest"": ""6.2.2"",
-    ""node"": "">= 0.10.0""
+    ""node"": "">= 4""
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""nyc --reporter=lcovonly --reporter=text npm test"",
+    ""test-cov"": ""nyc --reporter=html --reporter=text npm test"","
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-
-    it('should be called for any URL when ""*""', function (done) {
+  })
+
+  describe('.use', function() {
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    })
+
+    it('should be called for any URL', function (done) {
-      router.all('*', function (req, res) {
+      router.use(function (req, res) {
-  })
-
-  describe('.use', function() {
-    it('should require middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
-    })
-
-    it('should reject string as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
-    })
-
-    it('should reject number as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
-    })
-
-    it('should reject null as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
-    })
-
-    it('should reject Date as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
-    })
-
-    it('should be called for any URL', function (done) {
-      var cb = after(4, done)
-      var router = new Router()
-
-      function no () {
-        throw new Error('should not be called')
-      }
-
-      router.use(function (req, res) {
-        res.end()
-      })
-
-      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
-    })
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+",+'use strict',"+'use strict'
-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-
-    it('should be called for any URL when ""*""', function (done) {
+  })
+
+  describe('.use', function() {
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    })
+
+    it('should be called for any URL', function (done) {
-      router.all('*', function (req, res) {
+      router.use(function (req, res) {
-  })
-
-  describe('.use', function() {
-    it('should require middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
-    })
-
-    it('should reject string as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
-    })
-
-    it('should reject number as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
-    })
-
-    it('should reject null as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
-    })
-
-    it('should reject Date as middleware', function () {
-      var router = new Router()
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
-    })
-
-    it('should be called for any URL', function (done) {
-      var cb = after(4, done)
-      var router = new Router()
-
-      function no () {
-        throw new Error('should not be called')
-      }
-
-      router.use(function (req, res) {
-        res.end()
-      })
-
-      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
-      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
-    })
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.js,"-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }
-  })
-})
-","+'use strict'
-    blog.parent.should.equal(app);
-    blogAdmin.parent.should.equal(blog);
+    assert.strictEqual(blog.parent, app)
+    assert.strictEqual(blogAdmin.parent, blog)
-    admin.mountpath.should.equal('/admin');
-    app.mountpath.should.equal('/');
-    blog.mountpath.should.equal('/blog');
-    fallback.mountpath.should.equal('/');
+    assert.strictEqual(admin.mountpath, '/admin')
+    assert.strictEqual(app.mountpath, '/')
+    assert.strictEqual(blog.mountpath, '/blog')
+    assert.strictEqual(fallback.mountpath, '/')
-    app.path().should.equal('');
-    blog.path().should.equal('/blog');
-    blogAdmin.path().should.equal('/blog/admin');
+    assert.strictEqual(app.path(), '')
+    assert.strictEqual(blog.path(), '/blog')
+    assert.strictEqual(blogAdmin.path(), '/blog/admin')
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = 'development'
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = 'development';
-    app.enabled('view cache').should.be.false()
-    process.env.NODE_ENV = 'test';
+    assert.ok(!app.enabled('view cache'))
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = 'production'
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = 'production';
-    app.enabled('view cache').should.be.true()
-    process.env.NODE_ENV = 'test';
+    assert.ok(app.enabled('view cache'))
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = ''
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = '';
-    app.get('env').should.equal('development');
-    process.env.NODE_ENV = 'test';
+    assert.strictEqual(app.get('env'), 'development')","+'use strict'
-    blog.parent.should.equal(app);
-    blogAdmin.parent.should.equal(blog);
+    assert.strictEqual(blog.parent, app)
+    assert.strictEqual(blogAdmin.parent, blog)
-    admin.mountpath.should.equal('/admin');
-    app.mountpath.should.equal('/');
-    blog.mountpath.should.equal('/blog');
-    fallback.mountpath.should.equal('/');
-  })
-})
-
-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }
+    assert.strictEqual(admin.mountpath, '/admin')
+    assert.strictEqual(app.mountpath, '/')
+    assert.strictEqual(blog.mountpath, '/blog')
+    assert.strictEqual(fallback.mountpath, '/')
-    app.path().should.equal('');
-    blog.path().should.equal('/blog');
-    blogAdmin.path().should.equal('/blog/admin');
+    assert.strictEqual(app.path(), '')
+    assert.strictEqual(blog.path(), '/blog')
+    assert.strictEqual(blogAdmin.path(), '/blog/admin')
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = 'development'
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = 'development';
-    app.enabled('view cache').should.be.false()
-    process.env.NODE_ENV = 'test';
+    assert.ok(!app.enabled('view cache'))
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = 'production'
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = 'production';
-    app.enabled('view cache').should.be.true()
-    process.env.NODE_ENV = 'test';
+    assert.ok(app.enabled('view cache'))
+  before(function () {
+    this.env = process.env.NODE_ENV
+    process.env.NODE_ENV = ''
+  })
+
+  after(function () {
+    process.env.NODE_ENV = this.env
+  })
+
-    process.env.NODE_ENV = '';
-    app.get('env').should.equal('development');
-    process.env.NODE_ENV = 'test';
+    assert.strictEqual(app.get('env'), 'development')"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.options.js,"-    app.del('/', function(){});
+    app.post('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    app.del('/', function(){});
+    app.delete('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD')
-    .expect(200, 'GET,HEAD', done);
+    .expect('Allow', 'GET, HEAD')
+    .expect(200, 'GET, HEAD', done);",+'use strict',"+'use strict'
-    app.del('/', function(){});
+    app.post('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    app.del('/', function(){});
+    app.delete('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD')
-    .expect(200, 'GET,HEAD', done);
+    .expect('Allow', 'GET, HEAD')
+    .expect(200, 'GET, HEAD', done);"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.param.js,"-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-","-
+'use strict'
+
+var assert = require('assert')
-      app.param.bind(app, ':name', 'bob').should.throw();
+      assert.throws(app.param.bind(app, ':name', 'bob'))
-        id.should.be.a.Number()
-        res.send('' + id);
+        res.send((typeof id) + ':' + id)
-        id.should.be.a.Number()
-        res.send('' + id);
-      });
-
-      request(app)
-      .get('/user/123')
-      .expect(200, '123', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/post/123')
-        .expect('123', done);
-      })
+        res.send((typeof id) + ':' + id)
+      });
+
+      request(app)
+        .get('/user/123')
+        .expect(200, 'number:123', function (err) {
+          if (err) return done(err)
+          request(app)
+            .get('/post/123')
+            .expect('number:123', done)
+        })
-        id.should.be.a.Number()
-        res.send('' + id);
-      });
-
-      request(app)
-      .get('/user/123')
-      .expect('123', done);
+        res.send((typeof id) + ':' + id)
+      });
+
+      request(app)
+        .get('/user/123')
+        .expect(200, 'number:123', done)","+'use strict'
-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-
-        id.should.be.a.Number()
-        res.send('' + id);
+        res.send((typeof id) + ':' + id)
-        id.should.be.a.Number()
-        res.send('' + id);
-      });
-
-      request(app)
-      .get('/user/123')
-      .expect(200, '123', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/post/123')
-        .expect('123', done);
-      })
+        res.send((typeof id) + ':' + id)
+      });
+
+      request(app)
+        .get('/user/123')
+        .expect(200, 'number:123', function (err) {
+          if (err) return done(err)
+          request(app)
+            .get('/post/123')
+            .expect('number:123', done)
+        })
-        id.should.be.a.Number()
-        res.send('' + id);
-      });
-
-      request(app)
-      .get('/user/123')
-      .expect('123', done);
+        res.send((typeof id) + ':' + id)
+      });
+
+      request(app)
+        .get('/user/123')
+        .expect(200, 'number:123', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.route.js,"+
+var describePromises = global.Promise ? describe : describe.skip
+
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      route.all(function helloWorld (req, res) {
+        res.send('hello, world!')
+      })
+
+      route.all(function handleError (err, req, res, next) {
+        res.status(500)
+        res.send('caught: ' + err.message)
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(500, 'caught: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      route.all(function helloWorld (req, res) {
+        res.send('hello, world!')
+      })
+
+      route.all(function handleError (err, req, res, next) {
+        res.status(500)
+        res.send('caught: ' + err.message)
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(500, 'caught: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      route.all(function () {
+        done(new Error('Unexpected route invoke'))
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught again: ' + err.message)
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught again: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          return Promise.reject()
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught again: ' + err.message)
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught again: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught: ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        route.all(function () {
+          done(new Error('Unexpected route invoke'))
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught: boom!', done)
+      })
+    })
+  })","+'use strict'
+","+'use strict'
+
+
+var describePromises = global.Promise ? describe : describe.skip
+
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      route.all(function helloWorld (req, res) {
+        res.send('hello, world!')
+      })
+
+      route.all(function handleError (err, req, res, next) {
+        res.status(500)
+        res.send('caught: ' + err.message)
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(500, 'caught: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      route.all(function helloWorld (req, res) {
+        res.send('hello, world!')
+      })
+
+      route.all(function handleError (err, req, res, next) {
+        res.status(500)
+        res.send('caught: ' + err.message)
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(500, 'caught: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var route = app.route('/foo')
+
+      route.all(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      route.all(function () {
+        done(new Error('Unexpected route invoke'))
+      })
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught again: ' + err.message)
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught again: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          return Promise.reject()
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught again: ' + err.message)
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught again: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var route = app.route('/foo')
+
+        route.all(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        route.all(function handleError (err, req, res, next) {
+          res.status(500)
+          res.send('caught: ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        route.all(function () {
+          done(new Error('Unexpected route invoke'))
+        })
+
+        request(app)
+        .get('/foo')
+        .expect(500, 'caught: boom!', done)
+      })
+    })
+  })"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-      .get('/api')
-      .expect('', function(){
-        request(app)
-        .get('/api/hey')
-        .expect('/hey', done);
-      });
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+    })
+  })
+
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {","+'use strict'
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /Number/)
+      var cb = after(2, done)
-      .get('/api')
-      .expect('', function(){
-        request(app)
+        .get('/api')
+        .expect(200, '', cb)
+
+      request(app)
-        .expect('/hey', done);
-      });
+        .expect(200, '/hey', cb)
+      var cb = after(2, done)
-      .get('/foo.json')
-      .expect('foo as json', function(){
-        request(app)
+        .get('/foo.json')
+        .expect(200, 'foo as json', cb)
+
+      request(app)
-        .expect(404, done);
-      });
+        .expect(404, cb)
+      var cb = after(2, done)
-      .get('/foo')
-      .expect('foo as html', function(){
-        request(app)
+        .get('/foo')
+        .expect(200, 'foo as html', cb)
+
+      request(app)
-        .expect('foo as json', done);
-      });
+        .expect(200, 'foo as json', done)
-    app.get('/', function(){}).should.equal(app);
+    assert.strictEqual(app.get('/', function () {}), app)","+'use strict'
+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      router.get('/*.*', function(req, res){
+      router.get('/(.*).(.*)', function (req, res) {
-      router.get('/*', function(req, res){
+      router.get('/(.*)', function (req, res) {
-  it('should allow escaped regexp', function(done){
-    var app = express();
-
-    app.get('/user/\\d+', function(req, res){
-      res.end('woot');
-    });
-
-    request(app)
-    .get('/user/10')
-    .expect(200, function (err) {
-      if (err) return done(err)
-      request(app)
-      .get('/user/tj')
-      .expect(404, done);
-    });
-  })
-
-  describe('*', function(){
-    it('should capture everything', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi.json')
-      .expect('/user/tobi.json', done)
-    })
-
-    it('should decode the capture', function (done) {
-      var app = express()
-
-      app.get('*', function (req, res) {
-        res.end(req.params[0])
-      })
-
-      request(app)
-      .get('/user/tobi%20and%20loki.json')
-      .expect('/user/tobi and loki.json', done)
-    })
-
-    it('should denote a greedy capture group', function(done){
-      var app = express();
-
-      app.get('/user/*.json', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/user/tj.json')
-      .expect('tj', done);
-    })
-
-    it('should work with several', function(done){
-      var app = express();
-
-      app.get('/api/*.*', function(req, res){
-        var resource = req.params[0]
-          , format = req.params[1];
-        res.end(resource + ' as ' + format);
-      });
-
-      request(app)
-      .get('/api/users/foo.bar.json')
-      .expect('users/foo.bar as json', done);
-    })
-
-    it('should work cross-segment', function(done){
-      var app = express();
-
-      app.get('/api*', function(req, res){
-        res.send(req.params[0]);
-      });
-
-      request(app)
-      .get('/api')
-      .expect('', function(){
-        request(app)
-        .get('/api/hey')
-        .expect('/hey', done);
-      });
-    })
-
-    it('should allow naming', function(done){
-      var app = express();
-
-      app.get('/api/:resource(*)', function(req, res){
-        var resource = req.params.resource;
-        res.end(resource);
-      });
-
-      request(app)
-      .get('/api/users/0.json')
-      .expect('users/0.json', done);
-    })
-
-    it('should not be greedy immediately after param', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122')
-      .expect('122', done);
-    })
-
-    it('should eat everything after /', function(done){
-      var app = express();
-
-      app.get('/user/:user*', function(req, res){
-        res.end(req.params.user);
-      });
-
-      request(app)
-      .get('/user/122/aaa')
-      .expect('122', done);
-    })
-
-    it('should span multiple segments', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/javascripts/jquery.js')
-      .expect('javascripts/jquery.js', done);
-    })
-
-    it('should be optional', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file/')
-      .expect('', done);
-    })
-
-    it('should require a preceding /', function(done){
-      var app = express();
-
-      app.get('/file/*', function(req, res){
-        res.end(req.params[0]);
-      });
-
-      request(app)
-      .get('/file')
-      .expect(404, done);
-    })
-
-    it('should keep correct parameter indexes', function(done){
-      var app = express();
-
-      app.get('/*/user/:id', function (req, res) {
-        res.send(req.params);
-      });
-
-      request(app)
-      .get('/1/user/2')
-      .expect(200, '{""0"":""1"",""id"":""2""}', done);
-    })
-
-    it('should work within arrays', function(done){
-      var app = express();
-
-      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
-        res.send(req.params.bar);
-      });
-
-      request(app)
-      .get('/test')
-      .expect(200, 'test', done);
-    })
-  })
-
-      app.get('/user(s)?/:user/:op', function(req, res){
+      app.get('/user(s?)/:user/:op', function(req, res){
+  describe(':name*', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect('122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect('1/2/3/4', done)
+    })
+
+    it('should match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user*', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect('', done)
+    })
+  })
+
+  describe(':name+', function () {
+    it('should match one segment', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/122')
+        .expect(200, '122', done)
+    })
+
+    it('should match many segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user/1/2/3/4')
+        .expect(200, '1/2/3/4', done)
+    })
+
+    it('should not match zero segments', function (done) {
+      var app = express()
+
+      app.get('/user/:user+', function (req, res) {
+        res.end(req.params.user)
+      })
+
+      request(app)
+        .get('/user')
+        .expect(404, done)
+    })
+  })
+
+      var cb = after(2, done)
-      .get('/foo.json')
-      .expect('foo as json', function(){
-        request(app)
+        .get('/foo.json')
+        .expect(200, 'foo as json', cb)
+
+      request(app)
-        .expect(404, done);
-      });
+        .expect(404, cb)
+      var cb = after(2, done)
-      .get('/foo')
-      .expect('foo as html', function(){
-        request(app)
+        .get('/foo')
+        .expect(200, 'foo as html', cb)
+
+      request(app)
-        .expect('foo as json', done);
-      });
+        .expect(200, 'foo as json', done)
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+
-    app.get('*', function(req, res, next){
+    app.get('/:path+', function (req, res, next) {
-    app.get('*', function(req, res, next){
+    app.get('/(.*)', function (req, res, next) {
-    app.get('/', function(){}).should.equal(app);
+    assert.strictEqual(app.get('/', function () {}), app)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.routes.error.js,"-        res.send(204);
+        res.sendStatus(204);","+'use strict'
+
+var assert = require('assert')
-        err.message.should.equal('fabricated error');
+        assert.strictEqual(err.message, 'fabricated error')
-        err.message.should.equal('fabricated error');
+        assert.strictEqual(err.message, 'fabricated error')
-        a.should.be.false()
-        b.should.be.true()
-        c.should.be.true()
-        d.should.be.false()
+        assert.ok(!a)
+        assert.ok(b)
+        assert.ok(c)
+        assert.ok(!d)","+'use strict'
+
+var assert = require('assert')
-        err.message.should.equal('fabricated error');
+        assert.strictEqual(err.message, 'fabricated error')
-        err.message.should.equal('fabricated error');
+        assert.strictEqual(err.message, 'fabricated error')
-        a.should.be.false()
-        b.should.be.true()
-        c.should.be.true()
-        d.should.be.false()
-        res.send(204);
+        assert.ok(!a)
+        assert.ok(b)
+        assert.ok(c)
+        assert.ok(!d)
+        res.sendStatus(204);"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/app.use.js,"-      assert.throws(function () { app.use('/') }, /requires a middleware function/)
+      assert.throws(function () { app.use('/') }, 'TypeError: app.use() requires a middleware function')
-      assert.throws(function () { app.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { app.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { app.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { app.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { app.use('/', new Date()) }, /argument handler must be a function/)","+'use strict'
-      arg.should.equal(app);
+      assert.strictEqual(arg, app)
+      var cb = after(2, done)
-      .get('/blog')
-      .expect('blog', function(){
-        request(app)
+        .get('/blog')
+        .expect(200, 'blog', cb)
+
+      request(app)
-        .expect('forum', done);
-      });
+        .expect(200, 'forum', done)
-      blog.parent.should.equal(app);
+      assert.strictEqual(blog.parent, app)
-        parent.should.equal(app);
+        assert.strictEqual(parent, app)
-        parent.should.equal(app);
+        assert.strictEqual(parent, app)","+'use strict'
-      arg.should.equal(app);
+      assert.strictEqual(arg, app)
+      var cb = after(2, done)
-      .get('/blog')
-      .expect('blog', function(){
-        request(app)
+        .get('/blog')
+        .expect(200, 'blog', cb)
+
+      request(app)
-        .expect('forum', done);
-      });
+        .expect(200, 'forum', done)
-      blog.parent.should.equal(app);
+      assert.strictEqual(blog.parent, app)
-        parent.should.equal(app);
+        assert.strictEqual(parent, app)
-        parent.should.equal(app);
+        assert.strictEqual(parent, app)
-      assert.throws(function () { app.use('/') }, /requires a middleware function/)
+      assert.throws(function () { app.use('/') }, 'TypeError: app.use() requires a middleware function')
-      assert.throws(function () { app.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { app.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { app.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { app.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { app.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { app.use('/', new Date()) }, /argument handler must be a function/)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/exports.js,"-var should = require('should');
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })",+'use strict',"+'use strict'
-var should = require('should');
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/express.json.js,"-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)",+'use strict',"+'use strict'
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/express.raw.js,"-        test.expect(200, '{}', done)
+        test.expect(200, '', done)
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)",+'use strict',"+'use strict'
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)
-        test.expect(200, '{}', done)
+        test.expect(200, '', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/express.static.js,"-        .expect('Content-Type', 'text/plain; charset=UTF-8')
+        .expect('Content-Type', 'text/plain; charset=utf-8')",+'use strict',"+'use strict'
-        .expect('Content-Type', 'text/plain; charset=UTF-8')
+        .expect('Content-Type', 'text/plain; charset=utf-8')"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/express.text.js,"-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)",+'use strict',"+'use strict'
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/express.urlencoded.js,"-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)",+'use strict',"+'use strict'
-  it('should parse extended syntax', function (done) {
+  it('should not parse extended syntax', function (done) {
-      .expect(200, '{""user"":{""name"":{""first"":""Tobi""}}}', done)
+      .expect(200, '{""user[name][first]"":""Tobi""}', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)
-          .expect(200, '{}', done)
+          .expect(200, '', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/req.host.js,"-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);",+'use strict',"+'use strict'
-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/req.query.js,"-    it('should default to parse complex keys', function (done) {
+    it('should default to parse simple keys', function (done) {
-      .expect(200, '{""user"":{""name"":""tj""}}', done);
+      .expect(200, '{""user[name]"":""tj""}', done);
-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);
-      });
-    });
-","+'use strict'
+var assert = require('assert')
-        createApp.bind(null, 'bogus').should.throw(/unknown value.*query parser/);
+        assert.throws(createApp.bind(null, 'bogus'),
+          /unknown value.*query parser/)","+'use strict'
+var assert = require('assert')
-    it('should default to parse complex keys', function (done) {
+    it('should default to parse simple keys', function (done) {
-      .expect(200, '{""user"":{""name"":""tj""}}', done);
+      .expect(200, '{""user[name]"":""tj""}', done);
-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);
-      });
-    });
-
-        createApp.bind(null, 'bogus').should.throw(/unknown value.*query parser/);
+        assert.throws(createApp.bind(null, 'bogus'),
+          /unknown value.*query parser/)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.download.js,"-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')","+'use strict'
+
+    it('should accept range requests', function (done) {
+      var app = express()
+
+      app.get('/', function (req, res) {
+        res.download('test/fixtures/user.html')
+      })
+
+      request(app)
+        .get('/')
+        .expect('Accept-Ranges', 'bytes')
+        .expect(200, '<p>{{user.name}}</p>', done)
+    })
+
+    it('should respond with requested byte range', function (done) {
+      var app = express()
+
+      app.get('/', function (req, res) {
+        res.download('test/fixtures/user.html')
+      })
+
+      request(app)
+        .get('/')
+        .set('Range', 'bytes=0-2')
+        .expect('Content-Range', 'bytes 0-2/20')
+        .expect(206, '<p>', done)
+    })
-        res.download('test/fixtures/user.html', 'document', done);
+        res.download('test/fixtures/user.html', 'document', cb)","+'use strict'
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
+
+    it('should accept range requests', function (done) {
+      var app = express()
+
+      app.get('/', function (req, res) {
+        res.download('test/fixtures/user.html')
+      })
+
+      request(app)
+        .get('/')
+        .expect('Accept-Ranges', 'bytes')
+        .expect(200, '<p>{{user.name}}</p>', done)
+    })
+
+    it('should respond with requested byte range', function (done) {
+      var app = express()
+
+      app.get('/', function (req, res) {
+        res.download('test/fixtures/user.html')
+      })
+
+      request(app)
+        .get('/')
+        .set('Range', 'bytes=0-2')
+        .expect('Content-Range', 'bytes 0-2/20')
+        .expect(206, '<p>', done)
+    })
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-        res.download('test/fixtures/user.html', 'document', done);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+        res.download('test/fixtures/user.html', 'document', cb)
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/html; charset=utf-8')
-      .expect('Content-Type', 'text/html; charset=UTF-8')
+      .expect('Content-Type', 'text/html; charset=utf-8')"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.format.js,"-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))",+'use strict',"+'use strict'
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.json.js,"-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })",+'use strict',"+'use strict'
-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.jsonp.js,"-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)",+'use strict',"+'use strict'
-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.redirect.js,"-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);",+'use strict',"+'use strict'
-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+'use strict'
-          chunk.toString().should.equal('hello, world!');
+          assert.strictEqual(chunk.toString(), 'hello, world!')","+'use strict'
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201)
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
-          chunk.toString().should.equal('hello, world!');
+          assert.strictEqual(chunk.toString(), 'hello, world!')"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.sendFile.js,"+var assert = require('assert')
-  , assert = require('assert');
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end()
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)","+'use strict'
-          server.close(cb)
-        test.abort();
+        test.req.abort()
-      test.end()
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-          server.close(cb)
-        test.abort();
+        test.req.abort()
-      test.end()
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })","+'use strict'
+var assert = require('assert')
-  , assert = require('assert');
-          server.close(cb)
-        test.abort();
+        test.req.abort()
-      test.end()
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-      var cb = after(1, done);
+      var cb = after(2, done)
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
+            assert.ok(err)
+            assert.strictEqual(err.code, 'ECONNABORTED')
+            cb()
-        test.abort();
+        test.req.abort()
-      test.expect(200, cb);
+      test.end(function (err) {
+        assert.ok(err)
+        server.close(cb)
+      })
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end()
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/res.vary.js,"-    it('should not set Vary', function (done) {
+    it('should throw error', function (done) {
-      .expect(utils.shouldNotHaveHeader('Vary'))
-      .expect(200, done);
+      .expect(500, /field.*required/, done)",+'use strict',"+'use strict'
-    it('should not set Vary', function (done) {
+    it('should throw error', function (done) {
-      .expect(utils.shouldNotHaveHeader('Vary'))
-      .expect(200, done);
+      .expect(500, /field.*required/, done)"
expressjs_express,318fd4b543ffbebf97bf0b6c49188afae45741f5,Merge tag '4.17.3',test/utils.js,"-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})","+'use strict'
+var should = require('should')
-    utils.etag('express!')
-    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.etag('express!'),
+      '""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.etag('express❤', 'utf8')
-    .should.eql('""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
+    assert.strictEqual(utils.etag('express❤', 'utf8'),
+      '""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    utils.etag(Buffer.from('express!'))
-    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.etag(Buffer.from('express!')),
+      '""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.etag('')
-    .should.eql('""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
+    assert.strictEqual(utils.etag(''),
+      '""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-    utils.wetag('express!')
-    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.wetag('express!'),
+      'W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.wetag('express❤', 'utf8')
-    .should.eql('W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
+    assert.strictEqual(utils.wetag('express❤', 'utf8'),
+      'W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    utils.wetag(Buffer.from('express!'))
-    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.wetag(Buffer.from('express!')),
+      'W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.wetag('')
-    .should.eql('W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
+    assert.strictEqual(utils.wetag(''),
+      'W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
+    should(utils.flatten(arr))
+      .eql(['one', 'two', 'three', 'four', 'five'])","+'use strict'
-    utils.etag('express!')
-    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.etag('express!'),
+      '""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.etag('express❤', 'utf8')
-    .should.eql('""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
+    assert.strictEqual(utils.etag('express❤', 'utf8'),
+      '""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    utils.etag(Buffer.from('express!'))
-    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.etag(Buffer.from('express!')),
+      '""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.etag('')
-    .should.eql('""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
+    assert.strictEqual(utils.etag(''),
+      '""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-    utils.wetag('express!')
-    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.wetag('express!'),
+      'W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.wetag('express❤', 'utf8')
-    .should.eql('W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
+    assert.strictEqual(utils.wetag('express❤', 'utf8'),
+      'W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    utils.wetag(Buffer.from('express!'))
-    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
+    assert.strictEqual(utils.wetag(Buffer.from('express!')),
+      'W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    utils.wetag('')
-    .should.eql('W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
+    assert.strictEqual(utils.wetag(''),
+      'W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","- * so if you're using "".ejs"" extensions you dont need to do anything.
+ * so if you're using "".ejs"" extensions you don't need to do anything.","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
- * so if you're using "".ejs"" extensions you dont need to do anything.
+ * so if you're using "".ejs"" extensions you don't need to do anything.
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
-defineGetter(req, 'hostname', function hostname(){
+defineGetter(req, 'host', function host(){
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  } else if (host.indexOf(',') !== -1) {
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  } else if (val.indexOf(',') !== -1) {
-    host = host.substring(0, host.indexOf(',')).trimRight()
-  }
+    val = val.substring(0, val.indexOf(',')).trimRight()
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'hostname', function hostname(){
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","- * header field, and it contains the give mime `type`.
+ * header field, and it contains the given mime `type`.","-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * header field, and it contains the give mime `type`.
+ * header field, and it contains the given mime `type`.
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
-defineGetter(req, 'hostname', function hostname(){
+defineGetter(req, 'host', function host(){
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  } else if (host.indexOf(',') !== -1) {
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  } else if (val.indexOf(',') !== -1) {
-    host = host.substring(0, host.indexOf(',')).trimRight()
-  }
+    val = val.substring(0, val.indexOf(',')).trimRight()
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'hostname', function hostname(){
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-    // res.json(body, status) backwards compat
+    // res.jsonp(body, status) backwards compat
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
+      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');
-    // replace chars not allowed in JavaScript that are in JSON
-    body = body
-      .replace(/\u2028/g, '\\u2028')
-      .replace(/\u2029/g, '\\u2029');
+    if (body === undefined) {
+      // empty argument
+      body = ''
+    } else if (typeof body === 'string') {
+      // replace chars not allowed in JavaScript that are in JSON
+      body = body
+        .replace(/\u2028/g, '\\u2028')
+        .replace(/\u2029/g, '\\u2029')
+    }
- * or when an error occurs. Be sure to check `res.sentHeader`
+ * or when an error occurs. Be sure to check `res.headersSent`
- * or when an error occurs. Be sure to check `res.sentHeader`
+ * or when an error occurs. Be sure to check `res.headersSent`
- *      'appliation/json': function(){
+ *      'application/json': function () {
-      : [prev, val];
+        : [prev, val]
-  if (escape) {
+  if (escape && typeof json === 'string') {","-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-    // replace chars not allowed in JavaScript that are in JSON
-    body = body
-      .replace(/\u2028/g, '\\u2028')
-      .replace(/\u2029/g, '\\u2029');
+    if (body === undefined) {
+      // empty argument
+      body = ''
+    } else if (typeof body === 'string') {
+      // replace chars not allowed in JavaScript that are in JSON
+      body = body
+        .replace(/\u2028/g, '\\u2028')
+        .replace(/\u2029/g, '\\u2029')
+    }
- * or when an error occurs. Be sure to check `res.sentHeader`
+ * or when an error occurs. Be sure to check `res.headersSent`
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- *      'appliation/json': function(){
+ *      'application/json': function () {
-      : [prev, val];
+        : [prev, val]
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-
-  if (escape) {
+  if (escape && typeof json === 'string') {"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',lib/utils.js,"-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","+    case 'weak':
-    case 'weak':
-      fn = exports.wetag;
-      break;
+    case 'simple':
-      break;
-    case 'simple':
-      fn = querystring.parse;","-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
+    case 'weak':
-    case 'weak':
-      fn = exports.wetag;
-      break;
+    case 'simple':
-      fn = newObject;
-      break;
-    case 'simple':
-      fn = querystring.parse;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',package.json,"-  ""version"": ""4.17.1"",
+  ""version"": ""5.0.0-alpha.8"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-alpha.1"",","-  ""version"": ""4.17.1"",
+  ""version"": ""4.17.2"",
+    ""http"",
-    ""body-parser"": ""1.19.0"",
-    ""content-disposition"": ""0.5.3"",
+    ""body-parser"": ""1.19.1"",
+    ""content-disposition"": ""0.5.4"",
-    ""cookie"": ""0.4.0"",
+    ""cookie"": ""0.4.1"",
-    ""proxy-addr"": ""~2.0.5"",
-    ""qs"": ""6.7.0"",
+    ""proxy-addr"": ""~2.0.7"",
+    ""qs"": ""6.9.6"",
-    ""safe-buffer"": ""5.1.2"",
-    ""send"": ""0.17.1"",
-    ""serve-static"": ""1.14.1"",
-    ""setprototypeof"": ""1.1.1"",
+    ""safe-buffer"": ""5.2.1"",
+    ""send"": ""0.17.2"",
+    ""serve-static"": ""1.14.2"",
+    ""setprototypeof"": ""1.2.0"",
-    ""connect-redis"": ""3.4.1"",
-    ""cookie-parser"": ""~1.4.4"",
-    ""cookie-session"": ""1.3.3"",
-    ""ejs"": ""2.6.1"",
-    ""eslint"": ""2.13.1"",
-    ""express-session"": ""1.16.1"",
-    ""hbs"": ""4.0.4"",
+    ""connect-redis"": ""3.4.2"",
+    ""cookie-parser"": ""1.4.6"",
+    ""cookie-session"": ""2.0.0"",
+    ""ejs"": ""3.1.6"",
+    ""eslint"": ""7.32.0"",
+    ""express-session"": ""1.17.2"",
+    ""hbs"": ""4.2.0"",
-    ""marked"": ""0.6.2"",
+    ""marked"": ""0.7.0"",
-    ""mocha"": ""5.2.0"",
-    ""morgan"": ""1.9.1"",
-    ""multiparty"": ""4.2.1"",
+    ""mocha"": ""9.1.3"",
+    ""morgan"": ""1.10.0"",
+    ""multiparty"": ""4.2.2"",
-    ""supertest"": ""3.3.0"",
+    ""supertest"": ""6.1.6"",","-  ""version"": ""4.17.1"",
+  ""version"": ""5.0.0-alpha.8"",
+    ""http"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.19.0"",
-    ""content-disposition"": ""0.5.3"",
+    ""array-flatten"": ""2.1.1"",
+    ""body-parser"": ""1.19.1"",
+    ""content-disposition"": ""0.5.4"",
-    ""cookie"": ""0.4.0"",
+    ""cookie"": ""0.4.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""path-to-regexp"": ""0.1.7"",
-    ""proxy-addr"": ""~2.0.5"",
-    ""qs"": ""6.7.0"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""proxy-addr"": ""~2.0.7"",
+    ""qs"": ""6.9.6"",
-    ""safe-buffer"": ""5.1.2"",
-    ""send"": ""0.17.1"",
-    ""serve-static"": ""1.14.1"",
-    ""setprototypeof"": ""1.1.1"",
+    ""router"": ""2.0.0-alpha.1"",
+    ""safe-buffer"": ""5.2.1"",
+    ""send"": ""0.17.2"",
+    ""serve-static"": ""1.14.2"",
+    ""setprototypeof"": ""1.2.0"",
-    ""connect-redis"": ""3.4.1"",
-    ""cookie-parser"": ""~1.4.4"",
-    ""cookie-session"": ""1.3.3"",
-    ""ejs"": ""2.6.1"",
-    ""eslint"": ""2.13.1"",
-    ""express-session"": ""1.16.1"",
-    ""hbs"": ""4.0.4"",
+    ""connect-redis"": ""3.4.2"",
+    ""cookie-parser"": ""1.4.6"",
+    ""cookie-session"": ""2.0.0"",
+    ""ejs"": ""3.1.6"",
+    ""eslint"": ""7.32.0"",
+    ""express-session"": ""1.17.2"",
+    ""hbs"": ""4.2.0"",
-    ""marked"": ""0.6.2"",
+    ""marked"": ""0.7.0"",
-    ""mocha"": ""5.2.0"",
-    ""morgan"": ""1.9.1"",
-    ""multiparty"": ""4.2.1"",
+    ""mocha"": ""9.1.3"",
+    ""morgan"": ""1.10.0"",
+    ""multiparty"": ""4.2.2"",
-    ""supertest"": ""3.3.0"",
+    ""supertest"": ""6.1.6"","
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","-      req.params.bar.should.equal('route');
+      assert.strictEqual(req.params.bar, 'route')
-      false.should.be.true()
+      throw new Error('should not be called')
-          val.should.equal('foo');
+          assert.strictEqual(val, 'foo')","-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-      req.params.bar.should.equal('route');
+      assert.strictEqual(req.params.bar, 'route')
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-      false.should.be.true()
+      throw new Error('should not be called')
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-          val.should.equal('foo');
+          assert.strictEqual(val, 'foo')
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/app.listen.js,"-    app.del('/tobi', function(req, res){
-      res.end('deleted tobi!');
+    app.get('/tobi', function(req, res){
+      res.end('got tobi!');","-    app.del('/tobi', function(req, res){
-      res.end('deleted tobi!');
-    });
-","-    app.del('/tobi', function(req, res){
-      res.end('deleted tobi!');
-    });
-"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/app.param.js,"-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-","-        next(new Error('invalid invokation'));
+        next(new Error('invalid invocation'))","-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) === '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-
-        next(new Error('invalid invokation'));
+        next(new Error('invalid invocation'))"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+","+
+    it('should ensure regexp matches path prefix', function (done) {
+      var app = express()
+      var p = []
+
+      app.use(/\/api.*/, function (req, res, next) {
+        p.push('a')
+        next()
+      })
+      app.use(/api/, function (req, res, next) {
+        p.push('b')
+        next()
+      })
+      app.use(/\/test/, function (req, res, next) {
+        p.push('c')
+        next()
+      })
+      app.use(function (req, res) {
+        res.end()
+      })
+
+      request(app)
+        .get('/test/api/1234')
+        .expect(200, function (err) {
+          if (err) return done(err)
+          assert.deepEqual(p, ['c'])
+          done()
+        })
+    })","+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
+
+    it.skip('should ensure regexp matches path prefix', function (done) {
+      var app = express()
+      var p = []
+
+      app.use(/\/api.*/, function (req, res, next) {
+        p.push('a')
+        next()
+      })
+      app.use(/api/, function (req, res, next) {
+        p.push('b')
+        next()
+      })
+      app.use(/\/test/, function (req, res, next) {
+        p.push('c')
+        next()
+      })
+      app.use(function (req, res) {
+        res.end()
+      })
+
+      request(app)
+        .get('/test/api/1234')
+        .expect(200, function (err) {
+          if (err) return done(err)
+          assert.deepEqual(p, ['c'])
+          done()
+        })
+    })
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/res.json.js,"-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })","+
+      it('should not break undefined escape', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.json(undefined)
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'application/json; charset=utf-8')
+          .expect(200, '', done)
+      })","+
+      it('should not break undefined escape', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.json(undefined)
+        })
+
+        request(app)
+          .get('/')
+          .expect('Content-Type', 'application/json; charset=utf-8')
+          .expect(200, '', done)
+      })
-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })"
expressjs_express,c7d528cdc00c2b1b8a40e89b607d73247c602d8c,Merge tag '4.17.2',test/res.jsonp.js,"-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)","-    describe('when given primitives', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(null);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, 'null', done)
-      })
-    })
-
-    describe('when given an array', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(['foo', 'bar', 'baz']);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '[""foo"",""bar"",""baz""]', done)
-      })
-    })
-
-    describe('when given an object', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp({ name: 'tobi' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '{""name"":""tobi""}', done)
-      })
-    })
-
-    describe('when given primitives', function(){
-      it('should respond with json for null', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(null);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, 'null', done)
-      })
-
-      it('should respond with json for Number', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(300);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '300', done)
-      })
-
-      it('should respond with json for String', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp('str');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '""str""', done)
+    describe('when given undefined', function () {
+      it('should invoke callback with no arguments', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(undefined)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\)/, done)
+      })
+    })
+
+    describe('when given null', function () {
+      it('should invoke callback with null', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(null)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(null\)/, done)
+      })
+    })
+
+    describe('when given a string', function () {
+      it('should invoke callback with a string', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp('tobi')
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(""tobi""\)/, done)
+      })
+    })
+
+    describe('when given a number', function () {
+      it('should invoke callback with a number', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(42)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(42\)/, done)
+      })
+    })
+
+    describe('when given an array', function () {
+      it('should invoke callback with an array', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(['foo', 'bar', 'baz'])
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\[""foo"",""bar"",""baz""\]\)/, done)
+      })
+    })
+
+    describe('when given an object', function () {
+      it('should invoke callback with an object', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp({ name: 'tobi' })
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\{""name"":""tobi""\}\)/, done)
+      })
+
+      it('should not break undefined escape', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.jsonp(undefined)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\)/, done)","-    describe('when given primitives', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(null);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, 'null', done)
-      })
-    })
-
-    describe('when given an array', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(['foo', 'bar', 'baz']);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '[""foo"",""bar"",""baz""]', done)
-      })
-    })
-
-    describe('when given an object', function(){
-      it('should respond with json', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp({ name: 'tobi' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '{""name"":""tobi""}', done)
-      })
-    })
-
-    describe('when given primitives', function(){
-      it('should respond with json for null', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(null);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, 'null', done)
-      })
-
-      it('should respond with json for Number', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp(300);
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '300', done)
-      })
-
-      it('should respond with json for String', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.jsonp('str');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'application/json; charset=utf-8')
-        .expect(200, '""str""', done)
+    describe('when given undefined', function () {
+      it('should invoke callback with no arguments', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(undefined)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\)/, done)
+      })
+    })
+
+    describe('when given null', function () {
+      it('should invoke callback with null', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(null)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(null\)/, done)
+      })
+    })
+
+    describe('when given a string', function () {
+      it('should invoke callback with a string', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp('tobi')
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(""tobi""\)/, done)
+      })
+    })
+
+    describe('when given a number', function () {
+      it('should invoke callback with a number', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(42)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(42\)/, done)
+      })
+    })
+
+    describe('when given an array', function () {
+      it('should invoke callback with an array', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp(['foo', 'bar', 'baz'])
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\[""foo"",""bar"",""baz""\]\)/, done)
+      })
+    })
+
+    describe('when given an object', function () {
+      it('should invoke callback with an object', function (done) {
+        var app = express()
+
+        app.use(function (req, res) {
+          res.jsonp({ name: 'tobi' })
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\{""name"":""tobi""\}\)/, done)
+      })
+
+      it('should not break undefined escape', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.jsonp(undefined)
+        })
+
+        request(app)
+          .get('/?callback=cb')
+          .expect('Content-Type', 'text/javascript; charset=utf-8')
+          .expect(200, /cb\(\)/, done)
-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',lib/express.js,"-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
-
-/**
- * Replace removed middleware with an appropriate error message.
- */
-
-var removedMiddlewares = [
-  'bodyParser',
-  'compress',
-  'cookieSession',
-  'session',
-  'logger',
-  'cookieParser',
-  'favicon',
-  'responseTime',
-  'errorHandler',
-  'timeout',
-  'methodOverride',
-  'vhost',
-  'csrf',
-  'directory',
-  'limit',
-  'multipart',
-  'staticCache'
-]
-
-removedMiddlewares.forEach(function (name) {
-  Object.defineProperty(exports, name, {
-    get: function () {
-      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
-    },
-    configurable: true
-  });
-});","+exports.raw = bodyParser.raw
+exports.text = bodyParser.text","-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
+exports.raw = bodyParser.raw
+exports.text = bodyParser.text
-
-/**
- * Replace removed middleware with an appropriate error message.
- */
-
-var removedMiddlewares = [
-  'bodyParser',
-  'compress',
-  'cookieSession',
-  'session',
-  'logger',
-  'cookieParser',
-  'favicon',
-  'responseTime',
-  'errorHandler',
-  'timeout',
-  'methodOverride',
-  'vhost',
-  'csrf',
-  'directory',
-  'limit',
-  'multipart',
-  'staticCache'
-]
-
-removedMiddlewares.forEach(function (name) {
-  Object.defineProperty(exports, name, {
-    get: function () {
-      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
-    },
-    configurable: true
-  });
-});"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","+  } else if (host.indexOf(',') !== -1) {
+    // Note: X-Forwarded-Host is normally only ever a
+    //       single value, but this is to be safe.
+    host = host.substring(0, host.indexOf(',')).trimRight()","-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  } else if (val.indexOf(',') !== -1) {
+    // Note: X-Forwarded-Host is normally only ever a
+    //       single value, but this is to be safe.
+    val = val.substring(0, val.indexOf(',')).trimRight()
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","+  if (typeof path !== 'string') {
+    throw new TypeError('path must be a string to res.sendFile')
+  }
+
- *    // save as above
+ *    // same as above
+        /* istanbul ignore next: unreachable default */","-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces, escape)
+  var body = stringify(obj, replacer, spaces, escape)
+  if (typeof path !== 'string') {
+    throw new TypeError('path must be a string to res.sendFile')
+  }
+
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- *    // save as above
+ *    // same as above
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-
+        /* istanbul ignore next: unreachable default */"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',package.json,"-  ""version"": ""4.16.4"",
+  ""version"": ""5.0.0-alpha.7"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""2.0.0-alpha.1"",","-  ""version"": ""4.16.4"",
+  ""version"": ""4.17.1"",
-    ""accepts"": ""~1.3.5"",
+    ""accepts"": ""~1.3.7"",
-    ""body-parser"": ""1.18.3"",
-    ""content-disposition"": ""0.5.2"",
+    ""body-parser"": ""1.19.0"",
+    ""content-disposition"": ""0.5.3"",
-    ""cookie"": ""0.3.1"",
+    ""cookie"": ""0.4.0"",
-    ""finalhandler"": ""1.1.1"",
+    ""finalhandler"": ""~1.1.2"",
-    ""parseurl"": ""~1.3.2"",
+    ""parseurl"": ""~1.3.3"",
-    ""proxy-addr"": ""~2.0.4"",
-    ""qs"": ""6.5.2"",
-    ""range-parser"": ""~1.2.0"",
+    ""proxy-addr"": ""~2.0.5"",
+    ""qs"": ""6.7.0"",
+    ""range-parser"": ""~1.2.1"",
-    ""send"": ""0.16.2"",
-    ""serve-static"": ""1.13.2"",
-    ""setprototypeof"": ""1.1.0"",
-    ""statuses"": ""~1.4.0"",
-    ""type-is"": ""~1.6.16"",
+    ""send"": ""0.17.1"",
+    ""serve-static"": ""1.14.1"",
+    ""setprototypeof"": ""1.1.1"",
+    ""statuses"": ""~1.5.0"",
+    ""type-is"": ""~1.6.18"",
-    ""connect-redis"": ""3.4.0"",
-    ""cookie-parser"": ""~1.4.3"",
-    ""cookie-session"": ""1.3.2"",
+    ""connect-redis"": ""3.4.1"",
+    ""cookie-parser"": ""~1.4.4"",
+    ""cookie-session"": ""1.3.3"",
-    ""express-session"": ""1.15.6"",
-    ""hbs"": ""4.0.1"",
+    ""express-session"": ""1.16.1"",
+    ""hbs"": ""4.0.4"",
-    ""marked"": ""0.5.1"",
+    ""marked"": ""0.6.2"",","-  ""version"": ""4.16.4"",
+  ""version"": ""5.0.0-alpha.7"",
-    ""accepts"": ""~1.3.5"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.18.3"",
-    ""content-disposition"": ""0.5.2"",
+    ""accepts"": ""~1.3.7"",
+    ""array-flatten"": ""2.1.1"",
+    ""body-parser"": ""1.19.0"",
+    ""content-disposition"": ""0.5.3"",
-    ""cookie"": ""0.3.1"",
+    ""cookie"": ""0.4.0"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""finalhandler"": ""1.1.1"",
+    ""finalhandler"": ""~1.1.2"",
-    ""parseurl"": ""~1.3.2"",
-    ""path-to-regexp"": ""0.1.7"",
-    ""proxy-addr"": ""~2.0.4"",
-    ""qs"": ""6.5.2"",
-    ""range-parser"": ""~1.2.0"",
+    ""parseurl"": ""~1.3.3"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""proxy-addr"": ""~2.0.5"",
+    ""qs"": ""6.7.0"",
+    ""range-parser"": ""~1.2.1"",
+    ""router"": ""2.0.0-alpha.1"",
-    ""send"": ""0.16.2"",
-    ""serve-static"": ""1.13.2"",
-    ""setprototypeof"": ""1.1.0"",
-    ""statuses"": ""~1.4.0"",
-    ""type-is"": ""~1.6.16"",
+    ""send"": ""0.17.1"",
+    ""serve-static"": ""1.14.1"",
+    ""setprototypeof"": ""1.1.1"",
+    ""statuses"": ""~1.5.0"",
+    ""type-is"": ""~1.6.18"",
-    ""connect-redis"": ""3.4.0"",
-    ""cookie-parser"": ""~1.4.3"",
-    ""cookie-session"": ""1.3.2"",
+    ""connect-redis"": ""3.4.1"",
+    ""cookie-parser"": ""~1.4.4"",
+    ""cookie-session"": ""1.3.3"",
-    ""express-session"": ""1.15.6"",
-    ""hbs"": ""4.0.1"",
+    ""express-session"": ""1.16.1"",
+    ""hbs"": ""4.0.4"",
-    ""marked"": ""0.5.1"",
+    ""marked"": ""0.6.2"","
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',test/app.router.js,"+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })
+    })
+  })
+","-      res.end();
+      res.json(calls)
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
+    .expect(200, ['before', 'GET /', 'after'], done)
-    it('should decore the capture', function (done) {
+    it('should decode the capture', function (done) {
-        res.end('done');
+        res.json(calls)
-      .expect('done', function(){
-        calls.should.eql(['/foo/:bar?', '/foo', '/foo 2']);
-        done();
-      })
+      .expect(200, ['/foo/:bar?', '/foo', '/foo 2'], done)
-        res.end(err.message);
+        res.json({
+          calls: calls,
+          error: err.message
+        })
-      .expect('fail', function(){
-        calls.should.eql(['/foo/:bar?', '/foo']);
-        done();
-      })
+      .expect(200, { calls: ['/foo/:bar?', '/foo'], error: 'fail' }, done)","+var describePromises = global.Promise ? describe : describe.skip
+
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      res.end();
+      res.json(calls)
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
+    .expect(200, ['before', 'GET /', 'after'], done)
-    it('should decore the capture', function (done) {
+    it('should decode the capture', function (done) {
-        res.end('done');
+        res.json(calls)
-      .expect('done', function(){
-        calls.should.eql(['/foo/:bar?', '/foo', '/foo 2']);
-        done();
-      })
+      .expect(200, ['/foo/:bar?', '/foo', '/foo 2'], done)
-        res.end(err.message);
+        res.json({
+          calls: calls,
+          error: err.message
+        })
-      .expect('fail', function(){
-        calls.should.eql(['/foo/:bar?', '/foo']);
-        done();
-      })
+      .expect(200, { calls: ['/foo/:bar?', '/foo'], error: 'fail' }, done)
+    })
+  })
+
+  describePromises('promise support', function () {
+    it('should pass rejected promise value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject(new Error('boom!'))
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: boom!', done)
+    })
+
+    it('should pass rejected promise without value', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        return Promise.reject()
+      })
+
+      router.use(function sawError (err, req, res, next) {
+        res.send('saw ' + err.name + ': ' + err.message)
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/')
+      .expect(200, 'saw Error: Rejected promise', done)
+    })
+
+    it('should ignore resolved promise', function (done) {
+      var app = express()
+      var router = new express.Router()
+
+      router.use(function createError (req, res, next) {
+        res.send('saw GET /foo')
+        return Promise.resolve('foo')
+      })
+
+      router.use(function () {
+        done(new Error('Unexpected middleware invoke'))
+      })
+
+      app.use(router)
+
+      request(app)
+      .get('/foo')
+      .expect(200, 'saw GET /foo', done)
+    })
+
+    describe('error handling', function () {
+      it('should pass rejected promise value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: boom!', done)
+      })
+
+      it('should pass rejected promise without value', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject()
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          return Promise.reject(new Error('caught: ' + err.message))
+        })
+
+        router.use(function sawError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/')
+        .expect(200, 'saw Error: caught: Rejected promise', done)
+      })
+
+      it('should ignore resolved promise', function (done) {
+        var app = express()
+        var router = new express.Router()
+
+        router.use(function createError (req, res, next) {
+          return Promise.reject(new Error('boom!'))
+        })
+
+        router.use(function handleError (err, req, res, next) {
+          res.send('saw ' + err.name + ': ' + err.message)
+          return Promise.resolve('foo')
+        })
+
+        router.use(function () {
+          done(new Error('Unexpected middleware invoke'))
+        })
+
+        app.use(router)
+
+        request(app)
+        .get('/foo')
+        .expect(200, 'saw Error: boom!', done)
+      })"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',test/exports.js,"-var should = require('should');
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })","+var assert = require('assert')
+  })
+
+  it('should expose json middleware', function () {
+    assert.equal(typeof express.json, 'function')
+    assert.equal(express.json.length, 1)
+  })
+
+  it('should expose raw middleware', function () {
+    assert.equal(typeof express.raw, 'function')
+    assert.equal(express.raw.length, 1)
+  })
+
+  it('should expose static middleware', function () {
+    assert.equal(typeof express.static, 'function')
+    assert.equal(express.static.length, 2)
+  })
+
+  it('should expose text middleware', function () {
+    assert.equal(typeof express.text, 'function')
+    assert.equal(express.text.length, 1)
+  })
+
+  it('should expose urlencoded middleware', function () {
+    assert.equal(typeof express.urlencoded, 'function')
+    assert.equal(express.urlencoded.length, 1)","+var assert = require('assert')
-var should = require('should');
+  })
+
+  it('should expose json middleware', function () {
+    assert.equal(typeof express.json, 'function')
+    assert.equal(express.json.length, 1)
+  })
+
+  it('should expose raw middleware', function () {
+    assert.equal(typeof express.raw, 'function')
+    assert.equal(express.raw.length, 1)
+  })
+
+  it('should expose static middleware', function () {
+    assert.equal(typeof express.static, 'function')
+    assert.equal(express.static.length, 2)
+  })
+
+  it('should expose text middleware', function () {
+    assert.equal(typeof express.text, 'function')
+    assert.equal(express.text.length, 1)
+  })
+
+  it('should expose urlencoded middleware', function () {
+    assert.equal(typeof express.urlencoded, 'function')
+    assert.equal(express.urlencoded.length, 1)
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',test/req.query.js,"-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);
-      });
-    });
-","-        .get('/?user[name]=tj')
-        .expect(200, '{""user"":{""name"":""tj""}}', done);
+        .get('/?foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!')
+        .expect(200, '{""foo"":[{""bar"":""baz"",""fizz"":""buzz""},""done!""]}', done);
-    describe('when ""query parser"" disabled', function () {
+    describe('when ""query parser"" enabled', function () {","-        .get('/?user[name]=tj')
-        .expect(200, '{""user"":{""name"":""tj""}}', done);
+        .get('/?foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!')
+        .expect(200, '{""foo"":[{""bar"":""baz"",""fizz"":""buzz""},""done!""]}', done);
-    describe('when ""query parser"" disabled', function () {
+    describe('when ""query parser"" enabled', function () {
-      });
-    });
-
-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);"
expressjs_express,121fe9982b62d2b1760ec9cb148c19bc5f17255b,Merge tag '4.17.1',test/res.sendFile.js,"+var assert = require('assert')
-  , assert = require('assert');
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end()
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)","+    it('should error for non-string path', function (done) {
+      var app = createApp(42)
+
+      request(app)
+      .get('/')
+      .expect(500, /TypeError: path must be a string to res.sendFile/, done)
+    })
+","+var assert = require('assert')
-  , assert = require('assert');
+
+    it('should error for non-string path', function (done) {
+      var app = createApp(42)
+
+      request(app)
+      .get('/')
+      .expect(500, /TypeError: path must be a string to res.sendFile/, done)
+    })
-  })
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200)
-      .expect(shouldHaveBody(Buffer.from('tobi')))
-      .end(done)
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var app = express();
-      var cb = after(2, done)
-      var error = null
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-          setTimeout(function () {
-            cb(error)
-          }, 10)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        error = err
-        next(err)
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.end()
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',package.json,"-  ""version"": ""4.16.2"",
+  ""version"": ""5.0.0-alpha.6"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""2.6.9"",
+    ""debug"": ""3.1.0"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.3.2"",","-  ""version"": ""4.16.2"",
+  ""version"": ""4.16.4"",
-    ""accepts"": ""~1.3.4"",
+    ""accepts"": ""~1.3.5"",
-    ""body-parser"": ""1.18.2"",
+    ""body-parser"": ""1.18.3"",
-    ""depd"": ""~1.1.1"",
-    ""encodeurl"": ""~1.0.1"",
+    ""depd"": ""~1.1.2"",
+    ""encodeurl"": ""~1.0.2"",
-    ""finalhandler"": ""1.1.0"",
+    ""finalhandler"": ""1.1.1"",
-    ""proxy-addr"": ""~2.0.2"",
-    ""qs"": ""6.5.1"",
+    ""proxy-addr"": ""~2.0.4"",
+    ""qs"": ""6.5.2"",
-    ""safe-buffer"": ""5.1.1"",
-    ""send"": ""0.16.1"",
-    ""serve-static"": ""1.13.1"",
+    ""safe-buffer"": ""5.1.2"",
+    ""send"": ""0.16.2"",
+    ""serve-static"": ""1.13.2"",
-    ""statuses"": ""~1.3.1"",
-    ""type-is"": ""~1.6.15"",
+    ""statuses"": ""~1.4.0"",
+    ""type-is"": ""~1.6.16"",
+    ""connect-redis"": ""3.4.0"",
-    ""ejs"": ""2.5.7"",
+    ""ejs"": ""2.6.1"",
-    ""marked"": ""0.3.6"",
-    ""method-override"": ""2.3.10"",
-    ""mocha"": ""3.5.3"",
-    ""morgan"": ""1.9.0"",
-    ""multiparty"": ""4.1.3"",
+    ""marked"": ""0.5.1"",
+    ""method-override"": ""3.0.0"",
+    ""mocha"": ""5.2.0"",
+    ""morgan"": ""1.9.1"",
+    ""multiparty"": ""4.2.1"",
-    ""should"": ""13.1.0"",
-    ""supertest"": ""1.2.0"",
-    ""connect-redis"": ""~2.4.1"",
+    ""should"": ""13.2.3"",
+    ""supertest"": ""3.3.0"",
-    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks --no-exit test/ test/acceptance/""
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""4.16.2"",
+  ""version"": ""5.0.0-alpha.6"",
-    ""accepts"": ""~1.3.4"",
-    ""array-flatten"": ""1.1.1"",
-    ""body-parser"": ""1.18.2"",
+    ""accepts"": ""~1.3.5"",
+    ""array-flatten"": ""2.1.1"",
+    ""body-parser"": ""1.18.3"",
-    ""debug"": ""2.6.9"",
-    ""depd"": ""~1.1.1"",
-    ""encodeurl"": ""~1.0.1"",
+    ""debug"": ""3.1.0"",
+    ""depd"": ""~1.1.2"",
+    ""encodeurl"": ""~1.0.2"",
-    ""finalhandler"": ""1.1.0"",
+    ""finalhandler"": ""1.1.1"",
-    ""path-to-regexp"": ""0.1.7"",
-    ""proxy-addr"": ""~2.0.2"",
-    ""qs"": ""6.5.1"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""proxy-addr"": ""~2.0.4"",
+    ""qs"": ""6.5.2"",
-    ""safe-buffer"": ""5.1.1"",
-    ""send"": ""0.16.1"",
-    ""serve-static"": ""1.13.1"",
+    ""router"": ""~1.3.2"",
+    ""safe-buffer"": ""5.1.2"",
+    ""send"": ""0.16.2"",
+    ""serve-static"": ""1.13.2"",
-    ""statuses"": ""~1.3.1"",
-    ""type-is"": ""~1.6.15"",
+    ""statuses"": ""~1.4.0"",
+    ""type-is"": ""~1.6.16"",
+    ""connect-redis"": ""3.4.0"",
-    ""ejs"": ""2.5.7"",
+    ""ejs"": ""2.6.1"",
-    ""marked"": ""0.3.6"",
-    ""method-override"": ""2.3.10"",
-    ""mocha"": ""3.5.3"",
-    ""morgan"": ""1.9.0"",
-    ""multiparty"": ""4.1.3"",
+    ""marked"": ""0.5.1"",
+    ""method-override"": ""3.0.0"",
+    ""mocha"": ""5.2.0"",
+    ""morgan"": ""1.9.1"",
+    ""multiparty"": ""4.2.1"",
-    ""should"": ""13.1.0"",
-    ""supertest"": ""1.2.0"",
-    ""connect-redis"": ""~2.4.1"",
+    ""should"": ""13.2.3"",
+    ""supertest"": ""3.3.0"",
-    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks --no-exit test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks --no-exit test/ test/acceptance/""
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","-    var router = Router();
-    assert(typeof router == 'function');
-
-    assert(typeof router == 'function');
-
-    assert(typeof router.get == 'function');
-    assert(typeof router.handle == 'function');
-    assert(typeof router.use == 'function');
+    assert(typeof router === 'function')
+
+    assert(typeof router.get === 'function')
+    assert(typeof router.handle === 'function')
+    assert(typeof router.use === 'function')","-    var router = Router();
-    assert(typeof router == 'function');
-
-    assert(typeof router == 'function');
-
-    assert(typeof router.get == 'function');
-    assert(typeof router.handle == 'function');
-    assert(typeof router.use == 'function');
+    assert(typeof router === 'function')
+
+    assert(typeof router.get === 'function')
+    assert(typeof router.handle === 'function')
+    assert(typeof router.use === 'function')
-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      assert.throws(function () { router.use('/') }, /requires a middleware function/)
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
-      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
-      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);","-          if ('head' == method) {
-            res.end();
-          } else {
-            res.end(method);
-          }
+          res.send(method)
-        .expect('head' == method ? '' : method, done);
+        .expect(200, done)","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-          if ('head' == method) {
-            res.end();
-          } else {
-            res.end(method);
-          }
+          res.send(method)
-        .expect('head' == method ? '' : method, done);
+        .expect(200, done)
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.format.js,"-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))","-      assert(req == a);
-      assert(res == b);
-      assert(next == c);
+      assert(req === a)
+      assert(res === b)
+      assert(next === c)","-      assert(req == a);
-      assert(res == b);
-      assert(next == c);
+      assert(req === a)
+      assert(res === b)
+      assert(next === c)
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.json.js,"-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })","-          return '_' == key[0]
+          return key[0] === '_'","-          return '_' == key[0]
+          return key[0] === '_'
-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.jsonp.js,"-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)","-          return '_' == key[0]
+          return key[0] === '_'","-          return '_' == key[0]
+          return key[0] === '_'
-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.redirect.js,"-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);","+var assert = require('assert')
-      .expect('Location', 'http://google.com')
-      .expect(302, '', done)
+      .expect(302)
+      .expect('Location', 'http://google.com')
+      .expect(shouldNotHaveBody())
+      .end(done)
+      .expect(302)
-      .expect(302, '', done)
+      .expect(shouldNotHaveBody())
+      .end(done)
+
+function shouldNotHaveBody () {
+  return function (res) {
+    assert.ok(res.text === '' || res.text === undefined)
+  }
+}","+var assert = require('assert')
-  describe('.redirect(url, status)', function(){
-    it('should set the response status', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.redirect('http://google.com', 303);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Location', 'http://google.com')
-      .expect(303, done)
-    })
-  })
-
-      .expect('Location', 'http://google.com')
-      .expect(302, '', done)
+      .expect(302)
+      .expect('Location', 'http://google.com')
+      .expect(shouldNotHaveBody())
+      .end(done)
+      .expect(302)
-      .expect(302, '', done)
+      .expect(shouldNotHaveBody())
+      .end(done)
+
+function shouldNotHaveBody () {
+  return function (res) {
+    assert.ok(res.text === '' || res.text === undefined)
+  }
+}"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+var assert = require('assert')
-        res.send(201).should.equal(res);
+        res.send(201)
+      .expect(200)
-      .expect(200, 'hello', done);
+      .expect(shouldHaveBody(Buffer.from('hello')))
+      .end(done)
-      .expect('', done);
+      .expect(200)
+      .expect(shouldNotHaveBody())
+      .end(done)
+  })
+
+  it('should be chainable', function (done) {
+    var app = express()
+
+    app.use(function (req, res) {
+      assert.equal(res.send('hey'), res)
+    })
+
+    request(app)
+    .get('/')
+    .expect(200, 'hey', done)
+
+function shouldHaveBody (buf) {
+  return function (res) {
+    var body = !Buffer.isBuffer(res.body)
+      ? Buffer.from(res.text)
+      : res.body
+    assert.ok(body, 'response has body')
+    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+  }
+}
+
+function shouldNotHaveBody () {
+  return function (res) {
+    assert.ok(res.text === '' || res.text === undefined)
+  }
+}","+var assert = require('assert')
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
+      .expect(200)
-      .expect(200, 'hello', done);
+      .expect(shouldHaveBody(Buffer.from('hello')))
+      .end(done)
-      .expect('', done);
+      .expect(200)
+      .expect(shouldNotHaveBody())
+      .end(done)
+  it('should be chainable', function (done) {
+    var app = express()
+
+    app.use(function (req, res) {
+      assert.equal(res.send('hey'), res)
+    })
+
+    request(app)
+    .get('/')
+    .expect(200, 'hey', done)
+  })
+
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
+
+function shouldHaveBody (buf) {
+  return function (res) {
+    var body = !Buffer.isBuffer(res.body)
+      ? Buffer.from(res.text)
+      : res.body
+    assert.ok(body, 'response has body')
+    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+  }
+}
+
+function shouldNotHaveBody () {
+  return function (res) {
+    assert.ok(res.text === '' || res.text === undefined)
+  }
+}"
expressjs_express,302a6152b4f655bf7f49fe32f5b5676483efb159,Merge tag '4.16.4',test/res.sendFile.js,"-  , assert = require('assert');
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty()
-        cb();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })","+var Buffer = require('safe-buffer').Buffer
-      var cb = after(1, done);
-      var app = express();
+      var app = express();
+      var cb = after(2, done)
+      var error = null
-        });
+          setTimeout(function () {
+            cb(error)
+          }, 10)
+        })
-        err.code.should.be.empty()
-        cb();
+        error = err
+        next(err)
-      test.expect(200, cb);
+      test.end()
-        .expect(200, 'tobi', done);
+        .expect(200)
+        .expect(shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
-      .expect(200, 'tobi', done);
+      .expect(200)
+      .expect(shouldHaveBody(Buffer.from('tobi')))
+      .end(done)
-      var cb = after(1, done);
-      var app = express();
+      var app = express();
+      var cb = after(2, done)
+      var error = null
+          setTimeout(function () {
+            cb(error)
+          }, 10)
-        err.code.should.be.empty()
-        cb();
+        error = err
+        next(err)
-      test.expect(200, cb);
+      test.end()
+
+function shouldHaveBody (buf) {
+  return function (res) {
+    var body = !Buffer.isBuffer(res.body)
+      ? Buffer.from(res.text)
+      : res.body
+    assert.ok(body, 'response has body')
+    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+  }
+}","+var assert = require('assert')
+var Buffer = require('safe-buffer').Buffer
-  , assert = require('assert');
-      var cb = after(1, done);
-      var app = express();
+      var app = express();
+      var cb = after(2, done)
+      var error = null
-        });
+          setTimeout(function () {
+            cb(error)
+          }, 10)
+        })
-        err.code.should.be.empty()
-        cb();
+        error = err
+        next(err)
-      test.expect(200, cb);
+      test.end()
-        .expect(200, 'tobi', done);
+        .expect(200)
+        .expect(shouldHaveBody(Buffer.from('tobi')))
+        .end(done)
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            server.close(cb)
-          });
-        });
-        test.abort();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          server.close(cb)
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty()
-        cb();
-      });
-
-      var server = app.listen()
-      var test = request(server).get('/')
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })
+
+function shouldHaveBody (buf) {
+  return function (res) {
+    var body = !Buffer.isBuffer(res.body)
+      ? Buffer.from(res.text)
+      : res.body
+    assert.ok(body, 'response has body')
+    assert.strictEqual(body.toString('hex'), buf.toString('hex'))
+  }
+}"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","-    throw new TypeError('app.use() requires middleware functions');
+    throw new TypeError('app.use() requires a middleware function')
- *    app.get('foo');
+ *    app.set('foo');","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-    throw new TypeError('app.use() requires middleware functions');
-  }
-
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+    throw new TypeError('app.use() requires a middleware function')
+  }
+
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
- *    app.get('foo');
+ *    app.set('foo');
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/express.js,"-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
-
-/**
- * Replace removed middleware with an appropriate error message.
- */
-
-[
-  'json',
-  'urlencoded',
-  'bodyParser',
-  'compress',
-  'cookieSession',
-  'session',
-  'logger',
-  'cookieParser',
-  'favicon',
-  'responseTime',
-  'errorHandler',
-  'timeout',
-  'methodOverride',
-  'vhost',
-  'csrf',
-  'directory',
-  'limit',
-  'multipart',
-  'staticCache',
-].forEach(function (name) {
-  Object.defineProperty(exports, name, {
-    get: function () {
-      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
-    },
-    configurable: true
-  });
-});","+var bodyParser = require('body-parser')
+exports.json = bodyParser.json
+exports.urlencoded = bodyParser.urlencoded
-[
-  'json',
-  'urlencoded',
+;[","+var bodyParser = require('body-parser')
-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
+exports.json = bodyParser.json
-
-/**
- * Replace removed middleware with an appropriate error message.
- */
-
-[
-  'json',
-  'urlencoded',
-  'bodyParser',
-  'compress',
-  'cookieSession',
-  'session',
-  'logger',
-  'cookieParser',
-  'favicon',
-  'responseTime',
-  'errorHandler',
-  'timeout',
-  'methodOverride',
-  'vhost',
-  'csrf',
-  'directory',
-  'limit',
-  'multipart',
-  'staticCache',
-].forEach(function (name) {
-  Object.defineProperty(exports, name, {
-    get: function () {
-      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
-    },
-    configurable: true
-  });
-});
+exports.urlencoded = bodyParser.urlencoded"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","-  proto = this.get('X-Forwarded-Proto') || proto;
-  return proto.split(/\s*,\s*/)[0];
+  var header = this.get('X-Forwarded-Proto') || proto
+  var index = header.indexOf(',')
+
+  return index !== -1
+    ? header.substring(0, index).trim()
+    : header.trim()","-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
-  proto = this.get('X-Forwarded-Proto') || proto;
-  return proto.split(/\s*,\s*/)[0];
+  var header = this.get('X-Forwarded-Proto') || proto
+  var index = header.indexOf(',')
+
+  return index !== -1
+    ? header.substring(0, index).trim()
+    : header.trim()
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/response.js,"-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","+var Buffer = require('safe-buffer').Buffer
- *     res.send(new Buffer('wahoo'));
+ *     res.send(Buffer.from('wahoo'));
-  var len;
+  // determine if ETag should be generated
+  var etagFn = app.get('etag fn')
+  var generateETag = !this.get('ETag') && typeof etagFn === 'function'
+
+  var len
-    if (!Buffer.isBuffer(chunk)) {
-      // convert chunk to Buffer; saves later double conversions
-      chunk = new Buffer(chunk, encoding);
+    if (Buffer.isBuffer(chunk)) {
+      // get length of Buffer
+      len = chunk.length
+    } else if (!generateETag && chunk.length < 1000) {
+      // just calculate length when no ETag + small chunk
+      len = Buffer.byteLength(chunk, encoding)
+    } else {
+      // convert chunk to Buffer and calculate
+      chunk = Buffer.from(chunk, encoding)
-    }
-
-    len = chunk.length;
+      len = chunk.length
+    }
+
-  var generateETag = len !== undefined && app.get('etag fn');
-  if (typeof generateETag === 'function' && !this.get('ETag')) {
-    if ((etag = generateETag(chunk, encoding))) {
+  if (generateETag && len !== undefined) {
+    if ((etag = etagFn(chunk, encoding))) {
+  var escape = app.get('json escape')
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces, escape)
+  var escape = app.get('json escape')
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces, escape)
-    this.charset = 'utf-8';
- * This method uses `res.sendfile()`.
- *
- * @public
- */
-
-res.download = function download(path, filename, callback) {
+ * Optionally providing an `options` object to use with `res.sendFile()`.
+ * This function will set the `Content-Disposition` header, overriding
+ * any `Content-Disposition` header passed as header options in order
+ * to set the attachment and filename.
+ *
+ * This method uses `res.sendFile()`.
+ *
+ * @public
+ */
+
+res.download = function download (path, filename, options, callback) {
-
-  // support function as second arg
+  var opts = options || null
+
+  // support function as second or third arg
+    opts = null
+  } else if (typeof options === 'function') {
+    done = options
+    opts = null
+  // merge user-provided headers
+  if (opts && opts.headers) {
+    var keys = Object.keys(opts.headers)
+    for (var i = 0; i < keys.length; i++) {
+      var key = keys[i]
+      if (key.toLowerCase() !== 'content-disposition') {
+        headers[key] = opts.headers[key]
+      }
+    }
+  }
+
+  // merge user-provided options
+  opts = Object.create(opts)
+  opts.headers = headers
+
-  return this.sendFile(fullPath, { headers: headers }, done);
+  // send file
+  return this.sendFile(fullPath, opts, done)
- * Stringify JSON, like JSON.stringify, but v8 optimized.
+ * Stringify JSON, like JSON.stringify, but v8 optimized, with the
+ * ability to escape characters that can trigger HTML sniffing.
+ *
+ * @param {*} value
+ * @param {function} replaces
+ * @param {number} spaces
+ * @param {boolean} escape
+ * @returns {string}
-function stringify(value, replacer, spaces) {
+function stringify (value, replacer, spaces, escape) {
-  return replacer || spaces
+  var json = replacer || spaces
+
+  if (escape) {
+    json = json.replace(/[<>&]/g, function (c) {
+      switch (c.charCodeAt(0)) {
+        case 0x3c:
+          return '\\u003c'
+        case 0x3e:
+          return '\\u003e'
+        case 0x26:
+          return '\\u0026'
+        default:
+          return c
+      }
+    })
+  }
+
+  return json","+var Buffer = require('safe-buffer').Buffer
-var deprecate = require('depd')('express');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
- *     res.send(new Buffer('wahoo'));
+ *     res.send(Buffer.from('wahoo'));
-  var len;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
-  }
+  // determine if ETag should be generated
+  var etagFn = app.get('etag fn')
+  var generateETag = !this.get('ETag') && typeof etagFn === 'function'
+
+  var len
-    if (!Buffer.isBuffer(chunk)) {
-      // convert chunk to Buffer; saves later double conversions
-      chunk = new Buffer(chunk, encoding);
+    if (Buffer.isBuffer(chunk)) {
+      // get length of Buffer
+      len = chunk.length
+    } else if (!generateETag && chunk.length < 1000) {
+      // just calculate length when no ETag + small chunk
+      len = Buffer.byteLength(chunk, encoding)
+    } else {
+      // convert chunk to Buffer and calculate
+      chunk = Buffer.from(chunk, encoding)
+      len = chunk.length
-    len = chunk.length;
-  var generateETag = len !== undefined && app.get('etag fn');
-  if (typeof generateETag === 'function' && !this.get('ETag')) {
-    if ((etag = generateETag(chunk, encoding))) {
+  if (generateETag && len !== undefined) {
+    if ((etag = etagFn(chunk, encoding))) {
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
+  var escape = app.get('json escape')
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces, escape)
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
+  var escape = app.get('json escape')
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces, escape)
-    this.charset = 'utf-8';
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
- *
- * @public
- */
-
-res.download = function download(path, filename, callback) {
+ * Optionally providing an `options` object to use with `res.sendFile()`.
+ * This function will set the `Content-Disposition` header, overriding
+ * any `Content-Disposition` header passed as header options in order
+ * to set the attachment and filename.
+ *
+ * This method uses `res.sendFile()`.
+ *
+ * @public
+ */
+
+res.download = function download (path, filename, options, callback) {
-
-  // support function as second arg
+  var opts = options || null
+
+  // support function as second or third arg
+    opts = null
+  } else if (typeof options === 'function') {
+    done = options
+    opts = null
+  // merge user-provided headers
+  if (opts && opts.headers) {
+    var keys = Object.keys(opts.headers)
+    for (var i = 0; i < keys.length; i++) {
+      var key = keys[i]
+      if (key.toLowerCase() !== 'content-disposition') {
+        headers[key] = opts.headers[key]
+      }
+    }
+  }
+
+  // merge user-provided options
+  opts = Object.create(opts)
+  opts.headers = headers
+
-  return this.sendFile(fullPath, { headers: headers }, done);
+  // send file
+  return this.sendFile(fullPath, opts, done)
-    if (typeof arguments[0] === 'number') {
-      status = arguments[0];
-      address = arguments[1];
-    } else {
-      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-      status = arguments[1];
-    }
+    status = arguments[0]
+    address = arguments[1]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-
- * Stringify JSON, like JSON.stringify, but v8 optimized.
+ * Stringify JSON, like JSON.stringify, but v8 optimized, with the
+ * ability to escape characters that can trigger HTML sniffing.
+ *
+ * @param {*} value
+ * @param {function} replaces
+ * @param {number} spaces
+ * @param {boolean} escape
+ * @returns {string}
-function stringify(value, replacer, spaces) {
+function stringify (value, replacer, spaces, escape) {
-  return replacer || spaces
+  var json = replacer || spaces
+
+  if (escape) {
+    json = json.replace(/[<>&]/g, function (c) {
+      switch (c.charCodeAt(0)) {
+        case 0x3c:
+          return '\\u003c'
+        case 0x3e:
+          return '\\u003e'
+        case 0x26:
+          return '\\u0026'
+        default:
+          return c
+      }
+    })
+  }
+
+  return json"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/utils.js,"-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","+var Buffer = require('safe-buffer').Buffer
-exports.etag = function (body, encoding) {
-  var buf = !Buffer.isBuffer(body)
-    ? new Buffer(body, encoding)
-    : body;
-
-  return etag(buf, {weak: false});
-};
+exports.etag = createETagGenerator({ weak: false })
-exports.wetag = function wetag(body, encoding){
-  var buf = !Buffer.isBuffer(body)
-    ? new Buffer(body, encoding)
-    : body;
-
-  return etag(buf, {weak: true});
-};
+exports.wetag = createETagGenerator({ weak: true })
+ * Create an ETag generator function, generating ETags with
+ * the given options.
+ *
+ * @param {object} options
+ * @return {function}
+ * @private
+ */
+
+function createETagGenerator (options) {
+  return function generateETag (body, encoding) {
+    var buf = !Buffer.isBuffer(body)
+      ? Buffer.from(body, encoding)
+      : body
+
+    return etag(buf, options)
+  }
+}
+
+/**","-var contentDisposition = require('content-disposition');
+var Buffer = require('safe-buffer').Buffer
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-exports.etag = function (body, encoding) {
-  var buf = !Buffer.isBuffer(body)
-    ? new Buffer(body, encoding)
-    : body;
-
-  return etag(buf, {weak: false});
-};
+exports.etag = createETagGenerator({ weak: false })
-exports.wetag = function wetag(body, encoding){
-  var buf = !Buffer.isBuffer(body)
-    ? new Buffer(body, encoding)
-    : body;
-
-  return etag(buf, {weak: true});
-};
-
-/**
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
+exports.wetag = createETagGenerator({ weak: true })
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
+
+/**
+ * Create an ETag generator function, generating ETags with
+ * the given options.
+ *
+ * @param {object} options
+ * @return {function}
+ * @private
+ */
+
+function createETagGenerator (options) {
+  return function generateETag (body, encoding) {
+    var buf = !Buffer.isBuffer(body)
+      ? Buffer.from(body, encoding)
+      : body
+
+    return etag(buf, options)
+  }
+}
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',lib/view.js,"+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;","-    opts.engines[this.ext] = require(mod).__express
+
+    // default engine export
+    var fn = require(mod).__express
+
+    if (typeof fn !== 'function') {
+      throw new Error('Module ""' + mod + '"" does not provide a view engine.')
+    }
+
+    opts.engines[this.ext] = fn","-    opts.engines[this.ext] = require(mod).__express
+
+    // default engine export
+    var fn = require(mod).__express
+
+    if (typeof fn !== 'function') {
+      throw new Error('Module ""' + mod + '"" does not provide a view engine.')
+    }
+
+    opts.engines[this.ext] = fn
+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',package.json,"-  ""version"": ""4.15.5"",
+  ""version"": ""5.0.0-alpha.6"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""path-to-regexp"": ""0.1.7"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.3.1"",","-  ""version"": ""4.15.5"",
+  ""version"": ""4.16.2"",
-    ""accepts"": ""~1.3.3"",
+    ""accepts"": ""~1.3.4"",
+    ""body-parser"": ""1.18.2"",
-    ""content-type"": ""~1.0.2"",
+    ""content-type"": ""~1.0.4"",
-    ""etag"": ""~1.8.0"",
-    ""finalhandler"": ""~1.0.6"",
+    ""etag"": ""~1.8.1"",
+    ""finalhandler"": ""1.1.0"",
-    ""parseurl"": ""~1.3.1"",
+    ""parseurl"": ""~1.3.2"",
-    ""proxy-addr"": ""~1.1.5"",
-    ""qs"": ""6.5.0"",
+    ""proxy-addr"": ""~2.0.2"",
+    ""qs"": ""6.5.1"",
-    ""send"": ""0.15.6"",
-    ""serve-static"": ""1.12.6"",
-    ""setprototypeof"": ""1.0.3"",
+    ""safe-buffer"": ""5.1.1"",
+    ""send"": ""0.16.1"",
+    ""serve-static"": ""1.13.1"",
+    ""setprototypeof"": ""1.1.0"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.1.1""
+    ""utils-merge"": ""1.0.1"",
+    ""vary"": ""~1.1.2""
-    ""body-parser"": ""1.18.1"",
-    ""cookie-session"": ""1.3.1"",
+    ""cookie-session"": ""1.3.2"",
-    ""express-session"": ""1.15.5"",
+    ""express-session"": ""1.15.6"",
-    ""method-override"": ""2.3.9"",
+    ""method-override"": ""2.3.10"",
-    ""morgan"": ""1.8.2"",
+    ""morgan"": ""1.9.0"",
-    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks --no-exit test/ test/acceptance/""","-  ""version"": ""4.15.5"",
+  ""version"": ""5.0.0-alpha.6"",
-    ""accepts"": ""~1.3.3"",
-    ""array-flatten"": ""1.1.1"",
+    ""accepts"": ""~1.3.4"",
+    ""array-flatten"": ""2.1.1"",
+    ""body-parser"": ""1.18.2"",
-    ""content-type"": ""~1.0.2"",
+    ""content-type"": ""~1.0.4"",
-    ""etag"": ""~1.8.0"",
-    ""finalhandler"": ""~1.0.6"",
+    ""etag"": ""~1.8.1"",
+    ""finalhandler"": ""1.1.0"",
-    ""parseurl"": ""~1.3.1"",
-    ""path-to-regexp"": ""0.1.7"",
-    ""proxy-addr"": ""~1.1.5"",
-    ""qs"": ""6.5.0"",
+    ""parseurl"": ""~1.3.2"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""proxy-addr"": ""~2.0.2"",
+    ""qs"": ""6.5.1"",
-    ""send"": ""0.15.6"",
-    ""serve-static"": ""1.12.6"",
-    ""setprototypeof"": ""1.0.3"",
+    ""router"": ""~1.3.1"",
+    ""safe-buffer"": ""5.1.1"",
+    ""send"": ""0.16.1"",
+    ""serve-static"": ""1.13.1"",
+    ""setprototypeof"": ""1.1.0"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.1.1""
+    ""utils-merge"": ""1.0.1"",
+    ""vary"": ""~1.1.2""
-    ""body-parser"": ""1.18.1"",
-    ""cookie-session"": ""1.3.1"",
+    ""cookie-session"": ""1.3.2"",
-    ""express-session"": ""1.15.5"",
+    ""express-session"": ""1.15.6"",
-    ""method-override"": ""2.3.9"",
+    ""method-override"": ""2.3.10"",
-    ""morgan"": ""1.8.2"",
+    ""morgan"": ""1.9.0"",
-    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
-    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks --no-exit test/ test/acceptance/"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks --no-exit test/ test/acceptance/"""
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      router.use.bind(router).should.throw(/requires middleware function/)
+      assert.throws(router.use.bind(router), /argument handler is required/)
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+      assert.throws(router.use.bind(router, '/', 'hello'), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', 5), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', null), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', new Date()), /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","-    it('should require arguments', function(){
-      var router = new Router();
-      router.use.bind(router).should.throw(/requires middleware function/)
-    })
-
-    it('should not accept non-functions', function(){
-      var router = new Router();
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /requires a middleware function/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /requires a middleware function but got a string/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /requires a middleware function but got a number/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /requires a middleware function but got a Null/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /requires a middleware function but got a Date/)","-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-    it('should require arguments', function(){
-      var router = new Router();
-      router.use.bind(router).should.throw(/requires middleware function/)
-    })
-
-    it('should not accept non-functions', function(){
-      var router = new Router();
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+    it('should require middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/') }, /argument handler is required/)
+    })
+
+    it('should reject string as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var router = new Router()
+      assert.throws(function () { router.use('/', new Date()) }, /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/app.use.js,"+var assert = require('assert');
-      app.use.bind(app, '/').should.throw(/requires middleware function/);
+      assert.throws(app.use.bind(app, '/'), /requires middleware function/);
-      app.use.bind(app, '/', 'hi').should.throw(/requires middleware function.*string/);
-      app.use.bind(app, '/', 5).should.throw(/requires middleware function.*number/);
-      app.use.bind(app, '/', null).should.throw(/requires middleware function.*Null/);
-      app.use.bind(app, '/', new Date()).should.throw(/requires middleware function.*Date/);
+      assert.throws(app.use.bind(app, '/', 'hi'), /argument handler must be a function/);
+      assert.throws(app.use.bind(app, '/', 5), /argument handler must be a function/);
+      assert.throws(app.use.bind(app, '/', null), /argument handler must be a function/);
+      assert.throws(app.use.bind(app, '/', new Date()), /argument handler must be a function/);","+var assert = require('assert')
-    it('should reject missing functions', function () {
-      var app = express();
-      app.use.bind(app, '/').should.throw(/requires middleware function/);
-    })
-
-    it('should reject non-functions as middleware', function () {
-      var app = express();
-      app.use.bind(app, '/', 'hi').should.throw(/requires middleware function.*string/);
-      app.use.bind(app, '/', 5).should.throw(/requires middleware function.*number/);
-      app.use.bind(app, '/', null).should.throw(/requires middleware function.*Null/);
-      app.use.bind(app, '/', new Date()).should.throw(/requires middleware function.*Date/);
+    it('should require middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/') }, /requires a middleware function/)
+    })
+
+    it('should reject string as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', 'foo') }, /requires a middleware function but got a string/)
+    })
+
+    it('should reject number as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', 42) }, /requires a middleware function but got a number/)
+    })
+
+    it('should reject null as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', null) }, /requires a middleware function but got a Null/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', new Date()) }, /requires a middleware function but got a Date/)","+var assert = require('assert')
-    it('should reject missing functions', function () {
-      var app = express();
-      app.use.bind(app, '/').should.throw(/requires middleware function/);
-    })
-
-    it('should reject non-functions as middleware', function () {
-      var app = express();
-      app.use.bind(app, '/', 'hi').should.throw(/requires middleware function.*string/);
-      app.use.bind(app, '/', 5).should.throw(/requires middleware function.*number/);
-      app.use.bind(app, '/', null).should.throw(/requires middleware function.*Null/);
-      app.use.bind(app, '/', new Date()).should.throw(/requires middleware function.*Date/);
+    it('should require middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/') }, 'TypeError: app.use() requires a middleware function')
+    })
+
+    it('should reject string as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', 'foo') }, /argument handler must be a function/)
+    })
+
+    it('should reject number as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', 42) }, /argument handler must be a function/)
+    })
+
+    it('should reject null as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', null) }, /argument handler must be a function/)
+    })
+
+    it('should reject Date as middleware', function () {
+      var app = express()
+      assert.throws(function () { app.use('/', new Date()) }, /argument handler must be a function/)"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/res.format.js,"-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))","+var after = require('after')
-  it('should set the correct  charset for the Content-Type', function() {
+  it('should set the correct charset for the Content-Type', function (done) {
+    var cb = after(3, done)
+
-    .expect('Content-Type', 'text/html; charset=utf-8');
+    .expect('Content-Type', 'text/html; charset=utf-8', cb)
-    .expect('Content-Type', 'text/plain; charset=utf-8');
+    .expect('Content-Type', 'text/plain; charset=utf-8', cb)
-    .expect('Content-Type', 'application/json');
+    .expect('Content-Type', 'application/json; charset=utf-8', cb)","+var after = require('after')
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-  res.send(err.status, 'Supports: ' + err.types.join(', '));
+  res.status(err.status)
+  res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-        res.send(err.status, 'Supports: ' + err.types.join(', '));
+        res.status(err.status)
+        res.send('Supports: ' + err.types.join(', '))
-  it('should set the correct  charset for the Content-Type', function() {
+  it('should set the correct charset for the Content-Type', function (done) {
+    var cb = after(3, done)
+
-    .expect('Content-Type', 'text/html; charset=utf-8');
+    .expect('Content-Type', 'text/html; charset=utf-8', cb)
-    .expect('Content-Type', 'text/plain; charset=utf-8');
+    .expect('Content-Type', 'text/plain; charset=utf-8', cb)
-    .expect('Content-Type', 'application/json');
+    .expect('Content-Type', 'application/json; charset=utf-8', cb)"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/res.json.js,"-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })","+      })
+    })
+
+    describe('""json escape"" setting', function () {
+      it('should be undefined by default', function () {
+        var app = express()
+        assert.strictEqual(app.get('json escape'), undefined)
+      })
+
+      it('should unicode escape HTML-sniffing characters', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.json({ '&': '<script>' })
+        })
+
+        request(app)
+        .get('/')
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""\\u0026"":""\\u003cscript\\u003e""}', done)","+    describe('""json escape"" setting', function () {
+      it('should be undefined by default', function () {
+        var app = express()
+        assert.strictEqual(app.get('json escape'), undefined)
+      })
+
+      it('should unicode escape HTML-sniffing characters', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.json({ '&': '<script>' })
+        })
+
+        request(app)
+        .get('/')
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""\\u0026"":""\\u003cscript\\u003e""}', done)
+      })
+    })
+
-
-  describe('.json(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.json(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.json(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/res.jsonp.js,"-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)","+      })
+    })
+
+    describe('""json escape"" setting', function () {
+      it('should be undefined by default', function () {
+        var app = express()
+        assert.strictEqual(app.get('json escape'), undefined)
+      })
+
+      it('should unicode escape HTML-sniffing characters', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.jsonp({ '&': '\u2028<script>\u2029' })
+        })
+
+        request(app)
+        .get('/?callback=foo')
+        .expect('Content-Type', 'text/javascript; charset=utf-8')
+        .expect(200, /foo\({""\\u0026"":""\\u2028\\u003cscript\\u003e\\u2029""}\)/, done)","+    describe('""json escape"" setting', function () {
+      it('should be undefined by default', function () {
+        var app = express()
+        assert.strictEqual(app.get('json escape'), undefined)
+      })
+
+      it('should unicode escape HTML-sniffing characters', function (done) {
+        var app = express()
+
+        app.enable('json escape')
+
+        app.use(function (req, res) {
+          res.jsonp({ '&': '\u2028<script>\u2029' })
+        })
+
+        request(app)
+        .get('/?callback=foo')
+        .expect('Content-Type', 'text/javascript; charset=utf-8')
+        .expect(200, /foo\({""\\u0026"":""\\u2028\\u003cscript\\u003e\\u2029""}\)/, done)
+      })
+    })
+
-    })
-  })
-
-  describe('.jsonp(status, object)', function(){
-    it('should respond with json and set the .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(201, { id: 1 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+var Buffer = require('safe-buffer').Buffer
-        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(new Buffer('hi'));
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(Buffer.from('hi'))
-        res.send(new Buffer('hello'));
+        res.send(Buffer.from('hello'))
-        var str = Array(1000).join('-');
-        res.send(new Buffer(str));
+        res.send(Buffer.alloc(999, '-'))
-        res.set('Content-Type', 'text/plain').send(new Buffer('hey'));
+        res.set('Content-Type', 'text/plain').send(Buffer.from('hey'))
+    })
+
+    it('should not override ETag', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.type('text/plain').set('ETag', '""foo""').send(Buffer.from('hey'))
+      })
+
+      request(app)
+      .get('/')
+      .expect('ETag', '""foo""')
+      .expect(200, 'hey', done)
-            ? new Buffer(body, encoding)
+            ? Buffer.from(body, encoding)","+var Buffer = require('safe-buffer').Buffer
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(code, body)', function(){
-    it('should set .statusCode and body', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201, 'Created :)');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created :)')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
-  describe('.send(code, number)', function(){
-    it('should send number as json', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(200, 0.123);
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
-      .expect(200, '0.123', done);
+      .expect(200, '1000', done)
-        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(new Buffer('hi'));
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(Buffer.from('hi'))
-        res.send(new Buffer('hello'));
+        res.send(Buffer.from('hello'))
-        var str = Array(1000).join('-');
-        res.send(new Buffer(str));
+        res.send(Buffer.alloc(999, '-'))
-        res.set('Content-Type', 'text/plain').send(new Buffer('hey'));
+        res.set('Content-Type', 'text/plain').send(Buffer.from('hey'))
+    })
+
+    it('should not override ETag', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.type('text/plain').set('ETag', '""foo""').send(Buffer.from('hey'))
+      })
+
+      request(app)
+      .get('/')
+      .expect('ETag', '""foo""')
+      .expect(200, 'hey', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
-            ? new Buffer(body, encoding)
+            ? Buffer.from(body, encoding)"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/res.sendFile.js,"-  , assert = require('assert');
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty()
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })","-          cb();
+          server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
+    describe('with ""immutable"" option', function () {
+      it('should add immutable cache-control directive', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          immutable: true,
+          maxAge: '4h'
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400, immutable')
+        .expect(200, done)
+      })
+    })
+
+    describe('with ""maxAge"" option', function () {
+      it('should set cache-control max-age from number', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          maxAge: 14400000
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(200, done)
+      })
+
+      it('should set cache-control max-age from string', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          maxAge: '4h'
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(200, done)
+      })
+    })
+
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-          cb();
+          server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')","-  , assert = require('assert');
-          cb();
+          server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
+    describe('with ""immutable"" option', function () {
+      it('should add immutable cache-control directive', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          immutable: true,
+          maxAge: '4h'
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400, immutable')
+        .expect(200, done)
+      })
+    })
+
+    describe('with ""maxAge"" option', function () {
+      it('should set cache-control max-age from number', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          maxAge: 14400000
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(200, done)
+      })
+
+      it('should set cache-control max-age from string', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), {
+          maxAge: '4h'
+        })
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=14400')
+        .expect(200, done)
+      })
+    })
+
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-            cb();
+            server.close(cb)
-      var test = request(app).get('/');
+      var server = app.listen()
+      var test = request(server).get('/')
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok()
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty()
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })"
expressjs_express,62e12fe7105b552e70f32a9b288dcaf695f04737,Merge tag '4.16.2',test/utils.js,"-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})","+var Buffer = require('safe-buffer').Buffer
-    var buf = new Buffer('express!')
-    utils.etag(buf)
+    utils.etag(Buffer.from('express!'))
-    var buf = new Buffer('express!')
-    utils.wetag(buf)
+    utils.wetag(Buffer.from('express!'))","+var Buffer = require('safe-buffer').Buffer
-    var buf = new Buffer('express!')
-    utils.etag(buf)
+    utils.etag(Buffer.from('express!'))
-    var buf = new Buffer('express!')
-    utils.wetag(buf)
+    utils.wetag(Buffer.from('express!'))
-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})"
expressjs_express,19c8d64855d83e24164bc83e40ebacc24179f32a,Merge tag '4.15.5',package.json,"-  ""version"": ""4.15.4"",
+  ""version"": ""5.0.0-alpha.5"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.3.1"",","-  ""version"": ""4.15.4"",
+  ""version"": ""4.15.5"",
-    ""debug"": ""2.6.8"",
+    ""debug"": ""2.6.9"",
-    ""finalhandler"": ""~1.0.4"",
-    ""fresh"": ""0.5.0"",
+    ""finalhandler"": ""~1.0.6"",
+    ""fresh"": ""0.5.2"",
-    ""send"": ""0.15.4"",
-    ""serve-static"": ""1.12.4"",
+    ""send"": ""0.15.6"",
+    ""serve-static"": ""1.12.6"",
-    ""body-parser"": ""1.17.2"",
+    ""body-parser"": ""1.18.1"",
-    ""cookie-session"": ""1.3.0"",
+    ""cookie-session"": ""1.3.1"",
-    ""mocha"": ""3.5.0"",
+    ""mocha"": ""3.5.3"",
-    ""should"": ""11.2.1"",
+    ""should"": ""13.1.0"",","-  ""version"": ""4.15.4"",
+  ""version"": ""5.0.0-alpha.5"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""2.6.8"",
+    ""debug"": ""2.6.9"",
-    ""finalhandler"": ""~1.0.4"",
-    ""fresh"": ""0.5.0"",
+    ""finalhandler"": ""~1.0.6"",
+    ""fresh"": ""0.5.2"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""send"": ""0.15.4"",
-    ""serve-static"": ""1.12.4"",
+    ""router"": ""~1.3.1"",
+    ""send"": ""0.15.6"",
+    ""serve-static"": ""1.12.6"",
-    ""body-parser"": ""1.17.2"",
+    ""body-parser"": ""1.18.1"",
-    ""cookie-session"": ""1.3.0"",
+    ""cookie-session"": ""1.3.1"",
-    ""mocha"": ""3.5.0"",
+    ""mocha"": ""3.5.3"",
-    ""should"": ""11.2.1"",
+    ""should"": ""13.1.0"","
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',examples/search/index.js,"-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);","-// first:
+
+// install redis first:
+// https://redis.io/
+
+// then:","-// first:
+
+// install redis first:
+// https://redis.io/
+
+// then:
-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototyeOf(req, this.request)
+  setPrototyeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","-var setPrototyeOf = require('setprototypeof')
+var setPrototypeOf = require('setprototypeof')
-    setPrototyeOf(this.request, parent.request)
-    setPrototyeOf(this.response, parent.response)
-    setPrototyeOf(this.engines, parent.engines)
-    setPrototyeOf(this.settings, parent.settings)
+    setPrototypeOf(this.request, parent.request)
+    setPrototypeOf(this.response, parent.response)
+    setPrototypeOf(this.engines, parent.engines)
+    setPrototypeOf(this.settings, parent.settings)
-        setPrototyeOf(req, orig.request)
-        setPrototyeOf(res, orig.response)
+        setPrototypeOf(req, orig.request)
+        setPrototypeOf(res, orig.response)","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
-var setPrototyeOf = require('setprototypeof')
+var Router = require('router');
+var setPrototypeOf = require('setprototypeof')
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-    setPrototyeOf(this.request, parent.request)
-    setPrototyeOf(this.response, parent.response)
-    setPrototyeOf(this.engines, parent.engines)
-    setPrototyeOf(this.settings, parent.settings)
+    setPrototypeOf(this.request, parent.request)
+    setPrototypeOf(this.response, parent.response)
+    setPrototypeOf(this.engines, parent.engines)
+    setPrototypeOf(this.settings, parent.settings)
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototypeOf(req, this.request)
+  setPrototypeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-        setPrototyeOf(req, orig.request)
-        setPrototyeOf(res, orig.response)
+        setPrototypeOf(req, orig.request)
+        setPrototypeOf(res, orig.response)
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","-    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
-      var charset = mime.charsets.lookup(value.split(';')[0]);
-      if (charset) value += '; charset=' + charset.toLowerCase();
+    if (field.toLowerCase() === 'content-type') {
+      if (Array.isArray(value)) {
+        throw new TypeError('Content-Type cannot be set to an Array');
+      }
+      if (!charsetRegExp.test(value)) {
+        var charset = mime.charsets.lookup(value.split(';')[0]);
+        if (charset) value += '; charset=' + charset.toLowerCase();
+      }
- * @param {Options} options
+ * @param {Object} [options]","-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statuses[chunk]
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
-      var charset = mime.charsets.lookup(value.split(';')[0]);
-      if (charset) value += '; charset=' + charset.toLowerCase();
+    if (field.toLowerCase() === 'content-type') {
+      if (Array.isArray(value)) {
+        throw new TypeError('Content-Type cannot be set to an Array');
+      }
+      if (!charsetRegExp.test(value)) {
+        var charset = mime.charsets.lookup(value.split(';')[0]);
+        if (charset) value += '; charset=' + charset.toLowerCase();
+      }
- * @param {Options} options
+ * @param {Object} [options]
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',lib/utils.js,"-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
+var etag = require('etag');
-var mime = require('send').mime;
-var basename = require('path').basename;
-var etag = require('etag');
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}",-var basename = require('path').basename;,"-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
-var flatten = require('array-flatten');
-var mime = require('send').mime;
-var basename = require('path').basename;
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' === path[0]) return true;
-  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
-  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',lib/view.js,"+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;",-var utils = require('./utils');,"-var utils = require('./utils');
+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',package.json,"-  ""version"": ""4.15.2"",
+  ""version"": ""5.0.0-alpha.5"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.3.0"",","-  ""version"": ""4.15.2"",
+  ""version"": ""4.15.4"",
-    ""debug"": ""2.6.1"",
-    ""depd"": ""~1.1.0"",
+    ""debug"": ""2.6.8"",
+    ""depd"": ""~1.1.1"",
-    ""finalhandler"": ""~1.0.0"",
+    ""finalhandler"": ""~1.0.4"",
-    ""proxy-addr"": ""~1.1.3"",
-    ""qs"": ""6.4.0"",
+    ""proxy-addr"": ""~1.1.5"",
+    ""qs"": ""6.5.0"",
-    ""send"": ""0.15.1"",
-    ""serve-static"": ""1.12.1"",
+    ""send"": ""0.15.4"",
+    ""serve-static"": ""1.12.4"",
-    ""type-is"": ""~1.6.14"",
+    ""type-is"": ""~1.6.15"",
-    ""vary"": ""~1.1.0""
+    ""vary"": ""~1.1.1""
-    ""body-parser"": ""1.17.1"",
+    ""body-parser"": ""1.17.2"",
-    ""ejs"": ""2.5.6"",
-    ""express-session"": ""1.15.1"",
+    ""cookie-session"": ""1.3.0"",
+    ""ejs"": ""2.5.7"",
+    ""eslint"": ""2.13.1"",
+    ""express-session"": ""1.15.5"",
+    ""hbs"": ""4.0.1"",
-    ""method-override"": ""2.3.7"",
-    ""mocha"": ""3.2.0"",
-    ""morgan"": ""1.8.1"",
+    ""method-override"": ""2.3.9"",
+    ""mocha"": ""3.5.0"",
+    ""morgan"": ""1.8.2"",
-    ""should"": ""11.2.0"",
+    ""should"": ""11.2.1"",
-    ""cookie-session"": ""~1.2.0"",
-    ""jade"": ""~1.11.0"",
+    ""lint"": ""eslint ."",","-  ""version"": ""4.15.2"",
+  ""version"": ""5.0.0-alpha.5"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""2.6.1"",
-    ""depd"": ""~1.1.0"",
+    ""debug"": ""2.6.8"",
+    ""depd"": ""~1.1.1"",
-    ""finalhandler"": ""~1.0.0"",
+    ""finalhandler"": ""~1.0.4"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""proxy-addr"": ""~1.1.3"",
-    ""qs"": ""6.4.0"",
+    ""proxy-addr"": ""~1.1.5"",
+    ""qs"": ""6.5.0"",
-    ""send"": ""0.15.1"",
-    ""serve-static"": ""1.12.1"",
+    ""router"": ""~1.3.1"",
+    ""send"": ""0.15.4"",
+    ""serve-static"": ""1.12.4"",
-    ""type-is"": ""~1.6.14"",
+    ""type-is"": ""~1.6.15"",
-    ""vary"": ""~1.1.0""
+    ""vary"": ""~1.1.1""
-    ""body-parser"": ""1.17.1"",
+    ""body-parser"": ""1.17.2"",
-    ""ejs"": ""2.5.6"",
-    ""express-session"": ""1.15.1"",
+    ""cookie-session"": ""1.3.0"",
+    ""ejs"": ""2.5.7"",
+    ""eslint"": ""2.13.1"",
+    ""express-session"": ""1.15.5"",
+    ""hbs"": ""4.0.1"",
-    ""method-override"": ""2.3.7"",
-    ""mocha"": ""3.2.0"",
-    ""morgan"": ""1.8.1"",
+    ""method-override"": ""2.3.9"",
+    ""mocha"": ""3.5.0"",
+    ""morgan"": ""1.8.2"",
-    ""should"": ""11.2.0"",
+    ""should"": ""11.2.1"",
-    ""cookie-session"": ""~1.2.0"",
-    ""jade"": ""~1.11.0"",
+    ""lint"": ""eslint ."","
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      router.use.bind(router).should.throw(/requires middleware function/)
+      assert.throws(router.use.bind(router), /argument handler is required/)
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+      assert.throws(router.use.bind(router, '/', 'hello'), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', 5), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', null), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', new Date()), /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","-      false.should.be.true;
+      false.should.be.true()","-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-      false.should.be.true;
+      false.should.be.true()
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      router.use.bind(router).should.throw(/requires middleware function/)
+      assert.throws(router.use.bind(router), /argument handler is required/)
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+      assert.throws(router.use.bind(router, '/', 'hello'), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', 5), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', null), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', new Date()), /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/app.js,"-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }
-  })
-})
-","-    app.enabled('view cache').should.be.false;
+    app.enabled('view cache').should.be.false()
-    app.enabled('view cache').should.be.true;
+    app.enabled('view cache').should.be.true()","-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }
-  })
-})
-
-    app.enabled('view cache').should.be.false;
+    app.enabled('view cache').should.be.false()
-    app.enabled('view cache').should.be.true;
+    app.enabled('view cache').should.be.true()"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/app.listen.js,"-    app.del('/tobi', function(req, res){
-      res.end('deleted tobi!');
+    app.get('/tobi', function(req, res){
+      res.end('got tobi!');","-  , request = require('supertest');","-  , request = require('supertest');
-    app.del('/tobi', function(req, res){
-      res.end('deleted tobi!');
+    app.get('/tobi', function(req, res){
+      res.end('got tobi!');"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/app.param.js,"-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) == '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-","-        id.should.be.a.Number;
+        id.should.be.a.Number()
-        id.should.be.a.Number;
+        id.should.be.a.Number()
-        id.should.be.a.Number;
+        id.should.be.a.Number()","-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) == '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .expect(200, 'tj', function (err) {
-        if (err) return done(err)
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-
-        id.should.be.a.Number;
+        id.should.be.a.Number()
-        id.should.be.a.Number;
+        id.should.be.a.Number()
-        id.should.be.a.Number;
+        id.should.be.a.Number()"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);",-        var calls = [];,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        var calls = [];
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/app.routes.error.js,"-        res.send(204);
+        res.sendStatus(204);","-        a.should.be.false;
-        b.should.be.true;
-        c.should.be.true;
-        d.should.be.false;
+        a.should.be.false()
+        b.should.be.true()
+        c.should.be.true()
+        d.should.be.false()","-        a.should.be.false;
-        b.should.be.true;
-        c.should.be.true;
-        d.should.be.false;
-        res.send(204);
+        a.should.be.false()
+        b.should.be.true()
+        c.should.be.true()
+        d.should.be.false()
+        res.sendStatus(204);"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/exports.js,"-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })","-    express.Router.should.be.a.Function;
+    express.Router.should.be.a.Function()
-    express.application.set.should.be.a.Function;
+    express.application.set.should.be.a.Function()
-    express.request.accepts.should.be.a.Function;
+    express.request.accepts.should.be.a.Function()
-    express.response.send.should.be.a.Function;
+    express.response.send.should.be.a.Function()","-var should = require('should');
-    express.Router.should.be.a.Function;
+    express.Router.should.be.a.Function()
-    express.application.set.should.be.a.Function;
+    express.application.set.should.be.a.Function()
-    express.request.accepts.should.be.a.Function;
+    express.request.accepts.should.be.a.Function()
-    express.response.send.should.be.a.Function;
+    express.response.send.should.be.a.Function()
-
-  it('should throw on old middlewares', function(){
-    var error;
-    try { express.bodyParser; } catch (e) { error = e; }
-    should(error).have.property('message');
-    error.message.should.containEql('middleware');
-    error.message.should.containEql('bodyParser');
-  })"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/req.host.js,"-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);","-  , assert = require('assert');","-  , assert = require('assert');
-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');",-var assert = require('assert');,"-var assert = require('assert');
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })","-        err.code.should.be.empty;
+        err.code.should.be.empty()
-            should(err).be.ok;
+            should(err).be.ok()
-            should(err).be.ok;
+            should(err).be.ok()
-          should(err).be.ok;
+          should(err).be.ok()
-            should(err).be.ok;
+            should(err).be.ok()
-            should(err).be.ok;
+            should(err).be.ok()
-        , calls = 0;
-          ++calls;
-        , calls = 0;
-        err.code.should.be.empty;
+        err.code.should.be.empty()
-            , calls = 0;","-  , assert = require('assert');
-        err.code.should.be.empty;
+        err.code.should.be.empty()
-            should(err).be.ok;
+            should(err).be.ok()
-            should(err).be.ok;
+            should(err).be.ok()
-          should(err).be.ok;
+          should(err).be.ok()
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-        'x-success': 'sent',
-        'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(path.join(__dirname, '/fixtures/user.html'))
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(path.join(__dirname, '/fixtures/name.txt'))
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-})
-
-describe('.sendfile(path, options)', function () {
-  it('should pass options to send module', function (done) {
-    var app = express()
-
-    app.use(function (req, res) {
-      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-    })
-
-    request(app)
-      .get('/')
-      .expect(200, 'to', done)
-  })"
expressjs_express,c319fe260ade6c05321948960cb9185fdbbf2487,Merge tag '4.15.4',test/res.vary.js,"-    it('should not set Vary', function (done) {
+    it('should throw error', function (done) {
-      .expect(utils.shouldNotHaveHeader('Vary'))
-      .expect(200, done);
+      .expect(500, /field.*required/, done)",-var assert = require('assert');,"-var assert = require('assert');
-    it('should not set Vary', function (done) {
+    it('should throw error', function (done) {
-      .expect(utils.shouldNotHaveHeader('Vary'))
-      .expect(200, done);
+      .expect(500, /field.*required/, done)"
expressjs_express,e5dbb0cb4e3a1a8cb7278e889d09156ec34d13e4,Merge tag '4.15.2',examples/search/index.js,"-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);","+var path = require('path');
-app.set('view engine', 'jade');
-app.set('views', __dirname);
+app.use(express.static(path.join(__dirname, 'public')));
-
-/**
- * GET the search page.
- */
-
-app.get('/', function(req, res){
-  res.render('search');
-});
-  res.sendFile(__dirname + '/client.js');
+  res.sendFile(path.join(__dirname, 'client.js'));","+var path = require('path');
-app.set('view engine', 'jade');
-app.set('views', __dirname);
+app.use(express.static(path.join(__dirname, 'public')));
- * GET the search page.
- */
-
-app.get('/', function(req, res){
-  res.render('search');
-});
-
-/**
-app.get('/search/:query?', function(req, res){
+app.get('/search/:query?', function(req, res, next){
-    if (err) return res.send(500);
+    if (err) return next(err);
-  res.sendFile(__dirname + '/client.js');
+  res.sendFile(path.join(__dirname, 'client.js'));"
expressjs_express,e5dbb0cb4e3a1a8cb7278e889d09156ec34d13e4,Merge tag '4.15.2',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototyeOf(req, this.request)
+  setPrototyeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","- * a ""foo.jade"" file Express will invoke the following internally:
- *
- *     app.engine('jade', require('jade').__express);
+ * a ""foo.ejs"" file Express will invoke the following internally:
+ *
+ *     app.engine('ejs', require('ejs').__express);","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototyeOf(req, this.request)
+  setPrototyeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
- * a ""foo.jade"" file Express will invoke the following internally:
- *
- *     app.engine('jade', require('jade').__express);
+ * a ""foo.ejs"" file Express will invoke the following internally:
+ *
+ *     app.engine('ejs', require('ejs').__express);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,e5dbb0cb4e3a1a8cb7278e889d09156ec34d13e4,Merge tag '4.15.2',package.json,"-  ""version"": ""4.15.0"",
+  ""version"": ""5.0.0-alpha.4"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.3.0"",","-  ""version"": ""4.15.0"",
+  ""version"": ""4.15.2"",
-    ""qs"": ""6.3.1"",
+    ""qs"": ""6.4.0"",
-    ""send"": ""0.15.0"",
-    ""serve-static"": ""1.12.0"",
+    ""send"": ""0.15.1"",
+    ""serve-static"": ""1.12.1"",
-    ""body-parser"": ""1.17.0"",
+    ""body-parser"": ""1.17.1"",","-  ""version"": ""4.15.0"",
+  ""version"": ""5.0.0-alpha.4"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.3.1"",
+    ""qs"": ""6.4.0"",
-    ""send"": ""0.15.0"",
-    ""serve-static"": ""1.12.0"",
+    ""router"": ""~1.3.0"",
+    ""send"": ""0.15.1"",
+    ""serve-static"": ""1.12.1"",
-    ""body-parser"": ""1.17.0"",
+    ""body-parser"": ""1.17.1"","
expressjs_express,e5dbb0cb4e3a1a8cb7278e889d09156ec34d13e4,Merge tag '4.15.2',test/app.param.js,"-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) == '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .end(function(err, res){
-        res.text.should.equal('tj');
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-","-      .end(function(err, res){
-        res.text.should.equal('tj');
+      .expect(200, 'tj', function (err) {
+        if (err) return done(err)
-      .end(function(err, res){
-        res.text.should.equal('123');
-
+      .expect(200, '123', function (err) {
+        if (err) return done(err)","-  describe('.param(fn)', function(){
-    it('should map app.param(name, ...) logic', function(done){
-      var app = express();
-
-      app.param(function(name, regexp){
-        if (Object.prototype.toString.call(regexp) == '[object RegExp]') { // See #1557
-          return function(req, res, next, val){
-            var captures;
-            if (captures = regexp.exec(String(val))) {
-              req.params[name] = captures[1];
-              next();
-            } else {
-              next('route');
-            }
-          }
-        }
-      })
-
-      app.param(':name', /^([a-zA-Z]+)$/);
-
-      app.get('/user/:name', function(req, res){
-        res.send(req.params.name);
-      });
-
-      request(app)
-      .get('/user/tj')
-      .end(function(err, res){
-        res.text.should.equal('tj');
-        request(app)
-        .get('/user/123')
-        .expect(404, done);
-      });
-
-    })
-
-    it('should fail if not given fn', function(){
-      var app = express();
-      app.param.bind(app, ':name', 'bob').should.throw();
-    })
-  })
-
-      .end(function(err, res){
-        res.text.should.equal('123');
-
+      .expect(200, '123', function (err) {
+        if (err) return done(err)"
expressjs_express,e5dbb0cb4e3a1a8cb7278e889d09156ec34d13e4,Merge tag '4.15.2',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);","-    .end(function(err, res){
-      res.statusCode.should.equal(200);
+    .expect(200, function (err) {
+      if (err) return done(err)","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
+    .expect(200, function (err) {
+      if (err) return done(err)"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","+var setPrototyeOf = require('setprototypeof')
-    this.request.__proto__ = parent.request;
-    this.response.__proto__ = parent.response;
-    this.engines.__proto__ = parent.engines;
-    this.settings.__proto__ = parent.settings;
+    setPrototyeOf(this.request, parent.request)
+    setPrototyeOf(this.response, parent.response)
+    setPrototyeOf(this.engines, parent.engines)
+    setPrototyeOf(this.settings, parent.settings)
-        req.__proto__ = orig.request;
-        res.__proto__ = orig.response;
+        setPrototyeOf(req, orig.request)
+        setPrototyeOf(res, orig.response)","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+var setPrototyeOf = require('setprototypeof')
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-    this.request.__proto__ = parent.request;
-    this.response.__proto__ = parent.response;
-    this.engines.__proto__ = parent.engines;
-    this.settings.__proto__ = parent.settings;
+    setPrototyeOf(this.request, parent.request)
+    setPrototyeOf(this.response, parent.response)
+    setPrototyeOf(this.engines, parent.engines)
+    setPrototyeOf(this.settings, parent.settings)
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  setPrototyeOf(req, this.request)
+  setPrototyeOf(res, this.response)
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-        req.__proto__ = orig.request;
-        res.__proto__ = orig.response;
+        setPrototyeOf(req, orig.request)
+        setPrototyeOf(res, orig.response)
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',lib/express.js,"-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
+  'query',","-  app.request = { __proto__: req, app: app };
-  app.response = { __proto__: res, app: app };
+  // expose the prototype that will get set on requests
+  app.request = Object.create(req, {
+    app: { configurable: true, enumerable: true, writable: true, value: app }
+  })
+
+  // expose the prototype that will get set on responses
+  app.response = Object.create(res, {
+    app: { configurable: true, enumerable: true, writable: true, value: app }
+  })
+","-var Route = require('./router/route');
-var Router = require('./router');
+var Router = require('router');
-  app.request = { __proto__: req, app: app };
-  app.response = { __proto__: res, app: app };
+  // expose the prototype that will get set on requests
+  app.request = Object.create(req, {
+    app: { configurable: true, enumerable: true, writable: true, value: app }
+  })
+
+  // expose the prototype that will get set on responses
+  app.response = Object.create(res, {
+    app: { configurable: true, enumerable: true, writable: true, value: app }
+  })
+
-exports.Route = Route;
+exports.Route = Router.Route;
-exports.query = require('./middleware/query');
+  'query',"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","- */
-
-var req = exports = module.exports = {
-  __proto__: http.IncomingMessage.prototype
-};
+ * @public
+ */
+
+var req = Object.create(http.IncomingMessage.prototype)
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = req
-  return addrs.slice(1).reverse();
+
+  // reverse the order (to farthest -> closest)
+  // and remove socket address
+  addrs.reverse().pop()
+
+  return addrs
-  var s = this.res.statusCode;
+  var res = this.res
+  var status = res.statusCode
-  if ((s >= 200 && s < 300) || 304 === s) {
-    return fresh(this.headers, (this.res._headers || {}));
+  if ((status >= 200 && status < 300) || 304 === status) {
+    return fresh(this.headers, {
+      'etag': res.get('ETag'),
+      'last-modified': res.get('Last-Modified')
+    })
-};
+}","-var deprecate = require('depd')('express');
- */
-
-var req = exports = module.exports = {
-  __proto__: http.IncomingMessage.prototype
-};
+ * @public
+ */
+
+var req = Object.create(http.IncomingMessage.prototype)
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = req
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
-  return addrs.slice(1).reverse();
+
+  // reverse the order (to farthest -> closest)
+  // and remove socket address
+  addrs.reverse().pop()
+
+  return addrs
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));
-
-  var s = this.res.statusCode;
+  var res = this.res
+  var status = res.statusCode
-  if ((s >= 200 && s < 300) || 304 === s) {
-    return fresh(this.headers, (this.res._headers || {}));
+  if ((status >= 200 && status < 300) || 304 === status) {
+    return fresh(this.headers, {
+      'etag': res.get('ETag'),
+      'last-modified': res.get('Last-Modified')
+    })
-};
+}"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statusCodes[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-","+var statuses = require('statuses')
-var statusCodes = http.STATUS_CODES;
- */
-
-var res = module.exports = {
-  __proto__: http.ServerResponse.prototype
-};
+ * @public
+ */
+
+var res = Object.create(http.ServerResponse.prototype)
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = res
-    chunk = statusCodes[chunk];
+    chunk = statuses[chunk]
-  var body = statusCodes[statusCode] || String(statusCode);
+  var body = statuses[statusCode] || String(statusCode)
-      body = statusCodes[status] + '. Redirecting to ' + address;
+      body = statuses[status] + '. Redirecting to ' + address
-      body = '<p>' + statusCodes[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>';
+      body = '<p>' + statuses[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'","-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
+var statuses = require('statuses')
-var statusCodes = http.STATUS_CODES;
- */
-
-var res = module.exports = {
-  __proto__: http.ServerResponse.prototype
-};
+ * @public
+ */
+
+var res = Object.create(http.ServerResponse.prototype)
+
+/**
+ * Module exports.
+ * @public
+ */
+
+module.exports = res
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statusCodes[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var val = obj;
-
-  // allow status / body
-  if (arguments.length === 2) {
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
-  }
-
-  var body = stringify(val, replacer, spaces);
+  var body = stringify(obj, replacer, spaces);
-  var body = statusCodes[statusCode] || String(statusCode);
+  var body = statuses[statusCode] || String(statusCode)
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-      body = statusCodes[status] + '. Redirecting to ' + address;
+      body = statuses[status] + '. Redirecting to ' + address
-      body = '<p>' + statusCodes[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>';
+      body = '<p>' + statuses[status] + '. Redirecting to <a href=""' + u + '"">' + u + '</a></p>'
-  // checks for back-compat
-  if (!field || (Array.isArray(field) && !field.length)) {
-    deprecate('res.vary(): Provide a field name');
-    return this;
-  }
-"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',lib/view.js,"+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;","-    opts.engines[this.ext] = require(this.ext.substr(1)).__express;
+    var mod = this.ext.substr(1)
+    debug('require ""%s""', mod)
+    opts.engines[this.ext] = require(mod).__express","-    opts.engines[this.ext] = require(this.ext.substr(1)).__express;
+    var mod = this.ext.substr(1)
+    debug('require ""%s""', mod)
+    opts.engines[this.ext] = require(mod).__express
+  var sync = true;
+
-  this.engine(this.path, options, callback);
+
+  // render, normalizing sync callbacks
+  this.engine(this.path, options, function onRender() {
+    if (!sync) {
+      return callback.apply(this, arguments);
+    }
+
+    // copy arguments
+    var args = new Array(arguments.length);
+    var cntx = this;
+
+    for (var i = 0; i < arguments.length; i++) {
+      args[i] = arguments[i];
+    }
+
+    // force callback to be async
+    return process.nextTick(function renderTick() {
+      return callback.apply(cntx, args);
+    });
+  });
+
+  sync = false;"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',package.json,"-  ""version"": ""4.14.1"",
+  ""version"": ""5.0.0-alpha.3"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
+    ""path-is-absolute"": ""1.0.1"",
+    ""router"": ""~1.1.5"",","-  ""version"": ""4.14.1"",
+  ""version"": ""4.15.0"",
-    ""debug"": ""~2.2.0"",
+    ""debug"": ""2.6.1"",
-    ""etag"": ""~1.7.0"",
-    ""finalhandler"": ""0.5.1"",
-    ""fresh"": ""0.3.0"",
+    ""etag"": ""~1.8.0"",
+    ""finalhandler"": ""~1.0.0"",
+    ""fresh"": ""0.5.0"",
-    ""qs"": ""6.2.0"",
+    ""qs"": ""6.3.1"",
-    ""send"": ""0.14.2"",
-    ""serve-static"": ""~1.11.2"",
+    ""send"": ""0.15.0"",
+    ""serve-static"": ""1.12.0"",
+    ""setprototypeof"": ""1.0.3"",
+    ""statuses"": ""~1.3.1"",
-    ""body-parser"": ""1.16.0"",
+    ""body-parser"": ""1.17.0"",
-    ""ejs"": ""2.5.5"",
-    ""express-session"": ""1.15.0"",
+    ""ejs"": ""2.5.6"",
+    ""express-session"": ""1.15.1"",
-    ""method-override"": ""~2.3.6"",
+    ""method-override"": ""2.3.7"",
-    ""morgan"": ""~1.7.0"",
+    ""morgan"": ""1.8.1"",
+    ""pbkdf2-password"": ""1.2.1"",","-  ""version"": ""4.14.1"",
+  ""version"": ""5.0.0-alpha.3"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.1.1"",
-    ""debug"": ""~2.2.0"",
+    ""debug"": ""2.6.1"",
-    ""etag"": ""~1.7.0"",
-    ""finalhandler"": ""0.5.1"",
-    ""fresh"": ""0.3.0"",
+    ""etag"": ""~1.8.0"",
+    ""finalhandler"": ""~1.0.0"",
+    ""fresh"": ""0.5.0"",
+    ""path-is-absolute"": ""1.0.1"",
-    ""qs"": ""6.2.0"",
+    ""qs"": ""6.3.1"",
-    ""send"": ""0.14.2"",
-    ""serve-static"": ""~1.11.2"",
+    ""router"": ""~1.3.0"",
+    ""send"": ""0.15.0"",
+    ""serve-static"": ""1.12.0"",
+    ""setprototypeof"": ""1.0.3"",
+    ""statuses"": ""~1.3.1"",
-    ""body-parser"": ""1.16.0"",
+    ""body-parser"": ""1.17.0"",
-    ""ejs"": ""2.5.5"",
-    ""express-session"": ""1.15.0"",
+    ""ejs"": ""2.5.6"",
+    ""express-session"": ""1.15.1"",
-    ""method-override"": ""~2.3.6"",
+    ""method-override"": ""2.3.7"",
-    ""morgan"": ""~1.7.0"",
+    ""morgan"": ""1.8.1"",
+    ""pbkdf2-password"": ""1.2.1"","
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',test/Router.js,"-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
-      router.use.bind(router).should.throw(/requires middleware function/)
+      assert.throws(router.use.bind(router), /argument handler is required/)
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+      assert.throws(router.use.bind(router, '/', 'hello'), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', 5), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', null), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', new Date()), /argument handler must be a function/)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+","+
+  it('should handle missing URL', function (done) {
+    var router = new Router()
+
+    router.use(function (req, res) {
+      throw new Error('should not be called')
+    })
+
+    router.handle({ method: 'GET' }, {}, done)
+  })
+
+    it('should be called for any URL when ""*""', function (done) {
+      var cb = after(4, done)
+      var router = new Router()
+
+      function no () {
+        throw new Error('should not be called')
+      }
+
+      router.all('*', function (req, res) {
+        res.end()
+      })
+
+      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
+    })
+    it('should be called for any URL', function (done) {
+      var cb = after(4, done)
+      var router = new Router()
+
+      function no () {
+        throw new Error('should not be called')
+      }
+
+      router.use(function (req, res) {
+        res.end()
+      })
+
+      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
+    })
+","-    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done });
+    router.handle({ url: '/foo/bar', method: 'GET' }, { end: done }, function(){});
-    router.handle({ url: '/test/route', method: 'GET' }, { end: done });
+    router.handle({ url: '/test/route', method: 'GET' }, { end: done }, function(){});
+
+  it('should handle missing URL', function (done) {
+    var router = new Router()
+
+    router.use(function (req, res) {
+      throw new Error('should not be called')
+    })
+
+    router.handle({ method: 'GET' }, {}, done)
+  })
-    router.handle({ url: '/', method: 'GET' }, { end: done });
+    router.handle({ url: '/', method: 'GET' }, { end: done }, function(){});
-      router.handle({ url: '/foo', method: 'GET' }, res);
+      router.handle({ url: '/foo', method: 'GET' }, res, function(){});
+
+    it('should be called for any URL when ""*""', function (done) {
+      var cb = after(4, done)
+      var router = new Router()
+
+      function no () {
+        throw new Error('should not be called')
+      }
+
+      router.all('*', function (req, res) {
+        res.end()
+      })
+
+      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
+    })
-      router.use.bind(router).should.throw(/requires middleware function/)
+      assert.throws(router.use.bind(router), /argument handler is required/)
-      router.use.bind(router, '/', 'hello').should.throw(/requires middleware function.*string/)
-      router.use.bind(router, '/', 5).should.throw(/requires middleware function.*number/)
-      router.use.bind(router, '/', null).should.throw(/requires middleware function.*Null/)
-      router.use.bind(router, '/', new Date()).should.throw(/requires middleware function.*Date/)
+      assert.throws(router.use.bind(router, '/', 'hello'), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', 5), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', null), /argument handler must be a function/)
+      assert.throws(router.use.bind(router, '/', new Date()), /argument handler must be a function/)
+    })
+
+    it('should be called for any URL', function (done) {
+      var cb = after(4, done)
+      var router = new Router()
+
+      function no () {
+        throw new Error('should not be called')
+      }
+
+      router.use(function (req, res) {
+        res.end()
+      })
+
+      router.handle({ url: '/', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '/foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: 'foo', method: 'GET' }, { end: cb }, no)
+      router.handle({ url: '*', method: 'GET' }, { end: cb }, no)
+    it('should require function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id'), /argument fn is required/);
+    });
+
+    it('should reject non-function', function () {
+      var router = new Router();
+      assert.throws(router.param.bind(router, 'id', 42), /argument fn must be a function/);
+    });
+"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);","-      .expect(404, 'Cannot GET /\n', cb);
+      .expect(404, cb)
-  describe('decode querystring', function(){
+  describe('decode params', function () {
+    it('should capture everything', function (done) {
+      var app = express()
+
+      app.get('*', function (req, res) {
+        res.end(req.params[0])
+      })
+
+      request(app)
+      .get('/user/tobi.json')
+      .expect('/user/tobi.json', done)
+    })
+
+    it('should decore the capture', function (done) {
+      var app = express()
+
+      app.get('*', function (req, res) {
+        res.end(req.params[0])
+      })
+
+      request(app)
+      .get('/user/tobi%20and%20loki.json')
+      .expect('/user/tobi and loki.json', done)
+    })
+
+  describe('when next(""router"") is called', function () {
+    it('should jump out of router', function (done) {
+      var app = express()
+      var router = express.Router()
+
+      function fn (req, res, next) {
+        res.set('X-Hit', '1')
+        next('router')
+      }
+
+      router.get('/foo', fn, function (req, res, next) {
+        res.end('failure')
+      })
+
+      router.get('/foo', function (req, res, next) {
+        res.end('failure')
+      })
+
+      app.use(router)
+
+      app.get('/foo', function (req, res) {
+        res.end('success')
+      })
+
+      request(app)
+      .get('/foo')
+      .expect('X-Hit', '1')
+      .expect(200, 'success', done)
+    })
+  })
+","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-      .expect(404, 'Cannot GET /\n', cb);
+      .expect(404, cb)
-  describe('decode querystring', function(){
+  describe('decode params', function () {
+    it('should capture everything', function (done) {
+      var app = express()
+
+      app.get('*', function (req, res) {
+        res.end(req.params[0])
+      })
+
+      request(app)
+      .get('/user/tobi.json')
+      .expect('/user/tobi.json', done)
+    })
+
+    it('should decore the capture', function (done) {
+      var app = express()
+
+      app.get('*', function (req, res) {
+        res.end(req.params[0])
+      })
+
+      request(app)
+      .get('/user/tobi%20and%20loki.json')
+      .expect('/user/tobi and loki.json', done)
+    })
+
+  describe('when next(""router"") is called', function () {
+    it('should jump out of router', function (done) {
+      var app = express()
+      var router = express.Router()
+
+      function fn (req, res, next) {
+        res.set('X-Hit', '1')
+        next('router')
+      }
+
+      router.get('/foo', fn, function (req, res, next) {
+        res.end('failure')
+      })
+
+      router.get('/foo', function (req, res, next) {
+        res.end('failure')
+      })
+
+      app.use(router)
+
+      app.get('/foo', function (req, res) {
+        res.end('success')
+      })
+
+      request(app)
+      .get('/foo')
+      .expect('X-Hit', '1')
+      .expect(200, 'success', done)
+    })
+  })
+"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","-      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+      .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+      .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
+        .expect('ETag', 'W/""c-IgR/L5SF7CJQff4wxKGF/vfPuZ0""')
-          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
+          .expect('ETag', 'W/""c-IgR/L5SF7CJQff4wxKGF/vfPuZ0""')
-        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
+        .expect('ETag', 'W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-        .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+        .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
+        .expect('ETag', '""d-HwnTDHB9U/PRbFMN1z1wps51lqk""')
-        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')
+        .expect('ETag', 'W/""d-HwnTDHB9U/PRbFMN1z1wps51lqk""')","-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+      .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+      .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
+        .expect('ETag', 'W/""c-IgR/L5SF7CJQff4wxKGF/vfPuZ0""')
-          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
+          .expect('ETag', 'W/""c-IgR/L5SF7CJQff4wxKGF/vfPuZ0""')
-        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
+        .expect('ETag', 'W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-        .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
+        .expect('ETag', 'W/""3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g""')
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
-        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
+        .expect('ETag', '""d-HwnTDHB9U/PRbFMN1z1wps51lqk""')
-        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')
+        .expect('ETag', 'W/""d-HwnTDHB9U/PRbFMN1z1wps51lqk""')"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-
-  describe('.sendfile(path, options)', function () {
-    it('should pass options to send module', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-      })
-
-      request(app)
-      .get('/')
-      .expect(200, 'to', done)
-    })
-  })","-           'x-success': 'sent',
-           'x-other': 'done'
+          'x-success': 'sent',
+          'x-other': 'done'
-         'x-success': 'sent',
-         'x-other': 'done'
+        'x-success': 'sent',
+        'x-other': 'done'
-  describe('.sendfile(path, options)', function () {
-    it('should pass options to send module', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-      })
-
-      request(app)
+describe('.sendfile(path, options)', function () {
+  it('should pass options to send module', function (done) {
+    var app = express()
+
+    app.use(function (req, res) {
+      res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
+    })
+
+    request(app)
-    })
+})","-           'x-success': 'sent',
-           'x-other': 'done'
+          'x-success': 'sent',
+          'x-other': 'done'
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-
-  describe('.sendfile(path, options)', function () {
-    it('should pass options to send module', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-      })
-
-      request(app)
-      .get('/')
-      .expect(200, 'to', done)
-    })
-  })"
expressjs_express,501e24e0a941fb43b1d0b4a0363386111535cd31,Merge tag '4.15.0',test/utils.js,"-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})","-    .should.eql('""8-zZdv4imtWD49AHEviejT6A""')
+    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('""a-fsFba4IxwQS6h6Umb+FNxw""')
+    .should.eql('""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    .should.eql('""8-zZdv4imtWD49AHEviejT6A""');
+    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('""0-1B2M2Y8AsgTpgAmY7PhCfg""');
+    .should.eql('""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""')
+    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('W/""a-fsFba4IxwQS6h6Umb+FNxw""')
+    .should.eql('W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""');
+    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('W/""0-1B2M2Y8AsgTpgAmY7PhCfg""');
+    .should.eql('W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')","-    .should.eql('""8-zZdv4imtWD49AHEviejT6A""')
+    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('""a-fsFba4IxwQS6h6Umb+FNxw""')
+    .should.eql('""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    .should.eql('""8-zZdv4imtWD49AHEviejT6A""');
+    .should.eql('""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('""0-1B2M2Y8AsgTpgAmY7PhCfg""');
+    .should.eql('""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""')
+    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('W/""a-fsFba4IxwQS6h6Umb+FNxw""')
+    .should.eql('W/""a-JBiXf7GyzxwcrxY4hVXUwa7tmks""')
-    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""');
+    .should.eql('W/""8-O2uVAFaQ1rZvlKLT14RnuvjPIdg""')
-    .should.eql('W/""0-1B2M2Y8AsgTpgAmY7PhCfg""');
+    .should.eql('W/""0-2jmj7l5rSw0yVb/vlWAYkK/YBwk""')
-
-describe('utils.isAbsolute()', function(){
-  it('should support windows', function(){
-    assert(utils.isAbsolute('c:\\'));
-    assert(utils.isAbsolute('c:/'));
-    assert(!utils.isAbsolute(':\\'));
-  })
-
-  it('should support windows unc', function(){
-    assert(utils.isAbsolute('\\\\foo\\bar'))
-  })
-
-  it('should support unices', function(){
-    assert(utils.isAbsolute('/foo/bar'));
-    assert(!utils.isAbsolute('foo/bar'));
-  })
-})
-
-describe('utils.flatten(arr)', function(){
-  it('should flatten an array', function(){
-    var arr = ['one', ['two', ['three', 'four'], 'five']];
-    utils.flatten(arr)
-      .should.eql(['one', 'two', 'three', 'four', 'five']);
-  })
-})"
expressjs_express,bcbb9d56c57ab7ad20b3be52fe8191145ab48016,Merge tag '4.14.1',package.json,"-  ""version"": ""4.14.0"",
+  ""version"": ""5.0.0-alpha.2"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.0.0"",
+    ""path-is-absolute"": ""1.0.0"",
+    ""router"": ""~1.1.3"",","-  ""version"": ""4.14.0"",
+  ""version"": ""4.14.1"",
-    ""content-disposition"": ""0.5.1"",
+    ""content-disposition"": ""0.5.2"",
-    ""finalhandler"": ""0.5.0"",
+    ""finalhandler"": ""0.5.1"",
-    ""proxy-addr"": ""~1.1.2"",
+    ""proxy-addr"": ""~1.1.3"",
-    ""send"": ""0.14.1"",
-    ""serve-static"": ""~1.11.1"",
-    ""type-is"": ""~1.6.13"",
+    ""send"": ""0.14.2"",
+    ""serve-static"": ""~1.11.2"",
+    ""type-is"": ""~1.6.14"",
-    ""after"": ""0.8.1"",
-    ""body-parser"": ""~1.15.1"",
+    ""after"": ""0.8.2"",
+    ""body-parser"": ""1.16.0"",
-    ""ejs"": ""2.4.2"",
-    ""istanbul"": ""0.4.3"",
-    ""marked"": ""0.3.5"",
+    ""ejs"": ""2.5.5"",
+    ""express-session"": ""1.15.0"",
+    ""istanbul"": ""0.4.5"",
+    ""marked"": ""0.3.6"",
-    ""mocha"": ""2.5.3"",
+    ""mocha"": ""3.2.0"",
-    ""should"": ""9.0.2"",
+    ""multiparty"": ""4.1.3"",
+    ""should"": ""11.2.0"",
-    ""express-session"": ""~1.13.0"",
-    ""multiparty"": ""~4.1.2"",","-  ""version"": ""4.14.0"",
+  ""version"": ""5.0.0-alpha.2"",
-    ""array-flatten"": ""1.1.1"",
-    ""content-disposition"": ""0.5.1"",
+    ""array-flatten"": ""2.0.0"",
+    ""content-disposition"": ""0.5.2"",
-    ""finalhandler"": ""0.5.0"",
+    ""finalhandler"": ""0.5.1"",
+    ""path-is-absolute"": ""1.0.0"",
-    ""proxy-addr"": ""~1.1.2"",
+    ""proxy-addr"": ""~1.1.3"",
-    ""send"": ""0.14.1"",
-    ""serve-static"": ""~1.11.1"",
-    ""type-is"": ""~1.6.13"",
+    ""router"": ""~1.1.3"",
+    ""send"": ""0.14.2"",
+    ""serve-static"": ""~1.11.2"",
+    ""type-is"": ""~1.6.14"",
-    ""after"": ""0.8.1"",
-    ""body-parser"": ""~1.15.1"",
+    ""after"": ""0.8.2"",
+    ""body-parser"": ""1.16.0"",
-    ""ejs"": ""2.4.2"",
-    ""istanbul"": ""0.4.3"",
-    ""marked"": ""0.3.5"",
+    ""ejs"": ""2.5.5"",
+    ""express-session"": ""1.15.0"",
+    ""istanbul"": ""0.4.5"",
+    ""marked"": ""0.3.6"",
-    ""mocha"": ""2.5.3"",
+    ""mocha"": ""3.2.0"",
-    ""should"": ""9.0.2"",
+    ""multiparty"": ""4.1.3"",
+    ""should"": ""11.2.0"",
-    ""express-session"": ""~1.13.0"",
-    ""multiparty"": ""~4.1.2"","
expressjs_express,bcbb9d56c57ab7ad20b3be52fe8191145ab48016,Merge tag '4.14.1',test/app.options.js,"-    app.del('/', function(){});
+    app.post('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    app.del('/', function(){});
+    app.delete('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD')
-    .expect(200, 'GET,HEAD', done);
+    .expect('Allow', 'GET, HEAD')
+    .expect(200, 'GET, HEAD', done);","-  describe('when error occurs in respone handler', function () {
+  describe('when error occurs in response handler', function () {","-    app.del('/', function(){});
+    app.post('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    app.del('/', function(){});
+    app.delete('/', function(){});
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD,PUT')
-    .expect(200, 'GET,HEAD,PUT', done);
+    .expect('Allow', 'GET, HEAD, PUT')
+    .expect(200, 'GET, HEAD, PUT', done);
-    .expect('Allow', 'GET,HEAD')
-    .expect(200, 'GET,HEAD', done);
+    .expect('Allow', 'GET, HEAD')
+    .expect(200, 'GET, HEAD', done);
-  describe('when error occurs in respone handler', function () {
+  describe('when error occurs in response handler', function () {"
expressjs_express,bcbb9d56c57ab7ad20b3be52fe8191145ab48016,Merge tag '4.14.1',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);","-    it('should work inside literal paranthesis', function(done){
+    it('should work inside literal parenthesis', function(done){","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
-    it('should work inside literal paranthesis', function(done){
+    it('should work inside literal parenthesis', function(done){"
expressjs_express,bcbb9d56c57ab7ad20b3be52fe8191145ab48016,Merge tag '4.14.1',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-
-  describe('.sendfile(path, options)', function () {
-    it('should pass options to send module', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-      })
-
-      request(app)
-      .get('/')
-      .expect(200, 'to', done)
-    })
-  })","+    describe('with ""cacheControl"" option', function () {
+      it('should enable cacheControl by default', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=0')
+        .expect(200, done)
+      })
+
+      it('should accept cacheControl option', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { cacheControl: false })
+
+        request(app)
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Cache-Control'))
+        .expect(200, done)
+      })
+    })
+","+    describe('with ""cacheControl"" option', function () {
+      it('should enable cacheControl by default', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'))
+
+        request(app)
+        .get('/')
+        .expect('Cache-Control', 'public, max-age=0')
+        .expect(200, done)
+      })
+
+      it('should accept cacheControl option', function (done) {
+        var app = createApp(path.resolve(__dirname, 'fixtures/name.txt'), { cacheControl: false })
+
+        request(app)
+        .get('/')
+        .expect(utils.shouldNotHaveHeader('Cache-Control'))
+        .expect(200, done)
+      })
+    })
+
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-        .expect(utils.shouldNotHaveHeader('X-Success'))
-        .expect(404, done);
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .expect('Content-Type', 'text/html; charset=UTF-8')
-        .expect(200, '<p>{{user.name}}</p>', done);
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })
-
-  describe('.sendfile(path, options)', function () {
-    it('should pass options to send module', function (done) {
-      var app = express()
-
-      app.use(function (req, res) {
-        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
-      })
-
-      request(app)
-      .get('/')
-      .expect(200, 'to', done)
-    })
-  })"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","+  if (!name) {
+    throw new TypeError('name argument is required to req.get');
+  }
+
+  if (typeof name !== 'string') {
+    throw new TypeError('name must be a string to req.get');
+  }
+
- * Parse Range header field,
- * capping to the given `size`.
- *
- * Unspecified ranges such as ""0-"" require
- * knowledge of your resource length. In
- * the case of a byte range this is of course
- * the total number of bytes. If the Range
- * header field is not given `null` is returned,
- * `-1` when unsatisfiable, `-2` when syntactically invalid.
- *
- * NOTE: remember that ranges are inclusive, so
- * for example ""Range: users=0-3"" should respond
- * with 4 users when available, not 3.
- *
- * @param {Number} size
- * @return {Array}
- * @public
- */
-
-req.range = function(size){
+ * Parse Range header field, capping to the given `size`.
+ *
+ * Unspecified ranges such as ""0-"" require knowledge of your resource length. In
+ * the case of a byte range this is of course the total number of bytes. If the
+ * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
+ * and `-2` when syntactically invalid.
+ *
+ * When ranges are returned, the array has a ""type"" property which is the type of
+ * range that is required (most commonly, ""bytes""). Each array element is an object
+ * with a ""start"" and ""end"" property for the portion of the range.
+ *
+ * The ""combine"" option can be set to `true` and overlapping & adjacent ranges
+ * will be combined into a single range.
+ *
+ * NOTE: remember that ranges are inclusive, so for example ""Range: users=0-3""
+ * should respond with 4 users when available, not 3.
+ *
+ * @param {number} size
+ * @param {object} [options]
+ * @param {boolean} [options.combine=false]
+ * @return {number|array}
+ * @public
+ */
+
+req.range = function range(size, options) {
-  return parseRange(size, range);
+  return parseRange(size, range, options);
- *    req.protocol == 'https'
+ *    req.protocol === 'https'
-  if ('GET' != method && 'HEAD' != method) return false;
+  if ('GET' !== method && 'HEAD' !== method) return false;
-  if ((s >= 200 && s < 300) || 304 == s) {
+  if ((s >= 200 && s < 300) || 304 === s) {","-var deprecate = require('depd')('express');
+  if (!name) {
+    throw new TypeError('name argument is required to req.get');
+  }
+
+  if (typeof name !== 'string') {
+    throw new TypeError('name must be a string to req.get');
+  }
+
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
-
-/**
- * Parse Range header field,
- * capping to the given `size`.
- *
- * Unspecified ranges such as ""0-"" require
- * knowledge of your resource length. In
- * the case of a byte range this is of course
- * the total number of bytes. If the Range
- * header field is not given `null` is returned,
- * `-1` when unsatisfiable, `-2` when syntactically invalid.
- *
- * NOTE: remember that ranges are inclusive, so
- * for example ""Range: users=0-3"" should respond
- * with 4 users when available, not 3.
- *
- * @param {Number} size
- * @return {Array}
- * @public
- */
-
-req.range = function(size){
+/**
+ * Parse Range header field, capping to the given `size`.
+ *
+ * Unspecified ranges such as ""0-"" require knowledge of your resource length. In
+ * the case of a byte range this is of course the total number of bytes. If the
+ * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
+ * and `-2` when syntactically invalid.
+ *
+ * When ranges are returned, the array has a ""type"" property which is the type of
+ * range that is required (most commonly, ""bytes""). Each array element is an object
+ * with a ""start"" and ""end"" property for the portion of the range.
+ *
+ * The ""combine"" option can be set to `true` and overlapping & adjacent ranges
+ * will be combined into a single range.
+ *
+ * NOTE: remember that ranges are inclusive, so for example ""Range: users=0-3""
+ * should respond with 4 users when available, not 3.
+ *
+ * @param {number} size
+ * @param {object} [options]
+ * @param {boolean} [options.combine=false]
+ * @return {number|array}
+ * @public
+ */
+
+req.range = function range(size, options) {
-  return parseRange(size, range);
-};
-
-/**
- * Return the value of param `name` when present or `defaultValue`.
- *
- *  - Checks route placeholders, ex: _/user/:id_
- *  - Checks body params, ex: id=12, {""id"":12}
- *  - Checks query string params, ex: ?id=12
- *
- * To utilize request bodies, `req.body`
- * should be an object. This can be done by using
- * the `bodyParser()` middleware.
- *
- * @param {String} name
- * @param {Mixed} [defaultValue]
- * @return {String}
- * @public
- */
-
-req.param = function param(name, defaultValue) {
-  var params = this.params || {};
-  var body = this.body || {};
-  var query = this.query || {};
-
-  var args = arguments.length === 1
-    ? 'name'
-    : 'name, default';
-  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
-
-  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
-  if (null != body[name]) return body[name];
-  if (null != query[name]) return query[name];
-
-  return defaultValue;
-};
+  return parseRange(size, range, options);
+};
+
+/**
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- *    req.protocol == 'https'
+ *    req.protocol === 'https'
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));
-
-  if ('GET' != method && 'HEAD' != method) return false;
+  if ('GET' !== method && 'HEAD' !== method) return false;
-  if ((s >= 200 && s < 300) || 304 == s) {
+  if ((s >= 200 && s < 300) || 304 === s) {"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',lib/response.js,"-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statusCodes[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","+var encodeUrl = require('encodeurl');
-  if (204 == this.statusCode || 304 == this.statusCode) {
+  if (204 === this.statusCode || 304 === this.statusCode) {
-  var body = JSON.stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces);
-  var body = JSON.stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces);
- * @param {Object} options
+ * @param {Object} [options]
-  this.set('Location', loc);
-  return this;
+  return this.set('Location', encodeUrl(loc));
-  this.location(address);
-  address = this.get('Location');
+  address = this.location(address).get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
+      body = statusCodes[status] + '. Redirecting to ' + address;
+
+/**
+ * Stringify JSON, like JSON.stringify, but v8 optimized.
+ * @private
+ */
+
+function stringify(value, replacer, spaces) {
+  // v8 checks arguments.length for optimizing simple call
+  // https://bugs.chromium.org/p/v8/issues/detail?id=4730
+  return replacer || spaces
+    ? JSON.stringify(value, replacer, spaces)
+    : JSON.stringify(value);
+}","+var encodeUrl = require('encodeurl');
-var isAbsolute = require('./utils').isAbsolute;
+var pathIsAbsolute = require('path-is-absolute');
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = statusCodes[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  if (204 == this.statusCode || 304 == this.statusCode) {
+  if (204 === this.statusCode || 304 === this.statusCode) {
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  var body = JSON.stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces);
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  var body = JSON.stringify(val, replacer, spaces);
+  var body = stringify(val, replacer, spaces);
-  if (!opts.root && !isAbsolute(path)) {
+  if (!opts.root && !pathIsAbsolute(path)) {
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `callback(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @public
- */
-
-res.sendfile = function (path, options, callback) {
-  var done = callback;
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-  var opts = options || {};
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    done = options;
-    opts = {};
-  }
-
-  // create file stream
-  var file = send(req, path, opts);
-
-  // transfer
-  sendfile(res, file, opts, function (err) {
-    if (done) return done(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
- * @param {Object} options
+ * @param {Object} [options]
-  this.set('Location', loc);
-  return this;
+  return this.set('Location', encodeUrl(loc));
-  this.location(address);
-  address = this.get('Location');
+  address = this.location(address).get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
+      body = statusCodes[status] + '. Redirecting to ' + address;
+
+/**
+ * Stringify JSON, like JSON.stringify, but v8 optimized.
+ * @private
+ */
+
+function stringify(value, replacer, spaces) {
+  // v8 checks arguments.length for optimizing simple call
+  // https://bugs.chromium.org/p/v8/issues/detail?id=4730
+  return replacer || spaces
+    ? JSON.stringify(value, replacer, spaces)
+    : JSON.stringify(value);
+}"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',lib/utils.js,"-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
+var etag = require('etag');
-var mime = require('send').mime;
-var basename = require('path').basename;
-var etag = require('etag');
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' == path[0]) return true;
-  if (':' == path[1] && '\\' == path[2]) return true;
-  if ('\\\\' == path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","-  if ('/' == path[0]) return true;
-  if (':' == path[1] && '\\' == path[2]) return true;
-  if ('\\\\' == path.substring(0, 2)) return true; // Microsoft Azure absolute path
+  if ('/' === path[0]) return true;
+  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
+  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
-    if ('q' == pms[0]) {
+    if ('q' === pms[0]) {
-    allowDots: false,","-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
+var etag = require('etag');
-var mime = require('send').mime;
-var basename = require('path').basename;
-var etag = require('etag');
- * Check if `path` looks absolute.
- *
- * @param {String} path
- * @return {Boolean}
- * @api private
- */
-
-exports.isAbsolute = function(path){
-  if ('/' == path[0]) return true;
-  if (':' == path[1] && '\\' == path[2]) return true;
-  if ('\\\\' == path.substring(0, 2)) return true; // Microsoft Azure absolute path
-};
-
-/**
- * Flatten the given `arr`.
- *
- * @param {Array} arr
- * @return {Array}
- * @api private
- */
-
-exports.flatten = deprecate.function(flatten,
-  'utils.flatten: use array-flatten npm module instead');
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
-/**
-    if ('q' == pms[0]) {
+    if ('q' === pms[0]) {
-      fn = newObject;
-    allowDots: false,
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',package.json,"-  ""version"": ""4.13.4"",
+  ""version"": ""5.0.0-alpha.2"",
-    ""array-flatten"": ""1.1.1"",
+    ""array-flatten"": ""2.0.0"",
+    ""path-is-absolute"": ""1.0.0"",
+    ""router"": ""~1.1.3"",","-  ""version"": ""4.13.4"",
+  ""version"": ""4.14.0"",
+  ""homepage"": ""http://expressjs.com/"",
-    ""accepts"": ""~1.2.12"",
+    ""accepts"": ""~1.3.3"",
-    ""content-type"": ""~1.0.1"",
-    ""cookie"": ""0.1.5"",
+    ""content-type"": ""~1.0.2"",
+    ""cookie"": ""0.3.1"",
+    ""encodeurl"": ""~1.0.1"",
-    ""finalhandler"": ""0.4.1"",
+    ""finalhandler"": ""0.5.0"",
-    ""proxy-addr"": ""~1.0.10"",
-    ""qs"": ""4.0.0"",
-    ""range-parser"": ""~1.0.3"",
-    ""send"": ""0.13.1"",
-    ""serve-static"": ""~1.10.2"",
-    ""type-is"": ""~1.6.6"",
+    ""proxy-addr"": ""~1.1.2"",
+    ""qs"": ""6.2.0"",
+    ""range-parser"": ""~1.2.0"",
+    ""send"": ""0.14.1"",
+    ""serve-static"": ""~1.11.1"",
+    ""type-is"": ""~1.6.13"",
-    ""vary"": ""~1.0.1""
+    ""vary"": ""~1.1.0""
-    ""ejs"": ""2.3.4"",
-    ""istanbul"": ""0.4.2"",
+    ""body-parser"": ""~1.15.1"",
+    ""cookie-parser"": ""~1.4.3"",
+    ""ejs"": ""2.4.2"",
+    ""istanbul"": ""0.4.3"",
-    ""mocha"": ""2.3.4"",
-    ""should"": ""7.1.1"",
-    ""supertest"": ""1.1.0"",
-    ""body-parser"": ""~1.14.2"",
+    ""method-override"": ""~2.3.6"",
+    ""mocha"": ""2.5.3"",
+    ""morgan"": ""~1.7.0"",
+    ""should"": ""9.0.2"",
+    ""supertest"": ""1.2.0"",
-    ""cookie-parser"": ""~1.4.1"",
-    ""method-override"": ""~2.3.5"",
-    ""morgan"": ""~1.6.1"",
-    ""vhost"": ""~3.0.1""
+    ""vhost"": ""~3.0.2""","-  ""version"": ""4.13.4"",
+  ""version"": ""5.0.0-alpha.2"",
+  ""homepage"": ""http://expressjs.com/"",
-    ""accepts"": ""~1.2.12"",
-    ""array-flatten"": ""1.1.1"",
+    ""accepts"": ""~1.3.3"",
+    ""array-flatten"": ""2.0.0"",
-    ""content-type"": ""~1.0.1"",
-    ""cookie"": ""0.1.5"",
+    ""content-type"": ""~1.0.2"",
+    ""cookie"": ""0.3.1"",
+    ""encodeurl"": ""~1.0.1"",
-    ""finalhandler"": ""0.4.1"",
+    ""finalhandler"": ""0.5.0"",
+    ""path-is-absolute"": ""1.0.0"",
-    ""proxy-addr"": ""~1.0.10"",
-    ""qs"": ""4.0.0"",
-    ""range-parser"": ""~1.0.3"",
-    ""send"": ""0.13.1"",
-    ""serve-static"": ""~1.10.2"",
-    ""type-is"": ""~1.6.6"",
+    ""proxy-addr"": ""~1.1.2"",
+    ""qs"": ""6.2.0"",
+    ""range-parser"": ""~1.2.0"",
+    ""router"": ""~1.1.3"",
+    ""send"": ""0.14.1"",
+    ""serve-static"": ""~1.11.1"",
+    ""type-is"": ""~1.6.13"",
-    ""vary"": ""~1.0.1""
+    ""vary"": ""~1.1.0""
-    ""ejs"": ""2.3.4"",
-    ""istanbul"": ""0.4.2"",
+    ""body-parser"": ""~1.15.1"",
+    ""cookie-parser"": ""~1.4.3"",
+    ""ejs"": ""2.4.2"",
+    ""istanbul"": ""0.4.3"",
-    ""mocha"": ""2.3.4"",
-    ""should"": ""7.1.1"",
-    ""supertest"": ""1.1.0"",
-    ""body-parser"": ""~1.14.2"",
+    ""method-override"": ""~2.3.6"",
+    ""mocha"": ""2.5.3"",
+    ""morgan"": ""~1.7.0"",
+    ""should"": ""9.0.2"",
+    ""supertest"": ""1.2.0"",
-    ""cookie-parser"": ""~1.4.1"",
-    ""method-override"": ""~2.3.5"",
-    ""morgan"": ""~1.6.1"",
-    ""vhost"": ""~3.0.1""
+    ""vhost"": ""~3.0.2"""
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',test/req.query.js,"-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);
-      });
-    });
-","-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')","-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-        .get('/?user[name]=tj')
+        .get('/?user%5Bname%5D=tj')
-      });
-    });
-
-    describe('when ""query parser fn"" is missing', function () {
-      it('should act like ""extended""', function (done) {
-        var app = express();
-
-        delete app.settings['query parser'];
-        delete app.settings['query parser fn'];
-
-        app.use(function (req, res) {
-          res.send(req.query);
-        });
-
-        request(app)
-        .get('/?user[name]=tj&user.name=tj')
-        .expect(200, '{""user"":{""name"":""tj""},""user.name"":""tj""}', done);"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',test/res.jsonp.js,"-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)
-    })
-  })
-","+var utils = require('./support/utils');
-      .expect(200, '{""hello"":""world""}', function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-content-type-options');
-        done();
-      });
+      .expect(utils.shouldNotHaveHeader('X-Content-Type-Options'))
+      .expect(200, '{""hello"":""world""}', done);","+var utils = require('./support/utils');
-      .expect(200, '{""hello"":""world""}', function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-content-type-options');
-        done();
-      });
+      .expect(utils.shouldNotHaveHeader('X-Content-Type-Options'))
+      .expect(200, '{""hello"":""world""}', done);
-    })
-  })
-
-  describe('.jsonp(object, status)', function(){
-    it('should respond with json and set the .statusCode for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp({ id: 1 }, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '{""id"":1}', done)
-    })
-
-    it('should use status as second number for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.jsonp(200, 201);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'application/json; charset=utf-8')
-      .expect(201, '200', done)"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+var utils = require('./support/utils');
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/html; charset=utf-8');
-        res.text.should.equal('<p>hey</p>');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'text/html; charset=utf-8')
+      .expect(200, '<p>hey</p>', done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/octet-stream');
-        res.text.should.equal('hello');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'application/octet-stream')
+      .expect(200, 'hello', done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
-        res.text.should.equal('hey');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
-      .end(function(err, res){
-        res.headers.should.not.have.property('content-type');
-        res.headers.should.not.have.property('content-length');
-        res.headers.should.not.have.property('transfer-encoding');
-        res.text.should.equal('');
-        done();
-      })
+      .expect(utils.shouldNotHaveHeader('Content-Type'))
+      .expect(utils.shouldNotHaveHeader('Content-Length'))
+      .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+      .expect(204, '', done);
-      .end(function(err, res){
-        res.headers.should.not.have.property('content-type');
-        res.headers.should.not.have.property('content-length');
-        res.headers.should.not.have.property('transfer-encoding');
-        res.text.should.equal('');
-        done();
-      })
+      .expect(utils.shouldNotHaveHeader('Content-Type'))
+      .expect(utils.shouldNotHaveHeader('Content-Length'))
+      .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+      .expect(304, '', done);
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-
-function shouldNotHaveHeader(header) {
-  return function (res) {
-    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
-  }
-}","+var utils = require('./support/utils');
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
+    })
+  })
+
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/html; charset=utf-8');
-        res.text.should.equal('<p>hey</p>');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'text/html; charset=utf-8')
+      .expect(200, '<p>hey</p>', done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/octet-stream');
-        res.text.should.equal('hello');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'application/octet-stream')
+      .expect(200, 'hello', done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
-        res.text.should.equal('hey');
-        res.statusCode.should.equal(200);
-        done();
-      })
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
-      .end(function(err, res){
-        res.headers.should.not.have.property('content-type');
-        res.headers.should.not.have.property('content-length');
-        res.headers.should.not.have.property('transfer-encoding');
-        res.text.should.equal('');
-        done();
-      })
+      .expect(utils.shouldNotHaveHeader('Content-Type'))
+      .expect(utils.shouldNotHaveHeader('Content-Length'))
+      .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+      .expect(204, '', done);
-      .end(function(err, res){
-        res.headers.should.not.have.property('content-type');
-        res.headers.should.not.have.property('content-length');
-        res.headers.should.not.have.property('transfer-encoding');
-        res.text.should.equal('');
-        done();
-      })
+      .expect(utils.shouldNotHaveHeader('Content-Type'))
+      .expect(utils.shouldNotHaveHeader('Content-Length'))
+      .expect(utils.shouldNotHaveHeader('Transfer-Encoding'))
+      .expect(304, '', done);
-          res.send(200);
+          res.send('hello!');
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-          res.send(200);
+          res.send('hello!');
-        .expect(shouldNotHaveHeader('ETag'))
+        .expect(utils.shouldNotHaveHeader('ETag'))
-
-function shouldNotHaveHeader(header) {
-  return function (res) {
-    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
-  }
-}"
expressjs_express,1dbfee66235c6a4e2f8e440264f71f31ddbe75d4,Merge tag '4.14.0',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })","+var utils = require('./support/utils');
-        .expect(404, function (err, res) {
-          if (err) return done(err);
-          res.headers.should.not.have.property('x-success');
-          done();
-        });
+        .expect(utils.shouldNotHaveHeader('X-Success'))
+        .expect(404, done);
+  describe('.sendFile(path, options)', function () {
+    it('should pass options to send module', function (done) {
+      request(createApp(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 }))
+      .get('/')
+      .expect(200, 'to', done)
+    })
+  })
+
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
+        .expect(utils.shouldNotHaveHeader('X-Success'))
+        .expect(404, done);
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
+        .expect('Content-Type', 'text/html; charset=UTF-8')
+        .expect(200, '<p>{{user.name}}</p>', done);
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
+        .expect('Content-Type', 'text/html; charset=UTF-8')
+        .expect(200, '<p>{{user.name}}</p>', done);
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
+        .expect('Content-Type', 'text/html; charset=UTF-8')
+        .expect(200, '<p>{{user.name}}</p>', done);
+  describe('.sendfile(path, options)', function () {
+    it('should pass options to send module', function (done) {
+      var app = express()
+
+      app.use(function (req, res) {
+        res.sendfile(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 })
+      })
+
+      request(app)
+      .get('/')
+      .expect(200, 'to', done)
+    })
+  })
+","+var utils = require('./support/utils');
-        .expect(404, function (err, res) {
-          if (err) return done(err);
-          res.headers.should.not.have.property('x-success');
-          done();
-        });
+        .expect(utils.shouldNotHaveHeader('X-Success'))
+        .expect(404, done);
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORTED');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express();
-      var calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          assert.equal(calls++, 0);
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, /^ENOENT.*?, stat/, done);
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
+  describe('.sendFile(path, options)', function () {
+    it('should pass options to send module', function (done) {
+      request(createApp(path.resolve(fixtures, 'name.txt'), { start: 0, end: 1 }))
+      .get('/')
+      .expect(200, 'to', done)"
expressjs_express,7cafdb5824a15a26fe10a3599f26ab84698093d8,Merge tag '4.13.4',lib/application.js,"-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","- * @param {String|Function} options or fn
+ * @param {Object|Function} options or fn","-var Router = require('./router');
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var Router = require('router');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @private
- */
-app.lazyrouter = function lazyrouter() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-  this.lazyrouter();
-  return this._router.route(path);
+  return this.router.route(path);
-  this.lazyrouter();
-
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
- * @param {String|Function} options or fn
+ * @param {Object|Function} options or fn"
expressjs_express,7cafdb5824a15a26fe10a3599f26ab84698093d8,Merge tag '4.13.4',package.json,"-  ""version"": ""4.13.1"",
+  ""version"": ""5.0.0-alpha.2"",
+    ""path-is-absolute"": ""1.0.0"",
+    ""router"": ""~1.1.2"",","-  ""version"": ""4.13.1"",
+  ""version"": ""4.13.4"",
-  ""repository"": ""strongloop/express"",
-  ""homepage"": ""http://expressjs.com/"",
+  ""repository"": ""expressjs/express"",
-    ""accepts"": ""~1.2.10"",
-    ""array-flatten"": ""1.1.0"",
-    ""content-disposition"": ""0.5.0"",
+    ""accepts"": ""~1.2.12"",
+    ""array-flatten"": ""1.1.1"",
+    ""content-disposition"": ""0.5.1"",
-    ""cookie"": ""0.1.3"",
+    ""cookie"": ""0.1.5"",
-    ""depd"": ""~1.0.1"",
-    ""escape-html"": ""1.0.2"",
+    ""depd"": ""~1.1.0"",
+    ""escape-html"": ""~1.0.3"",
-    ""finalhandler"": ""0.4.0"",
+    ""finalhandler"": ""0.4.1"",
-    ""merge-descriptors"": ""1.0.0"",
-    ""methods"": ""~1.1.1"",
+    ""merge-descriptors"": ""1.0.1"",
+    ""methods"": ""~1.1.2"",
-    ""parseurl"": ""~1.3.0"",
-    ""path-to-regexp"": ""0.1.6"",
-    ""proxy-addr"": ""~1.0.8"",
+    ""parseurl"": ""~1.3.1"",
+    ""path-to-regexp"": ""0.1.7"",
+    ""proxy-addr"": ""~1.0.10"",
-    ""range-parser"": ""~1.0.2"",
-    ""send"": ""0.13.0"",
-    ""serve-static"": ""~1.10.0"",
-    ""type-is"": ""~1.6.4"",
-    ""vary"": ""~1.0.0"",
-    ""utils-merge"": ""1.0.0""
+    ""range-parser"": ""~1.0.3"",
+    ""send"": ""0.13.1"",
+    ""serve-static"": ""~1.10.2"",
+    ""type-is"": ""~1.6.6"",
+    ""utils-merge"": ""1.0.0"",
+    ""vary"": ""~1.0.1""
-    ""ejs"": ""2.3.2"",
-    ""istanbul"": ""0.3.9"",
-    ""marked"": ""0.3.3"",
-    ""mocha"": ""2.2.5"",
-    ""should"": ""7.0.1"",
-    ""supertest"": ""1.0.1"",
-    ""body-parser"": ""~1.13.2"",
-    ""connect-redis"": ""~2.3.0"",
-    ""cookie-parser"": ""~1.3.5"",
+    ""ejs"": ""2.3.4"",
+    ""istanbul"": ""0.4.2"",
+    ""marked"": ""0.3.5"",
+    ""mocha"": ""2.3.4"",
+    ""should"": ""7.1.1"",
+    ""supertest"": ""1.1.0"",
+    ""body-parser"": ""~1.14.2"",
+    ""connect-redis"": ""~2.4.1"",
+    ""cookie-parser"": ""~1.4.1"",
-    ""express-session"": ""~1.11.3"",
+    ""express-session"": ""~1.13.0"",
-    ""method-override"": ""~2.3.3"",
+    ""method-override"": ""~2.3.5"",
-    ""vhost"": ""~3.0.0""
+    ""vhost"": ""~3.0.1""","-  ""version"": ""4.13.1"",
+  ""version"": ""5.0.0-alpha.2"",
-  ""repository"": ""strongloop/express"",
-  ""homepage"": ""http://expressjs.com/"",
+  ""repository"": ""expressjs/express"",
-    ""accepts"": ""~1.2.10"",
-    ""array-flatten"": ""1.1.0"",
-    ""content-disposition"": ""0.5.0"",
+    ""accepts"": ""~1.2.12"",
+    ""array-flatten"": ""1.1.1"",
+    ""content-disposition"": ""0.5.1"",
-    ""cookie"": ""0.1.3"",
+    ""cookie"": ""0.1.5"",
-    ""depd"": ""~1.0.1"",
-    ""escape-html"": ""1.0.2"",
+    ""depd"": ""~1.1.0"",
+    ""escape-html"": ""~1.0.3"",
-    ""finalhandler"": ""0.4.0"",
+    ""finalhandler"": ""0.4.1"",
-    ""merge-descriptors"": ""1.0.0"",
-    ""methods"": ""~1.1.1"",
+    ""merge-descriptors"": ""1.0.1"",
+    ""methods"": ""~1.1.2"",
-    ""parseurl"": ""~1.3.0"",
-    ""path-to-regexp"": ""0.1.6"",
-    ""proxy-addr"": ""~1.0.8"",
+    ""parseurl"": ""~1.3.1"",
+    ""path-is-absolute"": ""1.0.0"",
+    ""path-to-regexp"": ""0.1.7"",
+    ""proxy-addr"": ""~1.0.10"",
-    ""range-parser"": ""~1.0.2"",
-    ""send"": ""0.13.0"",
-    ""serve-static"": ""~1.10.0"",
-    ""type-is"": ""~1.6.4"",
-    ""vary"": ""~1.0.0"",
-    ""utils-merge"": ""1.0.0""
+    ""range-parser"": ""~1.0.3"",
+    ""router"": ""~1.1.2"",
+    ""send"": ""0.13.1"",
+    ""serve-static"": ""~1.10.2"",
+    ""type-is"": ""~1.6.6"",
+    ""utils-merge"": ""1.0.0"",
+    ""vary"": ""~1.0.1""
-    ""ejs"": ""2.3.2"",
-    ""istanbul"": ""0.3.9"",
-    ""marked"": ""0.3.3"",
-    ""mocha"": ""2.2.5"",
-    ""should"": ""7.0.1"",
-    ""supertest"": ""1.0.1"",
-    ""body-parser"": ""~1.13.2"",
-    ""connect-redis"": ""~2.3.0"",
-    ""cookie-parser"": ""~1.3.5"",
+    ""ejs"": ""2.3.4"",
+    ""istanbul"": ""0.4.2"",
+    ""marked"": ""0.3.5"",
+    ""mocha"": ""2.3.4"",
+    ""should"": ""7.1.1"",
+    ""supertest"": ""1.1.0"",
+    ""body-parser"": ""~1.14.2"",
+    ""connect-redis"": ""~2.4.1"",
+    ""cookie-parser"": ""~1.4.1"",
-    ""express-session"": ""~1.11.3"",
+    ""express-session"": ""~1.13.0"",
-    ""method-override"": ""~2.3.3"",
+    ""method-override"": ""~2.3.5"",
-    ""vhost"": ""~3.0.0""
+    ""vhost"": ""~3.0.1"""
expressjs_express,7cafdb5824a15a26fe10a3599f26ab84698093d8,Merge tag '4.13.4',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);","+    it('should merge numeric indices req.params when parent has same number', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/name:(\\w+)', function(req, res){
+        var keys = Object.keys(req.params).sort();
+        res.send(keys.map(function(k){ return [k, req.params[k]] }));
+      });
+
+      app.use('/user/id:(\\d+)', router);
+
+      request(app)
+      .get('/user/id:10/name:tj')
+      .expect(200, '[[""0"",""10""],[""1"",""tj""]]', done);
+    })
+
+    })
+
+    it('should restore req.params', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/user:(\\w+)/*', function (req, res, next) {
+        next();
+      });
+
+      app.use('/user/id:(\\d+)', function (req, res, next) {
+        router(req, res, function (err) {
+          var keys = Object.keys(req.params).sort();
+          res.send(keys.map(function(k){ return [k, req.params[k]] }));
+        });
+      });
+
+      request(app)
+      .get('/user/id:42/user:tj/profile')
+      .expect(200, '[[""0"",""42""]]', done);
+    it('should work inside literal paranthesis', function(done){
+      var app = express();
+
+      app.get('/:user\\(:op\\)', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user);
+      });
+
+      request(app)
+      .get('/tj(edit)')
+      .expect('editing tj', done);
+    })
+","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
-        app[method].bind(app, '/', 3).should.throw(/Number/);
+        assert.throws(app[method].bind(app, '/', 3), /argument handler must be a function/);
+    it('should merge numeric indices req.params when parent has same number', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/name:(\\w+)', function(req, res){
+        var keys = Object.keys(req.params).sort();
+        res.send(keys.map(function(k){ return [k, req.params[k]] }));
+      });
+
+      app.use('/user/id:(\\d+)', router);
+
+      request(app)
+      .get('/user/id:10/name:tj')
+      .expect(200, '[[""0"",""10""],[""1"",""tj""]]', done);
+    })
+
+    })
+
+    it('should restore req.params', function(done){
+      var app = express();
+      var router = new express.Router({ mergeParams: true });
+
+      router.get('/user:(\\w+)/*', function (req, res, next) {
+        next();
+      });
+
+      app.use('/user/id:(\\d+)', function (req, res, next) {
+        router(req, res, function (err) {
+          var keys = Object.keys(req.params).sort();
+          res.send(keys.map(function(k){ return [k, req.params[k]] }));
+        });
+      });
+
+      request(app)
+      .get('/user/id:42/user:tj/profile')
+      .expect(200, '[[""0"",""42""]]', done);
+    it('should work inside literal paranthesis', function(done){
+      var app = express();
+
+      app.get('/:user\\(:op\\)', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user);
+      });
+
+      request(app)
+      .get('/tj(edit)')
+      .expect('editing tj', done);
+    })
+"
expressjs_express,7cafdb5824a15a26fe10a3599f26ab84698093d8,Merge tag '4.13.4',test/app.routes.error.js,"-        res.send(204);
+        res.sendStatus(204);","+    it('should not get invoked without error handler on error', function(done) {
+      var app = express();
+
+      app.use(function(req, res, next){
+        next(new Error('boom!'))
+      });
+
+      app.get('/bar', function(req, res){
+        res.send('hello, world!');
+      });
+
+      request(app)
+      .post('/bar')
+      .expect(500, /Error: boom!/, done);
+    });
+","+    it('should not get invoked without error handler on error', function(done) {
+      var app = express();
+
+      app.use(function(req, res, next){
+        next(new Error('boom!'))
+      });
+
+      app.get('/bar', function(req, res){
+        res.send('hello, world!');
+      });
+
+      request(app)
+      .post('/bar')
+      .expect(500, /Error: boom!/, done);
+    });
+
-        res.send(204);
+        res.sendStatus(204);"
expressjs_express,7cafdb5824a15a26fe10a3599f26ab84698093d8,Merge tag '4.13.4',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","+  describe('.send()', function(){
+    it('should set body to """"', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send();
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, '', done);
+    })
+  })
+","+  describe('.send()', function(){
+    it('should set body to """"', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send();
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, '', done);
+    })
+  })
+
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');"
expressjs_express,9848645a8e2d5b3c02d54cab4070d51710603d3e,Merge tag '3.21.2',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.21.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.13.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""~1.0.3"",
-    ""connect"": ""2.30.1"",
+    ""accepts"": ""~1.2.10"",
+    ""array-flatten"": ""1.1.1"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.4.0"",
-    ""mkdirp"": ""0.5.1"",
+    ""on-finished"": ""~2.3.0"",
+    ""path-to-regexp"": ""0.1.6"",
+    ""qs"": ""4.0.0"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.4"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""supertest"": ""1.0.1""
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.13.2"",
+    ""connect-redis"": ""~2.4.1"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.2.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
+    ""method-override"": ""~2.3.4"",
+    ""morgan"": ""~1.6.1"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.1""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.21.1"",
+  ""version"": ""3.21.2"",
-    ""connect"": ""2.30.1"",
+    ""connect"": ""2.30.2"",
-    ""vary"": ""~1.0.0""
+    ""vary"": ""~1.0.1""
-    ""ejs"": ""2.3.2"",
+    ""ejs"": ""2.3.3"",
-    ""marked"": ""0.3.3"",
+    ""marked"": ""0.3.5"",
-    ""should"": ""7.0.1"",
+    ""should"": ""7.0.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.21.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.13.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""~1.0.3"",
-    ""connect"": ""2.30.1"",
+    ""accepts"": ""~1.2.10"",
+    ""array-flatten"": ""1.1.1"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.4.0"",
-    ""mkdirp"": ""0.5.1"",
+    ""on-finished"": ""~2.3.0"",
+    ""path-to-regexp"": ""0.1.6"",
+    ""qs"": ""4.0.0"",
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.4"",
-    ""vary"": ""~1.0.0""
+    ""vary"": ""~1.0.1""
-    ""connect-redis"": ""~1.5.0"",
-    ""ejs"": ""2.3.2"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.3.3"",
-    ""marked"": ""0.3.3"",
+    ""marked"": ""0.3.5"",
-    ""should"": ""7.0.1"",
-    ""supertest"": ""1.0.1""
+    ""should"": ""7.0.2"",
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.13.2"",
+    ""connect-redis"": ""~2.4.1"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.2.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
+    ""method-override"": ""~2.3.4"",
+    ""morgan"": ""~1.6.1"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.1""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',lib/application.js,"-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+app.route = function route(path) {
+  return this.router.route(path);
-app.param = function(name, fn){
-  this.lazyrouter();
-
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","+'use strict';
+
- * @api private
+ * @private
-var flatten = require('./utils').flatten;
+var flatten = require('array-flatten');
- * @api private
+ * @private
- * @api private
- */
-
-app.init = function(){
+ * @private
+ */
+
+app.init = function init() {
+  this.engines = {};
-  this.engines = {};
+
- *
- * @api private
- */
-
-app.defaultConfiguration = function(){
+ * @private
+ */
+
+app.defaultConfiguration = function defaultConfiguration() {
+  var env = process.env.NODE_ENV || 'development';
+
-  var env = process.env.NODE_ENV || 'development';
- * @api private
- */
-app.lazyrouter = function() {
+ * @private
+ */
+app.lazyrouter = function lazyrouter() {
- * If no _done_ callback is provided, then default error handlers will respond
+ * If no callback is provided, then default error handlers will respond
- * @api private
- */
-
-app.handle = function(req, res, done) {
+ * @private
+ */
+
+app.handle = function handle(req, res, callback) {
-  done = done || finalhandler(req, res, {
+  var done = callback || finalhandler(req, res, {
- * @api public
+ * @public
- * @api public
- */
-
-app.route = function(path){
+ * @public
+ */
+
+app.route = function route(path) {
- * @api public
- */
-
-app.engine = function(ext, fn){
-  if ('function' != typeof fn) throw new Error('callback function required');
-  if ('.' != ext[0]) ext = '.' + ext;
-  this.engines[ext] = fn;
+ * @public
+ */
+
+app.engine = function engine(ext, fn) {
+  if (typeof fn !== 'function') {
+    throw new Error('callback function required');
+  }
+
+  // get file extension
+  var extension = ext[0] !== '.'
+    ? '.' + ext
+    : ext;
+
+  // store engine
+  this.engines[extension] = fn;
+
- * @api public
- */
-
-app.param = function(name, fn){
+ * @public
+ */
+
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
+
+
- * @api public
- */
-
-app.set = function(setting, val){
+ * @public
+ */
+
+app.set = function set(setting, val) {
+  debug('set ""%s"" to %o', setting, val);
+
-      debug('compile etag %s', val);
-      debug('compile query parser %s', val);
-      debug('compile trust proxy %s', val);
- * @api private
- */
-
-app.path = function(){
+ * @private
+ */
+
+app.path = function path() {
- * @api public
- */
-
-app.enabled = function(setting){
-  return !!this.set(setting);
+ * @public
+ */
+
+app.enabled = function enabled(setting) {
+  return Boolean(this.set(setting));
- * @api public
- */
-
-app.disabled = function(setting){
+ * @public
+ */
+
+app.disabled = function disabled(setting) {
- * @api public
- */
-
-app.enable = function(setting){
+ * @public
+ */
+
+app.enable = function enable(setting) {
- * @api public
- */
-
-app.disable = function(setting){
+ * @public
+ */
+
+app.disable = function disable(setting) {
-    if ('get' == method && 1 == arguments.length) return this.set(path);
+    if (method === 'get' && arguments.length === 1) {
+      // app.get(setting)
+      return this.set(path);
+    }
- * @api public
- */
-
-app.all = function(path){
+ * @public
+ */
+
+app.all = function all(path) {
-  methods.forEach(function(method){
-    route[method].apply(route, args);
-  });
+
+  for (var i = 0; i < methods.length; i++) {
+    route[methods[i]].apply(route, args);
+  }
- * @param {Function} fn
- * @api public
- */
-
-app.render = function(name, options, fn){
-  var opts = {};
+ * @param {Function} callback
+ * @public
+ */
+
+app.render = function render(name, options, callback) {
+  var done = callback;
+  var opts = options;
+  var renderOptions = {};
-  if ('function' == typeof options) {
-    fn = options, options = {};
+  if (typeof options === 'function') {
+    done = options;
+    opts = {};
-  merge(opts, this.locals);
+  merge(renderOptions, this.locals);
-  if (options._locals) {
-    merge(opts, options._locals);
+  if (opts._locals) {
+    merge(renderOptions, opts._locals);
-  merge(opts, options);
+  merge(renderOptions, opts);
-  opts.cache = null == opts.cache
-    ? this.enabled('view cache')
-    : opts.cache;
+  if (renderOptions.cache == null) {
+    renderOptions.cache = this.enabled('view cache');
+  }
-  if (opts.cache) view = cache[name];
+  if (renderOptions.cache) {
+    view = cache[name];
+  }
-    view = new (this.get('view'))(name, {
+    var View = this.get('view');
+
+    view = new View(name, {
-      return fn(err);
+      return done(err);
-    if (opts.cache) cache[name] = view;
+    if (renderOptions.cache) {
+      cache[name] = view;
+    }
-  try {
-    view.render(opts, fn);
-  } catch (err) {
-    fn(err);
-  }
+  tryRender(view, renderOptions, done);
- * @api public
- */
-
-app.listen = function(){
+ * @public
+ */
+
+app.listen = function listen() {
-* Log error using console.error.
-*
-* @param {Error} err
-* @api private
-*/
-
-function logerror(err){
+ * Log error using console.error.
+ *
+ * @param {Error} err
+ * @private
+ */
+
+function logerror(err) {
+  /* istanbul ignore next */
+
+/**
+ * Try rendering a view.
+ * @private
+ */
+
+function tryRender(view, options, callback) {
+  try {
+    view.render(options, callback);
+  } catch (err) {
+    callback(err);
+  }
+}","+'use strict';
+
- * @api private
+ * @private
-var flatten = require('./utils').flatten;
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+var flatten = require('array-flatten');
- * @api private
+ * @private
- * @api private
- */
-
-app.init = function(){
+ * @private
+ */
+
+app.init = function init() {
+  var router = null;
+
+  this.engines = {};
-  this.engines = {};
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
- *
- * @api private
- */
-
-app.defaultConfiguration = function(){
+ * @private
+ */
+
+app.defaultConfiguration = function defaultConfiguration() {
+  var env = process.env.NODE_ENV || 'development';
+
-  var env = process.env.NODE_ENV || 'development';
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
- * If no _done_ callback is provided, then default error handlers will respond
+ * If no callback is provided, then default error handlers will respond
- * @api private
- */
-
-app.handle = function(req, res, done) {
-  var router = this._router;
-
+ * @private
+ */
+
+app.handle = function handle(req, res, callback) {
-  done = done || finalhandler(req, res, {
+  var done = callback || finalhandler(req, res, {
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
- * @api public
+ * @public
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
- * @api public
- */
-
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+ * @public
+ */
+
+app.route = function route(path) {
+  return this.router.route(path);
- * @api public
- */
-
-app.engine = function(ext, fn){
-  if ('function' != typeof fn) throw new Error('callback function required');
-  if ('.' != ext[0]) ext = '.' + ext;
-  this.engines[ext] = fn;
+ * @public
+ */
+
+app.engine = function engine(ext, fn) {
+  if (typeof fn !== 'function') {
+    throw new Error('callback function required');
+  }
+
+  // get file extension
+  var extension = ext[0] !== '.'
+    ? '.' + ext
+    : ext;
+
+  // store engine
+  this.engines[extension] = fn;
+
- * @api public
- */
-
-app.param = function(name, fn){
-  this.lazyrouter();
-
+ * @public
+ */
+
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
+
-  this._router.param(name, fn);
+  this.router.param(name, fn);
+
- * @api public
- */
-
-app.set = function(setting, val){
+ * @public
+ */
+
+app.set = function set(setting, val) {
+  debug('set ""%s"" to %o', setting, val);
+
-      debug('compile etag %s', val);
-      debug('compile query parser %s', val);
-      debug('compile trust proxy %s', val);
- * @api private
- */
-
-app.path = function(){
+ * @private
+ */
+
+app.path = function path() {
- * @api public
- */
-
-app.enabled = function(setting){
-  return !!this.set(setting);
+ * @public
+ */
+
+app.enabled = function enabled(setting) {
+  return Boolean(this.set(setting));
- * @api public
- */
-
-app.disabled = function(setting){
+ * @public
+ */
+
+app.disabled = function disabled(setting) {
- * @api public
- */
-
-app.enable = function(setting){
+ * @public
+ */
+
+app.enable = function enable(setting) {
- * @api public
- */
-
-app.disable = function(setting){
+ * @public
+ */
+
+app.disable = function disable(setting) {
-    if ('get' == method && 1 == arguments.length) return this.set(path);
-
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    if (method === 'get' && arguments.length === 1) {
+      // app.get(setting)
+      return this.set(path);
+    }
+
+    var route = this.route(path);
- * @api public
- */
-
-app.all = function(path){
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+ * @public
+ */
+
+app.all = function all(path) {
+  var route = this.route(path);
-  methods.forEach(function(method){
-    route[method].apply(route, args);
-  });
+
+  for (var i = 0; i < methods.length; i++) {
+    route[methods[i]].apply(route, args);
+  }
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
- * @param {Function} fn
- * @api public
- */
-
-app.render = function(name, options, fn){
-  var opts = {};
+ * @param {Function} callback
+ * @public
+ */
+
+app.render = function render(name, options, callback) {
+  var done = callback;
+  var opts = options;
+  var renderOptions = {};
-  if ('function' == typeof options) {
-    fn = options, options = {};
+  if (typeof options === 'function') {
+    done = options;
+    opts = {};
-  merge(opts, this.locals);
+  merge(renderOptions, this.locals);
-  if (options._locals) {
-    merge(opts, options._locals);
+  if (opts._locals) {
+    merge(renderOptions, opts._locals);
-  merge(opts, options);
+  merge(renderOptions, opts);
-  opts.cache = null == opts.cache
-    ? this.enabled('view cache')
-    : opts.cache;
+  if (renderOptions.cache == null) {
+    renderOptions.cache = this.enabled('view cache');
+  }
-  if (opts.cache) view = cache[name];
+  if (renderOptions.cache) {
+    view = cache[name];
+  }
-    view = new (this.get('view'))(name, {
+    var View = this.get('view');
+
+    view = new View(name, {
-      return fn(err);
+      return done(err);
-    if (opts.cache) cache[name] = view;
+    if (renderOptions.cache) {
+      cache[name] = view;
+    }
-  try {
-    view.render(opts, fn);
-  } catch (err) {
-    fn(err);
-  }
+  tryRender(view, renderOptions, done);
- * @api public
- */
-
-app.listen = function(){
+ * @public
+ */
+
+app.listen = function listen() {
-* Log error using console.error.
-*
-* @param {Error} err
-* @api private
-*/
-
-function logerror(err){
+ * Log error using console.error.
+ *
+ * @param {Error} err
+ * @private
+ */
+
+function logerror(err) {
+  /* istanbul ignore next */
+
+/**
+ * Try rendering a view.
+ * @private
+ */
+
+function tryRender(view, options, callback) {
+  try {
+    view.render(options, callback);
+  } catch (err) {
+    callback(err);
+  }
+}"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',lib/express.js,"-exports.query = require('./middleware/query');
+  'query',","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
-exports.query = require('./middleware/query');
+  'query',"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',lib/request.js,"-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+ * @private
- * @api public
+ * @public
-req.header = function(name){
-  switch (name = name.toLowerCase()) {
+req.header = function header(name) {
+  var lc = name.toLowerCase();
+
+  switch (lc) {
-      return this.headers[name];
+      return this.headers[lc];
- * @return {String}
- * @api public
+ * @return {String|Array|Boolean}
+ * @public
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
- * @param {String} type
- * @return {Boolean}
- * @api public
- */
-
-req.is = function(types){
-  if (!Array.isArray(types)) types = [].slice.call(arguments);
-  return typeis(this, types);
+ * @param {String|Array} types...
+ * @return {String|false|null}
+ * @public
+ */
+
+req.is = function is(types) {
+  var arr = types;
+
+  // support flattened arguments
+  if (!Array.isArray(types)) {
+    arr = new Array(arguments.length);
+    for (var i = 0; i < arr.length; i++) {
+      arr[i] = arguments[i];
+    }
+  }
+
+  return typeis(this, arr);
- * @api public
+ * @public
- * @api public
+ * @public
-  return 'https' == this.protocol;
+  return this.protocol === 'https';
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
-  return ~index
+  return index !== -1
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
-  return 'xmlhttprequest' == val.toLowerCase();
+  return val.toLowerCase() === 'xmlhttprequest';
- * @api private
+ * @private","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+'use strict';
+
+ * @private
- * @api public
+ * @public
-req.header = function(name){
-  switch (name = name.toLowerCase()) {
+req.header = function header(name) {
+  var lc = name.toLowerCase();
+
+  switch (lc) {
-      return this.headers[name];
+      return this.headers[lc];
- * @return {String}
- * @api public
+ * @return {String|Array|Boolean}
+ * @public
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
- * @return {Boolean}
- * @api public
+ * @return {String|Array}
+ * @public
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
- * @api public
+ * @public
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
- * @api public
+ * @public
- * @param {String} type
- * @return {Boolean}
- * @api public
- */
-
-req.is = function(types){
-  if (!Array.isArray(types)) types = [].slice.call(arguments);
-  return typeis(this, types);
+ * @param {String|Array} types...
+ * @return {String|false|null}
+ * @public
+ */
+
+req.is = function is(types) {
+  var arr = types;
+
+  // support flattened arguments
+  if (!Array.isArray(types)) {
+    arr = new Array(arguments.length);
+    for (var i = 0; i < arr.length; i++) {
+      arr[i] = arguments[i];
+    }
+  }
+
+  return typeis(this, arr);
- * @api public
+ * @public
- * @api public
+ * @public
-  return 'https' == this.protocol;
+  return this.protocol === 'https';
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+ * @public
+ */
+
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress, 0)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-  return ~index
+  return index !== -1
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
-  return 'xmlhttprequest' == val.toLowerCase();
+  return val.toLowerCase() === 'xmlhttprequest';
- * @api private
+ * @private"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',lib/response.js,"-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","+'use strict';
+
- * @api private
+ * @private
+ * Module variables.
+ * @private
+ */
+
+var charsetRegExp = /;\s*charset\s*=/;
+
+/**
- * @api public
- */
-
-res.status = function(code){
+ * @public
+ */
+
+res.status = function status(code) {
- * @api public
+ * @public
- * @api public
+ * @public
-    chunk = http.STATUS_CODES[chunk];
+    chunk = statusCodes[chunk];
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
+ * @public
-  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+  var body = statusCodes[statusCode] || String(statusCode);
- * The callback `fn(err)` is invoked when the transfer is complete
+ * The callback `callback(err)` is invoked when the transfer is complete
- * @api public
- */
-
-res.sendFile = function sendFile(path, options, fn) {
+ * @public
+ */
+
+res.sendFile = function sendFile(path, options, callback) {
+  var done = callback;
+  var opts = options || {};
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  if (!options.root && !isAbsolute(path)) {
+    done = options;
+    opts = {};
+  }
+
+  if (!opts.root && !isAbsolute(path)) {
-  var file = send(req, pathname, options);
+  var file = send(req, pathname, opts);
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
+  sendfile(res, file, opts, function (err) {
+    if (done) return done(err);
- * The callback `fn(err)` is invoked when the transfer is complete
+ * The callback `callback(err)` is invoked when the transfer is complete
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
+ * @public
+ */
+
+res.sendfile = function (path, options, callback) {
+  var done = callback;
+  var opts = options || {};
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
+    done = options;
+    opts = {};
+  }
-  var file = send(req, path, options);
+  var file = send(req, path, opts);
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
+  sendfile(res, file, opts, function (err) {
+    if (done) return done(err);
- * and optional callback `fn(err)`. The callback is invoked
+ * and optional callback `callback(err)`. The callback is invoked
- * @api public
- */
-
-res.download = function download(path, filename, fn) {
+ * @public
+ */
+
+res.download = function download(path, filename, callback) {
+  var done = callback;
+  var name = filename;
+
-    fn = filename;
-    filename = null;
-  }
-
-  filename = filename || path;
+    done = filename;
+    name = null;
+  }
-    'Content-Disposition': contentDisposition(filename)
+    'Content-Disposition': contentDisposition(name || path)
-  return this.sendFile(fullPath, { headers: headers }, fn);
+  return this.sendFile(fullPath, { headers: headers }, done);
- * @api public
+ * @public
-res.type = function(type){
-  return this.set('Content-Type', ~type.indexOf('/')
-    ? type
-    : mime.lookup(type));
+res.type = function contentType(type) {
+  var ct = type.indexOf('/') === -1
+    ? mime.lookup(type)
+    : type;
+
+  return this.set('Content-Type', ct);
- * @api public
+ * @public
-  var key = req.accepts(keys);
+  var key = keys.length > 0
+    ? req.accepts(keys)
+    : false;
-    err.status = 406;
+    err.status = err.statusCode = 406;
- * @api public
+ * @public
- * @api public
+ * @public
- * @param {String|Object|Array} field
- * @param {String} val
+ * @param {String|Object} field
+ * @param {String|Array} val
- * @api public
+ * @public
-    if (Array.isArray(val)) val = val.map(String);
-    else val = String(val);
-    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
-      var charset = mime.charsets.lookup(val.split(';')[0]);
-      if (charset) val += '; charset=' + charset.toLowerCase();
-    }
-    this.setHeader(field, val);
+    var value = Array.isArray(val)
+      ? val.map(String)
+      : String(val);
+
+    // add charset to content-type
+    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
+      var charset = mime.charsets.lookup(value.split(';')[0]);
+      if (charset) value += '; charset=' + charset.toLowerCase();
+    }
+
+    this.setHeader(field, value);
- * @api public
+ * @public
- * @api public
- */
-
-res.clearCookie = function(name, options){
-  var opts = { expires: new Date(1), path: '/' };
-  return this.cookie(name, '', options
-    ? merge(opts, options)
-    : opts);
-};
-
-/**
- * Set cookie `name` to `val`, with the given `options`.
+ * @public
+ */
+
+res.clearCookie = function clearCookie(name, options) {
+  var opts = merge({ expires: new Date(1), path: '/' }, options);
+
+  return this.cookie(name, '', opts);
+};
+
+/**
+ * Set cookie `name` to `value`, with the given `options`.
- * @param {String|Object} val
+ * @param {String|Object} value
- * @api public
- */
-
-res.cookie = function(name, val, options){
-  options = merge({}, options);
+ * @public
+ */
+
+res.cookie = function (name, value, options) {
+  var opts = merge({}, options);
-  var signed = options.signed;
-  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  if ('number' == typeof val) val = val.toString();
-  if ('object' == typeof val) val = 'j:' + JSON.stringify(val);
-  if (signed) val = 's:' + sign(val, secret);
-  if ('maxAge' in options) {
-    options.expires = new Date(Date.now() + options.maxAge);
-    options.maxAge /= 1000;
-  }
-  if (null == options.path) options.path = '/';
-  var headerVal = cookie.serialize(name, String(val), options);
-
-  // supports multiple 'res.cookie' calls by getting previous value
-  var prev = this.get('Set-Cookie');
-  if (prev) {
-    if (Array.isArray(prev)) {
-      headerVal = prev.concat(headerVal);
-    } else {
-      headerVal = [prev, headerVal];
-    }
-  }
-  this.set('Set-Cookie', headerVal);
+  var signed = opts.signed;
+
+  if (signed && !secret) {
+    throw new Error('cookieParser(""secret"") required for signed cookies');
+  }
+
+  var val = typeof value === 'object'
+    ? 'j:' + JSON.stringify(value)
+    : String(value);
+
+  if (signed) {
+    val = 's:' + sign(val, secret);
+  }
+
+  if ('maxAge' in opts) {
+    opts.expires = new Date(Date.now() + opts.maxAge);
+    opts.maxAge /= 1000;
+  }
+
+  if (opts.path == null) {
+    opts.path = '/';
+  }
+
+  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));
+
-
- * @api public
- */
-
-res.location = function(url){
-  var req = this.req;
+ * @public
+ */
+
+res.location = function location(url) {
+  var loc = url;
-  if ('back' == url) url = req.get('Referrer') || '/';
-
-  // Respond
-  this.set('Location', url);
+  if (url === 'back') {
+    loc = this.req.get('Referrer') || '/';
+  }
+
+  // set location
+  this.set('Location', loc);
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
- */
-
-res.render = function(view, options, fn){
-  options = options || {};
+ * @public
+ */
+
+res.render = function render(view, options, callback) {
+  var app = this.req.app;
+  var done = callback;
+  var opts = options || {};
+  var req = this.req;
-  var req = this.req;
-  var app = req.app;
-  if ('function' == typeof options) {
-    fn = options, options = {};
+  if (typeof options === 'function') {
+    done = options;
+    opts = {};
-  options._locals = self.locals;
+  opts._locals = self.locals;
-  fn = fn || function(err, str){
+  done = done || function (err, str) {
-  app.render(view, options, fn);
+  app.render(view, opts, done);","+'use strict';
+
- * @api private
+ * @private
+ * Module variables.
+ * @private
+ */
+
+var charsetRegExp = /;\s*charset\s*=/;
+
+/**
- * @api public
- */
-
-res.status = function(code){
+ * @public
+ */
+
+res.status = function status(code) {
- * @api public
+ * @public
- * @api public
+ * @public
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
- * @api public
+ * @public
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * @api public
+ * @public
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * @api public
+ * @public
-  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+  var body = statusCodes[statusCode] || String(statusCode);
- * The callback `fn(err)` is invoked when the transfer is complete
+ * The callback `callback(err)` is invoked when the transfer is complete
- * @api public
- */
-
-res.sendFile = function sendFile(path, options, fn) {
+ * @public
+ */
+
+res.sendFile = function sendFile(path, options, callback) {
+  var done = callback;
+  var opts = options || {};
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  if (!options.root && !isAbsolute(path)) {
+    done = options;
+    opts = {};
+  }
+
+  if (!opts.root && !isAbsolute(path)) {
-  var file = send(req, pathname, options);
+  var file = send(req, pathname, opts);
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
+  sendfile(res, file, opts, function (err) {
+    if (done) return done(err);
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * and optional callback `fn(err)`. The callback is invoked
+ * and optional callback `callback(err)`. The callback is invoked
- * This method uses `res.sendfile()`.
- *
- * @api public
- */
-
-res.download = function download(path, filename, fn) {
+ * This method uses `res.sendFile()`.
+ *
+ * @public
+ */
+
+res.download = function download(path, filename, callback) {
+  var done = callback;
+  var name = filename;
+
-    fn = filename;
-    filename = null;
-  }
-
-  filename = filename || path;
+    done = filename;
+    name = null;
+  }
-    'Content-Disposition': contentDisposition(filename)
+    'Content-Disposition': contentDisposition(name || path)
-  return this.sendFile(fullPath, { headers: headers }, fn);
+  return this.sendFile(fullPath, { headers: headers }, done);
- * @api public
+ * @public
-res.type = function(type){
-  return this.set('Content-Type', ~type.indexOf('/')
-    ? type
-    : mime.lookup(type));
+res.type = function contentType(type) {
+  var ct = type.indexOf('/') === -1
+    ? mime.lookup(type)
+    : type;
+
+  return this.set('Content-Type', ct);
- * @api public
+ * @public
-  var key = req.accepts(keys);
+  var key = keys.length > 0
+    ? req.accepts(keys)
+    : false;
-    err.status = 406;
+    err.status = err.statusCode = 406;
- * @api public
+ * @public
- * @api public
+ * @public
- * @param {String|Object|Array} field
- * @param {String} val
+ * @param {String|Object} field
+ * @param {String|Array} val
- * @api public
+ * @public
-    if (Array.isArray(val)) val = val.map(String);
-    else val = String(val);
-    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
-      var charset = mime.charsets.lookup(val.split(';')[0]);
-      if (charset) val += '; charset=' + charset.toLowerCase();
+    var value = Array.isArray(val)
+      ? val.map(String)
+      : String(val);
+
+    // add charset to content-type
+    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {
+      var charset = mime.charsets.lookup(value.split(';')[0]);
+      if (charset) value += '; charset=' + charset.toLowerCase();
-    this.setHeader(field, val);
+
+    this.setHeader(field, value);
- * @api public
+ * @public
- * @api public
- */
-
-res.clearCookie = function(name, options){
-  var opts = { expires: new Date(1), path: '/' };
-  return this.cookie(name, '', options
-    ? merge(opts, options)
-    : opts);
-};
-
-/**
- * Set cookie `name` to `val`, with the given `options`.
+ * @public
+ */
+
+res.clearCookie = function clearCookie(name, options) {
+  var opts = merge({ expires: new Date(1), path: '/' }, options);
+
+  return this.cookie(name, '', opts);
+};
+
+/**
+ * Set cookie `name` to `value`, with the given `options`.
- * @param {String|Object} val
+ * @param {String|Object} value
- * @api public
- */
-
-res.cookie = function(name, val, options){
-  options = merge({}, options);
+ * @public
+ */
+
+res.cookie = function (name, value, options) {
+  var opts = merge({}, options);
-  var signed = options.signed;
-  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  if ('number' == typeof val) val = val.toString();
-  if ('object' == typeof val) val = 'j:' + JSON.stringify(val);
-  if (signed) val = 's:' + sign(val, secret);
-  if ('maxAge' in options) {
-    options.expires = new Date(Date.now() + options.maxAge);
-    options.maxAge /= 1000;
-  }
-  if (null == options.path) options.path = '/';
-  var headerVal = cookie.serialize(name, String(val), options);
-
-  // supports multiple 'res.cookie' calls by getting previous value
-  var prev = this.get('Set-Cookie');
-  if (prev) {
-    if (Array.isArray(prev)) {
-      headerVal = prev.concat(headerVal);
-    } else {
-      headerVal = [prev, headerVal];
-    }
-  }
-  this.set('Set-Cookie', headerVal);
+  var signed = opts.signed;
+
+  if (signed && !secret) {
+    throw new Error('cookieParser(""secret"") required for signed cookies');
+  }
+
+  var val = typeof value === 'object'
+    ? 'j:' + JSON.stringify(value)
+    : String(value);
+
+  if (signed) {
+    val = 's:' + sign(val, secret);
+  }
+
+  if ('maxAge' in opts) {
+    opts.expires = new Date(Date.now() + opts.maxAge);
+    opts.maxAge /= 1000;
+  }
+
+  if (opts.path == null) {
+    opts.path = '/';
+  }
+
+  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));
+
-
- * @api public
- */
-
-res.location = function(url){
-  var req = this.req;
+ * @public
+ */
+
+res.location = function location(url) {
+  var loc = url;
-  if ('back' == url) url = req.get('Referrer') || '/';
-
-  // Respond
-  this.set('Location', url);
+  if (url === 'back') {
+    loc = this.req.get('Referrer') || '/';
+  }
+
+  // set location
+  this.set('Location', loc);
- * @api public
+ * @public
- * @api public
+ * @public
- * @api public
- */
-
-res.render = function(view, options, fn){
-  options = options || {};
+ * @public
+ */
+
+res.render = function render(view, options, callback) {
+  var app = this.req.app;
+  var done = callback;
+  var opts = options || {};
+  var req = this.req;
-  var req = this.req;
-  var app = req.app;
-  if ('function' == typeof options) {
-    fn = options, options = {};
+  if (typeof options === 'function') {
+    done = options;
+    opts = {};
-  options._locals = self.locals;
+  opts._locals = self.locals;
-  fn = fn || function(err, str){
+  done = done || function (err, str) {
-  app.render(view, options, fn);
+  app.render(view, opts, done);"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',lib/utils.js,"-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var deprecate = require('depd')('express');
-var mime = require('send').mime;
-var basename = require('path').basename;
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
-/**
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","+'use strict';
+
+var flatten = require('array-flatten');
-exports.flatten = function(arr, ret){
-  ret = ret || [];
-  var len = arr.length;
-  for (var i = 0; i < len; ++i) {
-    if (Array.isArray(arr[i])) {
-      exports.flatten(arr[i], ret);
-    } else {
-      ret.push(arr[i]);
-    }
-  }
-  return ret;
-};
+exports.flatten = deprecate.function(flatten,
+  'utils.flatten: use array-flatten npm module instead');
-      fn = qs.parse;
+      fn = parseExtendedQueryString;
+ * Parse an extended query string with qs.
+ *
+ * @return {Object}
+ * @private
+ */
+
+function parseExtendedQueryString(str) {
+  return qs.parse(str, {
+    allowDots: false,
+    allowPrototypes: true
+  });
+}
+
+/**","+'use strict';
+
-var contentDisposition = require('content-disposition');
+var mime = require('send').mime;
-var mime = require('send').mime;
-var basename = require('path').basename;
+var flatten = require('array-flatten');
-exports.flatten = function(arr, ret){
-  ret = ret || [];
-  var len = arr.length;
-  for (var i = 0; i < len; ++i) {
-    if (Array.isArray(arr[i])) {
-      exports.flatten(arr[i], ret);
-    } else {
-      ret.push(arr[i]);
-    }
-  }
-  return ret;
-};
+exports.flatten = deprecate.function(flatten,
+  'utils.flatten: use array-flatten npm module instead');
-
-/**
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-      fn = newObject;
-      fn = qs.parse;
+      fn = parseExtendedQueryString;
- * Return new empty object.
+ * Parse an extended query string with qs.
- * @api private
- */
-
-function newObject() {
-  return {};
-}
+ * @private
+ */
+
+function parseExtendedQueryString(str) {
+  return qs.parse(str, {
+    allowDots: false,
+    allowPrototypes: true
+  });
+}"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',package.json,"-  ""version"": ""4.12.4"",
+  ""version"": ""5.0.0-alpha.1"",","-  ""version"": ""4.12.4"",
+  ""version"": ""4.13.1"",
-    ""accepts"": ""~1.2.7"",
+    ""accepts"": ""~1.2.10"",
+    ""array-flatten"": ""1.1.0"",
-    ""cookie"": ""0.1.2"",
+    ""cookie"": ""0.1.3"",
-    ""escape-html"": ""1.0.1"",
-    ""etag"": ""~1.6.0"",
-    ""finalhandler"": ""0.3.6"",
-    ""fresh"": ""0.2.4"",
+    ""escape-html"": ""1.0.2"",
+    ""etag"": ""~1.7.0"",
+    ""finalhandler"": ""0.4.0"",
+    ""fresh"": ""0.3.0"",
-    ""on-finished"": ""~2.2.1"",
+    ""on-finished"": ""~2.3.0"",
-    ""path-to-regexp"": ""0.1.3"",
+    ""path-to-regexp"": ""0.1.6"",
-    ""qs"": ""2.4.2"",
+    ""qs"": ""4.0.0"",
-    ""send"": ""0.12.3"",
-    ""serve-static"": ""~1.9.3"",
-    ""type-is"": ""~1.6.2"",
+    ""send"": ""0.13.0"",
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.4"",
-    ""ejs"": ""2.3.1"",
+    ""ejs"": ""2.3.2"",
-    ""should"": ""6.0.1"",
+    ""should"": ""7.0.1"",
-    ""body-parser"": ""~1.12.4"",
+    ""body-parser"": ""~1.13.2"",
-    ""cookie-parser"": ""~1.3.4"",
-    ""cookie-session"": ""~1.1.0"",
-    ""express-session"": ""~1.11.2"",
-    ""jade"": ""~1.9.2"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.2.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
-    ""morgan"": ""~1.5.3"",
+    ""morgan"": ""~1.6.1"",","-  ""version"": ""4.12.4"",
+  ""version"": ""5.0.0-alpha.1"",
-    ""accepts"": ""~1.2.7"",
+    ""accepts"": ""~1.2.10"",
+    ""array-flatten"": ""1.1.0"",
-    ""cookie"": ""0.1.2"",
+    ""cookie"": ""0.1.3"",
-    ""escape-html"": ""1.0.1"",
-    ""etag"": ""~1.6.0"",
-    ""finalhandler"": ""0.3.6"",
-    ""fresh"": ""0.2.4"",
+    ""escape-html"": ""1.0.2"",
+    ""etag"": ""~1.7.0"",
+    ""finalhandler"": ""0.4.0"",
+    ""fresh"": ""0.3.0"",
-    ""on-finished"": ""~2.2.1"",
+    ""on-finished"": ""~2.3.0"",
-    ""path-to-regexp"": ""0.1.3"",
+    ""path-to-regexp"": ""0.1.6"",
-    ""qs"": ""2.4.2"",
+    ""qs"": ""4.0.0"",
-    ""send"": ""0.12.3"",
-    ""serve-static"": ""~1.9.3"",
-    ""type-is"": ""~1.6.2"",
+    ""send"": ""0.13.0"",
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.4"",
-    ""ejs"": ""2.3.1"",
+    ""ejs"": ""2.3.2"",
-    ""should"": ""6.0.1"",
+    ""should"": ""7.0.1"",
-    ""body-parser"": ""~1.12.4"",
+    ""body-parser"": ""~1.13.2"",
-    ""cookie-parser"": ""~1.3.4"",
-    ""cookie-session"": ""~1.1.0"",
-    ""express-session"": ""~1.11.2"",
-    ""jade"": ""~1.9.2"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.2.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
-    ""morgan"": ""~1.5.3"",
+    ""morgan"": ""~1.6.1"","
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){","+
+    it('should keep correct parameter indexes', function(done){
+      var app = express();
+
+      app.get('/*/user/:id', function (req, res) {
+        res.send(req.params);
+      });
+
+      request(app)
+      .get('/1/user/2')
+      .expect(200, '{""0"":""1"",""id"":""2""}', done);
+    })
+
+    it('should work within arrays', function(done){
+      var app = express();
+
+      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
+        res.send(req.params.bar);
+      });
+
+      request(app)
+      .get('/test')
+      .expect(200, 'test', done);
+    })
+    })
+
+    it('should work following a partial capture group', function(done){
+      var app = express();
+      var cb = after(2, done);
+
+      app.get('/user(s)?/:user/:op', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user + (req.params[0] ? ' (old)' : ''));
+      });
+
+      request(app)
+      .get('/user/tj/edit')
+      .expect('editing tj', cb);
+
+      request(app)
+      .get('/users/tj/edit')
+      .expect('editing tj (old)', cb);","-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){
+
+    it('should keep correct parameter indexes', function(done){
+      var app = express();
+
+      app.get('/*/user/:id', function (req, res) {
+        res.send(req.params);
+      });
+
+      request(app)
+      .get('/1/user/2')
+      .expect(200, '{""0"":""1"",""id"":""2""}', done);
+    })
+
+    it('should work within arrays', function(done){
+      var app = express();
+
+      app.get(['/user/:id', '/foo/*', '/:bar'], function (req, res) {
+        res.send(req.params.bar);
+      });
+
+      request(app)
+      .get('/test')
+      .expect(200, 'test', done);
+    })
+    })
+
+    it('should work following a partial capture group', function(done){
+      var app = express();
+      var cb = after(2, done);
+
+      app.get('/user(s)?/:user/:op', function(req, res){
+        res.end(req.params.op + 'ing ' + req.params.user + (req.params[0] ? ' (old)' : ''));
+      });
+
+      request(app)
+      .get('/user/tj/edit')
+      .expect('editing tj', cb);
+
+      request(app)
+      .get('/users/tj/edit')
+      .expect('editing tj (old)', cb);"
expressjs_express,b309b873f115a87c7f8858353ee41087ac3e9269,Merge tag '4.13.1',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","-      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-        .expect('ETag', 'W/""0-0""')
+        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
-        .expect('ETag', 'W/""3e7-8084ccd1""')
+        .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
-        .expect('ETag', 'W/""d-58988d13""')
+        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')","-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-        .expect('ETag', 'W/""0-0""')
+        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
-        .expect('ETag', 'W/""3e7-8084ccd1""')
+        .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');
-        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
-        .expect('ETag', 'W/""d-58988d13""')
+        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')"
expressjs_express,1f906d4ffbb29e66a58564e6cf4e585b625d7593,Merge tag '3.21.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.21.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.13.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.2"",
-    ""connect"": ""2.30.0"",
+    ""accepts"": ""~1.2.9"",
+    ""array-flatten"": ""1.1.0"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.4.0"",
-    ""mkdirp"": ""0.5.1"",
+    ""on-finished"": ""~2.3.0"",
+    ""path-to-regexp"": ""0.1.6"",
+    ""qs"": ""2.4.2"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.3"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""supertest"": ""1.0.1""
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.13.1"",
+    ""connect-redis"": ""~2.3.0"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.6.0"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.21.0"",
+  ""version"": ""3.21.1"",
-    ""basic-auth"": ""1.0.2"",
-    ""connect"": ""2.30.0"",
+    ""basic-auth"": ""~1.0.3"",
+    ""connect"": ""2.30.1"",
-    ""ejs"": ""2.3.1"",
+    ""ejs"": ""2.3.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.21.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.13.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.2"",
-    ""connect"": ""2.30.0"",
+    ""accepts"": ""~1.2.9"",
+    ""array-flatten"": ""1.1.0"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.4.0"",
-    ""mkdirp"": ""0.5.1"",
+    ""on-finished"": ""~2.3.0"",
+    ""path-to-regexp"": ""0.1.6"",
+    ""qs"": ""2.4.2"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""serve-static"": ""~1.10.0"",
+    ""type-is"": ""~1.6.3"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""ejs"": ""2.3.1"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.3.2"",
-    ""supertest"": ""1.0.1""
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.13.1"",
+    ""connect-redis"": ""~2.3.0"",
+    ""cookie-parser"": ""~1.3.5"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.3"",
+    ""jade"": ""~1.11.0"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.6.0"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,3d2ecdd5fabf697c9e3d212356b557cbba618fe3,Merge tag '3.21.0',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.2"",
+    ""accepts"": ""~1.2.7"",
-    ""commander"": ""2.6.0"",
-    ""etag"": ""~1.5.1"",
+    ""etag"": ""~1.6.0"",
+    ""finalhandler"": ""0.3.6"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.4.2"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""serve-static"": ""~1.9.3"",
+    ""type-is"": ""~1.6.2"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""supertest"": ""1.0.1""
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.12.4"",
+    ""connect-redis"": ""~2.3.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.2"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.5.3"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.20.3"",
+  ""version"": ""3.21.0"",
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.2"",
+    ""basic-auth"": ""1.0.2"",
+    ""connect"": ""2.30.0"",
-    ""cookie"": ""0.1.2"",
+    ""cookie"": ""0.1.3"",
-    ""escape-html"": ""1.0.1"",
-    ""etag"": ""~1.5.1"",
-    ""fresh"": ""0.2.4"",
+    ""escape-html"": ""1.0.2"",
+    ""etag"": ""~1.7.0"",
+    ""fresh"": ""0.3.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""mkdirp"": ""0.5.1"",
-    ""send"": ""0.12.3"",
+    ""send"": ""0.13.0"",
-    ""should"": ""6.0.1"",
+    ""should"": ""7.0.1"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.2"",
+    ""accepts"": ""~1.2.7"",
-    ""commander"": ""2.6.0"",
-    ""cookie"": ""0.1.2"",
+    ""cookie"": ""0.1.3"",
-    ""escape-html"": ""1.0.1"",
-    ""etag"": ""~1.5.1"",
-    ""fresh"": ""0.2.4"",
+    ""escape-html"": ""1.0.2"",
+    ""etag"": ""~1.7.0"",
+    ""finalhandler"": ""0.3.6"",
+    ""fresh"": ""0.3.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.4.2"",
-    ""send"": ""0.12.3"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""send"": ""0.13.0"",
+    ""serve-static"": ""~1.9.3"",
+    ""type-is"": ""~1.6.2"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""6.0.1"",
-    ""supertest"": ""1.0.1""
+    ""should"": ""7.0.1"",
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.12.4"",
+    ""connect-redis"": ""~2.3.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.2"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.5.3"",
+    ""multiparty"": ""~4.1.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,3d2ecdd5fabf697c9e3d212356b557cbba618fe3,Merge tag '3.21.0',test/res.send.js,"-      .expect('', done);
+      .expect('Content-Length', '0')
+      .expect(200, '', done);
-      .expect('', done);
+      .expect(200, '', done);
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-8084ccd1""')
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-8084ccd1""')
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
+    var etag = '""asdf""';
-      var str = Array(1024 * 2).join('-');
+      var str = Array(1000).join('-');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+    .set('If-None-Match', etag)
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-        .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+        .expect('ETag', 'W/""3e7-8084ccd1""')
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-          body.should.equal('hello, world!');
-          encoding.should.equal('utf8');
+          var chunk = !Buffer.isBuffer(body)
+            ? new Buffer(body, encoding)
+            : body;
+          chunk.toString().should.equal('hello, world!');","-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""7ff-fFD7Se+Vsq6deAl063thow""')
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""7ff-fFD7Se+Vsq6deAl063thow""')
-    .set('If-None-Match', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+    .set('If-None-Match', 'W/""7ff-fFD7Se+Vsq6deAl063thow""')
-        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-        .expect('ETag', 'W/""0-0""')
+        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
-        .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+        .expect('ETag', 'W/""7ff-fFD7Se+Vsq6deAl063thow""')
-        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
-        .expect('ETag', 'W/""d-58988d13""')
+        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')","-      .expect('', done);
+      .expect('Content-Length', '0')
+      .expect(200, '', done);
-      .expect('', done);
+      .expect(200, '', done);
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
+    var etag = '""asdf""';
-      var str = Array(1024 * 2).join('-');
+      var str = Array(1000).join('-');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+    .set('If-None-Match', etag)
-        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect('ETag', 'W/""c-ZUfd0NJ26qwjlKF4r8qb2g""')
-        .expect('ETag', 'W/""0-0""')
+        .expect('ETag', 'W/""0-1B2M2Y8AsgTpgAmY7PhCfg""')
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-        .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+        .expect('ETag', 'W/""3e7-VYgCBglFKiDVAcpzPNt4Sg""')
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect('ETag', '""d-Otu60XkfuuPskIiUxJY4cA""')
-        .expect('ETag', 'W/""d-58988d13""')
+        .expect('ETag', 'W/""d-Otu60XkfuuPskIiUxJY4cA""')
-          body.should.equal('hello, world!');
-          encoding.should.equal('utf8');
+          var chunk = !Buffer.isBuffer(body)
+            ? new Buffer(body, encoding)
+            : body;
+          chunk.toString().should.equal('hello, world!');"
expressjs_express,3d2ecdd5fabf697c9e3d212356b557cbba618fe3,Merge tag '3.21.0',test/utils.js,"-var utils = require('../lib/utils')
-  , assert = require('assert');
+var assert = require('assert');
+var utils = require('../lib/utils');
+
+describe('utils.setCharset(type, charset)', function () {
+  it('should do anything without type', function () {
+    assert.strictEqual(utils.setCharset(), undefined);
+  });
+
+  it('should return type if not given charset', function () {
+    assert.strictEqual(utils.setCharset('text/html'), 'text/html');
+  });
+
+  it('should keep charset if not given charset', function () {
+    assert.strictEqual(utils.setCharset('text/html; charset=utf-8'), 'text/html; charset=utf-8');
+  });
+
+  it('should set charset', function () {
+    assert.strictEqual(utils.setCharset('text/html', 'utf-8'), 'text/html; charset=utf-8');
+  });
+
+  it('should override charset', function () {
+    assert.strictEqual(utils.setCharset('text/html; charset=iso-8859-1', 'utf-8'), 'text/html; charset=utf-8');
+  });
+});
-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-
-  describe('when params included', function(){
-    it('should match params', function(){
-      assert(null == utils.accepts('text/html; charset=us-ascii', 'text/html; charset=utf-8'));
-    })
-  })
-})","-    .should.eql('""zZdv4imtWD49AHEviejT6A==""')
+    .should.eql('""8-zZdv4imtWD49AHEviejT6A""')
-    .should.eql('""fsFba4IxwQS6h6Umb+FNxw==""')
+    .should.eql('""a-fsFba4IxwQS6h6Umb+FNxw""')
-    .should.eql('""zZdv4imtWD49AHEviejT6A==""');
+    .should.eql('""8-zZdv4imtWD49AHEviejT6A""');
-    .should.eql('""1B2M2Y8AsgTpgAmY7PhCfg==""');
+    .should.eql('""0-1B2M2Y8AsgTpgAmY7PhCfg""');
-    .should.eql('W/""8-b8aabac7""')
+    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""')
-    .should.eql('W/""a-686b0af1""')
+    .should.eql('W/""a-fsFba4IxwQS6h6Umb+FNxw""')
-    .should.eql('W/""8-b8aabac7""');
+    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""');
-    .should.eql('W/""0-0""');
+    .should.eql('W/""0-1B2M2Y8AsgTpgAmY7PhCfg""');","-var utils = require('../lib/utils')
-  , assert = require('assert');
+var assert = require('assert');
+var utils = require('../lib/utils');
-    .should.eql('""zZdv4imtWD49AHEviejT6A==""')
+    .should.eql('""8-zZdv4imtWD49AHEviejT6A""')
-    .should.eql('""fsFba4IxwQS6h6Umb+FNxw==""')
+    .should.eql('""a-fsFba4IxwQS6h6Umb+FNxw""')
-    .should.eql('""zZdv4imtWD49AHEviejT6A==""');
+    .should.eql('""8-zZdv4imtWD49AHEviejT6A""');
-    .should.eql('""1B2M2Y8AsgTpgAmY7PhCfg==""');
+    .should.eql('""0-1B2M2Y8AsgTpgAmY7PhCfg""');
+
+describe('utils.setCharset(type, charset)', function () {
+  it('should do anything without type', function () {
+    assert.strictEqual(utils.setCharset(), undefined);
+  });
+
+  it('should return type if not given charset', function () {
+    assert.strictEqual(utils.setCharset('text/html'), 'text/html');
+  });
+
+  it('should keep charset if not given charset', function () {
+    assert.strictEqual(utils.setCharset('text/html; charset=utf-8'), 'text/html; charset=utf-8');
+  });
+
+  it('should set charset', function () {
+    assert.strictEqual(utils.setCharset('text/html', 'utf-8'), 'text/html; charset=utf-8');
+  });
+
+  it('should override charset', function () {
+    assert.strictEqual(utils.setCharset('text/html; charset=iso-8859-1', 'utf-8'), 'text/html; charset=utf-8');
+  });
+});
-    .should.eql('W/""8-b8aabac7""')
+    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""')
-    .should.eql('W/""a-686b0af1""')
+    .should.eql('W/""a-fsFba4IxwQS6h6Umb+FNxw""')
-    .should.eql('W/""8-b8aabac7""');
+    .should.eql('W/""8-zZdv4imtWD49AHEviejT6A""');
-    .should.eql('W/""0-0""');
+    .should.eql('W/""0-1B2M2Y8AsgTpgAmY7PhCfg""');
-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-
-  describe('when params included', function(){
-    it('should match params', function(){
-      assert(null == utils.accepts('text/html; charset=us-ascii', 'text/html; charset=utf-8'));
-    })
-  })
-})"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',lib/express.js,"-exports.query = require('./middleware/query');
+  'query',","-  mixin(app, proto);
-  mixin(app, EventEmitter.prototype);
+  mixin(app, EventEmitter.prototype, false);
+  mixin(app, proto, false);","-  mixin(app, proto);
-  mixin(app, EventEmitter.prototype);
+  mixin(app, EventEmitter.prototype, false);
+  mixin(app, proto, false);
-exports.query = require('./middleware/query');
+  'query',"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',lib/request.js,"-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","-  if (!trust(this.connection.remoteAddress)) {
+  if (!trust(this.connection.remoteAddress, 0)) {
-  if (!host || !trust(this.connection.remoteAddress)) {
+  if (!host || !trust(this.connection.remoteAddress, 0)) {","-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
-  if (!trust(this.connection.remoteAddress)) {
+  if (!trust(this.connection.remoteAddress, 0)) {
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress, 0)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',lib/response.js,"-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-    err.code = 'ECONNABORT';
+    err.code = 'ECONNABORTED';
+    if (err && err.code === 'ECONNRESET') return onaborted();","-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-    err.code = 'ECONNABORT';
+    err.code = 'ECONNABORTED';
+    if (err && err.code === 'ECONNRESET') return onaborted();"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',package.json,"-  ""version"": ""4.12.0"",
+  ""version"": ""5.0.0-alpha.1"",","-  ""version"": ""4.12.0"",
+  ""version"": ""4.12.4"",
-    ""accepts"": ""~1.2.4"",
+    ""accepts"": ""~1.2.7"",
+    ""cookie"": ""0.1.2"",
-    ""debug"": ""~2.1.1"",
-    ""depd"": ""~1.0.0"",
+    ""debug"": ""~2.2.0"",
+    ""depd"": ""~1.0.1"",
-    ""etag"": ""~1.5.1"",
-    ""finalhandler"": ""0.3.3"",
+    ""etag"": ""~1.6.0"",
+    ""finalhandler"": ""0.3.6"",
+    ""merge-descriptors"": ""1.0.0"",
-    ""on-finished"": ""~2.2.0"",
+    ""on-finished"": ""~2.2.1"",
-    ""proxy-addr"": ""~1.0.6"",
-    ""qs"": ""2.3.3"",
+    ""proxy-addr"": ""~1.0.8"",
+    ""qs"": ""2.4.2"",
-    ""send"": ""0.12.1"",
-    ""serve-static"": ""~1.9.1"",
-    ""type-is"": ""~1.6.0"",
+    ""send"": ""0.12.3"",
+    ""serve-static"": ""~1.9.3"",
+    ""type-is"": ""~1.6.2"",
-    ""cookie"": ""0.1.2"",
-    ""merge-descriptors"": ""0.0.2"",
-    ""istanbul"": ""0.3.6"",
+    ""istanbul"": ""0.3.9"",
-    ""mocha"": ""~2.1.0"",
-    ""should"": ""~5.0.1"",
-    ""supertest"": ""~0.15.0"",
-    ""hjs"": ""~0.0.6"",
-    ""body-parser"": ""~1.12.0"",
-    ""connect-redis"": ""~2.2.0"",
+    ""mocha"": ""2.2.5"",
+    ""should"": ""6.0.1"",
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.12.4"",
+    ""connect-redis"": ""~2.3.0"",
-    ""express-session"": ""~1.10.3"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.2"",
-    ""method-override"": ""~2.3.1"",
-    ""morgan"": ""~1.5.1"",
-    ""multiparty"": ""~4.1.1"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.5.3"",
+    ""multiparty"": ""~4.1.2"",","-  ""version"": ""4.12.0"",
+  ""version"": ""5.0.0-alpha.1"",
-    ""accepts"": ""~1.2.4"",
+    ""accepts"": ""~1.2.7"",
+    ""cookie"": ""0.1.2"",
-    ""debug"": ""~2.1.1"",
-    ""depd"": ""~1.0.0"",
+    ""debug"": ""~2.2.0"",
+    ""depd"": ""~1.0.1"",
-    ""etag"": ""~1.5.1"",
-    ""finalhandler"": ""0.3.3"",
+    ""etag"": ""~1.6.0"",
+    ""finalhandler"": ""0.3.6"",
+    ""merge-descriptors"": ""1.0.0"",
-    ""on-finished"": ""~2.2.0"",
+    ""on-finished"": ""~2.2.1"",
-    ""proxy-addr"": ""~1.0.6"",
-    ""qs"": ""2.3.3"",
+    ""proxy-addr"": ""~1.0.8"",
+    ""qs"": ""2.4.2"",
-    ""send"": ""0.12.1"",
-    ""serve-static"": ""~1.9.1"",
-    ""type-is"": ""~1.6.0"",
+    ""send"": ""0.12.3"",
+    ""serve-static"": ""~1.9.3"",
+    ""type-is"": ""~1.6.2"",
-    ""cookie"": ""0.1.2"",
-    ""merge-descriptors"": ""0.0.2"",
-    ""istanbul"": ""0.3.6"",
+    ""istanbul"": ""0.3.9"",
-    ""mocha"": ""~2.1.0"",
-    ""should"": ""~5.0.1"",
-    ""supertest"": ""~0.15.0"",
-    ""hjs"": ""~0.0.6"",
-    ""body-parser"": ""~1.12.0"",
-    ""connect-redis"": ""~2.2.0"",
+    ""mocha"": ""2.2.5"",
+    ""should"": ""6.0.1"",
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.12.4"",
+    ""connect-redis"": ""~2.3.0"",
-    ""express-session"": ""~1.10.3"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.11.2"",
-    ""method-override"": ""~2.3.1"",
-    ""morgan"": ""~1.5.1"",
-    ""multiparty"": ""~4.1.1"",
+    ""method-override"": ""~2.3.3"",
+    ""morgan"": ""~1.5.3"",
+    ""multiparty"": ""~4.1.2"","
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',test/app.js,"-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }
-  })
-})
-","-    assert(typeof app, 'function');
+    assert.equal(typeof app, 'function');","-    assert(typeof app, 'function');
+    assert.equal(typeof app, 'function');
-  })
-})
-
-describe('app.router', function(){
-  it('should throw with notice', function(done){
-    var app = express()
-
-    try {
-      app.router;
-    } catch(err) {
-      done();
-    }"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',test/req.host.js,"-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);","+
+      describe('when trusting hop count', function () {
+        it('should respect X-Forwarded-Host', function (done) {
+          var app = express();
+
+          app.set('trust proxy', 1);
+
+          app.use(function (req, res) {
+            res.end(req.host);
+          });
+
+          request(app)
+          .get('/')
+          .set('Host', 'localhost')
+          .set('X-Forwarded-Host', 'example.com')
+          .expect('example.com', done);
+        })
+      })","-      .expect('example.com', done);
+      .expect(200, 'example.com:3000', done);
-      .expect('[::1]', done);
+      .expect(200, '[::1]:3000', done);
+
+      describe('when trusting hop count', function () {
+        it('should respect X-Forwarded-Host', function (done) {
+          var app = express();
+
+          app.set('trust proxy', 1);
+
+          app.use(function (req, res) {
+            res.end(req.host);
+          });
+
+          request(app)
+          .get('/')
+          .set('Host', 'localhost')
+          .set('X-Forwarded-Host', 'example.com')
+          .expect('example.com', done);
+        })
+      })"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","-      .expect('', done);
+      .expect(200, '', done);
-      .expect('', function(req, res){
-        res.header.should.not.have.property('content-length');
-        done();
-      });
+      .expect(200, '', done);","-      .expect('', done);
+      .expect(200, '', done);
-      .expect('', function(req, res){
-        res.header.should.not.have.property('content-length');
-        done();
-      });
-    })
-  })
-
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
+      .expect(200, '', done);
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');"
expressjs_express,f90e045334917579fa63ed52aa244e4d86fe012c,Merge tag '4.12.4',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          ++calls;
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .end(function(err, res){
-        assert(1 == calls, 'called too many times');
-        res.text.should.startWith(""ENOENT, stat"");
-        res.statusCode.should.equal(200);
-        done();
-      });
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })","-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-      var app = express()
-        , calls = 0;
+      var app = express();
+      var calls = 0;
-          ++calls;
+          assert.equal(calls++, 0);
-      .end(function(err, res){
-        assert(1 == calls, 'called too many times');
-        res.text.should.startWith(""ENOENT, stat"");
-        res.statusCode.should.equal(200);
-        done();
-      });
+      .expect(200, /^ENOENT.*?, stat/, done);","-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-            err.code.should.equal('ECONNABORT');
+            err.code.should.equal('ECONNABORTED');
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback without error when HEAD', function (done) {
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .head('/')
-      .expect(200, cb);
-    });
-
-    it('should invoke the callback without error when 304', function (done) {
-      var app = express();
-      var cb = after(3, done);
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt', cb);
-      });
-
-      request(app)
-      .get('/')
-      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
-      .expect(200, 'tobi', function (err, res) {
-        if (err) return cb(err);
-        var etag = res.headers.etag;
-        request(app)
-        .get('/')
-        .set('If-None-Match', etag)
-        .expect(304, cb);
-      });
-    });
-
-    it('should invoke the callback on 404', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          ++calls;
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .end(function(err, res){
-        assert(1 == calls, 'called too many times');
-        res.text.should.startWith(""ENOENT, stat"");
-        res.statusCode.should.equal(200);
-        done();
-      });
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    it('should not error if the client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile(path.resolve(fixtures, 'name.txt'));
-          cb();
-        });
-        test.abort();
-      });
-
-      app.use(function (err, req, res, next) {
-        err.code.should.be.empty;
-        cb();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })"
expressjs_express,62d5c385759b090b4d55ff8bd934074a562ae2f7,Merge tag '3.20.3',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.1"",
+    ""accepts"": ""~1.2.5"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.4"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.4.1"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""serve-static"": ""~1.9.2"",
+    ""type-is"": ""~1.6.1"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""supertest"": ""~0.15.0""
+    ""supertest"": ""~0.15.0"",
+    ""body-parser"": ""~1.12.2"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.10.4"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.2"",
+    ""morgan"": ""~1.5.2"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.20.2"",
+  ""version"": ""3.20.3"",
-    ""connect"": ""2.29.1"",
+    ""connect"": ""2.29.2"",
-    ""debug"": ""~2.1.3"",
-    ""depd"": ""~1.0.0"",
+    ""debug"": ""~2.2.0"",
+    ""depd"": ""~1.0.1"",
-    ""proxy-addr"": ""~1.0.7"",
+    ""proxy-addr"": ""~1.0.8"",
-    ""send"": ""0.12.2"",
+    ""send"": ""0.12.3"",
-    ""istanbul"": ""0.3.8"",
+    ""istanbul"": ""0.3.9"",
-    ""mocha"": ""~2.2.1"",
-    ""should"": ""~5.2.0"",
-    ""supertest"": ""~0.15.0""
+    ""mocha"": ""2.2.5"",
+    ""should"": ""6.0.1"",
+    ""supertest"": ""1.0.1""","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.1"",
+    ""accepts"": ""~1.2.5"",
-    ""commander"": ""2.6.0"",
-    ""debug"": ""~2.1.3"",
-    ""depd"": ""~1.0.0"",
+    ""debug"": ""~2.2.0"",
+    ""depd"": ""~1.0.1"",
+    ""finalhandler"": ""0.3.4"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.7"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.8"",
+    ""qs"": ""2.4.1"",
-    ""send"": ""0.12.2"",
-    ""utils-merge"": ""1.0.0"",
-    ""vary"": ""~1.0.0""
+    ""send"": ""0.12.3"",
+    ""serve-static"": ""~1.9.2"",
+    ""type-is"": ""~1.6.1"",
+    ""vary"": ""~1.0.0"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""istanbul"": ""0.3.8"",
+    ""istanbul"": ""0.3.9"",
-    ""mocha"": ""~2.2.1"",
-    ""should"": ""~5.2.0"",
-    ""supertest"": ""~0.15.0""
+    ""mocha"": ""2.2.5"",
+    ""should"": ""6.0.1"",
+    ""supertest"": ""1.0.1"",
+    ""body-parser"": ""~1.12.2"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.10.4"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.2"",
+    ""morgan"": ""~1.5.2"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,62d5c385759b090b4d55ff8bd934074a562ae2f7,Merge tag '3.20.3',test/acceptance/mvc.js,"+    it('should 500 on error', function(done){
+      request(app)
+      .put('/user/1')
+      .send({})
+      .expect(500, done)
+    })
+","-      .end(function(err, res){
+      .expect(302, function (err, res) {
-      .end(function(err, res){
+      .expect(302, function (err, res) {","-      .end(function(err, res){
+      .expect(302, function (err, res) {
+    it('should 500 on error', function(done){
+      request(app)
+      .put('/user/1')
+      .send({})
+      .expect(500, done)
+    })
+
-      .end(function(err, res){
+      .expect(302, function (err, res) {"
expressjs_express,62d5c385759b090b4d55ff8bd934074a562ae2f7,Merge tag '3.20.3',test/acceptance/params.js,"-var app = require('../../examples/params/app')
+var app = require('../../examples/params')","-        .get('/user/9')
-        .expect(/failed to find user/,done)
+      .get('/user/9')
+      .expect(404, /failed to find user/, done)
-        .get('/users/foo-bar')
-        .expect(/failed to parseInt foo/,done)
+      .get('/users/foo-bar')
+      .expect(400, /failed to parseInt foo/, done)","-var app = require('../../examples/params/app')
+var app = require('../../examples/params')
-        .get('/user/9')
-        .expect(/failed to find user/,done)
+      .get('/user/9')
+      .expect(404, /failed to find user/, done)
-        .get('/users/foo-bar')
-        .expect(/failed to parseInt foo/,done)
+      .get('/users/foo-bar')
+      .expect(400, /failed to parseInt foo/, done)"
expressjs_express,40f4ac3cb3d6099444a3c386924966cbbbcfaae5,Merge tag '3.20.2',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.0"",
+    ""accepts"": ""~1.2.4"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
+    ""merge-descriptors"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""merge-descriptors"": ""0.0.2""
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~5.0.0"",
-    ""supertest"": ""~0.15.0""
+    ""should"": ""~5.0.1"",
+    ""supertest"": ""~0.15.0"",
+    ""body-parser"": ""~1.12.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.20.1"",
+  ""version"": ""3.20.2"",
-    ""connect"": ""2.29.0"",
+    ""connect"": ""2.29.1"",
+    ""cookie"": ""0.1.2"",
-    ""debug"": ""~2.1.1"",
+    ""debug"": ""~2.1.3"",
+    ""merge-descriptors"": ""1.0.0"",
-    ""proxy-addr"": ""~1.0.6"",
+    ""proxy-addr"": ""~1.0.7"",
-    ""send"": ""0.12.1"",
+    ""send"": ""0.12.2"",
-    ""vary"": ""~1.0.0"",
-    ""cookie"": ""0.1.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""vary"": ""~1.0.0""
-    ""istanbul"": ""0.3.6"",
+    ""istanbul"": ""0.3.8"",
-    ""mocha"": ""~2.1.0"",
-    ""should"": ""~5.0.0"",
+    ""mocha"": ""~2.2.1"",
+    ""should"": ""~5.2.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.0"",
+    ""accepts"": ""~1.2.4"",
-    ""commander"": ""2.6.0"",
+    ""cookie"": ""0.1.2"",
-    ""debug"": ""~2.1.1"",
+    ""debug"": ""~2.1.3"",
+    ""finalhandler"": ""0.3.3"",
+    ""merge-descriptors"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.6"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.7"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.12.1"",
-    ""utils-merge"": ""1.0.0"",
+    ""send"": ""0.12.2"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""cookie"": ""0.1.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""istanbul"": ""0.3.6"",
+    ""istanbul"": ""0.3.8"",
-    ""mocha"": ""~2.1.0"",
-    ""should"": ""~5.0.0"",
-    ""supertest"": ""~0.15.0""
+    ""mocha"": ""~2.2.1"",
+    ""should"": ""~5.2.0"",
+    ""supertest"": ""~0.15.0"",
+    ""body-parser"": ""~1.12.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""cookie-session"": ""~1.1.0"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,cd6df7699dba2fcdd17dbf15348c001732818eb5,Merge tag '3.20.1',lib/request.js,"-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
- * The `type` value may be a single mime type string
- * such as ""application/json"", the extension name
- * such as ""json"", a comma-delimted list such as ""json, html, text/plain"",
+ * The `type` value may be a single MIME type string
+ * such as ""application/json"", an extension name
+ * such as ""json"", a comma-delimited list such as ""json, html, text/plain"",
- * or array is given the _best_ match, if any is returned.
+ * or array is given, the _best_ match, if any is returned.
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.param = function(name, defaultValue){
+req.param = function param(name, defaultValue) {
+
+  var args = arguments.length === 1
+    ? 'name'
+    : 'name, default';
+  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+
+
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
-  var host = this.host;
-
-  if (!host) return [];
+defineGetter(req, 'subdomains', function subdomains() {
+  var hostname = this.hostname;
+
+  if (!hostname) return [];
-  var subdomains = !isIP(host)
-    ? host.split('.').reverse()
-    : [host];
+  var subdomains = !isIP(hostname)
+    ? hostname.split('.').reverse()
+    : [hostname];
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};","-  if (!trust(this.connection.remoteAddress)) {
+  if (!trust(this.connection.remoteAddress, 0)) {
-  if (!host || !trust(this.connection.remoteAddress)) {
+  if (!host || !trust(this.connection.remoteAddress, 0)) {","-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
- * The `type` value may be a single mime type string
- * such as ""application/json"", the extension name
- * such as ""json"", a comma-delimted list such as ""json, html, text/plain"",
+ * The `type` value may be a single MIME type string
+ * such as ""application/json"", an extension name
+ * such as ""json"", a comma-delimited list such as ""json, html, text/plain"",
- * or array is given the _best_ match, if any is returned.
+ * or array is given, the _best_ match, if any is returned.
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.param = function(name, defaultValue){
+req.param = function param(name, defaultValue) {
+
+  var args = arguments.length === 1
+    ? 'name'
+    : 'name, default';
+  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+
+
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-  if (!trust(this.connection.remoteAddress)) {
+  if (!trust(this.connection.remoteAddress, 0)) {
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
-  var host = this.host;
-
-  if (!host) return [];
+defineGetter(req, 'subdomains', function subdomains() {
+  var hostname = this.hostname;
+
+  if (!hostname) return [];
-  var subdomains = !isIP(host)
-    ? host.split('.').reverse()
-    : [host];
+  var subdomains = !isIP(hostname)
+    ? hostname.split('.').reverse()
+    : [hostname];
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
-  if (!host || !trust(this.connection.remoteAddress)) {
+  if (!host || !trust(this.connection.remoteAddress, 0)) {
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};"
expressjs_express,cd6df7699dba2fcdd17dbf15348c001732818eb5,Merge tag '3.20.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.0"",
+    ""accepts"": ""~1.2.4"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""ejs"": ""2.1.4"",
-    ""istanbul"": ""0.3.5"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.3.1"",
+    ""istanbul"": ""0.3.6"",
-    ""should"": ""~5.0.0"",
+    ""should"": ""~5.0.1"",
-    ""hjs"": ""~0.0.6""
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.12.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""3.20.0"",
+  ""version"": ""3.20.1"",
-    ""ejs"": ""2.1.4"",
-    ""istanbul"": ""0.3.5"",
+    ""ejs"": ""2.3.1"",
+    ""istanbul"": ""0.3.6"",
-    ""supertest"": ""~0.15.0"",
-    ""hjs"": ""~0.0.6""
+    ""supertest"": ""~0.15.0""","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.20.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.12.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.29.0"",
+    ""accepts"": ""~1.2.4"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""ejs"": ""2.1.4"",
-    ""istanbul"": ""0.3.5"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.3.1"",
+    ""istanbul"": ""0.3.6"",
-    ""should"": ""~5.0.0"",
+    ""should"": ""~5.0.1"",
-    ""hjs"": ""~0.0.6""
+    ""body-parser"": ""~1.12.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',lib/application.js,"-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+app.route = function route(path) {
+  return this.router.route(path);
-app.param = function(name, fn){
-  this.lazyrouter();
-
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
+ * Variable for trust proxy inheritance back-compat
+ * @api private
+ */
+
+var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
+
+/**
+  // trust proxy inherit back-compat
+  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+    configurable: true,
+    value: true
+  });
+
-  // inherit protos
-  this.on('mount', function(parent){
+  this.on('mount', function onmount(parent) {
+    // inherit trust proxy
+    if (this.settings[trustProxyDefaultSymbol] === true
+      && typeof parent.settings['trust proxy fn'] === 'function') {
+      delete this.settings['trust proxy'];
+      delete this.settings['trust proxy fn'];
+    }
+
+    // inherit protos
+
+      // trust proxy inherit back-compat
+      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+        configurable: true,
+        value: false
+      });
+","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+ * Variable for trust proxy inheritance back-compat
+ * @api private
+ */
+
+var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
+
+/**
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
+  // trust proxy inherit back-compat
+  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+    configurable: true,
+    value: true
+  });
+
-  // inherit protos
-  this.on('mount', function(parent){
+  this.on('mount', function onmount(parent) {
+    // inherit trust proxy
+    if (this.settings[trustProxyDefaultSymbol] === true
+      && typeof parent.settings['trust proxy fn'] === 'function') {
+      delete this.settings['trust proxy'];
+      delete this.settings['trust proxy fn'];
+    }
+
+    // inherit protos
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+app.route = function route(path) {
+  return this.router.route(path);
-app.param = function(name, fn){
-  this.lazyrouter();
-
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
-  this._router.param(name, fn);
+  this.router.param(name, fn);
+
+      // trust proxy inherit back-compat
+      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+        configurable: true,
+        value: false
+      });
+
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');"
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',lib/request.js,"-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","- * The `type` value may be a single mime type string
- * such as ""application/json"", the extension name
- * such as ""json"", a comma-delimted list such as ""json, html, text/plain"",
+ * The `type` value may be a single MIME type string
+ * such as ""application/json"", an extension name
+ * such as ""json"", a comma-delimited list such as ""json, html, text/plain"",
- * or array is given the _best_ match, if any is returned.
+ * or array is given, the _best_ match, if any is returned.","- * The `type` value may be a single mime type string
- * such as ""application/json"", the extension name
- * such as ""json"", a comma-delimted list such as ""json, html, text/plain"",
+ * The `type` value may be a single MIME type string
+ * such as ""application/json"", an extension name
+ * such as ""json"", a comma-delimited list such as ""json, html, text/plain"",
- * or array is given the _best_ match, if any is returned.
+ * or array is given, the _best_ match, if any is returned.
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));"
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',lib/response.js,"-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
-  // method check
-  var isHead = req.method === 'HEAD';
-
-  // ETag support
-  if (len !== undefined && (isHead || req.method === 'GET')) {
-    var etag = app.get('etag fn');
-    if (etag && !this.get('ETag')) {
-      etag = etag(chunk, encoding);
-      etag && this.set('ETag', etag);
+  // populate ETag
+  var etag;
+  var generateETag = len !== undefined && app.get('etag fn');
+  if (typeof generateETag === 'function' && !this.get('ETag')) {
+    if ((etag = generateETag(chunk, encoding))) {
+      this.set('ETag', etag);
-  if (isHead) {
+  if (req.method === 'HEAD') {","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // method check
-  var isHead = req.method === 'HEAD';
-
-  // ETag support
-  if (len !== undefined && (isHead || req.method === 'GET')) {
-    var etag = app.get('etag fn');
-    if (etag && !this.get('ETag')) {
-      etag = etag(chunk, encoding);
-      etag && this.set('ETag', etag);
+  // populate ETag
+  var etag;
+  var generateETag = len !== undefined && app.get('etag fn');
+  if (typeof generateETag === 'function' && !this.get('ETag')) {
+    if ((etag = generateETag(chunk, encoding))) {
+      this.set('ETag', etag);
-  if (isHead) {
+  if (req.method === 'HEAD') {
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`."
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',lib/utils.js,"-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
-var basename = require('path').basename;
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
-/**
-      fn = newObject;
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
+var contentType = require('content-type');
-var typer = require('media-typer');
-exports.setCharset = function(type, charset){
-  if (!type || !charset) return type;
+exports.setCharset = function setCharset(type, charset) {
+  if (!type || !charset) {
+    return type;
+  }
-  var parsed = typer.parse(type);
+  var parsed = contentType.parse(type);
-  return typer.format(parsed);
+  return contentType.format(parsed);","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
- */
-
-var contentDisposition = require('content-disposition');
-var deprecate = require('depd')('express');
+ * @api private
+ */
+
-var basename = require('path').basename;
+var contentType = require('content-type');
-var typer = require('media-typer');
- * Generate Content-Disposition header appropriate for the filename.
- * non-ascii filenames are urlencoded and a filename* parameter is added
- *
- * @param {String} filename
- * @return {String}
- * @api private
- */
-
-exports.contentDisposition = deprecate.function(contentDisposition,
-  'utils.contentDisposition: use content-disposition npm module instead');
-
-/**
-      fn = newObject;
-exports.setCharset = function(type, charset){
-  if (!type || !charset) return type;
+exports.setCharset = function setCharset(type, charset) {
+  if (!type || !charset) {
+    return type;
+  }
-  var parsed = typer.parse(type);
+  var parsed = contentType.parse(type);
-  return typer.format(parsed);
-};
-
-/**
- * Return new empty object.
- *
- * @return {Object}
- * @api private
- */
-
-function newObject() {
-  return {};
-}
+  return contentType.format(parsed);
+};"
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',package.json,"-  ""version"": ""4.11.2"",
+  ""version"": ""5.0.0-alpha.1"",","-  ""version"": ""4.11.2"",
+  ""version"": ""4.12.0"",
-    ""accepts"": ""~1.2.3"",
+    ""accepts"": ""~1.2.4"",
-    ""cookie-signature"": ""1.0.5"",
+    ""content-type"": ""~1.0.1"",
+    ""cookie-signature"": ""1.0.6"",
-    ""media-typer"": ""0.3.0"",
-    ""send"": ""0.11.1"",
-    ""serve-static"": ""~1.8.1"",
-    ""type-is"": ""~1.5.6"",
+    ""send"": ""0.12.1"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""ejs"": ""2.1.4"",
-    ""istanbul"": ""0.3.5"",
+    ""ejs"": ""2.3.1"",
+    ""istanbul"": ""0.3.6"",
-    ""should"": ""~4.6.2"",
+    ""should"": ""~5.0.1"",
-    ""body-parser"": ""~1.11.0"",
+    ""body-parser"": ""~1.12.0"",
-    ""cookie-parser"": ""~1.3.3"",
-    ""express-session"": ""~1.10.2"",
-    ""jade"": ""~1.9.1"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/""","-  ""version"": ""4.11.2"",
+  ""version"": ""5.0.0-alpha.1"",
-    ""accepts"": ""~1.2.3"",
+    ""accepts"": ""~1.2.4"",
-    ""cookie-signature"": ""1.0.5"",
+    ""content-type"": ""~1.0.1"",
+    ""cookie-signature"": ""1.0.6"",
-    ""media-typer"": ""0.3.0"",
-    ""send"": ""0.11.1"",
-    ""serve-static"": ""~1.8.1"",
-    ""type-is"": ""~1.5.6"",
+    ""send"": ""0.12.1"",
+    ""serve-static"": ""~1.9.1"",
+    ""type-is"": ""~1.6.0"",
-    ""ejs"": ""2.1.4"",
-    ""istanbul"": ""0.3.5"",
+    ""ejs"": ""2.3.1"",
+    ""istanbul"": ""0.3.6"",
-    ""should"": ""~4.6.2"",
+    ""should"": ""~5.0.1"",
-    ""body-parser"": ""~1.11.0"",
+    ""body-parser"": ""~1.12.0"",
-    ""cookie-parser"": ""~1.3.3"",
-    ""express-session"": ""~1.10.2"",
-    ""jade"": ""~1.9.1"",
+    ""cookie-parser"": ""~1.3.4"",
+    ""express-session"": ""~1.10.3"",
+    ""jade"": ""~1.9.2"",
+    ""test-ci"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"",
-    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"""
expressjs_express,f6ec710534e2944cc2c631cf71f63095ff30581c,Merge tag '4.12.0',test/res.send.js,"-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-          res.send(200);
+          res.send('hello!');
-          res.send(200);
+          res.send('hello!');","-var express = require('../')
-  , request = require('supertest')
-  , assert = require('assert');
+var assert = require('assert');
+var express = require('..');
+var methods = require('methods');
+var request = require('supertest');
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
-    })
-
-    it('should not set ETag for non-GET/HEAD', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1000).join('-');
-        res.send(str);
-      });
-
-      request(app)
-      .post('/')
-      .end(function(err, res){
-        if (err) return done(err);
-        assert(!res.header.etag, 'has an ETag');
-        done();
-      });
+      .expect(200, done);
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
+      .expect(200, done);
-  describe('""etag"" setting', function(){
-    describe('when enabled', function(){
-      it('should send ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+  describe('""etag"" setting', function () {
+    describe('when enabled', function () {
+      it('should send ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""c-5aee35d8""', done)
-      })
-
-      it('should send ETag for empty string response', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send('')
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .expect('etag', 'W/""0-0""', done)
-      })
-
-      it('should send ETag for long response', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect(200, done);
+      });
+
+      methods.forEach(function (method) {
+        if (method === 'connect') return;
+
+        it('should send ETag in response to ' + method.toUpperCase() + ' request', function (done) {
+          var app = express();
+
+          app[method]('/', function (req, res) {
+            res.send('kajdslfkasdf');
+          });
+
+          request(app)
+          [method]('/')
+          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect(200, done);
+        })
+      });
+
+      it('should send ETag for empty string response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send('');
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('ETag', 'W/""0-0""')
+        .expect(200, done);
+      })
+
+      it('should send ETag for long response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""3e7-8084ccd1""', done)
-      });
-
-      it('should not override ETag when manually set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""3e7-8084ccd1""')
+        .expect(200, done);
+      });
+
+      it('should not override ETag when manually set', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
-      });
-
-      it('should not send ETag for res.send()', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send()
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        })
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
+      });
+
+      it('should not send ETag for res.send()', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send();
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
-    describe('when disabled', function(){
-      it('should send no ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+    describe('when disabled', function () {
+      it('should send no ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        });
-      });
-
-      it('should send ETag when manually set', function(done){
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+      });
+
+      it('should send ETag when manually set', function (done) {
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
-    describe('when ""strong""', function(){
-      it('should send strong ETag', function(done){
-        var app = express()
+    describe('when ""strong""', function () {
+      it('should send strong ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
-      })
-    })
-
-    describe('when ""weak""', function(){
-      it('should send weak ETag', function(done){
-        var app = express()
+        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect(200, done);
+      })
+    })
+
+    describe('when ""weak""', function () {
+      it('should send weak ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', 'W/""d-58988d13""', done)
-      })
-    })
-
-    describe('when a function', function(){
-      it('should send custom ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
+        .expect('ETag', 'W/""d-58988d13""')
+        .expect(200, done)
+      })
+    })
+
+    describe('when a function', function () {
+      it('should send custom ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
-          chunk.toString().should.equal('hello, world!')
-          return '""custom""'
-        });
-
-        app.use(function(req, res){
+          chunk.toString().should.equal('hello, world!');
+          return '""custom""';
+        });
+
+        app.use(function (req, res) {
-        .expect('etag', '""custom""', done)
-      })
-
-      it('should not send falsy ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          return undefined
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', '""custom""')
+        .expect(200, done);
+      })
+
+      it('should not send falsy ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          return undefined;
+        });
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag')
-          done();
-        })
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+
+function shouldNotHaveHeader(header) {
+  return function (res) {
+    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
+  }
+}","-var express = require('../')
-  , request = require('supertest')
-  , assert = require('assert');
+var assert = require('assert');
+var express = require('..');
+var methods = require('methods');
+var request = require('supertest');
-  describe('.send(code)', function(){
-    it('should set .statusCode', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send(201).should.equal(res);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Created')
-      .expect(201, done);
-    })
-  })
-
-  describe('.send(body, code)', function(){
-    it('should be supported for backwards compat', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.send('Bad!', 400);
-      });
-
-      request(app)
-      .get('/')
-      .expect('Bad!')
-      .expect(400, done);
-    })
-  })
-
+    })
+  })
+
+  describe('.send(Number)', function(){
+    it('should send as application/json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(1000);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '1000', done)
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
-    })
-
-    it('should not set ETag for non-GET/HEAD', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1000).join('-');
-        res.send(str);
-      });
-
-      request(app)
-      .post('/')
-      .end(function(err, res){
-        if (err) return done(err);
-        assert(!res.header.etag, 'has an ETag');
-        done();
-      });
+      .expect(200, done);
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
+      .expect(200, done);
-  describe('""etag"" setting', function(){
-    describe('when enabled', function(){
-      it('should send ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+  describe('""etag"" setting', function () {
+    describe('when enabled', function () {
+      it('should send ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""c-5aee35d8""', done)
-      })
-
-      it('should send ETag for empty string response', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send('')
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .expect('etag', 'W/""0-0""', done)
-      })
-
-      it('should send ETag for long response', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect(200, done);
+      });
+
+      methods.forEach(function (method) {
+        if (method === 'connect') return;
+
+        it('should send ETag in response to ' + method.toUpperCase() + ' request', function (done) {
+          var app = express();
+
+          app[method]('/', function (req, res) {
+            res.send('kajdslfkasdf');
+          });
+
+          request(app)
+          [method]('/')
+          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect(200, done);
+        })
+      });
+
+      it('should send ETag for empty string response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send('');
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('ETag', 'W/""0-0""')
+        .expect(200, done);
+      })
+
+      it('should send ETag for long response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""3e7-8084ccd1""', done)
-      });
-
-      it('should not override ETag when manually set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""3e7-8084ccd1""')
+        .expect(200, done);
+      });
+
+      it('should not override ETag when manually set', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-          res.send(200);
+          res.send('hello!');
-        .expect('etag', '""asdf""', done)
-      });
-
-      it('should not send ETag for res.send()', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send()
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        })
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
+      });
+
+      it('should not send ETag for res.send()', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send();
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
-    describe('when disabled', function(){
-      it('should send no ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+    describe('when disabled', function () {
+      it('should send no ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        });
-      });
-
-      it('should send ETag when manually set', function(done){
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+      });
+
+      it('should send ETag when manually set', function (done) {
-        app.use(function(req, res){
+        app.use(function (req, res) {
-          res.send(200);
-        });
-
-        request(app)
-        .get('/')
-        .expect('etag', '""asdf""', done)
+          res.send('hello!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
-    describe('when ""strong""', function(){
-      it('should send strong ETag', function(done){
-        var app = express()
+    describe('when ""strong""', function () {
+      it('should send strong ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
-      })
-    })
-
-    describe('when ""weak""', function(){
-      it('should send weak ETag', function(done){
-        var app = express()
+        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect(200, done);
+      })
+    })
+
+    describe('when ""weak""', function () {
+      it('should send weak ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', 'W/""d-58988d13""', done)
-      })
-    })
-
-    describe('when a function', function(){
-      it('should send custom ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
+        .expect('ETag', 'W/""d-58988d13""')
+        .expect(200, done)
+      })
+    })
+
+    describe('when a function', function () {
+      it('should send custom ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
-          chunk.toString().should.equal('hello, world!')
-          return '""custom""'
-        });
-
-        app.use(function(req, res){
+          chunk.toString().should.equal('hello, world!');
+          return '""custom""';
+        });
+
+        app.use(function (req, res) {
-        .expect('etag', '""custom""', done)
-      })
-
-      it('should not send falsy ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          return undefined
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', '""custom""')
+        .expect(200, done);
+      })
+
+      it('should not send falsy ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          return undefined;
+        });
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag')
-          done();
-        })
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+
+function shouldNotHaveHeader(header) {
+  return function (res) {
+    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
+  }
+}"
expressjs_express,531f024e486c13eb6d7e2bc0966ea95b1567197a,Merge tag '3.20.0',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , http = require('http');
+var finalhandler = require('finalhandler');
+var flatten = require('./utils').flatten;
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileQueryParser = require('./utils').compileQueryParser;
+var compileTrust = require('./utils').compileTrust;
+var resolve = require('path').resolve;
+var slice = Array.prototype.slice;
+  this.set('query parser', 'extended');
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-
-  if (env === 'development') {
-    this.set('json spaces', 2);
-  }
-};
-
-/**
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.use = function(route, fn){
-  var app;
-
-  // default route to '/'
-  if ('string' != typeof route) fn = route, route = '/';
-
-  // express app
-  if (fn.handle && fn.set) app = fn;
-
-  // restore .app property on req and res
-  if (app) {
-    app.route = route;
-    fn = function(req, res, next) {
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
+  });
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query(this.get('query parser fn')));
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var router = this._router;
+
+  // final handler
+  done = done || finalhandler(req, res, {
+    env: this.get('env'),
+    onerror: logerror.bind(this)
+  });
+
+  // no routes
+  if (!router) {
+    debug('no routes defined on app');
+    done();
+    return;
+  }
+
+  router.handle(req, res, done);
+};
+
+/**
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
+ * @api public
+ */
+
+app.use = function use(fn) {
+  var offset = 0;
+  var path = '/';
+
+  // default path to '/'
+  // disambiguate app.use([fn])
+  if (typeof fn !== 'function') {
+    var arg = fn;
+
+    while (Array.isArray(arg) && arg.length !== 0) {
+      arg = arg[0];
+    }
+
+    // first arg is the path
+    if (typeof arg !== 'function') {
+      offset = 1;
+      path = fn;
+    }
+  }
+
+  var fns = flatten(slice.call(arguments, offset));
+
+  if (fns.length === 0) {
+    throw new TypeError('app.use() requires middleware functions');
+  }
+
+  // setup router
+  this.lazyrouter();
+  var router = this._router;
+
+  fns.forEach(function (fn) {
+    // non-express app
+    if (!fn || !fn.handle || !fn.set) {
+      return router.use(path, fn);
+    }
+
+    debug('.use app under %s', path);
+    fn.mountpath = path;
+    fn.parent = this;
+
+    // restore .app property on req and res
+    router.use(path, function mounted_app(req, res, next) {
-      app.handle(req, res, function(err){
+      fn.handle(req, res, function (err) {
-    };
-  }
-
-  connect.proto.use.call(this, route, fn);
-
-  // mounted an app
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
-  }
+    });
+
+    // mounted an app
+    fn.emit('mount', this);
+  }, this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * [Consolidate.js](https://github.com/visionmedia/consolidate.js)
+ * [Consolidate.js](https://github.com/tj/consolidate.js)
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  this.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
-    });
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    name.forEach(function(key) {
+      this.param(key, fn);
+    }, this);
+    return this;
+  }
+
+  this._router.param(name, fn);
+    case 'query parser':
+      debug('compile query parser %s', val);
+      this.set('query parser fn', compileQueryParser(val));
+      break;
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-app.configure = deprecate.function(app.configure,
-  'app.configure: Check app.get(\'env\') in an if statement');
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-      var err = new Error('Failed to lookup view ""' + name + '"" in views directory ""' + view.root + '""');
+      var dirs = Array.isArray(view.root) && view.root.length > 1
+        ? 'directories ""' + view.root.slice(0, -1).join('"", ""') + '"" or ""' + view.root[view.root.length - 1] + '""'
+        : 'directory ""' + view.root + '""'
+      var err = new Error('Failed to lookup view ""' + name + '"" in views ' + dirs);
+
+/**
+* Log error using console.error.
+*
+* @param {Error} err
+* @api private
+*/
+
+function logerror(err){
+  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
+}","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
+ * Variable for trust proxy inheritance back-compat
+ * @api private
+ */
+
+var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
+
+/**
+  // trust proxy inherit back-compat
+  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+    configurable: true,
+    value: true
+  });
+
-  // inherit protos
-  this.on('mount', function(parent){
+  this.on('mount', function onmount(parent) {
+    // inherit trust proxy
+    if (this.settings[trustProxyDefaultSymbol] === true
+      && typeof parent.settings['trust proxy fn'] === 'function') {
+      delete this.settings['trust proxy'];
+      delete this.settings['trust proxy fn'];
+    }
+
+    // inherit protos
+
+      // trust proxy inherit back-compat
+      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+        configurable: true,
+        value: false
+      });
+","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2013 Roman Shtylman
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
- */
-
-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , http = require('http');
+ * @api private
+ */
+
+var finalhandler = require('finalhandler');
+var flatten = require('./utils').flatten;
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileQueryParser = require('./utils').compileQueryParser;
+var compileTrust = require('./utils').compileTrust;
+var resolve = require('path').resolve;
+var slice = Array.prototype.slice;
+
+/**
+ * Variable for trust proxy inheritance back-compat
+ * @api private
+ */
+
+var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
+  this.set('query parser', 'extended');
+  // trust proxy inherit back-compat
+  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+    configurable: true,
+    value: true
+  });
+
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
-
-  // inherit protos
-  this.on('mount', function(parent){
+  this.on('mount', function onmount(parent) {
+    // inherit trust proxy
+    if (this.settings[trustProxyDefaultSymbol] === true
+      && typeof parent.settings['trust proxy fn'] === 'function') {
+      delete this.settings['trust proxy'];
+      delete this.settings['trust proxy fn'];
+    }
+
+    // inherit protos
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-
-  if (env === 'development') {
-    this.set('json spaces', 2);
-  }
-};
-
-/**
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.use = function(route, fn){
-  var app;
-
-  // default route to '/'
-  if ('string' != typeof route) fn = route, route = '/';
-
-  // express app
-  if (fn.handle && fn.set) app = fn;
-
-  // restore .app property on req and res
-  if (app) {
-    app.route = route;
-    fn = function(req, res, next) {
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
+  });
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query(this.get('query parser fn')));
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var router = this._router;
+
+  // final handler
+  done = done || finalhandler(req, res, {
+    env: this.get('env'),
+    onerror: logerror.bind(this)
+  });
+
+  // no routes
+  if (!router) {
+    debug('no routes defined on app');
+    done();
+    return;
+  }
+
+  router.handle(req, res, done);
+};
+
+/**
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
+ * @api public
+ */
+
+app.use = function use(fn) {
+  var offset = 0;
+  var path = '/';
+
+  // default path to '/'
+  // disambiguate app.use([fn])
+  if (typeof fn !== 'function') {
+    var arg = fn;
+
+    while (Array.isArray(arg) && arg.length !== 0) {
+      arg = arg[0];
+    }
+
+    // first arg is the path
+    if (typeof arg !== 'function') {
+      offset = 1;
+      path = fn;
+    }
+  }
+
+  var fns = flatten(slice.call(arguments, offset));
+
+  if (fns.length === 0) {
+    throw new TypeError('app.use() requires middleware functions');
+  }
+
+  // setup router
+  this.lazyrouter();
+  var router = this._router;
+
+  fns.forEach(function (fn) {
+    // non-express app
+    if (!fn || !fn.handle || !fn.set) {
+      return router.use(path, fn);
+    }
+
+    debug('.use app under %s', path);
+    fn.mountpath = path;
+    fn.parent = this;
+
+    // restore .app property on req and res
+    router.use(path, function mounted_app(req, res, next) {
-      app.handle(req, res, function(err){
+      fn.handle(req, res, function (err) {
-    };
-  }
-
-  connect.proto.use.call(this, route, fn);
-
-  // mounted an app
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
-  }
+    });
+
+    // mounted an app
+    fn.emit('mount', this);
+  }, this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * [Consolidate.js](https://github.com/visionmedia/consolidate.js)
+ * [Consolidate.js](https://github.com/tj/consolidate.js)
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  this.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
-    });
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    name.forEach(function(key) {
+      this.param(key, fn);
+    }, this);
+    return this;
+  }
+
+  this._router.param(name, fn);
+    case 'query parser':
+      debug('compile query parser %s', val);
+      this.set('query parser fn', compileQueryParser(val));
+      break;
+
+      // trust proxy inherit back-compat
+      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
+        configurable: true,
+        value: false
+      });
+
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-app.configure = deprecate.function(app.configure,
-  'app.configure: Check app.get(\'env\') in an if statement');
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-      var err = new Error('Failed to lookup view ""' + name + '"" in views directory ""' + view.root + '""');
+      var dirs = Array.isArray(view.root) && view.root.length > 1
+        ? 'directories ""' + view.root.slice(0, -1).join('"", ""') + '"" or ""' + view.root[view.root.length - 1] + '""'
+        : 'directory ""' + view.root + '""'
+      var err = new Error('Failed to lookup view ""' + name + '"" in views ' + dirs);
+
+/**
+* Log error using console.error.
+*
+* @param {Error} err
+* @api private
+*/
+
+function logerror(err){
+  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
+}"
expressjs_express,531f024e486c13eb6d7e2bc0966ea95b1567197a,Merge tag '3.20.0',lib/response.js,"+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
-var parseUrl = require('parseurl');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.sendStatus(status) instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
-  }
-
-  // respond
-  this.end((head ? null : body), encoding);
+    chunk = '';
+  }
+
+  if (isHead) {
+    // skip body for HEAD
+    this.end();
+  } else {
+    // respond
+    this.end(chunk, encoding);
+  }
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', contentDisposition(filename));
-
-  return this.sendfile(path, fn);
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
+ * Append additional header `field` with value `val`.
+ *
+ * Example:
+ *
+ *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
+ *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
+ *    res.append('Warning', '199 Miscellaneous warning');
+ *
+ * @param {String} field
+ * @param {String|Array} val
+ * @return {ServerResponse} for chaining
+ * @api public
+ */
+
+res.append = function append(field, val) {
+  var prev = this.get(field);
+  var value = val;
+
+  if (prev) {
+    // concat the new and prev vals
+    value = Array.isArray(prev) ? prev.concat(val)
+      : Array.isArray(val) ? [prev].concat(val)
+      : [prev, val];
+  }
+
+  return this.set(field, value);
+};
+
+/**
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
-      var u = escapeHtml(url);
+      var u = escapeHtml(address);
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  } else {
+    this.end(body);
+  }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+  var streaming;
+
+  // request aborted
+  function onaborted() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('Request aborted');
+    err.code = 'ECONNABORT';
+    callback(err);
+  }
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // file
+  function onfile() {
+    streaming = false;
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (streaming !== false && !done) {
+        onaborted();
+        return;
+      }
+
+      if (done) return;
+      done = true;
+      callback();
+    });
+  }
+
+  // streaming
+  function onstream() {
+    streaming = true;
+  }
+
+  file.on('directory', ondirectory);
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('file', onfile);
+  file.on('stream', onstream);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
-  var head = 'HEAD' == req.method;
-  // ETag support
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
-      etag && this.set('ETag', etag);
+  // populate ETag
+  var etag;
+  var generateETag = len !== undefined && app.get('etag fn');
+  if (typeof generateETag === 'function' && !this.get('ETag')) {
+    if ((etag = generateETag(body, encoding))) {
+      this.set('ETag', etag);
-  // respond
-  this.end((head ? null : body), encoding);
+  if (req.method === 'HEAD') {
+    // skip body for HEAD
+    this.end();
+  } else {
+    // respond
+    this.end(body, encoding);
+  }","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
+
+ * @api private
+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
-var parseUrl = require('parseurl');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.sendStatus(status) instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
-  // ETag support
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
-      etag && this.set('ETag', etag);
+  // populate ETag
+  var etag;
+  var generateETag = len !== undefined && app.get('etag fn');
+  if (typeof generateETag === 'function' && !this.get('ETag')) {
+    if ((etag = generateETag(chunk, encoding))) {
+      this.set('ETag', etag);
-    body = '';
-  }
-
-  // respond
-  this.end((head ? null : body), encoding);
+    chunk = '';
+  }
+
+  if (req.method === 'HEAD') {
+    // skip body for HEAD
+    this.end();
+  } else {
+    // respond
+    this.end(chunk, encoding);
+  }
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', contentDisposition(filename));
-
-  return this.sendfile(path, fn);
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
+ * Append additional header `field` with value `val`.
+ *
+ * Example:
+ *
+ *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
+ *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
+ *    res.append('Warning', '199 Miscellaneous warning');
+ *
+ * @param {String} field
+ * @param {String|Array} val
+ * @return {ServerResponse} for chaining
+ * @api public
+ */
+
+res.append = function append(field, val) {
+  var prev = this.get(field);
+  var value = val;
+
+  if (prev) {
+    // concat the new and prev vals
+    value = Array.isArray(prev) ? prev.concat(val)
+      : Array.isArray(val) ? [prev].concat(val)
+      : [prev, val];
+  }
+
+  return this.set(field, value);
+};
+
+/**
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
-      var u = escapeHtml(url);
+      var u = escapeHtml(address);
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  } else {
+    this.end(body);
+  }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+  var streaming;
+
+  // request aborted
+  function onaborted() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('Request aborted');
+    err.code = 'ECONNABORT';
+    callback(err);
+  }
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // file
+  function onfile() {
+    streaming = false;
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (streaming !== false && !done) {
+        onaborted();
+        return;
+      }
+
+      if (done) return;
+      done = true;
+      callback();
+    });
+  }
+
+  // streaming
+  function onstream() {
+    streaming = true;
+  }
+
+  file.on('directory', ondirectory);
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('file', onfile);
+  file.on('stream', onstream);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}"
expressjs_express,531f024e486c13eb6d7e2bc0966ea95b1567197a,Merge tag '3.20.0',lib/utils.js,"-
+var contentDisposition = require('content-disposition');
+var deprecate = require('depd')('express');
+var mime = require('send').mime;
+var basename = require('path').basename;
-var mime = require('connect').mime;
+var qs = require('qs');
+var querystring = require('querystring');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
-};
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = deprecate.function(contentDisposition,
+  'utils.contentDisposition: use content-disposition npm module instead');
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
+ * Compile ""query parser"" value to function.
+ *
+ * @param  {String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileQueryParser = function compileQueryParser(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = querystring.parse;
+      break;
+    case false:
+      fn = newObject;
+      break;
+    case 'extended':
+      fn = qs.parse;
+      break;
+    case 'simple':
+      fn = querystring.parse;
+      break;
+    default:
+      throw new TypeError('unknown value for query parser function: ' + val);
+  }
+
+  return fn;
+}
+
+/**
+
+/**
+ * Return new empty object.
+ *
+ * @return {Object}
+ * @api private
+ */
+
+function newObject() {
+  return {};
+}","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
- */
-
+ * @api private
+ */
+
+var contentType = require('content-type');
-var typer = require('media-typer');
-exports.setCharset = function(type, charset){
-  if (!type || !charset) return type;
+exports.setCharset = function setCharset(type, charset) {
+  if (!type || !charset) {
+    return type;
+  }
-  var parsed = typer.parse(type);
+  var parsed = contentType.parse(type);
-  return typer.format(parsed);
-};
+  return contentType.format(parsed);
+};","+/*!
+ * express
+ * Copyright(c) 2009-2013 TJ Holowaychuk
+ * Copyright(c) 2014-2015 Douglas Christopher Wilson
+ * MIT Licensed
+ */
- */
-
+ * @api private
+ */
+
+var contentDisposition = require('content-disposition');
+var contentType = require('content-type');
+var deprecate = require('depd')('express');
+var mime = require('send').mime;
+var basename = require('path').basename;
-var mime = require('connect').mime;
-var typer = require('media-typer');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var qs = require('qs');
+var querystring = require('querystring');
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
-};
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = deprecate.function(contentDisposition,
+  'utils.contentDisposition: use content-disposition npm module instead');
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
+ * Compile ""query parser"" value to function.
+ *
+ * @param  {String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileQueryParser = function compileQueryParser(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = querystring.parse;
+      break;
+    case false:
+      fn = newObject;
+      break;
+    case 'extended':
+      fn = qs.parse;
+      break;
+    case 'simple':
+      fn = querystring.parse;
+      break;
+    default:
+      throw new TypeError('unknown value for query parser function: ' + val);
+  }
+
+  return fn;
+}
+
+/**
-exports.setCharset = function(type, charset){
-  if (!type || !charset) return type;
+exports.setCharset = function setCharset(type, charset) {
+  if (!type || !charset) {
+    return type;
+  }
-  var parsed = typer.parse(type);
+  var parsed = contentType.parse(type);
-  return typer.format(parsed);
-};
+  return contentType.format(parsed);
+};
+
+/**
+ * Return new empty object.
+ *
+ * @return {Object}
+ * @api private
+ */
+
+function newObject() {
+  return {};
+}"
expressjs_express,531f024e486c13eb6d7e2bc0966ea95b1567197a,Merge tag '3.20.0',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.3"",
+    ""accepts"": ""~1.2.3"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.6"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""hjs"": ""~0.0.6""
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.11.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.2"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.19.2"",
+  ""version"": ""3.20.0"",
-    ""connect"": ""2.28.3"",
+    ""connect"": ""2.29.0"",
+    ""content-type"": ""~1.0.1"",
-    ""cookie-signature"": ""1.0.5"",
+    ""cookie-signature"": ""1.0.6"",
-    ""media-typer"": ""0.3.0"",
-    ""send"": ""0.11.1"",
+    ""send"": ""0.12.1"",
-    ""should"": ""~4.6.2"",
+    ""should"": ""~5.0.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.3"",
+    ""accepts"": ""~1.2.3"",
-    ""commander"": ""2.6.0"",
-    ""cookie-signature"": ""1.0.5"",
+    ""content-type"": ""~1.0.1"",
+    ""cookie-signature"": ""1.0.6"",
+    ""finalhandler"": ""0.3.3"",
-    ""media-typer"": ""0.3.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.11.1"",
-    ""utils-merge"": ""1.0.0"",
+    ""send"": ""0.12.1"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.6"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.6.2"",
+    ""should"": ""~5.0.0"",
-    ""hjs"": ""~0.0.6""
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.11.0"",
+    ""connect-redis"": ""~2.2.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.2"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,531f024e486c13eb6d7e2bc0966ea95b1567197a,Merge tag '3.20.0',test/res.send.js,"+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-8084ccd1""')
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-        var str = Array(1024 * 2).join('-');
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+      .expect('ETag', 'W/""3e7-8084ccd1""')
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
+    var etag = '""asdf""';
-      var str = Array(1024 * 2).join('-');
+      var str = Array(1000).join('-');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+    .set('If-None-Match', etag)
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-        .expect('etag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""', done)
+        .expect('etag', 'W/""3e7-8084ccd1""', done)
-          var str = Array(1024 * 2).join('-');
+          var str = Array(1000).join('-');
-          body.should.equal('hello, world!')
-          encoding.should.equal('utf8')
+          var chunk = !Buffer.isBuffer(body)
+            ? new Buffer(body, encoding)
+            : body;
+          chunk.toString().should.equal('hello, world!')","-var express = require('../')
-  , request = require('supertest')
-  , assert = require('assert');
+var assert = require('assert');
+var express = require('..');
+var methods = require('methods');
+var request = require('supertest');
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
-    })
-
-    it('should not set ETag for non-GET/HEAD', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1024 * 2).join('-');
-        res.send(str);
-      });
-
-      request(app)
-      .post('/')
-      .end(function(err, res){
-        if (err) return done(err);
-        assert(!res.header.etag, 'has an ETag');
-        done();
-      });
+      .expect(200, done);
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
-      .end(done);
+      .expect(200, done);
-  describe('""etag"" setting', function(){
-    describe('when enabled', function(){
-      it('should send ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+  describe('""etag"" setting', function () {
+    describe('when enabled', function () {
+      it('should send ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""c-5aee35d8""', done)
-      })
-
-      it('should send ETag for empty string response', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send('')
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .expect('etag', 'W/""0-0""', done)
-      })
-
-      it('should send ETag for long response', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect(200, done);
+      });
+
+      methods.forEach(function (method) {
+        if (method === 'connect') return;
+
+        it('should send ETag in response to ' + method.toUpperCase() + ' request', function (done) {
+          var app = express();
+
+          app[method]('/', function (req, res) {
+            res.send('kajdslfkasdf');
+          });
+
+          request(app)
+          [method]('/')
+          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect(200, done);
+        })
+      });
+
+      it('should send ETag for empty string response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send('');
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('ETag', 'W/""0-0""')
+        .expect(200, done);
+      })
+
+      it('should send ETag for long response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""', done)
-      });
-
-      it('should not override ETag when manually set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+        .expect(200, done);
+      });
+
+      it('should not override ETag when manually set', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
-      });
-
-      it('should not send ETag for res.send()', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send()
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        })
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
+      });
+
+      it('should not send ETag for res.send()', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send();
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
-    describe('when disabled', function(){
-      it('should send no ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+    describe('when disabled', function () {
+      it('should send no ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        });
-      });
-
-      it('should send ETag when manually set', function(done){
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+      });
+
+      it('should send ETag when manually set', function (done) {
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
-    describe('when ""strong""', function(){
-      it('should send strong ETag', function(done){
-        var app = express()
+    describe('when ""strong""', function () {
+      it('should send strong ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
-      })
-    })
-
-    describe('when ""weak""', function(){
-      it('should send weak ETag', function(done){
-        var app = express()
+        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect(200, done);
+      })
+    })
+
+    describe('when ""weak""', function () {
+      it('should send weak ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', 'W/""d-58988d13""', done)
-      })
-    })
-
-    describe('when a function', function(){
-      it('should send custom ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          body.should.equal('hello, world!')
-          encoding.should.equal('utf8')
-          return '""custom""'
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""d-58988d13""')
+        .expect(200, done)
+      })
+    })
+
+    describe('when a function', function () {
+      it('should send custom ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          body.should.equal('hello, world!');
+          encoding.should.equal('utf8');
+          return '""custom""';
+        });
+
+        app.use(function (req, res) {
-        .expect('etag', '""custom""', done)
-      })
-
-      it('should not send falsy ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          return undefined
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', '""custom""')
+        .expect(200, done);
+      })
+
+      it('should not send falsy ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          return undefined;
+        });
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag')
-          done();
-        })
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+
+function shouldNotHaveHeader(header) {
+  return function (res) {
+    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
+  }
+}","-var express = require('../')
-  , request = require('supertest')
-  , assert = require('assert');
+var assert = require('assert');
+var express = require('..');
+var methods = require('methods');
+var request = require('supertest');
+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1024 * 2).join('-');
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
-      .end(done);
-    })
-
-    it('should not set ETag for non-GET/HEAD', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1024 * 2).join('-');
-        res.send(str);
-      });
-
-      request(app)
-      .post('/')
-      .end(function(err, res){
-        if (err) return done(err);
-        assert(!res.header.etag, 'has an ETag');
-        done();
-      });
+      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect(200, done);
-    it('should set ETag', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        var str = Array(1024 * 2).join('-');
+    it('should set ETag', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        var str = Array(1000).join('-');
-      .expect('ETag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
-      .end(done);
+      .expect('ETag', 'W/""3e7-8084ccd1""')
+      .expect(200, done);
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
+    var etag = '""asdf""';
-      var str = Array(1024 * 2).join('-');
+      var str = Array(1000).join('-');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'W/""fz/jGo0ONwzb+aKy/rWipg==""')
+    .set('If-None-Match', etag)
-  describe('""etag"" setting', function(){
-    describe('when enabled', function(){
-      it('should send ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+  describe('""etag"" setting', function () {
+    describe('when enabled', function () {
+      it('should send ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', 'W/""c-5aee35d8""', done)
-      })
-
-      it('should send ETag for empty string response', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send('')
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .expect('etag', 'W/""0-0""', done)
-      })
-
-      it('should send ETag for long response', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          var str = Array(1024 * 2).join('-');
+        .expect('ETag', 'W/""c-5aee35d8""')
+        .expect(200, done);
+      });
+
+      methods.forEach(function (method) {
+        if (method === 'connect') return;
+
+        it('should send ETag in response to ' + method.toUpperCase() + ' request', function (done) {
+          var app = express();
+
+          app[method]('/', function (req, res) {
+            res.send('kajdslfkasdf');
+          });
+
+          request(app)
+          [method]('/')
+          .expect('ETag', 'W/""c-5aee35d8""')
+          .expect(200, done);
+        })
+      });
+
+      it('should send ETag for empty string response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send('');
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('ETag', 'W/""0-0""')
+        .expect(200, done);
+      })
+
+      it('should send ETag for long response', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          var str = Array(1000).join('-');
-        .expect('etag', 'W/""fz/jGo0ONwzb+aKy/rWipg==""', done)
-      });
-
-      it('should not override ETag when manually set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""3e7-8084ccd1""')
+        .expect(200, done);
+      });
+
+      it('should not override ETag when manually set', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
-      });
-
-      it('should not send ETag for res.send()', function(done){
-        var app = express()
-
-        app.use(function(req, res){
-          res.send()
-        });
-
-        app.enable('etag')
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        })
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
+      });
+
+      it('should not send ETag for res.send()', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          res.send();
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
-    describe('when disabled', function(){
-      it('should send no ETag', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          var str = Array(1024 * 2).join('-');
+    describe('when disabled', function () {
+      it('should send no ETag', function (done) {
+        var app = express();
+
+        app.use(function (req, res) {
+          var str = Array(1000).join('-');
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag');
-          done();
-        });
-      });
-
-      it('should send ETag when manually set', function(done){
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+      });
+
+      it('should send ETag when manually set', function (done) {
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""asdf""', done)
+        .expect('ETag', '""asdf""')
+        .expect(200, done);
-    describe('when ""strong""', function(){
-      it('should send strong ETag', function(done){
-        var app = express()
+    describe('when ""strong""', function () {
+      it('should send strong ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
-      })
-    })
-
-    describe('when ""weak""', function(){
-      it('should send weak ETag', function(done){
-        var app = express()
+        .expect('ETag', '""Otu60XkfuuPskIiUxJY4cA==""')
+        .expect(200, done);
+      })
+    })
+
+    describe('when ""weak""', function () {
+      it('should send weak ETag', function (done) {
+        var app = express();
-        app.use(function(req, res){
+        app.use(function (req, res) {
-        .expect('etag', 'W/""d-58988d13""', done)
-      })
-    })
-
-    describe('when a function', function(){
-      it('should send custom ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          body.should.equal('hello, world!')
-          encoding.should.equal('utf8')
-          return '""custom""'
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', 'W/""d-58988d13""')
+        .expect(200, done)
+      })
+    })
+
+    describe('when a function', function () {
+      it('should send custom ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          var chunk = !Buffer.isBuffer(body)
+            ? new Buffer(body, encoding)
+            : body;
+          chunk.toString().should.equal('hello, world!');
+          return '""custom""';
+        });
+
+        app.use(function (req, res) {
-        .expect('etag', '""custom""', done)
-      })
-
-      it('should not send falsy ETag', function(done){
-        var app = express()
-
-        app.set('etag', function(body, encoding){
-          return undefined
-        });
-
-        app.use(function(req, res){
+        .expect('ETag', '""custom""')
+        .expect(200, done);
+      })
+
+      it('should not send falsy ETag', function (done) {
+        var app = express();
+
+        app.set('etag', function (body, encoding) {
+          return undefined;
+        });
+
+        app.use(function (req, res) {
-        .end(function(err, res){
-          res.headers.should.not.have.property('etag')
-          done();
-        })
+        .expect(shouldNotHaveHeader('ETag'))
+        .expect(200, done);
+
+function shouldNotHaveHeader(header) {
+  return function (res) {
+    assert.ok(!(header.toLowerCase() in res.headers), 'should not have header ' + header)
+  }
+}"
expressjs_express,a9ef9e13fb91152bf4eaa9b8afa69d9b30274c09,Merge tag '4.11.2',lib/application.js,"-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+app.route = function route(path) {
+  return this.router.route(path);
-app.param = function(name, fn){
-  this.lazyrouter();
-
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","-* @api public
+* @api private","-var middleware = require('./middleware/init');
-var query = require('./middleware/query');
-var deprecate = require('depd')('express');
+  var router = null;
+
+
+  // Setup getting to lazily add base router
+  Object.defineProperty(this, 'router', {
+    configurable: true,
+    enumerable: true,
+    get: function getrouter() {
+      if (router === null) {
+        router = new Router({
+          caseSensitive: this.enabled('case sensitive routing'),
+          strict: this.enabled('strict routing')
+        });
+      }
+
+      return router;
+    }
+  });
-
-  Object.defineProperty(this, 'router', {
-    get: function() {
-      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
-    }
-  });
-};
-
-/**
- * lazily adds the base router if it has not yet been added.
- *
- * We cannot add the base router in the defaultConfiguration because
- * it reads app settings which might be set after that has run.
- *
- * @api private
- */
-app.lazyrouter = function() {
-  if (!this._router) {
-    this._router = new Router({
-      caseSensitive: this.enabled('case sensitive routing'),
-      strict: this.enabled('strict routing')
-    });
-
-    this._router.use(query(this.get('query parser fn')));
-    this._router.use(middleware.init(this));
-  }
-  var router = this._router;
-
-  // no routes
-  if (!router) {
-    debug('no routes defined on app');
-    done();
-    return;
-  }
-
-  router.handle(req, res, done);
+  // set powered by header
+  if (this.enabled('x-powered-by')) {
+    res.setHeader('X-Powered-By', 'Express');
+  }
+
+  // set circular references
+  req.res = res;
+  res.req = req;
+
+  // alter the prototypes
+  req.__proto__ = this.request;
+  res.__proto__ = this.response;
+
+  // setup locals
+  if (!res.locals) {
+    res.locals = Object.create(null);
+  }
+
+  this.router.handle(req, res, done);
-  // setup router
-  this.lazyrouter();
-  var router = this._router;
+  // get router
+  var router = this.router;
-app.route = function(path){
-  this.lazyrouter();
-  return this._router.route(path);
+app.route = function route(path) {
+  return this.router.route(path);
-app.param = function(name, fn){
-  this.lazyrouter();
-
+app.param = function param(name, fn) {
-    name.forEach(function(key) {
-      this.param(key, fn);
-    }, this);
+    for (var i = 0; i < name.length; i++) {
+      this.param(name[i], fn);
+    }
-  this._router.param(name, fn);
+  this.router.param(name, fn);
-    this.lazyrouter();
-
-    var route = this._router.route(path);
+    var route = this.route(path);
-  this.lazyrouter();
-
-  var route = this._router.route(path);
+  var route = this.route(path);
-
-// del -> delete alias
-
-app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
-* @api public
+* @api private"
expressjs_express,a9ef9e13fb91152bf4eaa9b8afa69d9b30274c09,Merge tag '4.11.2',lib/response.js,"-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","-  }
-
-  this.end(body);
+  } else {
+    this.end(body);
+  }","-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but write errors
-    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
-  }
-
-  this.end(body);
+  } else {
+    this.end(body);
+  }"
expressjs_express,a9ef9e13fb91152bf4eaa9b8afa69d9b30274c09,Merge tag '4.11.2',package.json,"-  ""version"": ""4.11.1"",
+  ""version"": ""5.0.0-alpha.1"",","-  ""version"": ""4.11.1"",
+  ""version"": ""4.11.2"",
-    ""accepts"": ""~1.2.2"",
+    ""accepts"": ""~1.2.3"",
-    ""proxy-addr"": ""~1.0.5"",
+    ""proxy-addr"": ""~1.0.6"",
-    ""type-is"": ""~1.5.5"",
+    ""type-is"": ""~1.5.6"",
+    ""marked"": ""0.3.3"",
-    ""should"": ""~4.6.1"",
+    ""should"": ""~4.6.2"",
-    ""marked"": ""0.3.2"",
-    ""body-parser"": ""~1.10.2"",
-    ""connect-redis"": ""~2.1.0"",
+    ""body-parser"": ""~1.11.0"",
+    ""connect-redis"": ""~2.2.0"",
-    ""express-session"": ""~1.10.1"",
+    ""express-session"": ""~1.10.2"",","-  ""version"": ""4.11.1"",
+  ""version"": ""5.0.0-alpha.1"",
-    ""accepts"": ""~1.2.2"",
+    ""accepts"": ""~1.2.3"",
-    ""proxy-addr"": ""~1.0.5"",
+    ""proxy-addr"": ""~1.0.6"",
-    ""type-is"": ""~1.5.5"",
+    ""type-is"": ""~1.5.6"",
+    ""marked"": ""0.3.3"",
-    ""should"": ""~4.6.1"",
+    ""should"": ""~4.6.2"",
-    ""marked"": ""0.3.2"",
-    ""body-parser"": ""~1.10.2"",
-    ""connect-redis"": ""~2.1.0"",
+    ""body-parser"": ""~1.11.0"",
+    ""connect-redis"": ""~2.2.0"",
-    ""express-session"": ""~1.10.1"",
+    ""express-session"": ""~1.10.2"","
expressjs_express,c73d7650b5c708ddef110f505adf82fc5f5ab606,Merge tag '3.19.2',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.2"",
+    ""accepts"": ""~1.2.2"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.6"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.19.1"",
+  ""version"": ""3.19.2"",
-    ""connect"": ""2.28.2"",
+    ""connect"": ""2.28.3"",
-    ""proxy-addr"": ""~1.0.5"",
+    ""proxy-addr"": ""~1.0.6"",
+    ""marked"": ""0.3.3"",
-    ""should"": ""~4.6.1"",
+    ""should"": ""~4.6.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""hjs"": ""~0.0.6""","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.2"",
+    ""accepts"": ""~1.2.2"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.5"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.6"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.6"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.3"",
-    ""should"": ""~4.6.1"",
+    ""should"": ""~4.6.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',lib/request.js,"-var deprecate = require('depd')('express');
-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+
+/**
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));","-req.param = function(name, defaultValue){
+req.param = function param(name, defaultValue) {
+
+  var args = arguments.length === 1
+    ? 'name'
+    : 'name, default';
+  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+
+
-    return fresh(this.headers, this.res._headers);
+    return fresh(this.headers, (this.res._headers || {}));","-req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
-  'req.acceptsEncoding: Use acceptsEncodings instead');
-
-req.acceptsCharset = deprecate.function(req.acceptsCharsets,
-  'req.acceptsCharset: Use acceptsCharsets instead');
-
-
-req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
-  'req.acceptsLanguage: Use acceptsLanguages instead');
+ * Parse the query string of `req.url`.
+ *
+ * This uses the ""query parser"" setting to parse the raw
+ * string into an object.
+ *
+ * @return {String}
+ * @api public
+ */
+
+defineGetter(req, 'query', function query(){
+  var queryparse = this.app.get('query parser fn');
+
+  if (!queryparse) {
+    // parsing is disabled
+    return Object.create(null);
+  }
+
+  var querystring = parse(this).query;
+
+  return queryparse(querystring);
+});
+
+/**
-req.param = function(name, defaultValue){
+req.param = function param(name, defaultValue) {
+
+  var args = arguments.length === 1
+    ? 'name'
+    : 'name, default';
+  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');
+
+
- * Parse the ""Host"" header field to a hostname.
+ * Parse the ""Host"" header field to a host.
+defineGetter(req, 'host', function host(){
+  var trust = this.app.get('trust proxy fn');
+  var val = this.get('X-Forwarded-Host');
+
+  if (!val || !trust(this.connection.remoteAddress)) {
+    val = this.get('Host');
+  }
+
+  return val || undefined;
+});
+
+/**
+ * Parse the ""Host"" header field to a hostname.
+ *
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
+ * @return {String}
+ * @api public
+ */
+
-  var trust = this.app.get('trust proxy fn');
-  var host = this.get('X-Forwarded-Host');
-
-  if (!host || !trust(this.connection.remoteAddress)) {
-    host = this.get('Host');
-  }
+  var host = this.host;
-// TODO: change req.host to return host in next major
-
-defineGetter(req, 'host', deprecate.function(function host(){
-  return this.hostname;
-}, 'req.host: Use req.hostname instead'));
-
-    return fresh(this.headers, this.res._headers);
+    return fresh(this.headers, (this.res._headers || {}));"
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',lib/response.js,"-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but aborted errors
-    if (err && err.code !== 'ECONNABORT') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
-
-/**
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.","-  // skip body for HEAD
+    // skip body for HEAD
-  }
-
-  // respond
-  this.end(chunk, encoding);
+  } else {
+    // respond
+    this.end(chunk, encoding);
+  }
-    // next() all but aborted errors
-    if (err && err.code !== 'ECONNABORT') {
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-    // next() all but aborted errors
-    if (err && err.code !== 'ECONNABORT') {
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
+};
+
+/**
+ * Append additional header `field` with value `val`.
+ *
+ * Example:
+ *
+ *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
+ *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
+ *    res.append('Warning', '199 Miscellaneous warning');
+ *
+ * @param {String} field
+ * @param {String|Array} val
+ * @return {ServerResponse} for chaining
+ * @api public
+ */
+
+res.append = function append(field, val) {
+  var prev = this.get(field);
+  var value = val;
+
+  if (prev) {
+    // concat the new and prev vals
+    value = Array.isArray(prev) ? prev.concat(val)
+      : Array.isArray(val) ? [prev].concat(val)
+      : [prev, val];
+  }
+
+  return this.set(field, value);
+  var streaming;
+
+  // request aborted
+  function onaborted() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('Request aborted');
+    err.code = 'ECONNABORT';
+    callback(err);
+  }
+  // file
+  function onfile() {
+    streaming = false;
+  }
+
+      if (streaming !== false && !done) {
+        onaborted();
+        return;
+      }
+
-
-      // response finished before end of file
-      var err = new Error('Request aborted');
-      err.code = 'ECONNABORT';
-      callback(err);
+      callback();
+  // streaming
+  function onstream() {
+    streaming = true;
+  }
+
+  file.on('directory', ondirectory);
-  file.on('directory', ondirectory);
+  file.on('file', onfile);
+  file.on('stream', onstream);","-  // allow status / body
+  // support res.send(status, body)
-    // res.send(body, status) backwards compat
-    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
-      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
-      this.statusCode = arguments[0];
-      chunk = arguments[1];
-    }
-  }
-
-  // disambiguate res.send(status) and res.send(status, num)
-  if (typeof chunk === 'number' && arguments.length === 1) {
-    // res.send(status) will set status message as text string
-    if (!this.get('Content-Type')) {
-      this.type('txt');
-    }
-
-    deprecate('res.send(status): Use res.sendStatus(status) instead');
-    this.statusCode = chunk;
-    chunk = http.STATUS_CODES[chunk];
+    deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+    this.statusCode = arguments[0];
+    chunk = arguments[1];
-  // skip body for HEAD
+    // skip body for HEAD
-  }
-
-  // respond
-  this.end(chunk, encoding);
+  } else {
+    // respond
+    this.end(chunk, encoding);
+  }
-  // allow status / body
+  // support res.json(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-  // allow status / body
+  // support res.jsonp(status, obj)
-    // res.json(body, status) backwards compat
-    if (typeof arguments[1] === 'number') {
-      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      this.statusCode = arguments[1];
-    } else {
-      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
-      this.statusCode = arguments[0];
-      val = arguments[1];
-    }
+    deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+    this.statusCode = arguments[0];
+    val = arguments[1];
-    // next() all but aborted errors
-    if (err && err.code !== 'ECONNABORT') {
+    // next() all but write errors
+    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
-
-/**
- * Transfer the file at the given `path`.
- *
- * Automatically sets the _Content-Type_ response header field.
- * The callback `fn(err)` is invoked when the transfer is complete
- * or when an error occurs. Be sure to check `res.sentHeader`
- * if you wish to attempt responding, as the header and some data
- * may have already been transferred.
- *
- * Options:
- *
- *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
- *   - `root`     root directory for relative filenames
- *   - `headers`  object of headers to serve with file
- *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
- *
- * Other options are passed along to `send`.
- *
- * Examples:
- *
- *  The following example illustrates how `res.sendfile()` may
- *  be used as an alternative for the `static()` middleware for
- *  dynamic situations. The code backing `res.sendfile()` is actually
- *  the same code, so HTTP cache support etc is identical.
- *
- *     app.get('/user/:uid/photos/:file', function(req, res){
- *       var uid = req.params.uid
- *         , file = req.params.file;
- *
- *       req.user.mayViewFilesFrom(uid, function(yes){
- *         if (yes) {
- *           res.sendfile('/uploads/' + uid + '/' + file);
- *         } else {
- *           res.send(403, 'Sorry! you cant see that.');
- *         }
- *       });
- *     });
- *
- * @api public
- */
-
-res.sendfile = function(path, options, fn){
-  var req = this.req;
-  var res = this;
-  var next = req.next;
-
-  // support function as second arg
-  if (typeof options === 'function') {
-    fn = options;
-    options = {};
-  }
-
-  options = options || {};
-
-  // create file stream
-  var file = send(req, path, options);
-
-  // transfer
-  sendfile(res, file, options, function (err) {
-    if (fn) return fn(err);
-    if (err && err.code === 'EISDIR') return next();
-
-    // next() all but aborted errors
-    if (err && err.code !== 'ECONNABORT') {
-      next(err);
-    }
-  });
-};
-
-res.sendfile = deprecate.function(res.sendfile,
-  'res.sendfile: Use res.sendFile instead');
- * This method uses `res.sendfile()`.
+ * This method uses `res.sendFile()`.
+};
+
+/**
+ * Append additional header `field` with value `val`.
+ *
+ * Example:
+ *
+ *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
+ *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
+ *    res.append('Warning', '199 Miscellaneous warning');
+ *
+ * @param {String} field
+ * @param {String|Array} val
+ * @return {ServerResponse} for chaining
+ * @api public
+ */
+
+res.append = function append(field, val) {
+  var prev = this.get(field);
+  var value = val;
+
+  if (prev) {
+    // concat the new and prev vals
+    value = Array.isArray(prev) ? prev.concat(val)
+      : Array.isArray(val) ? [prev].concat(val)
+      : [prev, val];
+  }
+
+  return this.set(field, value);
+  var streaming;
+
+  // request aborted
+  function onaborted() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('Request aborted');
+    err.code = 'ECONNABORT';
+    callback(err);
+  }
+  // file
+  function onfile() {
+    streaming = false;
+  }
+
+      if (streaming !== false && !done) {
+        onaborted();
+        return;
+      }
+
-
-      // response finished before end of file
-      var err = new Error('Request aborted');
-      err.code = 'ECONNABORT';
-      callback(err);
+      callback();
+  // streaming
+  function onstream() {
+    streaming = true;
+  }
+
+  file.on('directory', ondirectory);
-  file.on('directory', ondirectory);
+  file.on('file', onfile);
+  file.on('stream', onstream);"
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',package.json,"-  ""version"": ""4.10.1"",
+  ""version"": ""5.0.0-alpha.1"",","-  ""version"": ""4.10.1"",
+  ""version"": ""4.11.1"",
-    ""accepts"": ""~1.1.2"",
+    ""accepts"": ""~1.2.2"",
-    ""debug"": ""~2.1.0"",
+    ""debug"": ""~2.1.1"",
-    ""etag"": ""~1.5.0"",
-    ""finalhandler"": ""0.3.2"",
+    ""etag"": ""~1.5.1"",
+    ""finalhandler"": ""0.3.3"",
-    ""methods"": ""1.1.0"",
-    ""on-finished"": ""~2.1.1"",
+    ""methods"": ""~1.1.1"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.3"",
-    ""qs"": ""2.3.2"",
+    ""proxy-addr"": ""~1.0.5"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.10.1"",
-    ""serve-static"": ""~1.7.1"",
-    ""type-is"": ""~1.5.2"",
+    ""send"": ""0.11.1"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.5"",
-    ""istanbul"": ""0.3.2"",
-    ""mocha"": ""~2.0.0"",
-    ""should"": ""~4.1.0"",
-    ""supertest"": ""~0.14.0"",
-    ""ejs"": ""~1.0.0"",
+    ""ejs"": ""2.1.4"",
+    ""istanbul"": ""0.3.5"",
+    ""mocha"": ""~2.1.0"",
+    ""should"": ""~4.6.1"",
+    ""supertest"": ""~0.15.0"",
-    ""body-parser"": ""~1.9.1"",
+    ""body-parser"": ""~1.10.2"",
-    ""express-session"": ""~1.9.1"",
-    ""jade"": ""~1.7.0"",
-    ""method-override"": ""~2.3.0"",
-    ""morgan"": ""~1.4.1"",
-    ""multiparty"": ""~4.0.0"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"",","-  ""version"": ""4.10.1"",
+  ""version"": ""5.0.0-alpha.1"",
-    ""accepts"": ""~1.1.2"",
+    ""accepts"": ""~1.2.2"",
-    ""debug"": ""~2.1.0"",
+    ""debug"": ""~2.1.1"",
-    ""etag"": ""~1.5.0"",
-    ""finalhandler"": ""0.3.2"",
+    ""etag"": ""~1.5.1"",
+    ""finalhandler"": ""0.3.3"",
-    ""methods"": ""1.1.0"",
-    ""on-finished"": ""~2.1.1"",
+    ""methods"": ""~1.1.1"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.3"",
-    ""qs"": ""2.3.2"",
+    ""proxy-addr"": ""~1.0.5"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.10.1"",
-    ""serve-static"": ""~1.7.1"",
-    ""type-is"": ""~1.5.2"",
+    ""send"": ""0.11.1"",
+    ""serve-static"": ""~1.8.1"",
+    ""type-is"": ""~1.5.5"",
-    ""istanbul"": ""0.3.2"",
-    ""mocha"": ""~2.0.0"",
-    ""should"": ""~4.1.0"",
-    ""supertest"": ""~0.14.0"",
-    ""ejs"": ""~1.0.0"",
+    ""ejs"": ""2.1.4"",
+    ""istanbul"": ""0.3.5"",
+    ""mocha"": ""~2.1.0"",
+    ""should"": ""~4.6.1"",
+    ""supertest"": ""~0.15.0"",
-    ""body-parser"": ""~1.9.1"",
+    ""body-parser"": ""~1.10.2"",
-    ""express-session"": ""~1.9.1"",
-    ""jade"": ""~1.7.0"",
-    ""method-override"": ""~2.3.0"",
-    ""morgan"": ""~1.4.1"",
-    ""multiparty"": ""~4.0.0"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.1"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.1"","
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',test/app.options.js,"-    app.del('/', function(){});
+    app.post('/', function(){});","-    .expect('GET,PUT')
-    .expect('Allow', 'GET,PUT', done);
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
+  })
+
+  it('should only include each method once', function(done){
+    var app = express();
+
+    app.del('/', function(){});
+    app.get('/users', function(req, res){});
+    app.put('/users', function(req, res){});
+    app.get('/users', function(req, res){});
+
+    request(app)
+    .options('/users')
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
-    .expect('allow', 'GET,PUT')
-    .expect(200, 'GET,PUT', done);
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
-    .expect('GET')
-    .expect('Allow', 'GET', done);
+    .expect('Allow', 'GET,HEAD')
+    .expect(200, 'GET,HEAD', done);
+  })
+
+  describe('when error occurs in respone handler', function () {
+    it('should pass error to callback', function (done) {
+      var app = express();
+      var router = express.Router();
+
+      router.get('/users', function(req, res){});
+
+      app.use(function (req, res, next) {
+        res.writeHead(200);
+        next();
+      });
+      app.use(router);
+      app.use(function (err, req, res, next) {
+        res.end('true');
+      });
+
+      request(app)
+      .options('/users')
+      .expect(200, 'true', done)
+    })","-    app.del('/', function(){});
+    app.post('/', function(){});
-    .expect('GET,PUT')
-    .expect('Allow', 'GET,PUT', done);
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
+  })
+
+  it('should only include each method once', function(done){
+    var app = express();
+
+    app.delete('/', function(){});
+    app.get('/users', function(req, res){});
+    app.put('/users', function(req, res){});
+    app.get('/users', function(req, res){});
+
+    request(app)
+    .options('/users')
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
-    .expect('allow', 'GET,PUT')
-    .expect(200, 'GET,PUT', done);
+    .expect('Allow', 'GET,HEAD,PUT')
+    .expect(200, 'GET,HEAD,PUT', done);
-    .expect('GET')
-    .expect('Allow', 'GET', done);
+    .expect('Allow', 'GET,HEAD')
+    .expect(200, 'GET,HEAD', done);
+  })
+
+  describe('when error occurs in respone handler', function () {
+    it('should pass error to callback', function (done) {
+      var app = express();
+      var router = express.Router();
+
+      router.get('/users', function(req, res){});
+
+      app.use(function (req, res, next) {
+        res.writeHead(200);
+        next();
+      });
+      app.use(router);
+      app.use(function (err, req, res, next) {
+        res.end('true');
+      });
+
+      request(app)
+      .options('/users')
+      .expect(200, 'true', done)
+    })"
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',test/app.router.js,"-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){","-      res.setHeader('x-user-id', req.params.id);
+      res.setHeader('x-user-id', String(req.params.id));
-      res.setHeader('x-router', req.params.id);
+      res.setHeader('x-router', String(req.params.id));","-      res.setHeader('x-user-id', req.params.id);
+      res.setHeader('x-user-id', String(req.params.id));
-      res.setHeader('x-router', req.params.id);
+      res.setHeader('x-router', String(req.params.id));
-    methods.concat('del').forEach(function(method){
+    methods.forEach(function(method){"
expressjs_express,8a5ecd3d893482bb04de44368d3b95825ab3de41,Merge tag '4.11.1',test/res.sendFile.js,"-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback on 404', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          ++calls;
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .end(function(err, res){
-        assert(1 == calls, 'called too many times');
-        res.text.should.startWith(""ENOENT, stat"");
-        res.statusCode.should.equal(200);
-        done();
-      });
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })","+    it('should include ETag', function (done) {
+      var app = createApp(path.resolve(fixtures, 'name.txt'));
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', done);
+    });
+
+    it('should 304 when ETag matches', function (done) {
+      var app = createApp(path.resolve(fixtures, 'name.txt'));
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', function (err, res) {
+        if (err) return done(err);
+        var etag = res.headers.etag;
+        request(app)
+        .get('/')
+        .set('If-None-Match', etag)
+        .expect(304, done);
+      });
+    });
+
+    })
+
+    it('should not error if the client aborts', function (done) {
+      var cb = after(1, done);
+      var app = express();
+
+      app.use(function (req, res) {
+        setImmediate(function () {
+          res.sendFile(path.resolve(fixtures, 'name.txt'));
+          cb();
+        });
+        test.abort();
+      });
+
+      app.use(function (err, req, res, next) {
+        err.code.should.be.empty;
+        cb();
+      });
+
+      var test = request(app).get('/');
+      test.expect(200, cb);
+    it('should invoke the callback without error when HEAD', function (done) {
+      var app = express();
+      var cb = after(2, done);
+
+      app.use(function (req, res) {
+        res.sendFile(path.resolve(fixtures, 'name.txt'), cb);
+      });
+
+      request(app)
+      .head('/')
+      .expect(200, cb);
+    });
+
+    it('should invoke the callback without error when 304', function (done) {
+      var app = express();
+      var cb = after(3, done);
+
+      app.use(function (req, res) {
+        res.sendFile(path.resolve(fixtures, 'name.txt'), cb);
+      });
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', function (err, res) {
+        if (err) return cb(err);
+        var etag = res.headers.etag;
+        request(app)
+        .get('/')
+        .set('If-None-Match', etag)
+        .expect(304, cb);
+      });
+    });
+
+    it('should invoke the callback without error when HEAD', function (done) {
+      var app = express();
+      var cb = after(2, done);
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/name.txt', cb);
+      });
+
+      request(app)
+      .head('/')
+      .expect(200, cb);
+    });
+
+    it('should invoke the callback without error when 304', function (done) {
+      var app = express();
+      var cb = after(3, done);
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/name.txt', cb);
+      });
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', function (err, res) {
+        if (err) return cb(err);
+        var etag = res.headers.etag;
+        request(app)
+        .get('/')
+        .set('If-None-Match', etag)
+        .expect(304, cb);
+      });
+    });
+
+    it('should not error if the client aborts', function (done) {
+      var cb = after(1, done);
+      var app = express();
+
+      app.use(function (req, res) {
+        setImmediate(function () {
+          res.sendfile(path.resolve(fixtures, 'name.txt'));
+          cb();
+        });
+        test.abort();
+      });
+
+      app.use(function (err, req, res, next) {
+        err.code.should.be.empty;
+        cb();
+      });
+
+      var test = request(app).get('/');
+      test.expect(200, cb);
+    })
+","+    it('should include ETag', function (done) {
+      var app = createApp(path.resolve(fixtures, 'name.txt'));
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', done);
+    });
+
+    it('should 304 when ETag matches', function (done) {
+      var app = createApp(path.resolve(fixtures, 'name.txt'));
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', function (err, res) {
+        if (err) return done(err);
+        var etag = res.headers.etag;
+        request(app)
+        .get('/')
+        .set('If-None-Match', etag)
+        .expect(304, done);
+      });
+    });
+
+    })
+
+    it('should not error if the client aborts', function (done) {
+      var cb = after(1, done);
+      var app = express();
+
+      app.use(function (req, res) {
+        setImmediate(function () {
+          res.sendFile(path.resolve(fixtures, 'name.txt'));
+          cb();
+        });
+        test.abort();
+      });
+
+      app.use(function (err, req, res, next) {
+        err.code.should.be.empty;
+        cb();
+      });
+
+      var test = request(app).get('/');
+      test.expect(200, cb);
+    it('should invoke the callback without error when HEAD', function (done) {
+      var app = express();
+      var cb = after(2, done);
+
+      app.use(function (req, res) {
+        res.sendFile(path.resolve(fixtures, 'name.txt'), cb);
+      });
+
+      request(app)
+      .head('/')
+      .expect(200, cb);
+    });
+
+    it('should invoke the callback without error when 304', function (done) {
+      var app = express();
+      var cb = after(3, done);
+
+      app.use(function (req, res) {
+        res.sendFile(path.resolve(fixtures, 'name.txt'), cb);
+      });
+
+      request(app)
+      .get('/')
+      .expect('ETag', /^(?:W\/)?""[^""]+""$/)
+      .expect(200, 'tobi', function (err, res) {
+        if (err) return cb(err);
+        var etag = res.headers.etag;
+        request(app)
+        .get('/')
+        .set('If-None-Match', etag)
+        .expect(304, cb);
+      });
+    });
+
-
-  describe('.sendfile(path, fn)', function(){
-    it('should invoke the callback when complete', function(done){
-      var app = express();
-      var cb = after(2, done);
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', cb)
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, cb);
-    })
-
-    it('should utilize the same options as express.static()', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { maxAge: 60000 });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Cache-Control', 'public, max-age=60')
-      .end(done);
-    })
-
-    it('should invoke the callback when client aborts', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        setImmediate(function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback when client already aborted', function (done) {
-      var cb = after(1, done);
-      var app = express();
-
-      app.use(function (req, res) {
-        onFinished(res, function () {
-          res.sendfile('test/fixtures/name.txt', function (err) {
-            should(err).be.ok;
-            err.code.should.equal('ECONNABORT');
-            cb();
-          });
-        });
-        test.abort();
-      });
-
-      var test = request(app).get('/');
-      test.expect(200, cb);
-    })
-
-    it('should invoke the callback on 404', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/nope.html', function(err){
-          ++calls;
-          assert(!res.headersSent);
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .end(function(err, res){
-        assert(1 == calls, 'called too many times');
-        res.text.should.startWith(""ENOENT, stat"");
-        res.statusCode.should.equal(200);
-        done();
-      });
-    })
-
-    it('should not override manual content-types', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.contentType('txt');
-        res.sendfile('test/fixtures/user.html');
-      });
-
-      request(app)
-      .get('/')
-      .expect('Content-Type', 'text/plain; charset=utf-8')
-      .end(done);
-    })
-
-    it('should invoke the callback on 403', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/foo/../user.html', function(err){
-          assert(!res.headersSent);
-          ++calls;
-          res.send(err.message);
-        });
-      });
-
-      request(app)
-      .get('/')
-      .expect('Forbidden')
-      .expect(200, done);
-    })
-
-    it('should invoke the callback on socket error', function(done){
-      var app = express()
-        , calls = 0;
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!res.headersSent);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
-
-        req.socket.emit('error', new Error('broken!'));
-      });
-
-      request(app)
-      .get('/')
-      .end(function(){});
-    })
-  })
-
-  describe('.sendfile(path)', function(){
-    it('should not serve dotfiles', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    })
-
-    it('should accept dotfiles option', function(done){
-      var app = express();
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/.name', { dotfiles: 'allow' });
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    })
-
-    it('should accept headers option', function(done){
-      var app = express();
-      var headers = {
-         'x-success': 'sent',
-         'x-other': 'done'
-      };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.html', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect('x-success', 'sent')
-      .expect('x-other', 'done')
-      .expect(200, done);
-    })
-
-    it('should ignore headers option on 404', function(done){
-      var app = express();
-      var headers = { 'x-success': 'sent' };
-
-      app.use(function(req, res){
-        res.sendfile('test/fixtures/user.nothing', { headers: headers });
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, function (err, res) {
-        if (err) return done(err);
-        res.headers.should.not.have.property('x-success');
-        done();
-      });
-    })
-
-    it('should transfer a file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/name.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, 'tobi', done);
-    });
-
-    it('should transfer a directory index file', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog/');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '<b>index</b>', done);
-    });
-
-    it('should 404 for directory without trailing slash', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/blog');
-      });
-
-      request(app)
-      .get('/')
-      .expect(404, done);
-    });
-
-    it('should transfer a file with urlencoded name', function (done) {
-      var app = express();
-
-      app.use(function (req, res) {
-        res.sendfile('test/fixtures/%25%20of%20dogs.txt');
-      });
-
-      request(app)
-      .get('/')
-      .expect(200, '20%', done);
-    });
-
-    describe('with an absolute path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile(__dirname + '/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-    })
-
-    describe('with a relative path', function(){
-      it('should transfer the file', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/user.html');
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should serve relative to ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('user.html', { root: 'test/fixtures/' });
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.text.should.equal('<p>{{user.name}}</p>');
-          res.headers.should.have.property('content-type', 'text/html; charset=UTF-8');
-          done();
-        });
-      })
-
-      it('should consider ../ malicious when ""root"" is not set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('test/fixtures/foo/../user.html');
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should allow ../ when ""root"" is set', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(200, done);
-      })
-
-      it('should disallow requesting out of ""root""', function(done){
-        var app = express();
-
-        app.use(function(req, res){
-          res.sendfile('foo/../../user.html', { root: 'test/fixtures' });
-        });
-
-        request(app)
-        .get('/')
-        .expect(403, done);
-      })
-
-      it('should next(404) when not found', function(done){
-        var app = express()
-          , calls = 0;
-
-        app.use(function(req, res){
-          res.sendfile('user.html');
-        });
-
-        app.use(function(req, res){
-          assert(0, 'this should not be called');
-        });
-
-        app.use(function(err, req, res, next){
-          ++calls;
-          next(err);
-        });
-
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.statusCode.should.equal(404);
-          calls.should.equal(1);
-          done();
-        });
-      })
-
-      describe('with non-GET', function(){
-        it('should still serve', function(done){
-          var app = express()
-            , calls = 0;
-
-          app.use(function(req, res){
-            res.sendfile(__dirname + '/fixtures/name.txt');
-          });
-
-          request(app)
-          .get('/')
-          .expect('tobi', done);
-        })
-      })
-    })
-  })"
expressjs_express,82689d68cf39226aebf838aecb54e42a4aa4ac18,Merge tag '3.19.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.1"",
+    ""accepts"": ""~1.2.2"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.8.0"",
+    ""type-is"": ""~1.5.5"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.0"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.19.0"",
+  ""version"": ""3.19.1"",
-    ""connect"": ""2.28.1"",
+    ""connect"": ""2.28.2"",
-    ""send"": ""0.11.0"",
+    ""send"": ""0.11.1"",
-    ""ejs"": ""2.0.8"",
+    ""ejs"": ""2.1.4"",
-    ""should"": ""~4.4.4"",
+    ""should"": ""~4.6.1"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.19.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.11.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.28.1"",
+    ""accepts"": ""~1.2.2"",
-    ""commander"": ""2.6.0"",
+    ""finalhandler"": ""0.3.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.2.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.11.0"",
-    ""utils-merge"": ""1.0.0"",
+    ""send"": ""0.11.1"",
+    ""serve-static"": ""~1.8.0"",
+    ""type-is"": ""~1.5.5"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""ejs"": ""2.0.8"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.1.4"",
-    ""should"": ""~4.4.4"",
+    ""should"": ""~4.6.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.10.1"",
+    ""jade"": ""~1.9.0"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,82689d68cf39226aebf838aecb54e42a4aa4ac18,Merge tag '3.19.1',test/res.format.js,"+    describe('with parameters', function(){
+      var app = express();
+
+      app.use(function(req, res, next){
+        res.format({
+          'text/plain; charset=utf-8': function(){ res.send('hey') },
+          'text/html; foo=bar; bar=baz': function(){ res.send('<p>hey</p>') },
+          'application/json; q=0.5': function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      app.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      });
+
+      test(app);
+    })
+
+    })
+
+    describe('in router', function(){
+      var app = express();
+      var router = express.Router();
+
+      router.get('/', function(req, res, next){
+        res.format({
+          text: function(){ res.send('hey') },
+          html: function(){ res.send('<p>hey</p>') },
+          json: function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      router.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      })
+
+      app.use(router)
+
+      test(app)","-        .set('Accept: text/html')
+        .set('Accept', 'text/html')","+    describe('with parameters', function(){
+      var app = express();
+
+      app.use(function(req, res, next){
+        res.format({
+          'text/plain; charset=utf-8': function(){ res.send('hey') },
+          'text/html; foo=bar; bar=baz': function(){ res.send('<p>hey</p>') },
+          'application/json; q=0.5': function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      app.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      });
+
+      test(app);
+    })
+
-        .set('Accept: text/html')
+        .set('Accept', 'text/html')
+    })
+
+    describe('in router', function(){
+      var app = express();
+      var router = express.Router();
+
+      router.get('/', function(req, res, next){
+        res.format({
+          text: function(){ res.send('hey') },
+          html: function(){ res.send('<p>hey</p>') },
+          json: function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      router.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      })
+
+      app.use(router)
+
+      test(app)"
expressjs_express,82689d68cf39226aebf838aecb54e42a4aa4ac18,Merge tag '3.19.1',test/res.set.js,"-        res.set('Content-Type', 'text/x-foo').end();
+        res.set('Content-Type', 'text/x-foo; charset=utf-8').end();
-      .expect('Content-Type', 'text/x-foo')
+      .expect('Content-Type', 'text/x-foo; charset=utf-8')
+
+    it('should not set a charset of one is already set', function () {
+      res.headers = {};
+      res.set('Content-Type', 'text/html; charset=lol');
+      res.get('content-type').should.equal('text/html; charset=lol');
+    })","-var express = require('../')
-  , request = require('supertest')
-  , res = express.response;
+var express = require('..');
+var request = require('supertest');
-    it('should coerce to a string', function(){
-      res.headers = {};
-      res.set('X-Number', 123);
-      res.get('X-Number').should.equal('123');
+    it('should coerce to a string', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set('X-Number', 123);
+        res.end(typeof res.get('X-Number'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Number', '123')
+      .expect(200, 'string', done);
-    it('should coerce to an array of strings', function(){
-      res.headers = {};
-      res.set('X-Numbers', [123, 456]);
-      JSON.stringify(res.get('X-Numbers'))
-      .should.equal('[""123"",""456""]');
+    it('should coerce to an array of strings', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set('X-Numbers', [123, 456]);
+        res.end(JSON.stringify(res.get('X-Numbers')));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Numbers', '123, 456')
+      .expect(200, '[""123"",""456""]', done);
-    it('should coerce to a string', function(){
-      res.headers = {};
-      res.set({ 'X-Number': 123 });
-      res.get('X-Number').should.equal('123');
+    it('should coerce to a string', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set({ 'X-Number': 123 });
+        res.end(typeof res.get('X-Number'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Number', '123')
+      .expect(200, 'string', done);","-var express = require('../')
-  , request = require('supertest')
-  , res = express.response;
+var express = require('..');
+var request = require('supertest');
-        res.set('Content-Type', 'text/x-foo').end();
+        res.set('Content-Type', 'text/x-foo; charset=utf-8').end();
-      .expect('Content-Type', 'text/x-foo')
+      .expect('Content-Type', 'text/x-foo; charset=utf-8')
-    it('should coerce to a string', function(){
-      res.headers = {};
-      res.set('X-Number', 123);
-      res.get('X-Number').should.equal('123');
+    it('should coerce to a string', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set('X-Number', 123);
+        res.end(typeof res.get('X-Number'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Number', '123')
+      .expect(200, 'string', done);
-    it('should coerce to an array of strings', function(){
-      res.headers = {};
-      res.set('X-Numbers', [123, 456]);
-      JSON.stringify(res.get('X-Numbers'))
-      .should.equal('[""123"",""456""]');
+    it('should coerce to an array of strings', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set('X-Numbers', [123, 456]);
+        res.end(JSON.stringify(res.get('X-Numbers')));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Numbers', '123, 456')
+      .expect(200, '[""123"",""456""]', done);
+    })
+
+    it('should not set a charset of one is already set', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set('Content-Type', 'text/html; charset=lol');
+        res.end();
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/html; charset=lol')
+      .expect(200, done);
-    it('should coerce to a string', function(){
-      res.headers = {};
-      res.set({ 'X-Number': 123 });
-      res.get('X-Number').should.equal('123');
+    it('should coerce to a string', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.set({ 'X-Number': 123 });
+        res.end(typeof res.get('X-Number'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('X-Number', '123')
+      .expect(200, 'string', done);"
expressjs_express,b809498cf8ceb43f64ea3c23e0a266d354d4f37a,Merge tag '3.19.0',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.6"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.6"",
+    ""accepts"": ""~1.1.4"",
-    ""commander"": ""1.3.2"",
-    ""debug"": ""~2.1.0"",
+    ""debug"": ""~2.1.1"",
+    ""finalhandler"": ""0.3.3"",
-    ""methods"": ""1.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""methods"": ""1.1.1"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.4"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.5"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.2"",
+    ""type-is"": ""~1.5.5"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.2"",
+    ""jade"": ""~1.8.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.18.6"",
+  ""version"": ""3.19.0"",
-    ""connect"": ""2.27.6"",
+    ""connect"": ""2.28.1"",
-    ""commander"": ""1.3.2"",
+    ""commander"": ""2.6.0"",
-    ""debug"": ""~2.1.0"",
+    ""debug"": ""~2.1.1"",
-    ""methods"": ""1.1.0"",
+    ""methods"": ""~1.1.1"",
-    ""proxy-addr"": ""~1.0.4"",
+    ""proxy-addr"": ""~1.0.5"",
-    ""send"": ""0.10.1"",
+    ""send"": ""0.11.0"",
+    ""ejs"": ""2.0.8"",
-    ""mocha"": ""~2.0.0"",
-    ""should"": ""~4.3.1"",
+    ""mocha"": ""~2.1.0"",
+    ""should"": ""~4.4.4"",
-    ""ejs"": ""~1.0.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.6"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.6"",
+    ""accepts"": ""~1.1.4"",
-    ""commander"": ""1.3.2"",
-    ""debug"": ""~2.1.0"",
+    ""debug"": ""~2.1.1"",
+    ""finalhandler"": ""0.3.3"",
-    ""methods"": ""1.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""methods"": ""~1.1.1"",
+    ""on-finished"": ""~2.2.0"",
-    ""proxy-addr"": ""~1.0.4"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.5"",
+    ""qs"": ""2.3.3"",
-    ""send"": ""0.10.1"",
-    ""utils-merge"": ""1.0.0"",
+    ""send"": ""0.11.0"",
+    ""serve-static"": ""~1.7.2"",
+    ""type-is"": ""~1.5.5"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""ejs"": ""2.0.8"",
-    ""mocha"": ""~2.0.0"",
-    ""should"": ""~4.3.1"",
+    ""mocha"": ""~2.1.0"",
+    ""should"": ""~4.4.4"",
-    ""ejs"": ""~1.0.0"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.10.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.2"",
+    ""jade"": ""~1.8.2"",
+    ""method-override"": ""~2.3.1"",
+    ""morgan"": ""~1.5.1"",
+    ""multiparty"": ""~4.1.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',examples/error-pages/index.js,"-var express = require('../../')
-  , app = module.exports = express()
-  , silent = 'test' == process.env.NODE_ENV;
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var silent = 'test' == process.env.NODE_ENV;
-app.use(express.favicon());
+silent || app.use(logger('dev'));
-silent || app.use(express.logger('dev'));
+// Routes
-// ""app.router"" positions our routes 
-// above the middleware defined below,
-// this means that Express will attempt
-// to match & call routes _before_ continuing
-// on, at which point we assume it's a 404 because
-// no route has handled the request.
+app.get('/', function(req, res){
+  res.render('index.jade');
+});
-app.use(app.router);
+app.get('/404', function(req, res, next){
+  // trigger a 404 since no other middleware
+  // will match /404 after this one, and we're not
+  // responding here
+  next();
+});
+
+app.get('/403', function(req, res, next){
+  // trigger a 403 error
+  var err = new Error('not allowed!');
+  err.status = 403;
+  next(err);
+});
+
+app.get('/500', function(req, res, next){
+  // trigger a generic (500) error
+  next(new Error('keyboard cat!'));
+});
+
+// Error handlers
-  
+
-// Routes
-
-app.get('/', function(req, res){
-  res.render('index.jade');
-});
-
-app.get('/404', function(req, res, next){
-  // trigger a 404 since no other middleware
-  // will match /404 after this one, and we're not
-  // responding here
-  next();
-});
-
-app.get('/403', function(req, res, next){
-  // trigger a 403 error
-  var err = new Error('not allowed!');
-  err.status = 403;
-  next(err);
-});
-
-app.get('/500', function(req, res, next){
-  // trigger a generic (500) error
-  next(new Error('keyboard cat!'));
-});","-app.set('view engine', 'jade');
+app.set('view engine', 'ejs');
-  res.render('index.jade');
+  res.render('index.ejs');","-var express = require('../../')
-  , app = module.exports = express()
-  , silent = 'test' == process.env.NODE_ENV;
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var silent = 'test' == process.env.NODE_ENV;
-app.set('view engine', 'jade');
+app.set('view engine', 'ejs');
-app.use(express.favicon());
+silent || app.use(logger('dev'));
-silent || app.use(express.logger('dev'));
+// Routes
-// ""app.router"" positions our routes 
-// above the middleware defined below,
-// this means that Express will attempt
-// to match & call routes _before_ continuing
-// on, at which point we assume it's a 404 because
-// no route has handled the request.
+app.get('/', function(req, res){
+  res.render('index.ejs');
+});
-app.use(app.router);
+app.get('/404', function(req, res, next){
+  // trigger a 404 since no other middleware
+  // will match /404 after this one, and we're not
+  // responding here
+  next();
+});
+
+app.get('/403', function(req, res, next){
+  // trigger a 403 error
+  var err = new Error('not allowed!');
+  err.status = 403;
+  next(err);
+});
+
+app.get('/500', function(req, res, next){
+  // trigger a generic (500) error
+  next(new Error('keyboard cat!'));
+});
+
+// Error handlers
-  
+
-// Routes
-
-app.get('/', function(req, res){
-  res.render('index.jade');
-});
-
-app.get('/404', function(req, res, next){
-  // trigger a 404 since no other middleware
-  // will match /404 after this one, and we're not
-  // responding here
-  next();
-});
-
-app.get('/403', function(req, res, next){
-  // trigger a 403 error
-  var err = new Error('not allowed!');
-  err.status = 403;
-  next(err);
-});
-
-app.get('/500', function(req, res, next){
-  // trigger a generic (500) error
-  next(new Error('keyboard cat!'));
-});
-"
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',examples/mvc/controllers/pet/index.js,"+/**
+ * Module dependencies.
+ */
-exports.engine = 'jade';
-
-  if (!pet) return next(new Error('Pet not found'));
+  if (!pet) return next('route');","-exports.engine = 'jade';
+exports.engine = 'ejs';","+/**
+ * Module dependencies.
+ */
-exports.engine = 'jade';
+exports.engine = 'ejs';
-  if (!pet) return next(new Error('Pet not found'));
+  if (!pet) return next('route');"
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',lib/request.js,"-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
-  var host = this.host;
-
-  if (!host) return [];
+defineGetter(req, 'subdomains', function subdomains() {
+  var hostname = this.hostname;
+
+  if (!hostname) return [];
-  var subdomains = !isIP(host)
-    ? host.split('.').reverse()
-    : [host];
+  var subdomains = !isIP(hostname)
+    ? hostname.split('.').reverse()
+    : [hostname];
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};","-    return fresh(this.headers, this.res._headers);
+    return fresh(this.headers, (this.res._headers || {}));","-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
-  var host = this.host;
-
-  if (!host) return [];
+defineGetter(req, 'subdomains', function subdomains() {
+  var hostname = this.hostname;
+
+  if (!hostname) return [];
-  var subdomains = !isIP(host)
-    ? host.split('.').reverse()
-    : [host];
+  var subdomains = !isIP(hostname)
+    ? hostname.split('.').reverse()
+    : [hostname];
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-    return fresh(this.headers, this.res._headers);
+    return fresh(this.headers, (this.res._headers || {}));
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};"
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.5"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.4"",
+    ""accepts"": ""~1.1.4"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.4"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.3"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.5.0"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.18.4"",
+  ""version"": ""3.18.6"",
-    ""connect"": ""2.27.4"",
+    ""connect"": ""2.27.6"",
-    ""istanbul"": ""0.3.2"",
+    ""istanbul"": ""0.3.5"",
-    ""should"": ""~4.3.0"",
+    ""should"": ""~4.3.1"",
-    ""jade"": ""~1.7.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.5"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.4"",
+    ""accepts"": ""~1.1.4"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.3"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.4"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""istanbul"": ""0.3.2"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.3.5"",
-    ""should"": ""~4.3.0"",
+    ""should"": ""~4.3.1"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.3"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.5.0"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',test/app.render.js,"-            err.message.should.match(/Cannot read property 'name' of undefined/);
+            err.message.should.match(/Cannot read property '[^']+' of undefined/);
+        })
+      })
+    })
+
+    describe('when ""views"" is given', function(){
+      it('should lookup the file in the path', function(done){
+        var app = express();
+
+        app.set('views', __dirname + '/fixtures/default_layout');
+        app.locals.user = { name: 'tobi' };
+
+        app.render('user.jade', function(err, str){
+          if (err) return done(err);
+          str.should.equal('<p>tobi</p>');
+          done();
+        })
+      })
+
+      describe('when array of paths', function(){
+        it('should lookup the file in the path', function(done){
+          var app = express();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.user = { name: 'tobi' };
+
+          app.render('user.jade', function(err, str){
+            if (err) return done(err);
+            str.should.equal('<span>tobi</span>');
+            done();
+          })
+        })
+
+        it('should lookup in later paths until found', function(done){
+          var app = express();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.name = 'tobi';
+
+          app.render('name.jade', function(err, str){
+            if (err) return done(err);
+            str.should.equal('<p>tobi</p>');
+            done();
+          })
+        })
+
+        it('should error if file does not exist', function(done){
+          var app = express();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.name = 'tobi';
+
+          app.render('pet.jade', function(err, str){
+            err.message.should.equal('Failed to lookup view ""pet.jade"" in views directories ""' + __dirname + '/fixtures/local_layout"" or ""' + __dirname + '/fixtures/default_layout""');
+            done();
+          })","-var express = require('../');
+var express = require('..');
+var tmpl = require('./support/tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-
-      app.render(__dirname + '/fixtures/user.jade', function(err, str){
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+
+      app.render(__dirname + '/fixtures/user.tmpl', function (err, str) {
-      var app = express();
-
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.set('view engine', 'tmpl');
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.render('user.jade', function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.render('user.tmpl', function (err, str) {
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.set('view engine', 'jade');
-
-      app.render('blog/post', function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.set('view engine', 'tmpl');
+
+      app.render('blog/post', function (err, str) {
-        var app = express();
+        var app = createApp();
+
-        app.render('rawr.jade', function(err){
-          err.message.should.equal('Failed to lookup view ""rawr.jade"" in views directory ""' + __dirname + '/fixtures""');
+        app.render('rawr.tmpl', function (err) {
+          err.message.should.equal('Failed to lookup view ""rawr.tmpl"" in views directory ""' + __dirname + '/fixtures""');
-        var app = express();
+        var app = createApp();
-        app.render('user.jade', function(err, str){
+        app.render('user.tmpl', function (err, str) {
-        var app = express();
+        var app = createApp();
-        app.render('email.jade', function(err, str){
+        app.render('email.tmpl', function (err, str) {
-        var app = express();
-
-        app.set('view engine', 'jade');
+        var app = createApp();
+
+        app.set('view engine', 'tmpl');
-      var app = express();
+      var app = createApp();
-      app.render('user.jade', { user: user }, function(err, str){
+      app.render('user.tmpl', { user: user }, function (err, str) {
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.render('user.jade', {}, function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.render('user.tmpl', {}, function (err, str) {
-      var app = express();
+      var app = createApp();
-      app.render('user.jade', { user: jane }, function(err, str){
+      app.render('user.tmpl', { user: jane }, function (err, str) {
+
+function createApp() {
+  var app = express();
+
+  app.engine('.tmpl', tmpl);
+
+  return app;
+}","-var express = require('../');
+var express = require('..');
+var tmpl = require('./support/tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-
-      app.render(__dirname + '/fixtures/user.jade', function(err, str){
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+
+      app.render(__dirname + '/fixtures/user.tmpl', function (err, str) {
-      var app = express();
-
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.set('view engine', 'tmpl');
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.render('user.jade', function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.render('user.tmpl', function (err, str) {
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.set('view engine', 'jade');
-
-      app.render('blog/post', function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.set('view engine', 'tmpl');
+
+      app.render('blog/post', function (err, str) {
-        var app = express();
+        var app = createApp();
+
-        app.render('rawr.jade', function(err){
-          err.message.should.equal('Failed to lookup view ""rawr.jade"" in views directory ""' + __dirname + '/fixtures""');
+        app.render('rawr.tmpl', function (err) {
+          err.message.should.equal('Failed to lookup view ""rawr.tmpl"" in views directory ""' + __dirname + '/fixtures""');
-        var app = express();
+        var app = createApp();
-        app.render('user.jade', function(err, str){
+        app.render('user.tmpl', function (err, str) {
-            err.message.should.match(/Cannot read property 'name' of undefined/);
+            err.message.should.match(/Cannot read property '[^']+' of undefined/);
-        var app = express();
+        var app = createApp();
-        app.render('email.jade', function(err, str){
+        app.render('email.tmpl', function (err, str) {
-        var app = express();
-
-        app.set('view engine', 'jade');
+        var app = createApp();
+
+        app.set('view engine', 'tmpl');
+        })
+      })
+    })
+
+    describe('when ""views"" is given', function(){
+      it('should lookup the file in the path', function(done){
+        var app = createApp();
+
+        app.set('views', __dirname + '/fixtures/default_layout');
+        app.locals.user = { name: 'tobi' };
+
+        app.render('user.tmpl', function (err, str) {
+          if (err) return done(err);
+          str.should.equal('<p>tobi</p>');
+          done();
+        })
+      })
+
+      describe('when array of paths', function(){
+        it('should lookup the file in the path', function(done){
+          var app = createApp();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.user = { name: 'tobi' };
+
+          app.render('user.tmpl', function (err, str) {
+            if (err) return done(err);
+            str.should.equal('<span>tobi</span>');
+            done();
+          })
+        })
+
+        it('should lookup in later paths until found', function(done){
+          var app = createApp();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.name = 'tobi';
+
+          app.render('name.tmpl', function (err, str) {
+            if (err) return done(err);
+            str.should.equal('<p>tobi</p>');
+            done();
+          })
+        })
+
+        it('should error if file does not exist', function(done){
+          var app = createApp();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+          app.locals.name = 'tobi';
+
+          app.render('pet.tmpl', function (err, str) {
+            err.message.should.equal('Failed to lookup view ""pet.tmpl"" in views directories ""' + __dirname + '/fixtures/local_layout"" or ""' + __dirname + '/fixtures/default_layout""');
+            done();
+          })
-      var app = express();
+      var app = createApp();
-      app.render('user.jade', { user: user }, function(err, str){
+      app.render('user.tmpl', { user: user }, function (err, str) {
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.render('user.jade', {}, function(err, str){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.render('user.tmpl', {}, function (err, str) {
-      var app = express();
+      var app = createApp();
-      app.render('user.jade', { user: jane }, function(err, str){
+      app.render('user.tmpl', { user: jane }, function (err, str) {
+
+function createApp() {
+  var app = express();
+
+  app.engine('.tmpl', tmpl);
+
+  return app;
+}"
expressjs_express,4aa2801054c6142b0d642c98b2af4037522fa9ca,Merge tag '3.18.6',test/res.render.js,"-  
+
+    it('should expose app.locals with `name` property', function(done){
+      var app = express();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.name = 'tobi';
+
+      app.use(function(req, res){
+        res.render('name.jade');
+      });
+
+      request(app)
+      .get('/')
+      .expect('<p>tobi</p>', done);
+    })
+
-        .expect(/Cannot read property 'name' of undefined/, done);
+        .expect(/Cannot read property '[^']+' of undefined/, done);
+      })
+    })
+
+    describe('when ""views"" is given', function(){
+      it('should lookup the file in the path', function(done){
+        var app = express();
+
+        app.set('views', __dirname + '/fixtures/default_layout');
+
+        app.use(function(req, res){
+          res.render('user.jade', { user: { name: 'tobi' } });
+        });
+
+        request(app)
+        .get('/')
+        .expect('<p>tobi</p>', done);
+      })
+
+      describe('when array of paths', function(){
+        it('should lookup the file in the path', function(done){
+          var app = express();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+
+          app.use(function(req, res){
+            res.render('user.jade', { user: { name: 'tobi' } });
+          });
+
+          request(app)
+          .get('/')
+          .expect('<span>tobi</span>', done);
+        })
+
+        it('should lookup in later paths until found', function(done){
+          var app = express();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+
+          app.use(function(req, res){
+            res.render('name.jade', { name: 'tobi' });
+          });
+
+          request(app)
+          .get('/')
+          .expect('<p>tobi</p>', done);
+        })
-        .expect(/Cannot read property 'name' of undefined/, done);
+        .expect(/Cannot read property '[^']+' of undefined/, done);","-var express = require('../')
-  , request = require('supertest');
+var express = require('..');
+var request = require('supertest');
+var tmpl = require('./support/tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render(__dirname + '/fixtures/user.jade');
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render(__dirname + '/fixtures/user.tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+      app.set('view engine', 'tmpl');
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render('user.jade');
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render('user.tmpl');
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.set('view engine', 'tmpl');
-        var app = express();
+        var app = createApp();
-          res.render('user.jade');
+          res.render('user.tmpl');
-        var app = express();
-
-        app.set('view engine', 'jade');
+        var app = createApp();
+
+        app.set('view engine', 'tmpl');
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: user });
+        res.render('user.tmpl', { user: user });
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render('user.jade');
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render('user.tmpl');
-      var app = express();
+      var app = createApp();
-        res.render('user.jade');
+        res.render('user.tmpl');
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', {});
+        res.render('user.tmpl', {});
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: jane });
+        res.render('user.tmpl', { user: jane });
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: jane });
+        res.render('user.tmpl', { user: jane });
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: tobi }, function(err, html){
+        res.render('user.tmpl', { user: tobi }, function (err, html) {
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', function(err, html){
+        res.render('user.tmpl', function (err, html) {
-        var app = express();
+        var app = createApp();
-          res.render('user.jade', function(err){
+          res.render('user.tmpl', function (err) {
+
+function createApp() {
+  var app = express();
+
+  app.engine('.tmpl', tmpl);
+
+  return app;
+}","-var express = require('../')
-  , request = require('supertest');
+var express = require('..');
+var request = require('supertest');
+var tmpl = require('./support/tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render(__dirname + '/fixtures/user.jade');
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render(__dirname + '/fixtures/user.tmpl');
-      var app = express();
-
-      app.locals.user = { name: 'tobi' };
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.locals.user = { name: 'tobi' };
+      app.set('view engine', 'tmpl');
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render('user.jade');
-      });
-
-      request(app)
-      .get('/')
-      .expect('<p>tobi</p>', done);
-    })
-  
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render('user.tmpl');
+      });
+
+      request(app)
+      .get('/')
+      .expect('<p>tobi</p>', done);
+    })
+
+    it('should expose app.locals with `name` property', function(done){
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.name = 'tobi';
+
+      app.use(function(req, res){
+        res.render('name.tmpl');
+      });
+
+      request(app)
+      .get('/')
+      .expect('<p>tobi</p>', done);
+    })
+
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.set('view engine', 'jade');
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.set('view engine', 'tmpl');
-        var app = express();
+        var app = createApp();
-          res.render('user.jade');
+          res.render('user.tmpl');
-        .expect(/Cannot read property 'name' of undefined/, done);
+        .expect(/Cannot read property '[^']+' of undefined/, done);
-        var app = express();
-
-        app.set('view engine', 'jade');
+        var app = createApp();
+
+        app.set('view engine', 'tmpl');
+
+    describe('when ""views"" is given', function(){
+      it('should lookup the file in the path', function(done){
+        var app = createApp();
+
+        app.set('views', __dirname + '/fixtures/default_layout');
+
+        app.use(function(req, res){
+          res.render('user.tmpl', { user: { name: 'tobi' } });
+        });
+
+        request(app)
+        .get('/')
+        .expect('<p>tobi</p>', done);
+      })
+
+      describe('when array of paths', function(){
+        it('should lookup the file in the path', function(done){
+          var app = createApp();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+
+          app.use(function(req, res){
+            res.render('user.tmpl', { user: { name: 'tobi' } });
+          });
+
+          request(app)
+          .get('/')
+          .expect('<span>tobi</span>', done);
+        })
+
+        it('should lookup in later paths until found', function(done){
+          var app = createApp();
+          var views = [__dirname + '/fixtures/local_layout', __dirname + '/fixtures/default_layout'];
+
+          app.set('views', views);
+
+          app.use(function(req, res){
+            res.render('name.tmpl', { name: 'tobi' });
+          });
+
+          request(app)
+          .get('/')
+          .expect('<p>tobi</p>', done);
+        })
+      })
+    })
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: user });
+        res.render('user.tmpl', { user: user });
-      var app = express();
-
-      app.set('views', __dirname + '/fixtures');
-      app.locals.user = { name: 'tobi' };
-
-      app.use(function(req, res){
-        res.render('user.jade');
+      var app = createApp();
+
+      app.set('views', __dirname + '/fixtures');
+      app.locals.user = { name: 'tobi' };
+
+      app.use(function(req, res){
+        res.render('user.tmpl');
-      var app = express();
+      var app = createApp();
-        res.render('user.jade');
+        res.render('user.tmpl');
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', {});
+        res.render('user.tmpl', {});
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: jane });
+        res.render('user.tmpl', { user: jane });
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: jane });
+        res.render('user.tmpl', { user: jane });
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', { user: tobi }, function(err, html){
+        res.render('user.tmpl', { user: tobi }, function (err, html) {
-      var app = express();
+      var app = createApp();
-        res.render('user.jade', function(err, html){
+        res.render('user.tmpl', function (err, html) {
-        var app = express();
+        var app = createApp();
-          res.render('user.jade', function(err){
+          res.render('user.tmpl', function (err) {
-        .expect(/Cannot read property 'name' of undefined/, done);
+        .expect(/Cannot read property '[^']+' of undefined/, done);
+
+function createApp() {
+  var app = express();
+
+  app.engine('.tmpl', tmpl);
+
+  return app;
+}"
expressjs_express,e3e41a1118469e300e721983ad5ac5ec47b897d6,Merge tag '3.18.4',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.3"",
+    ""accepts"": ""~1.1.3"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.2"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.3"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.4.1"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.18.3"",
+  ""version"": ""3.18.4"",
-    ""connect"": ""2.27.3"",
+    ""connect"": ""2.27.4"",
-    ""etag"": ""~1.5.0"",
+    ""etag"": ""~1.5.1"",
-    ""proxy-addr"": ""~1.0.3"",
+    ""proxy-addr"": ""~1.0.4"",
-    ""should"": ""~4.2.1"",
-    ""supertest"": ""~0.14.0"",
+    ""should"": ""~4.3.0"",
+    ""supertest"": ""~0.15.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.3"",
+    ""accepts"": ""~1.1.3"",
-    ""commander"": ""1.3.2"",
-    ""etag"": ""~1.5.0"",
+    ""etag"": ""~1.5.1"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
-    ""proxy-addr"": ""~1.0.3"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.4"",
+    ""qs"": ""2.3.2"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.3"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.2.1"",
-    ""supertest"": ""~0.14.0"",
+    ""should"": ""~4.3.0"",
+    ""supertest"": ""~0.15.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.4.1"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,2262a18900882f0769fe5a35d9e67dc456d68b5f,Merge tag '3.18.3',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.2"",
+    ""accepts"": ""~1.1.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.2"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.4.1"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.18.2"",
+  ""version"": ""3.18.3"",
-    ""connect"": ""2.27.2"",
+    ""connect"": ""2.27.3"",
-    ""should"": ""~4.1.0"",
+    ""should"": ""~4.2.1"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.18.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.10.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.27.2"",
+    ""accepts"": ""~1.1.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.2"",
-    ""utils-merge"": ""1.0.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.1.0"",
+    ""should"": ""~4.2.1"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.9.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.9.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.3.0"",
+    ""morgan"": ""~1.4.1"",
+    ""multiparty"": ""~4.0.0"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""bin/"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , http = require('http');
+var finalhandler = require('finalhandler');
+var flatten = require('./utils').flatten;
+var mixin = require('utils-merge');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileQueryParser = require('./utils').compileQueryParser;
+var compileTrust = require('./utils').compileTrust;
+var resolve = require('path').resolve;
+var slice = Array.prototype.slice;
+  this.set('query parser', 'extended');
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-
-  if (env === 'development') {
-    this.set('json spaces', 2);
-  }
-};
-
-/**
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.use = function(route, fn){
-  var app;
-
-  // default route to '/'
-  if ('string' != typeof route) fn = route, route = '/';
-
-  // express app
-  if (fn.handle && fn.set) app = fn;
-
-  // restore .app property on req and res
-  if (app) {
-    app.route = route;
-    fn = function(req, res, next) {
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
+  });
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query(this.get('query parser fn')));
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var router = this._router;
+
+  // final handler
+  done = done || finalhandler(req, res, {
+    env: this.get('env'),
+    onerror: logerror.bind(this)
+  });
+
+  // no routes
+  if (!router) {
+    debug('no routes defined on app');
+    done();
+    return;
+  }
+
+  router.handle(req, res, done);
+};
+
+/**
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
+ * @api public
+ */
+
+app.use = function use(fn) {
+  var offset = 0;
+  var path = '/';
+  var self = this;
+
+  // default path to '/'
+  // disambiguate app.use([fn])
+  if (typeof fn !== 'function') {
+    var arg = fn;
+
+    while (Array.isArray(arg) && arg.length !== 0) {
+      arg = arg[0];
+    }
+
+    // first arg is the path
+    if (typeof arg !== 'function') {
+      offset = 1;
+      path = fn;
+    }
+  }
+
+  var fns = flatten(slice.call(arguments, offset));
+
+  if (fns.length === 0) {
+    throw new TypeError('app.use() requires middleware functions');
+  }
+
+  // setup router
+  this.lazyrouter();
+  var router = this._router;
+
+  fns.forEach(function (fn) {
+    // non-express app
+    if (!fn || !fn.handle || !fn.set) {
+      return router.use(path, fn);
+    }
+
+    debug('.use app under %s', path);
+    fn.mountpath = path;
+    fn.parent = self;
+
+    // restore .app property on req and res
+    router.use(path, function mounted_app(req, res, next) {
-      app.handle(req, res, function(err){
+      fn.handle(req, res, function (err) {
-    };
-  }
-
-  connect.proto.use.call(this, route, fn);
-
-  // mounted an app
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
-  }
+    });
+
+    // mounted an app
+    fn.emit('mount', self);
+  });
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
+    case 'query parser':
+      debug('compile query parser %s', val);
+      this.set('query parser fn', compileQueryParser(val));
+      break;
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-app.configure = deprecate.function(app.configure,
-  'app.configure: Check app.get(\'env\') in an if statement');
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);
+
+/**
+* Log error using console.error.
+*
+* @param {Error} err
+* @api public
+*/
+
+function logerror(err){
+  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
+}","-  , utils = connect.utils
+var merge = require('utils-merge');
-  utils.merge(opts, this.locals);
+  merge(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) {
+    merge(opts, options._locals);
+  }
-  utils.merge(opts, options);
+  merge(opts, options);","-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , http = require('http');
+var finalhandler = require('finalhandler');
+var flatten = require('./utils').flatten;
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileQueryParser = require('./utils').compileQueryParser;
+var compileTrust = require('./utils').compileTrust;
+var merge = require('utils-merge');
+var resolve = require('path').resolve;
+var slice = Array.prototype.slice;
+  this.set('query parser', 'extended');
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-
-  if (env === 'development') {
-    this.set('json spaces', 2);
-  }
-};
-
-/**
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.use = function(route, fn){
-  var app;
-
-  // default route to '/'
-  if ('string' != typeof route) fn = route, route = '/';
-
-  // express app
-  if (fn.handle && fn.set) app = fn;
-
-  // restore .app property on req and res
-  if (app) {
-    app.route = route;
-    fn = function(req, res, next) {
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
+  });
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query(this.get('query parser fn')));
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var router = this._router;
+
+  // final handler
+  done = done || finalhandler(req, res, {
+    env: this.get('env'),
+    onerror: logerror.bind(this)
+  });
+
+  // no routes
+  if (!router) {
+    debug('no routes defined on app');
+    done();
+    return;
+  }
+
+  router.handle(req, res, done);
+};
+
+/**
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
+ * @api public
+ */
+
+app.use = function use(fn) {
+  var offset = 0;
+  var path = '/';
+  var self = this;
+
+  // default path to '/'
+  // disambiguate app.use([fn])
+  if (typeof fn !== 'function') {
+    var arg = fn;
+
+    while (Array.isArray(arg) && arg.length !== 0) {
+      arg = arg[0];
+    }
+
+    // first arg is the path
+    if (typeof arg !== 'function') {
+      offset = 1;
+      path = fn;
+    }
+  }
+
+  var fns = flatten(slice.call(arguments, offset));
+
+  if (fns.length === 0) {
+    throw new TypeError('app.use() requires middleware functions');
+  }
+
+  // setup router
+  this.lazyrouter();
+  var router = this._router;
+
+  fns.forEach(function (fn) {
+    // non-express app
+    if (!fn || !fn.handle || !fn.set) {
+      return router.use(path, fn);
+    }
+
+    debug('.use app under %s', path);
+    fn.mountpath = path;
+    fn.parent = self;
+
+    // restore .app property on req and res
+    router.use(path, function mounted_app(req, res, next) {
-      app.handle(req, res, function(err){
+      fn.handle(req, res, function (err) {
-    };
-  }
-
-  connect.proto.use.call(this, route, fn);
-
-  // mounted an app
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
-  }
+    });
+
+    // mounted an app
+    fn.emit('mount', self);
+  });
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
+    case 'query parser':
+      debug('compile query parser %s', val);
+      this.set('query parser fn', compileQueryParser(val));
+      break;
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-app.configure = deprecate.function(app.configure,
-  'app.configure: Check app.get(\'env\') in an if statement');
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  merge(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) {
+    merge(opts, options._locals);
+  }
-  utils.merge(opts, options);
+  merge(opts, options);
+
+/**
+* Log error using console.error.
+*
+* @param {Error} err
+* @api public
+*/
+
+function logerror(err){
+  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
+}"
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',lib/express.js,"-var deprecate = require('depd')('express');
-var merge = require('merge-descriptors');
-var connect = require('connect')
-  , proto = require('./application')
-  , Route = require('./router/route')
-  , Router = require('./router')
-  , req = require('./request')
-  , res = require('./response')
-  , utils = connect.utils;
+var EventEmitter = require('events').EventEmitter;
+var mixin = require('utils-merge');
+var proto = require('./application');
+var Route = require('./router/route');
+var Router = require('./router');
+var req = require('./request');
+var res = require('./response');
-
-/**
- * Expose mime.
- */
-
-exports.mime = connect.mime;
-  var app = connect();
-  utils.merge(app, proto);
+  var app = function(req, res, next) {
+    app.handle(req, res, next);
+  };
+
+  mixin(app, proto);
+  mixin(app, EventEmitter.prototype);
+
-
-/**
- * Expose connect.middleware as express.*
- * for example `express.logger` etc.
- */
-
-merge(exports, connect.middleware);
-
-/**
- * Deprecated createServer().
- */
-
-exports.createServer = deprecate.function(createApplication,
-  'createServer() is deprecated\n' +
-  'express applications no longer inherit from http.Server\n' +
-  'please use:\n' +
-  '\n' +
-  '  var express = require(""express"");\n' +
-  '  var app = express();\n' +
-  '\n'
-);
-// Error handler title
+/**
+ * Expose middleware
+ */
-exports.errorHandler.title = 'Express';
+exports.query = require('./middleware/query');
+exports.static = require('serve-static');
+
+/**
+ * Replace removed middleware with an appropriate error message.
+ */
+
+[
+  'json',
+  'urlencoded',
+  'bodyParser',
+  'compress',
+  'cookieSession',
+  'session',
+  'logger',
+  'cookieParser',
+  'favicon',
+  'responseTime',
+  'errorHandler',
+  'timeout',
+  'methodOverride',
+  'vhost',
+  'csrf',
+  'directory',
+  'limit',
+  'multipart',
+  'staticCache',
+].forEach(function (name) {
+  Object.defineProperty(exports, name, {
+    get: function () {
+      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
+    },
+    configurable: true
+  });
+});","-var merge = require('merge-descriptors');
+var mixin = require('merge-descriptors');
+var merge = require('utils-merge');
-  , res = require('./response')
-  , utils = connect.utils;
+  , res = require('./response');
-  utils.merge(app, proto);
+  merge(app, proto);
-merge(exports, connect.middleware);
+mixin(exports, connect.middleware);","-var deprecate = require('depd')('express');
-var merge = require('merge-descriptors');
-var connect = require('connect')
-  , proto = require('./application')
-  , Route = require('./router/route')
-  , Router = require('./router')
-  , req = require('./request')
-  , res = require('./response')
-  , utils = connect.utils;
+var EventEmitter = require('events').EventEmitter;
+var mixin = require('merge-descriptors');
+var proto = require('./application');
+var Route = require('./router/route');
+var Router = require('./router');
+var req = require('./request');
+var res = require('./response');
-
-/**
- * Expose mime.
- */
-
-exports.mime = connect.mime;
-  var app = connect();
-  utils.merge(app, proto);
+  var app = function(req, res, next) {
+    app.handle(req, res, next);
+  };
+
+  mixin(app, proto);
+  mixin(app, EventEmitter.prototype);
+
-
-/**
- * Expose connect.middleware as express.*
- * for example `express.logger` etc.
- */
-
-merge(exports, connect.middleware);
-
-/**
- * Deprecated createServer().
- */
-
-exports.createServer = deprecate.function(createApplication,
-  'createServer() is deprecated\n' +
-  'express applications no longer inherit from http.Server\n' +
-  'please use:\n' +
-  '\n' +
-  '  var express = require(""express"");\n' +
-  '  var app = express();\n' +
-  '\n'
-);
-// Error handler title
+/**
+ * Expose middleware
+ */
-exports.errorHandler.title = 'Express';
+exports.query = require('./middleware/query');
+exports.static = require('serve-static');
+
+/**
+ * Replace removed middleware with an appropriate error message.
+ */
+
+[
+  'json',
+  'urlencoded',
+  'bodyParser',
+  'compress',
+  'cookieSession',
+  'session',
+  'logger',
+  'cookieParser',
+  'favicon',
+  'responseTime',
+  'errorHandler',
+  'timeout',
+  'methodOverride',
+  'vhost',
+  'csrf',
+  'directory',
+  'limit',
+  'multipart',
+  'staticCache',
+].forEach(function (name) {
+  Object.defineProperty(exports, name, {
+    get: function () {
+      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
+    },
+    configurable: true
+  });
+});"
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',lib/response.js,"+var contentDisposition = require('content-disposition');
-var parseUrl = require('parseurl');
+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.sendStatus(status) instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
- * @api public
- */
-
-res.download = function(path, filename, fn){
+ * @api public
+ */
+
+res.download = function download(path, filename, fn) {
-  if ('function' == typeof filename) {
+  if (typeof filename === 'function') {
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-res.attachment = function(filename){
-  if (filename) this.type(extname(filename));
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+res.attachment = function attachment(filename) {
+  if (filename) {
+    this.type(extname(filename));
+  }
+
+  this.set('Content-Disposition', contentDisposition(filename));
+
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
-      var u = escapeHtml(url);
+      var u = escapeHtml(address);
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (done) return;
+      done = true;
+
+      // response finished before end of file
+      var err = new Error('Request aborted');
+      err.code = 'ECONNABORT';
+      callback(err);
+    });
+  }
+
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('directory', ondirectory);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}","+var contentDisposition = require('content-disposition');
+var merge = require('utils-merge');
-  , utils = connect.utils
-res.download = function(path, filename, fn){
+res.download = function download(path, filename, fn) {
-  if ('function' == typeof filename) {
+  if (typeof filename === 'function') {
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+
+  this.set('Content-Disposition', contentDisposition(filename));
+
-res.attachment = function(filename){
-  if (filename) this.type(extname(filename));
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+res.attachment = function attachment(filename) {
+  if (filename) {
+    this.type(extname(filename));
+  }
+
+  this.set('Content-Disposition', contentDisposition(filename));
+
-    ? utils.merge(opts, options)
+    ? merge(opts, options)
-  options = utils.merge({}, options);
+  options = merge({}, options);","+var contentDisposition = require('content-disposition');
-var parseUrl = require('parseurl');
+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
+var merge = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.sendStatus(status) instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
- * @api public
- */
-
-res.download = function(path, filename, fn){
+ * @api public
+ */
+
+res.download = function download(path, filename, fn) {
-  if ('function' == typeof filename) {
+  if (typeof filename === 'function') {
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-res.attachment = function(filename){
-  if (filename) this.type(extname(filename));
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+res.attachment = function attachment(filename) {
+  if (filename) {
+    this.type(extname(filename));
+  }
+
+  this.set('Content-Disposition', contentDisposition(filename));
+
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? merge(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = merge({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);
-      var u = escapeHtml(url);
+      var u = escapeHtml(address);
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (done) return;
+      done = true;
+
+      // response finished before end of file
+      var err = new Error('Request aborted');
+      err.code = 'ECONNABORT';
+      callback(err);
+    });
+  }
+
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('directory', ondirectory);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}"
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',lib/utils.js,"-
-var crc = require('crc').crc32;
-var mime = require('connect').mime
-  , proxyaddr = require('proxy-addr')
-  , crypto = require('crypto');
+var contentDisposition = require('content-disposition');
+var deprecate = require('depd')('express');
+var mime = require('send').mime;
+var basename = require('path').basename;
+var etag = require('etag');
+var proxyaddr = require('proxy-addr');
+var qs = require('qs');
+var querystring = require('querystring');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
-exports.etag = function etag(body, encoding){
-  if (body.length === 0) {
-    // fast-path empty body
-    return '""1B2M2Y8AsgTpgAmY7PhCfg==""'
-  }
-
-  var hash = crypto
-    .createHash('md5')
-    .update(body, encoding)
-    .digest('base64')
-  return '""' + hash + '""'
+exports.etag = function (body, encoding) {
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body
+
+  return etag(buf, {weak: false})
-  if (body.length === 0) {
-    // fast-path empty body
-    return 'W/""0-0""'
-  }
-
-  var buf = Buffer.isBuffer(body)
-    ? body
-    : new Buffer(body, encoding)
-  var len = buf.length
-  return 'W/""' + len.toString(16) + '-' + crc(buf) + '""'
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body
+
+  return etag(buf, {weak: true})
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
-};
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = deprecate.function(contentDisposition,
+  'utils.contentDisposition: use content-disposition npm module instead');
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
+ * Compile ""query parser"" value to function.
+ *
+ * @param  {String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileQueryParser = function compileQueryParser(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = querystring.parse;
+      break;
+    case false:
+      fn = newObject;
+      break;
+    case 'extended':
+      fn = qs.parse;
+      break;
+    case 'simple':
+      fn = querystring.parse;
+      break;
+    default:
+      throw new TypeError('unknown value for query parser function: ' + val);
+  }
+
+  return fn;
+}
+
+/**
+
+/**
+ * Return new empty objet.
+ *
+ * @return {Object}
+ * @api private
+ */
+
+function newObject() {
+  return {};
+}","-var crc = require('crc').crc32;
-var mime = require('connect').mime
-  , proxyaddr = require('proxy-addr')
-  , crypto = require('crypto');
+var etag = require('etag');
+var mime = require('connect').mime;
+var proxyaddr = require('proxy-addr');
-exports.etag = function etag(body, encoding){
-  if (body.length === 0) {
-    // fast-path empty body
-    return '""1B2M2Y8AsgTpgAmY7PhCfg==""'
-  }
-
-  var hash = crypto
-    .createHash('md5')
-    .update(body, encoding)
-    .digest('base64')
-  return '""' + hash + '""'
+exports.etag = function (body, encoding) {
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body;
+
+  return etag(buf, {weak: false});
-  if (body.length === 0) {
-    // fast-path empty body
-    return 'W/""0-0""'
-  }
-
-  var buf = Buffer.isBuffer(body)
-    ? body
-    : new Buffer(body, encoding)
-  var len = buf.length
-  return 'W/""' + len.toString(16) + '-' + crc(buf) + '""'
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body;
+
+  return etag(buf, {weak: true});","-
-var crc = require('crc').crc32;
-var mime = require('connect').mime
-  , proxyaddr = require('proxy-addr')
-  , crypto = require('crypto');
+var contentDisposition = require('content-disposition');
+var deprecate = require('depd')('express');
+var mime = require('send').mime;
+var basename = require('path').basename;
+var etag = require('etag');
+var proxyaddr = require('proxy-addr');
+var qs = require('qs');
+var querystring = require('querystring');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
-exports.etag = function etag(body, encoding){
-  if (body.length === 0) {
-    // fast-path empty body
-    return '""1B2M2Y8AsgTpgAmY7PhCfg==""'
-  }
-
-  var hash = crypto
-    .createHash('md5')
-    .update(body, encoding)
-    .digest('base64')
-  return '""' + hash + '""'
+exports.etag = function (body, encoding) {
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body;
+
+  return etag(buf, {weak: false});
-  if (body.length === 0) {
-    // fast-path empty body
-    return 'W/""0-0""'
-  }
-
-  var buf = Buffer.isBuffer(body)
-    ? body
-    : new Buffer(body, encoding)
-  var len = buf.length
-  return 'W/""' + len.toString(16) + '-' + crc(buf) + '""'
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
+  var buf = !Buffer.isBuffer(body)
+    ? new Buffer(body, encoding)
+    : body;
+
+  return etag(buf, {weak: true});
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
-};
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = deprecate.function(contentDisposition,
+  'utils.contentDisposition: use content-disposition npm module instead');
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
+ * Compile ""query parser"" value to function.
+ *
+ * @param  {String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileQueryParser = function compileQueryParser(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = querystring.parse;
+      break;
+    case false:
+      fn = newObject;
+      break;
+    case 'extended':
+      fn = qs.parse;
+      break;
+    case 'simple':
+      fn = querystring.parse;
+      break;
+    default:
+      throw new TypeError('unknown value for query parser function: ' + val);
+  }
+
+  return fn;
+}
+
+/**
+
+/**
+ * Return new empty objet.
+ *
+ * @return {Object}
+ * @api private
+ */
+
+function newObject() {
+  return {};
+}"
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.8"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.6"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.2"",
+    ""content-disposition"": ""0.5.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.5.0"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.0"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.8"",
+  ""version"": ""3.18.1"",
+  ""license"": ""MIT"",
+  ""repository"": ""strongloop/express"",
+  ""homepage"": ""http://expressjs.com/"",
-  ""repository"": ""strongloop/express"",
-  ""license"": ""MIT"",
-  ""homepage"": ""http://expressjs.com/"",
-    ""connect"": ""2.26.6"",
+    ""connect"": ""2.27.1"",
+    ""content-disposition"": ""0.5.0"",
-    ""crc"": ""3.0.0"",
-    ""debug"": ""~2.0.0"",
-    ""depd"": ""0.4.5"",
+    ""debug"": ""~2.1.0"",
+    ""depd"": ""~1.0.0"",
+    ""etag"": ""~1.5.0"",
-    ""send"": ""0.9.3"",
+    ""send"": ""0.10.1"",
+    ""utils-merge"": ""1.0.0"",
-    ""mocha"": ""~1.21.5"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~2.0.0"",
+    ""should"": ""~4.1.0"",
-    ""jade"": ""~1.6.0"",
+    ""jade"": ""~1.7.0"",
+  ""files"": [
+    ""LICENSE"",
+    ""History.md"",
+    ""Readme.md"",
+    ""index.js"",
+    ""bin/"",
+    ""lib/""
+  ],
-    ""prepublish"": ""npm prune"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.8"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
+  ""license"": ""MIT"",
+  ""repository"": ""strongloop/express"",
+  ""homepage"": ""http://expressjs.com/"",
-  ""repository"": ""strongloop/express"",
-  ""license"": ""MIT"",
-  ""homepage"": ""http://expressjs.com/"",
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.6"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.2"",
+    ""content-disposition"": ""0.5.0"",
-    ""crc"": ""3.0.0"",
-    ""debug"": ""~2.0.0"",
-    ""depd"": ""0.4.5"",
+    ""debug"": ""~2.1.0"",
+    ""depd"": ""~1.0.0"",
+    ""etag"": ""~1.5.0"",
+    ""finalhandler"": ""0.3.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.3.0"",
-    ""send"": ""0.9.3"",
+    ""send"": ""0.10.1"",
+    ""serve-static"": ""~1.7.1"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.21.5"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~2.0.0"",
+    ""should"": ""~4.1.0"",
-    ""jade"": ""~1.6.0"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2""
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
+    ""jade"": ""~1.7.0"",
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
+    ""node"": "">= 0.10.0""
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },
+  ""files"": [
+    ""LICENSE"",
+    ""History.md"",
+    ""Readme.md"",
+    ""index.js"",
+    ""lib/""
+  ],
-    ""prepublish"": ""npm prune"",
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,ccc45a74f89b45a6551bc8ff305581dbc8175bca,Merge tag '3.18.1',test/res.cookie.js,"-  , utils = require('connect').utils
-  , cookie = require('cookie');
+  , mixin = require('utils-merge')
+  , cookie = require('cookie')
+  , cookieParser = require('cookie-parser')
+        res.cookie('gender', '?');
-        var val = ['name=tobi; Path=/', 'age=1; Path=/'];
+        var val = ['name=tobi; Path=/', 'age=1; Path=/', 'gender=%3F; Path=/'];
-        var optionsCopy = utils.merge({}, options);
+        var optionsCopy = mixin({}, options);
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));","-  , utils = require('connect').utils
+var merge = require('utils-merge');
-        var optionsCopy = utils.merge({}, options);
+        var optionsCopy = merge({}, options);","-  , utils = require('connect').utils
-  , cookie = require('cookie');
+  , cookie = require('cookie')
+  , cookieParser = require('cookie-parser')
+var merge = require('utils-merge');
+        res.cookie('gender', '?');
-        var val = ['name=tobi; Path=/', 'age=1; Path=/'];
+        var val = ['name=tobi; Path=/', 'age=1; Path=/', 'gender=%3F; Path=/'];
-        var optionsCopy = utils.merge({}, options);
+        var optionsCopy = merge({}, options);
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));"
expressjs_express,2c5ed88c902448489fc9ebcc98bd44c01a280d28,Merge tag '3.17.8',lib/response.js,"-var parseUrl = require('parseurl');
+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.status(status).end() instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
- * @api public
- */
-
-res.download = function(path, filename, fn){
+ * @api public
+ */
+
+res.download = function download(path, filename, fn) {
-  if ('function' == typeof filename) {
+  if (typeof filename === 'function') {
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (done) return;
+      done = true;
+
+      // response finished before end of file
+      var err = new Error('Request aborted');
+      err.code = 'ECONNABORT';
+      callback(err);
+    });
+  }
+
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('directory', ondirectory);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}","-      deprecate('res.redirect(ur, status): Use res.redirect(status, url) instead');
+      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');","-var parseUrl = require('parseurl');
+var http = require('http');
+var isAbsolute = require('./utils').isAbsolute;
+var onFinished = require('on-finished');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var extname = path.extname;
+var mime = send.mime;
+var resolve = path.resolve;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.status(status).end() instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
+ * Send given HTTP status code.
+ *
+ * Sets the response status to `statusCode` and the body of the
+ * response to the standard description from node's http.STATUS_CODES
+ * or the statusCode number if no description.
+ *
+ * Examples:
+ *
+ *     res.sendStatus(200);
+ *
+ * @param {number} statusCode
+ * @api public
+ */
+
+res.sendStatus = function sendStatus(statusCode) {
+  var body = http.STATUS_CODES[statusCode] || String(statusCode);
+
+  this.statusCode = statusCode;
+  this.type('txt');
+
+  return this.send(body);
+};
+
+/**
- *   - `maxAge`   defaulting to 0
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
+ *
+ * Examples:
+ *
+ *  The following example illustrates how `res.sendFile()` may
+ *  be used as an alternative for the `static()` middleware for
+ *  dynamic situations. The code backing `res.sendFile()` is actually
+ *  the same code, so HTTP cache support etc is identical.
+ *
+ *     app.get('/user/:uid/photos/:file', function(req, res){
+ *       var uid = req.params.uid
+ *         , file = req.params.file;
+ *
+ *       req.user.mayViewFilesFrom(uid, function(yes){
+ *         if (yes) {
+ *           res.sendFile('/uploads/' + uid + '/' + file);
+ *         } else {
+ *           res.send(403, 'Sorry! you cant see that.');
+ *         }
+ *       });
+ *     });
+ *
+ * @api public
+ */
+
+res.sendFile = function sendFile(path, options, fn) {
+  var req = this.req;
+  var res = this;
+  var next = req.next;
+
+  if (!path) {
+    throw new TypeError('path argument is required to res.sendFile');
+  }
+
+  // support function as second arg
+  if (typeof options === 'function') {
+    fn = options;
+    options = {};
+  }
+
+  options = options || {};
+
+  if (!options.root && !isAbsolute(path)) {
+    throw new TypeError('path must be absolute or specify root to res.sendFile');
+  }
+
+  // create file stream
+  var pathname = encodeURI(path);
+  var file = send(req, pathname, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
+    if (fn) return fn(err);
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+/**
+ * Transfer the file at the given `path`.
+ *
+ * Automatically sets the _Content-Type_ response header field.
+ * The callback `fn(err)` is invoked when the transfer is complete
+ * or when an error occurs. Be sure to check `res.sentHeader`
+ * if you wish to attempt responding, as the header and some data
+ * may have already been transferred.
+ *
+ * Options:
+ *
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  var req = this.req;
+  var res = this;
+  var next = req.next;
-  if ('function' == typeof options) {
+  if (typeof options === 'function') {
-  // socket errors
-  req.socket.on('error', error);
-
-  // errors
-  function error(err) {
-    if (done) return;
-    done = true;
-
-    // clean up
-    cleanup();
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // callback available
+  options = options || {};
+
+  // create file stream
+  var file = send(req, path, options);
+
+  // transfer
+  sendfile(res, file, options, function (err) {
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-
-    // delegate
-    next(err);
-  }
-
-  // streaming
-  function stream(stream) {
-    if (done) return;
-    cleanup();
-    if (fn) stream.on('end', fn);
-  }
-
-  // cleanup
-  function cleanup() {
-    req.socket.removeListener('error', error);
-  }
-
-  // transfer
-  var file = send(req, path, options);
-  file.on('error', error);
-  file.on('directory', next);
-  file.on('stream', stream);
-  file.pipe(this);
-  this.on('finish', cleanup);
-};
+    if (err && err.code === 'EISDIR') return next();
+
+    // next() all but aborted errors
+    if (err && err.code !== 'ECONNABORT') {
+      next(err);
+    }
+  });
+};
+
+res.sendfile = deprecate.function(res.sendfile,
+  'res.sendfile: Use res.sendFile instead');
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
- * @api public
- */
-
-res.download = function(path, filename, fn){
+ * @api public
+ */
+
+res.download = function download(path, filename, fn) {
-  if ('function' == typeof filename) {
+  if (typeof filename === 'function') {
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  // Resolve the full path for sendFile
+  var fullPath = resolve(path);
+
+  return this.sendFile(fullPath, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = parseUrl.original(req).pathname;
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-      deprecate('res.redirect(ur, status): Use res.redirect(status, url) instead');
+      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;
+
+// pipe the send file stream
+function sendfile(res, file, options, callback) {
+  var done = false;
+
+  // directory
+  function ondirectory() {
+    if (done) return;
+    done = true;
+
+    var err = new Error('EISDIR, read');
+    err.code = 'EISDIR';
+    callback(err);
+  }
+
+  // errors
+  function onerror(err) {
+    if (done) return;
+    done = true;
+    callback(err);
+  }
+
+  // ended
+  function onend() {
+    if (done) return;
+    done = true;
+    callback();
+  }
+
+  // finished
+  function onfinish(err) {
+    if (err) return onerror(err);
+    if (done) return;
+
+    setImmediate(function () {
+      if (done) return;
+      done = true;
+
+      // response finished before end of file
+      var err = new Error('Request aborted');
+      err.code = 'ECONNABORT';
+      callback(err);
+    });
+  }
+
+  file.on('end', onend);
+  file.on('error', onerror);
+  file.on('directory', ondirectory);
+  onFinished(res, onfinish);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
+  file.pipe(res);
+}"
expressjs_express,2c5ed88c902448489fc9ebcc98bd44c01a280d28,Merge tag '3.17.8',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.7"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.7"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.5"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.1"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.4.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.4"",
+    ""serve-static"": ""~1.6.4"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.7"",
+  ""version"": ""3.17.8"",
-    ""connect"": ""2.26.5"",
+    ""connect"": ""2.26.6"",
-    ""mocha"": ""~1.21.4"",
+    ""mocha"": ""~1.21.5"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.7"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.7"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.5"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.1"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.4.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.4"",
+    ""serve-static"": ""~1.6.4"",
+    ""type-is"": ""~1.5.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.21.4"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.21.5"",
+    ""should"": ""~4.0.4"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,6aa4a450ed2eb352266d06306d42be11e545cc60,Merge tag '3.17.7',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.5"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.5"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.3"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.4.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.4"",
+    ""serve-static"": ""~1.6.3"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.5"",
+  ""version"": ""3.17.7"",
-    ""connect"": ""2.26.3"",
+    ""connect"": ""2.26.5"",
+    ""supertest"": ""~0.14.0"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""marked"": ""0.3.2""","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.5"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.5"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.3"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.4.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.4"",
+    ""serve-static"": ""~1.6.3"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.14.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,b8c8ecebb710891ae362ab3832ef1f7b85745e3c,Merge tag '3.17.5',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.2"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.3.1"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.4"",
+    ""serve-static"": ""~1.6.2"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.4"",
+  ""version"": ""3.17.5"",
-    ""connect"": ""2.26.2"",
+    ""connect"": ""2.26.3"",
-    ""proxy-addr"": ""~1.0.2"",
+    ""proxy-addr"": ""~1.0.3"",
-    ""send"": ""0.9.2"",
+    ""send"": ""0.9.3"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.2"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.3.1"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
-    ""proxy-addr"": ""~1.0.2"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.3"",
+    ""qs"": ""2.2.4"",
-    ""send"": ""0.9.2"",
+    ""send"": ""0.9.3"",
+    ""serve-static"": ""~1.6.2"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,b2518fe1353c89fb3afdfa800202e60d9250297b,Merge tag '3.17.3',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.1"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.3.1"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.3"",
+    ""serve-static"": ""~1.6.2"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.2"",
+  ""version"": ""3.17.3"",
-    ""proxy-addr"": ""1.0.1"",
+    ""proxy-addr"": ""~1.0.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.26.1"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""crc"": ""3.0.0"",
+    ""etag"": ""~1.3.1"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
-    ""proxy-addr"": ""1.0.1"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""proxy-addr"": ""~1.0.2"",
+    ""qs"": ""2.2.3"",
+    ""serve-static"": ""~1.6.2"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.2"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.3"",
+    ""express-session"": ""~1.8.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.1"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,916a75cf19b49686dc9affc7820536b83947878b,Merge tag '3.17.2',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""buffer-crc32"": ""0.2.3"",
-    ""connect"": ""2.26.0"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
+    ""etag"": ""~1.3.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.3"",
+    ""serve-static"": ""~1.6.1"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.8.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.0"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.17.1"",
+  ""version"": ""3.17.2"",
-    ""buffer-crc32"": ""0.2.3"",
-    ""connect"": ""2.26.0"",
+    ""connect"": ""2.26.1"",
+    ""crc"": ""3.0.0"",
-    ""depd"": ""0.4.4"",
+    ""depd"": ""0.4.5"",
-    ""send"": ""0.9.1"",
+    ""send"": ""0.9.2"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.17.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.9.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
-    ""buffer-crc32"": ""0.2.3"",
-    ""connect"": ""2.26.0"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.1.0"",
-    ""depd"": ""0.4.4"",
+    ""depd"": ""0.4.5"",
+    ""etag"": ""~1.3.0"",
+    ""finalhandler"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""on-finished"": ""~2.1.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.3"",
-    ""send"": ""0.9.1"",
+    ""send"": ""0.9.2"",
+    ""serve-static"": ""~1.6.1"",
+    ""type-is"": ""~1.5.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.8.1"",
+    ""connect-redis"": ""~2.1.0"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.8.1"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.2.0"",
+    ""morgan"": ""~1.3.0"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",
+    ""test-tap"": ""mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"","
expressjs_express,3dca534995651a38a784512b0b3132d07a512969,Merge tag '3.17.1',examples/view-constructor/github-view.js,"-
-var http = require('http')
-  , path = require('path')
-  , extname = path.extname
+var http = require('http');
+var path = require('path');
+var extname = path.extname;","-    host: 'rawgithub.com',
-    port: 80,
+    host: 'raw.githubusercontent.com',
+    port: 443,
-  http.request(opts, function(res) {
+  https.request(opts, function(res) {","-
-var http = require('http')
-  , path = require('path')
-  , extname = path.extname
+var http = require('http');
+var path = require('path');
+var extname = path.extname;
-    host: 'rawgithub.com',
-    port: 80,
+    host: 'raw.githubusercontent.com',
+    port: 443,
-  http.request(opts, function(res) {
+  https.request(opts, function(res) {"
expressjs_express,3dca534995651a38a784512b0b3132d07a512969,Merge tag '3.17.1',lib/request.js,"-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
+defineGetter(req, 'subdomains', function subdomains() {
-  return (this.host || '')
+  return (this.hostname || '')
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};","+var isIP = require('net').isIP;
+  var host = this.host;
+
+  if (!host) return [];
+
-  return (this.host || '')
-    .split('.')
-    .reverse()
-    .slice(offset);
+  var subdomains = !isIP(host)
+    ? host.split('.').reverse()
+    : [host];
+
+  return subdomains.slice(offset);","-
-var auth = require('basic-auth');
+var accepts = require('accepts');
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = require('parseurl')
-  , proxyaddr = require('proxy-addr')
-  , mime = connect.mime;
+var isIP = require('net').isIP;
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
-};
-
-/**
- * Check if the given `encoding` is accepted.
- *
- * @param {String} encoding
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
- * Check if the given `charset` is acceptable,
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
+};
+
+/**
+ * Check if the given `encoding`s are accepted.
+ *
+ * @param {String} ...encoding
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+req.acceptsEncoding = deprecate.function(req.acceptsEncodings,
+  'req.acceptsEncoding: Use acceptsEncodings instead');
+
+/**
+ * Check if the given `charset`s are acceptable,
- * @param {String} charset
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
- * Check if the given `lang` is acceptable,
+ * @param {String} ...charset
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+req.acceptsCharset = deprecate.function(req.acceptsCharsets,
+  'req.acceptsCharset: Use acceptsCharsets instead');
+
+/**
+ * Check if the given `lang`s are acceptable,
- * @param {String} lang
- * @return {Boolean}
- * @api public
- */
-
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
-};
+ * @param {String} ...lang
+ * @return {Boolean}
+ * @api public
+ */
+
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
+};
+
+req.acceptsLanguage = deprecate.function(req.acceptsLanguages,
+  'req.acceptsLanguage: Use acceptsLanguages instead');
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-req.__defineGetter__('protocol', function(){
+defineGetter(req, 'protocol', function protocol(){
-req.__defineGetter__('secure', function(){
+defineGetter(req, 'secure', function secure(){
-req.__defineGetter__('ip', function(){
+defineGetter(req, 'ip', function ip(){
-req.__defineGetter__('ips', function(){
+defineGetter(req, 'ips', function ips() {
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  deprecate('req.auth: Use basic-auth npm module instead');
-
-  // credentials
-  var creds = auth(this);
-  if (!creds) return;
-
-  return { username: creds.name, password: creds.pass };
-});
-
-/**
-req.__defineGetter__('subdomains', function(){
+defineGetter(req, 'subdomains', function subdomains() {
+  var hostname = this.hostname;
+
+  if (!hostname) return [];
+
-  return (this.host || '')
-    .split('.')
-    .reverse()
-    .slice(offset);
+  var subdomains = !isIP(hostname)
+    ? hostname.split('.').reverse()
+    : [hostname];
+
+  return subdomains.slice(offset);
-req.__defineGetter__('path', function(){
+defineGetter(req, 'path', function path() {
- * Parse the ""Host"" header field hostname.
+ * Parse the ""Host"" header field to a hostname.
-req.__defineGetter__('host', function(){
+defineGetter(req, 'hostname', function hostname(){
+// TODO: change req.host to return host in next major
+
+defineGetter(req, 'host', deprecate.function(function host(){
+  return this.hostname;
+}, 'req.host: Use req.hostname instead'));
+
-req.__defineGetter__('fresh', function(){
+defineGetter(req, 'fresh', function(){
-req.__defineGetter__('stale', function(){
+defineGetter(req, 'stale', function stale(){
-req.__defineGetter__('xhr', function(){
+defineGetter(req, 'xhr', function xhr(){
+
+/**
+ * Helper function for creating a getter on an object.
+ *
+ * @param {Object} obj
+ * @param {String} name
+ * @param {Function} getter
+ * @api private
+ */
+function defineGetter(obj, name, getter) {
+  Object.defineProperty(obj, name, {
+    configurable: true,
+    enumerable: true,
+    get: getter
+  });
+};"
expressjs_express,3dca534995651a38a784512b0b3132d07a512969,Merge tag '3.17.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.10"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.10"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.2"",
+    ""serve-static"": ""~1.5.4"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.7.0"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.7.6"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.3"",
+    ""morgan"": ""~1.2.3"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.10"",
+  ""version"": ""3.17.1"",
-    ""connect"": ""2.25.10"",
+    ""connect"": ""2.26.0"",
-    ""debug"": ""1.0.4"",
+    ""cookie-signature"": ""1.0.5"",
+    ""debug"": ""~2.0.0"",
-    ""media-typer"": ""0.2.0"",
+    ""fresh"": ""0.2.4"",
+    ""media-typer"": ""0.3.0"",
-    ""range-parser"": ""1.0.0"",
-    ""send"": ""0.8.5"",
-    ""vary"": ""0.1.0"",
+    ""range-parser"": ""~1.0.2"",
+    ""send"": ""0.9.1"",
+    ""vary"": ""~1.0.0"",
-    ""fresh"": ""0.2.2"",
-    ""cookie-signature"": ""1.0.4"",
-    ""jade"": ""~1.5.0"",
+    ""jade"": ""~1.6.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.10"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.8"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.10"",
-    ""commander"": ""1.3.2"",
-    ""debug"": ""1.0.4"",
+    ""cookie-signature"": ""1.0.5"",
+    ""debug"": ""~2.0.0"",
-    ""media-typer"": ""0.2.0"",
+    ""finalhandler"": ""0.1.0"",
+    ""fresh"": ""0.2.4"",
+    ""media-typer"": ""0.3.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""range-parser"": ""1.0.0"",
-    ""send"": ""0.8.5"",
-    ""vary"": ""0.1.0"",
+    ""qs"": ""2.2.2"",
+    ""range-parser"": ""~1.0.2"",
+    ""send"": ""0.9.1"",
+    ""serve-static"": ""~1.5.4"",
+    ""type-is"": ""~1.3.2"",
+    ""vary"": ""~1.0.0"",
-    ""fresh"": ""0.2.2"",
-    ""cookie-signature"": ""1.0.4"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.7.0"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.7.6"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.3"",
+    ""morgan"": ""~1.2.3"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""~3.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,a3115882d48181dc09b40c952fd88ca225986f6a,Merge tag '3.16.10',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.9"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.7"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.9"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.2"",
+    ""serve-static"": ""~1.5.3"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.7"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.7.6"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.3"",
+    ""morgan"": ""~1.2.3"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.9"",
+  ""version"": ""3.16.10"",
-    ""connect"": ""2.25.9"",
+    ""connect"": ""2.25.10"",
-    ""send"": ""0.8.3"",
+    ""send"": ""0.8.5"",
-    ""istanbul"": ""0.3.0"",
+    ""istanbul"": ""0.3.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.9"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.7"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.9"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""2.2.2"",
-    ""send"": ""0.8.3"",
+    ""send"": ""0.8.5"",
+    ""serve-static"": ""~1.5.3"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
-    ""istanbul"": ""0.3.0"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.3.2"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.7"",
+    ""cookie-parser"": ""~1.3.2"",
+    ""express-session"": ""~1.7.6"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.3"",
+    ""morgan"": ""~1.2.3"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,9eafaa23d829910c4bd4824034efc43f76e42559,Merge tag '3.16.7',examples/view-constructor/index.js,"-
-var express = require('../../')
-  , http = require('http')
-  , GithubView = require('./github-view')
-  , md = require('marked').parse;
+var express = require('../../');
+var http = require('http');
+var GithubView = require('./github-view');
+var md = require('marked').parse;
-    })
+    });
-})
+});
-})
+});
-})
+});","-app.set('views', 'visionmedia/express');
+app.set('views', 'strongloop/express');
-  // rendering a view from https://github.com/visionmedia/express/blob/master/Readme.md
+  // rendering a view from https://github.com/strongloop/express/blob/master/Readme.md","-
-var express = require('../../')
-  , http = require('http')
-  , GithubView = require('./github-view')
-  , md = require('marked').parse;
+var express = require('../../');
+var http = require('http');
+var GithubView = require('./github-view');
+var md = require('marked').parse;
-    })
+    });
-})
+});
-app.set('views', 'visionmedia/express');
+app.set('views', 'strongloop/express');
-})
+});
-  // rendering a view from https://github.com/visionmedia/express/blob/master/Readme.md
+  // rendering a view from https://github.com/strongloop/express/blob/master/Readme.md
-})
+});"
expressjs_express,9eafaa23d829910c4bd4824034efc43f76e42559,Merge tag '3.16.7',examples/web-service/index.js,"-
-// position our routes above the error handling middleware,
-// and below our API middleware, since we want the API validation
-// to take place BEFORE our routes
-app.use(app.router);
-
-// middleware with an arity of 4 are considered
-// error handling middleware. When you next(err)
-// it will be passed through the defined middleware
-// in order, but ONLY those with an arity of 4, ignoring
-// regular middleware.
-app.use(function(err, req, res, next){
-  // whatever you want here, feel free to populate
-  // properties on `err` to treat it differently in here.
-  res.send(err.status || 500, { error: err.message });
-});
-
-// our custom JSON 404 middleware. Since it's placed last
-// it will be the last middleware called, if all others
-// invoke next() and do not respond.
-app.use(function(req, res){
-  res.send(404, { error: ""Lame, can't find that"" });
-});
-
-  var name = req.params.name
-    , user = userRepos[name];
-  
+  var name = req.params.name;
+  var user = userRepos[name];
+
+});
+
+// middleware with an arity of 4 are considered
+// error handling middleware. When you next(err)
+// it will be passed through the defined middleware
+// in order, but ONLY those with an arity of 4, ignoring
+// regular middleware.
+app.use(function(err, req, res, next){
+  // whatever you want here, feel free to populate
+  // properties on `err` to treat it differently in here.
+  res.status(err.status || 500);
+  res.send({ error: err.message });
+});
+
+// our custom JSON 404 middleware. Since it's placed last
+// it will be the last middleware called, if all others
+// invoke next() and do not respond.
+app.use(function(req, res){
+  res.status(404);
+  res.send({ error: ""Lame, can't find that"" });","-    { name: 'express', url: 'http://github.com/visionmedia/express' }
+    { name: 'express', url: 'http://github.com/strongloop/express' }","-
-// position our routes above the error handling middleware,
-// and below our API middleware, since we want the API validation
-// to take place BEFORE our routes
-app.use(app.router);
-
-// middleware with an arity of 4 are considered
-// error handling middleware. When you next(err)
-// it will be passed through the defined middleware
-// in order, but ONLY those with an arity of 4, ignoring
-// regular middleware.
-app.use(function(err, req, res, next){
-  // whatever you want here, feel free to populate
-  // properties on `err` to treat it differently in here.
-  res.send(err.status || 500, { error: err.message });
-});
-
-// our custom JSON 404 middleware. Since it's placed last
-// it will be the last middleware called, if all others
-// invoke next() and do not respond.
-app.use(function(req, res){
-  res.send(404, { error: ""Lame, can't find that"" });
-});
-
-    { name: 'express', url: 'http://github.com/visionmedia/express' }
+    { name: 'express', url: 'http://github.com/strongloop/express' }
-  var name = req.params.name
-    , user = userRepos[name];
-  
+  var name = req.params.name;
+  var user = userRepos[name];
+
+});
+
+// middleware with an arity of 4 are considered
+// error handling middleware. When you next(err)
+// it will be passed through the defined middleware
+// in order, but ONLY those with an arity of 4, ignoring
+// regular middleware.
+app.use(function(err, req, res, next){
+  // whatever you want here, feel free to populate
+  // properties on `err` to treat it differently in here.
+  res.status(err.status || 500);
+  res.send({ error: err.message });
+});
+
+// our custom JSON 404 middleware. Since it's placed last
+// it will be the last middleware called, if all others
+// invoke next() and do not respond.
+app.use(function(req, res){
+  res.status(404);
+  res.send({ error: ""Lame, can't find that"" });"
expressjs_express,9eafaa23d829910c4bd4824034efc43f76e42559,Merge tag '3.16.7',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.6"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.6"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.2"",
+    ""serve-static"": ""~1.5.2"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.4"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.5"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.6"",
+  ""version"": ""3.16.7"",
-  ""repository"": ""visionmedia/express"",
+  ""repository"": ""strongloop/express"",
+  ""homepage"": ""http://expressjs.com/"",
-    ""connect"": ""2.25.6"",
+    ""connect"": ""2.25.7"",
-    ""send"": ""0.8.2"",
+    ""send"": ""0.8.3"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.6"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-  ""repository"": ""visionmedia/express"",
+  ""repository"": ""strongloop/express"",
+  ""homepage"": ""http://expressjs.com/"",
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.6"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.2"",
-    ""send"": ""0.8.2"",
+    ""send"": ""0.8.3"",
+    ""serve-static"": ""~1.5.2"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.4"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.5"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.2"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,66801323927426a47bf022e9f8ef7e2038f86ecf,Merge tag '3.16.6',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.4"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.1"",
+    ""serve-static"": ""~1.5.1"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.1"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.4"",
+  ""version"": ""3.16.6"",
-    ""connect"": ""2.25.4"",
+    ""connect"": ""2.25.6"",
-    ""send"": ""0.8.1"",
+    ""send"": ""0.8.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.4"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.4"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.1"",
-    ""send"": ""0.8.1"",
+    ""send"": ""0.8.2"",
+    ""serve-static"": ""~1.5.1"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.1"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,59cb99e9be8273db7432ba1d505fe8cedd87d3c2,Merge tag '3.16.4',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.0"",
+    ""serve-static"": ""~1.5.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.1"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.2"",
+  ""version"": ""3.16.4"",
-    ""connect"": ""2.25.2"",
+    ""connect"": ""2.25.4"",
-    ""parseurl"": ""~1.2.0"",
+    ""parseurl"": ""~1.3.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.2"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
-    ""parseurl"": ""~1.2.0"",
+    ""parseurl"": ""~1.3.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.2.0"",
+    ""serve-static"": ""~1.5.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.1"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,cca88a7c47fd15a7df5434bd92e55efa95557138,Merge tag '3.16.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.1.0"",
+    ""serve-static"": ""~1.5.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.16.0"",
+  ""version"": ""3.16.1"",
-    ""connect"": ""2.25.0"",
+    ""connect"": ""2.25.1"",
-    ""mocha"": ""~1.21.0"",
+    ""mocha"": ""~1.21.4"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.16.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.8.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.25.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""qs"": ""1.1.0"",
+    ""serve-static"": ""~1.5.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0""
-    ""connect-redis"": ""~1.5.0"",
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.21.0"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.21.4"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""hjs"": ""~0.0.6"",
+    ""body-parser"": ""~1.6.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
-    ""hjs"": ""~0.0.6"",
-    ""marked"": ""0.3.2"",
-    ""supertest"": ""~0.13.0""
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,19abf7684bfa9e173660663fb25a96b39e5989dc,Merge tag '3.16.0',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.3"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""serve-static"": ""~1.4.4"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.2"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.15.3"",
+  ""version"": ""3.16.0"",
-    ""connect"": ""2.24.3"",
+    ""connect"": ""2.25.0"",
-    ""send"": ""0.7.4"",
+    ""send"": ""0.8.1"",
+    ""connect-redis"": ""~1.5.0"",
-    ""jade"": ""~1.3.1"",
+    ""jade"": ""~1.5.0"",
-    ""connect-redis"": ""~1.4.5"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.3"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.4"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.3"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""send"": ""0.7.4"",
+    ""send"": ""0.8.1"",
+    ""serve-static"": ""~1.4.4"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.2"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,d8237b976b64e11978b194191ef14f916475144e,Merge tag '3.15.3' into 4.7.x,package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""send"": ""0.7.2"",
+    ""send"": ""0.7.3"",
+    ""serve-static"": ""~1.4.4"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.2"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.15.2"",
+  ""version"": ""3.15.3"",
-    ""connect"": ""2.24.2"",
+    ""connect"": ""2.24.3"",
-    ""send"": ""0.7.2"",
+    ""send"": ""0.7.4"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.2"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.3"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.2"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""send"": ""0.7.2"",
+    ""send"": ""0.7.4"",
+    ""serve-static"": ""~1.4.4"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.2"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.2"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.2"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,d8237b976b64e11978b194191ef14f916475144e,Merge tag '3.15.3' into 4.7.x,test/res.sendfile.js,"-      .expect('Content-Type', 'text/plain')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+    it('should accept headers option', function(done){
+      var app = express();
+      var headers = {
+         'x-success': 'sent',
+         'x-other': 'done'
+      };
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/user.html', { headers: headers });
+      });
+
+      request(app)
+      .get('/')
+      .expect('x-success', 'sent')
+      .expect('x-other', 'done')
+      .expect(200, done);
+    })
+
+    it('should ignore headers option on 404', function(done){
+      var app = express();
+      var headers = { 'x-success': 'sent' };
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/user.nothing', { headers: headers });
+      });
+
+      request(app)
+      .get('/')
+      .expect(404, function (err, res) {
+        if (err) return done(err);
+        res.headers.should.not.have.property('x-success');
+        done();
+      });
+    })
+","+    it('should transfer a file', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/name.txt');
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, 'tobi', done);
+    });
+
+    it('should transfer a directory index file', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/blog/');
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, '<b>index</b>', done);
+    });
+","-      .expect('Content-Type', 'text/plain')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+    it('should accept headers option', function(done){
+      var app = express();
+      var headers = {
+         'x-success': 'sent',
+         'x-other': 'done'
+      };
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/user.html', { headers: headers });
+      });
+
+      request(app)
+      .get('/')
+      .expect('x-success', 'sent')
+      .expect('x-other', 'done')
+      .expect(200, done);
+    })
+
+    it('should ignore headers option on 404', function(done){
+      var app = express();
+      var headers = { 'x-success': 'sent' };
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/user.nothing', { headers: headers });
+      });
+
+      request(app)
+      .get('/')
+      .expect(404, function (err, res) {
+        if (err) return done(err);
+        res.headers.should.not.have.property('x-success');
+        done();
+      });
+    })
+
+    it('should transfer a file', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/name.txt');
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, 'tobi', done);
+    });
+
+    it('should transfer a directory index file', function (done) {
+      var app = express();
+
+      app.use(function (req, res) {
+        res.sendfile('test/fixtures/blog/');
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, '<b>index</b>', done);
+    });
+"
expressjs_express,454c4b2350011bca6374c70d0264fa42a27e1552,Merge tag '3.15.2',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.1"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""serve-static"": ""~1.4.1"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.0"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.0"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.15.1"",
+  ""version"": ""3.15.2"",
-    ""connect"": ""2.24.1"",
+    ""connect"": ""2.24.2"",
-    ""depd"": ""0.4.3"",
+    ""depd"": ""0.4.4"",
-    ""send"": ""0.7.1"",
+    ""send"": ""0.7.2"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.1"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.1"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.1"",
-    ""commander"": ""1.3.2"",
-    ""depd"": ""0.4.3"",
+    ""depd"": ""0.4.4"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""send"": ""0.7.1"",
+    ""send"": ""0.7.2"",
+    ""serve-static"": ""~1.4.1"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""should"": ""~4.0.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.0"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.0"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,8e63521f688649219857c958d26076cb9914508d,Merge tag '3.15.1',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
+    ""serve-static"": ""~1.4.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.0"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.0"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"",","-  ""version"": ""3.15.0"",
+  ""version"": ""3.15.1"",
-    ""connect"": ""2.24.0"",
+    ""connect"": ""2.24.1"",
-    ""depd"": ""0.4.2"",
+    ""depd"": ""0.4.3"",
-    ""send"": ""0.7.0"",
+    ""send"": ""0.7.1"",
-    ""mocha"": ""~1.20.0"",
+    ""mocha"": ""~1.21.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.15.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.7.0"",
-    ""Roman Shtylman <shtylman+expressjs@gmail.com""
+    ""Roman Shtylman <shtylman+expressjs@gmail.com>"",
+    ""Young Jae Sim <hanul@hanul.me>""
-    ""basic-auth"": ""1.0.0"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.24.0"",
-    ""commander"": ""1.3.2"",
-    ""depd"": ""0.4.2"",
+    ""depd"": ""0.4.3"",
+    ""finalhandler"": ""0.1.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""path-to-regexp"": ""0.1.3"",
-    ""send"": ""0.7.0"",
+    ""send"": ""0.7.1"",
+    ""serve-static"": ""~1.4.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""qs"": ""0.6.6"",
+    ""utils-merge"": ""1.0.0""
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.21.0"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
-    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.5.0"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.7.0"",
+    ""jade"": ""~1.5.0"",
+    ""method-override"": ""~2.1.1"",
+    ""morgan"": ""~1.2.0"",
+    ""multiparty"": ""~3.3.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test"": ""mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/"","
expressjs_express,f34944c539f3a8e0f35a7f41011635e40141fc3c,Merge tag '3.15.0',lib/response.js,"+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.status(status).end() instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
- *   - `maxAge` defaulting to 0
- *   - `root`   root directory for relative filenames
+ *   - `maxAge`  defaulting to 0 (can be string converted by `ms`)
+ *   - `root`    root directory for relative filenames
+ *   - `headers` object of headers to serve with file
+ *   - `hidden`  serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  return this.sendfile(path, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","- *   - `maxAge` defaulting to 0
- *   - `root`   root directory for relative filenames
+ *   - `maxAge`   defaulting to 0
+ *   - `root`     root directory for relative filenames
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);","+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- *     res.send(404, 'Sorry, cant find that');
- *     res.send(404);
- *
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
- * @api public
- */
-
-res.send = function(body){
-  var req = this.req;
-  var head = 'HEAD' == req.method;
-  var type;
+ *
+ * @param {string|number|boolean|object|Buffer} body
+ * @api public
+ */
+
+res.send = function send(body) {
+  var chunk = body;
+  var req = this.req;
+  var type;
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' != typeof body && 'number' == typeof arguments[1]) {
+    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
+      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
-      this.statusCode = body;
-      body = arguments[1];
+      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
+      this.statusCode = arguments[0];
+      chunk = arguments[1];
-  if (typeof body === 'number' && arguments.length === 1) {
+  if (typeof chunk === 'number' && arguments.length === 1) {
-    this.get('Content-Type') || this.type('txt');
-    this.statusCode = body;
-    body = http.STATUS_CODES[body];
-  }
-
-  switch (typeof body) {
+    if (!this.get('Content-Type')) {
+      this.type('txt');
+    }
+
+    deprecate('res.send(status): Use res.status(status).end() instead');
+    this.statusCode = chunk;
+    chunk = http.STATUS_CODES[chunk];
+  }
+
+  switch (typeof chunk) {
-        this.charset = this.charset || 'utf-8';
-      if (null == body) {
-        body = '';
-      } else if (Buffer.isBuffer(body)) {
-        this.get('Content-Type') || this.type('bin');
+      if (chunk === null) {
+        chunk = '';
+      } else if (Buffer.isBuffer(chunk)) {
+        if (!this.get('Content-Type')) {
+          this.type('bin');
+        }
-        return this.json(body);
+        return this.json(chunk);
-  if ('string' === typeof body) {
+  if (typeof chunk === 'string') {
-    if ('string' === typeof type) {
+    if (typeof type === 'string') {
-  if (undefined !== body && !this.get('Content-Length')) {
-    len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body, encoding);
+  if (chunk !== undefined) {
+    if (!Buffer.isBuffer(chunk)) {
+      // convert chunk to Buffer; saves later double conversions
+      chunk = new Buffer(chunk, encoding);
+      encoding = undefined;
+    }
+
+    len = chunk.length;
+  // method check
+  var isHead = req.method === 'HEAD';
+
-  var etag = len !== undefined && app.get('etag fn');
-  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
-    if (!this.get('ETag')) {
-      etag = etag(body, encoding);
+  if (len !== undefined && (isHead || req.method === 'GET')) {
+    var etag = app.get('etag fn');
+    if (etag && !this.get('ETag')) {
+      etag = etag(chunk, encoding);
-    body = '';
+    chunk = '';
+  }
+
+  // skip body for HEAD
+  if (isHead) {
+    this.end();
-  this.end((head ? null : body), encoding);
+  this.end(chunk, encoding);
- *     res.json(500, 'oh noes!');
- *     res.json(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.json = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.json = function json(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
-      } else {
-        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('Content-Type', 'application/json');
+  }
- *     res.jsonp(500, 'oh noes!');
- *     res.jsonp(404, 'I dont have that');
- *
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
- * @api public
- */
-
-res.jsonp = function(obj){
+ *
+ * @param {string|number|boolean|object} obj
+ * @api public
+ */
+
+res.jsonp = function jsonp(obj) {
+  var val = obj;
+
-  if (2 == arguments.length) {
+  if (arguments.length === 2) {
-    if ('number' == typeof arguments[1]) {
+    if (typeof arguments[1] === 'number') {
+      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
-      if (typeof obj === 'number') {
-        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-      } else {
-        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-      }
-      this.statusCode = obj;
-      obj = arguments[1];
+      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
+      this.statusCode = arguments[0];
+      val = arguments[1];
-  var body = JSON.stringify(obj, replacer, spaces);
+  var body = JSON.stringify(val, replacer, spaces);
-    this.charset = 'utf-8';
- *   - `maxAge` defaulting to 0
- *   - `root`   root directory for relative filenames
+ *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
+ *   - `root`     root directory for relative filenames
+ *   - `headers`  object of headers to serve with file
+ *   - `dotfiles` serve dotfiles, defaulting to false; can be `""allow""` to send them
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  return this.sendfile(path, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
-res.header = function(field, val){
-  if (2 == arguments.length) {
+res.header = function header(field, val) {
+  if (arguments.length === 2) {
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
+ * @return {ServerResponse} for chaining
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
+ * @return {ServerResponse} for chaining
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-res.redirect = function(url){
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+res.redirect = function redirect(url) {
+  var address = url;
+  var body;
+  var status = 302;
-  if (2 == arguments.length) {
-    if ('number' == typeof url) {
-      status = url;
-      url = arguments[1];
+  if (arguments.length === 2) {
+    if (typeof arguments[0] === 'number') {
+      status = arguments[0];
+      address = arguments[1];
-  this.location(url);
-  url = this.get('Location');
+  this.location(address);
+  address = this.get('Location');
-  this.end(head ? null : body);
+
+  if (this.req.method === 'HEAD') {
+    this.end();
+  }
+
+  this.end(body);
- * @param {ServerResponse} for chaining
+ * @return {ServerResponse} for chaining
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,4ea6f21b02fdf290aea723ee42cbb0aab0313b20,Merge tag '3.14.0',lib/response.js,"+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
+      deprecate('res.send(body, status): Use res.send(status, body) instead');
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- *   - `maxAge` defaulting to 0
- *   - `root`   root directory for relative filenames
+ *   - `maxAge`  defaulting to 0 (can be string converted by `ms`)
+ *   - `root`    root directory for relative filenames
+ *   - `headers` object of headers to serve with file
+ *   - `hidden`  serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  return this.sendfile(path, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+  // disambiguate res.send(status) and res.send(status, num)
+  if (typeof body === 'number' && arguments.length === 1) {
+    // res.send(status) will set status message as text string
+    this.get('Content-Type') || this.type('txt');
+    this.statusCode = body;
+    body = http.STATUS_CODES[body];
+  }
+
-    // response status
-    case 'number':
-      this.get('Content-Type') || this.type('txt');
-      this.statusCode = body;
-      body = http.STATUS_CODES[body];
-      break;
+    case 'number':
-  var body = JSON.stringify(obj, replacer, spaces)
-    .replace(/\u2028/g, '\\u2028')
-    .replace(/\u2029/g, '\\u2029');
+  var body = JSON.stringify(obj, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.charset = 'utf-8';
+    this.set('X-Content-Type-Options', 'nosniff');
+    this.set('Content-Type', 'application/json');
+  }
-  if (callback && 'string' === typeof callback) {
+  if (typeof callback === 'string' && callback.length !== 0) {
+    this.charset = 'utf-8';
+    this.set('X-Content-Type-Options', 'nosniff');
-    var cb = callback.replace(/[^\[\]\w$.]/g, '');
-    body = 'typeof ' + cb + ' === \'function\' && ' + cb + '(' + body + ');';
+
+    // restrict callback charset
+    callback = callback.replace(/[^\[\]\w$.]/g, '');
+
+    // replace chars not allowed in JavaScript that are in JSON
+    body = body
+      .replace(/\u2028/g, '\\u2028')
+      .replace(/\u2029/g, '\\u2029');
+
+    // the /**/ is a specific security mitigation for ""Rosetta Flash JSONP abuse""
+    // the typeof check is just to reduce client error noise
+    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
- *    res.redirect('http://example.com', 301);
- * @param {String} url
- * @param {Number} code
+      deprecate('res.redirect(ur, status): Use res.redirect(status, url) instead');","+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
+      deprecate('res.send(body, status): Use res.send(status, body) instead');
+  // disambiguate res.send(status) and res.send(status, num)
+  if (typeof body === 'number' && arguments.length === 1) {
+    // res.send(status) will set status message as text string
+    this.get('Content-Type') || this.type('txt');
+    this.statusCode = body;
+    body = http.STATUS_CODES[body];
+  }
+
-    // response status
-    case 'number':
-      this.get('Content-Type') || this.type('txt');
-      this.statusCode = body;
-      body = http.STATUS_CODES[body];
-      break;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
+    case 'number':
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  var body = JSON.stringify(obj, replacer, spaces)
-    .replace(/\u2028/g, '\\u2028')
-    .replace(/\u2029/g, '\\u2029');
+  var body = JSON.stringify(obj, replacer, spaces);
-  this.charset = this.charset || 'utf-8';
-  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+  if (!this.get('Content-Type')) {
+    this.set('X-Content-Type-Options', 'nosniff');
+    this.set('Content-Type', 'application/json');
+  }
-  if (callback && 'string' === typeof callback) {
+  if (typeof callback === 'string' && callback.length !== 0) {
+    this.charset = 'utf-8';
+    this.set('X-Content-Type-Options', 'nosniff');
-    var cb = callback.replace(/[^\[\]\w$.]/g, '');
-    body = 'typeof ' + cb + ' === \'function\' && ' + cb + '(' + body + ');';
+
+    // restrict callback charset
+    callback = callback.replace(/[^\[\]\w$.]/g, '');
+
+    // replace chars not allowed in JavaScript that are in JSON
+    body = body
+      .replace(/\u2028/g, '\\u2028')
+      .replace(/\u2029/g, '\\u2029');
+
+    // the /**/ is a specific security mitigation for ""Rosetta Flash JSONP abuse""
+    // the typeof check is just to reduce client error noise
+    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
- *   - `maxAge` defaulting to 0
- *   - `root`   root directory for relative filenames
+ *   - `maxAge`  defaulting to 0 (can be string converted by `ms`)
+ *   - `root`    root directory for relative filenames
+ *   - `headers` object of headers to serve with file
+ *   - `hidden`  serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headersSent) self.removeHeader('Content-Disposition');
-
-    // list in limbo if there's no callback
-    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
+
+  if (options.headers) {
+    // set headers on successful transfer
+    file.on('headers', function headers(res) {
+      var obj = options.headers;
+      var keys = Object.keys(obj);
+
+      for (var i = 0; i < keys.length; i++) {
+        var k = keys[i];
+        res.setHeader(k, obj[k]);
+      }
+    });
+  }
+
+  // pipe
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
-  return this.sendfile(path, fn);
+
+  // set Content-Disposition when file is sent
+  var headers = {
+    'Content-Disposition': contentDisposition(filename)
+  };
+
+  return this.sendfile(path, { headers: headers }, fn);
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
- *    res.redirect('http://example.com', 301);
- * @param {String} url
- * @param {Number} code
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
+      deprecate('res.redirect(ur, status): Use res.redirect(status, url) instead');
-  if (!field) return this;
-  if (Array.isArray(field) && !field.length) return this;
+  if (!field || (Array.isArray(field) && !field.length)) {
+    deprecate('res.vary(): Provide a field name');
+    return this;
+  }
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,4ea6f21b02fdf290aea723ee42cbb0aab0313b20,Merge tag '3.14.0',package.json,"-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.13.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.5.1"",
-    ""basic-auth"": ""0.0.1"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.22.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.0.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""serve-static"": ""~1.3.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
-    ""istanbul"": ""0.2.12"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.2.14"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.6.1"",
+    ""method-override"": ""2.0.2"",
+    ""multiparty"": ""~3.3.0"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.13.0"",
+  ""version"": ""3.14.0"",
-    ""basic-auth"": ""0.0.1"",
+    ""basic-auth"": ""1.0.0"",
-    ""connect"": ""2.22.0"",
+    ""connect"": ""2.23.0"",
-    ""debug"": ""1.0.2"",
+    ""debug"": ""1.0.3"",
-    ""methods"": ""1.0.1"",
+    ""methods"": ""1.1.0"",
-    ""parseurl"": ""1.0.1"",
+    ""parseurl"": ""~1.1.3"",
-    ""istanbul"": ""0.2.12"",
+    ""istanbul"": ""0.3.0"",","-  ""description"": ""Sinatra inspired web development framework"",
-  ""version"": ""3.13.0"",
+  ""description"": ""Fast, unopinionated, minimalist web framework"",
+  ""version"": ""4.5.1"",
-    ""basic-auth"": ""0.0.1"",
+    ""accepts"": ""~1.0.7"",
-    ""connect"": ""2.22.0"",
-    ""commander"": ""1.3.2"",
-    ""debug"": ""1.0.2"",
+    ""debug"": ""1.0.3"",
+    ""finalhandler"": ""0.0.2"",
-    ""methods"": ""1.0.1"",
-    ""mkdirp"": ""0.5.0"",
-    ""parseurl"": ""1.0.1"",
+    ""methods"": ""1.1.0"",
+    ""parseurl"": ""~1.1.3"",
+    ""serve-static"": ""~1.3.0"",
+    ""type-is"": ""~1.3.2"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
-    ""istanbul"": ""0.2.12"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.3.0"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.6.1"",
+    ""method-override"": ""2.0.2"",
+    ""multiparty"": ""~3.3.0"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,4ea6f21b02fdf290aea723ee42cbb0aab0313b20,Merge tag '3.14.0',test/res.jsonp.js,"-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){","-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-          .get('/?callback=something&callback=somethingelse')
-          .end(function(err, res){
-            res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-            res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-            done();
-          })
+      .get('/?callback=something&callback=somethingelse')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof callbacks[123] === \'function\' && callbacks[123]({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /callbacks\[123\]\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof foobar === \'function\' && foobar({});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /foobar\(\{\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof foo === \'function\' && foo({""str"":""\\u2028 \\u2029 woot""});');
-        done();
-      });
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /foo\(\{""str"":""\\u2028 \\u2029 woot""\}\);/, done);
+
+    it('should not escape utf whitespace for json fallback', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ str: '\u2028 \u2029 woot' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""str"":""\u2028 \u2029 woot""}', done);
+    });
+
+    it('should include security header and prologue', function (done) {
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback=something')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect('X-Content-Type-Options', 'nosniff')
+      .expect(200, /^\/\*\*\//, done);
+    })
-      .expect(200, '{""hello"":""world""}', done);
+      .expect(200, '{""hello"":""world""}', function (err, res) {
+        if (err) return done(err);
+        res.headers.should.not.have.property('x-content-type-options');
+        done();
+      });
+      .expect('X-Content-Type-Options', 'nosniff')","-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-          .get('/?callback=something&callback=somethingelse')
-          .end(function(err, res){
-            res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-            res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-            done();
-          })
+      .get('/?callback=something&callback=somethingelse')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof something === \'function\' && something({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /something\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof callbacks[123] === \'function\' && callbacks[123]({""count"":1});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /callbacks\[123\]\(\{""count"":1\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof foobar === \'function\' && foobar({});');
-        done();
-      })
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /foobar\(\{\}\);/, done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'text/javascript; charset=utf-8');
-        res.text.should.equal('typeof foo === \'function\' && foo({""str"":""\\u2028 \\u2029 woot""});');
-        done();
-      });
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /foo\(\{""str"":""\\u2028 \\u2029 woot""\}\);/, done);
+
+    it('should not escape utf whitespace for json fallback', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ str: '\u2028 \u2029 woot' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""str"":""\u2028 \u2029 woot""}', done);
+    });
+
+    it('should include security header and prologue', function (done) {
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback=something')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect('X-Content-Type-Options', 'nosniff')
+      .expect(200, /^\/\*\*\//, done);
+    })
-      .expect(200, '{""hello"":""world""}', done);
+      .expect(200, '{""hello"":""world""}', function (err, res) {
+        if (err) return done(err);
+        res.headers.should.not.have.property('x-content-type-options');
+        done();
+      });
+      .expect('X-Content-Type-Options', 'nosniff')
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){"
expressjs_express,4ea6f21b02fdf290aea723ee42cbb0aab0313b20,Merge tag '3.14.0',test/res.send.js,"+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');","+    })
+  })
+
+  describe('.send(code, number)', function(){
+    it('should send number as json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(200, 0.123);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '0.123', done);","+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
+    })
+  })
+
+  describe('.send(code, number)', function(){
+    it('should send number as json', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.send(200, 0.123);
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '0.123', done);
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');"
expressjs_express,8a15f83d72b231ff36ae22bfd02ecedb51dc8d6b,Merge tag '3.12.1',package.json,"-  ""version"": ""3.12.0"",
+  ""version"": ""4.4.5"",
+    ""accepts"": ""~1.0.5"",
-    ""connect"": ""2.21.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.0.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""serve-static"": ""1.2.3"",
+    ""type-is"": ""~1.3.2"",
-    ""cookie-signature"": ""1.0.3"",
-    ""merge-descriptors"": ""0.0.2""
+    ""cookie-signature"": ""1.0.4"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
-    ""istanbul"": ""0.2.10"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.2.11"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.5.0"",
+    ""method-override"": ""2.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.12.0"",
+  ""version"": ""3.12.1"",
-    ""connect"": ""2.21.0"",
+    ""connect"": ""2.21.1"",
-    ""cookie-signature"": ""1.0.3"",
+    ""cookie-signature"": ""1.0.4"",
-    ""istanbul"": ""0.2.10"",
+    ""istanbul"": ""0.2.12"",","-  ""version"": ""3.12.0"",
+  ""version"": ""4.4.5"",
+    ""accepts"": ""~1.0.5"",
-    ""connect"": ""2.21.0"",
-    ""commander"": ""1.3.2"",
+    ""finalhandler"": ""0.0.2"",
-    ""mkdirp"": ""0.5.0"",
+    ""serve-static"": ""1.2.3"",
+    ""type-is"": ""~1.3.2"",
-    ""cookie-signature"": ""1.0.3"",
-    ""merge-descriptors"": ""0.0.2""
+    ""cookie-signature"": ""1.0.4"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
-    ""istanbul"": ""0.2.10"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""after"": ""0.8.1"",
+    ""istanbul"": ""0.2.12"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.5.0"",
+    ""method-override"": ""2.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,d91bf81c310898ae4a65dd6a993d7402294a4d87,Merge tag '4.4.5',package.json,"+    ""depd"": ""0.3.0"",
+    ""finalhandler"": ""0.0.2"",
+    ""media-typer"": ""0.2.0"",
-    ""type-is"": ""1.2.1"",
+    ""type-is"": ""~1.3.2"",
-    ""istanbul"": ""0.2.10"",
+    ""istanbul"": ""0.2.11"",","-  ""version"": ""4.4.4"",
+  ""version"": ""4.4.5"",
-    ""cookie-signature"": ""1.0.3"",
+    ""cookie-signature"": ""1.0.4"",","-  ""version"": ""4.4.4"",
+  ""version"": ""4.4.5"",
+    ""depd"": ""0.3.0"",
+    ""finalhandler"": ""0.0.2"",
+    ""media-typer"": ""0.2.0"",
-    ""type-is"": ""1.2.1"",
+    ""type-is"": ""~1.3.2"",
-    ""cookie-signature"": ""1.0.3"",
+    ""cookie-signature"": ""1.0.4"",
-    ""istanbul"": ""0.2.10"",
+    ""istanbul"": ""0.2.11"","
expressjs_express,3ffceff3ed356a711fce5fee6ed00a03f43affd8,Merge tag '3.12.0',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileTrust = require('./utils').compileTrust;
+var deprecate = require('./utils').deprecate;
+var resolve = require('path').resolve;
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);","-  , deprecate = require('./utils').deprecate
+var deprecate = require('depd')('express');
-app.del = deprecate(app.delete, 'app.del: Use app.delete instead');
+app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');","-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileETag = require('./utils').compileETag
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileTrust = require('./utils').compileTrust;
+var deprecate = require('depd')('express');
+var resolve = require('path').resolve;
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.set('views', process.cwd() + '/views');
+  this.set('views', resolve('views'));
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
- *
- * @param {String|Function|Server} route
- * @param {Function|Server} fn
- * @return {app} for chaining
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
+ *
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-app.del = deprecate(app.delete, 'app.del: Use app.delete instead');
+app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);"
expressjs_express,3ffceff3ed356a711fce5fee6ed00a03f43affd8,Merge tag '3.12.0',lib/response.js,"+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+var deprecate = require('depd')('express');
-  , deprecate = require('./utils').deprecate
-      return 'number' === typeof obj
-        ? jsonNumDeprecated.call(this, obj)
-        : jsonDeprecated.call(this, obj);
+      if (typeof obj === 'number') {
+        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
+      } else {
+        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
+      }
-
-var jsonDeprecated = deprecate(res.json,
-  'res.json(obj, status): Use res.json(status, obj) instead');
-
-var jsonNumDeprecated = deprecate(res.json,
-  'res.json(num, status): Use res.status(status).json(num) instead');
-      return 'number' === typeof obj
-        ? jsonpNumDeprecated.call(this, obj)
-        : jsonpDeprecated.call(this, obj);
+      if (typeof obj === 'number') {
+        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
+      } else {
+        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
+      }
-
-var jsonpDeprecated = deprecate(res.json,
-  'res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-
-var jsonpNumDeprecated = deprecate(res.json,
-  'res.jsonp(num, status): Use res.status(status).jsonp(num) instead');","+var deprecate = require('depd')('express');
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-      return 'number' === typeof obj
-        ? jsonNumDeprecated.call(this, obj)
-        : jsonDeprecated.call(this, obj);
+      if (typeof obj === 'number') {
+        deprecate('res.json(obj, status): Use res.json(status, obj) instead');
+      } else {
+        deprecate('res.json(num, status): Use res.status(status).json(num) instead');
+      }
-  this.charset = this.charset || 'utf-8';
-
-var jsonDeprecated = deprecate(res.json,
-  'res.json(obj, status): Use res.json(status, obj) instead');
-
-var jsonNumDeprecated = deprecate(res.json,
-  'res.json(num, status): Use res.status(status).json(num) instead');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-      return 'number' === typeof obj
-        ? jsonpNumDeprecated.call(this, obj)
-        : jsonpDeprecated.call(this, obj);
+      if (typeof obj === 'number') {
+        deprecate('res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
+      } else {
+        deprecate('res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
+      }
-  this.charset = this.charset || 'utf-8';
-var jsonpDeprecated = deprecate(res.json,
-  'res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
-
-var jsonpNumDeprecated = deprecate(res.json,
-  'res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
-
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,3ffceff3ed356a711fce5fee6ed00a03f43affd8,Merge tag '3.12.0',lib/utils.js,"-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32')
-  , crypto = require('crypto');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var crypto = require('crypto');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=""' + encodeURI(filename) + '""; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
+
+  return ret;
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**","-  , deprecate = require('util').deprecate
+var typer = require('media-typer');
-
-/**
- * Simple detection of charset parameter in content-type
- */
-var charsetRegExp = /;\s*charset\s*=/;
-
-/**
- * Deprecate function, like core `util.deprecate`,
- * but with NODE_ENV and color support.
- *
- * @param {Function} fn
- * @param {String} msg
- * @return {Function}
- * @api private
- */
-
-exports.deprecate = function(fn, msg){
-  if (process.env.NODE_ENV === 'test') return fn;
-
-  // prepend module name
-  msg = 'express: ' + msg;
-
-  if (process.stderr.isTTY) {
-    // colorize
-    msg = '\x1b[31;1m' + msg + '\x1b[0m';
-  }
-
-  return deprecate(fn, msg);
-};
-  var exists = charsetRegExp.test(type);
-
-  // removing existing charset
-  if (exists) {
-    var parts = type.split(';');
-
-    for (var i = 1; i < parts.length; i++) {
-      if (charsetRegExp.test(';' + parts[i])) {
-        parts.splice(i, 1);
-        break;
-      }
-    }
-
-    type = parts.join(';');
-  }
-
-  return type + '; charset=' + charset;
-};
+  // parse type
+  var parsed = typer.parse(type);
+
+  // set charset
+  parsed.parameters.charset = charset;
+
+  // format type
+  return typer.format(parsed);
+};","-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32')
-  , crypto = require('crypto');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
-
-/**
- * Simple detection of charset parameter in content-type
- */
-var charsetRegExp = /;\s*charset\s*=/;
-
-/**
- * Deprecate function, like core `util.deprecate`,
- * but with NODE_ENV and color support.
- *
- * @param {Function} fn
- * @param {String} msg
- * @return {Function}
- * @api private
- */
-
-exports.deprecate = function(fn, msg){
-  if (process.env.NODE_ENV === 'test') return fn;
-
-  // prepend module name
-  msg = 'express: ' + msg;
-
-  if (process.stderr.isTTY) {
-    // colorize
-    msg = '\x1b[31;1m' + msg + '\x1b[0m';
-  }
-
-  return deprecate(fn, msg);
-};
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var crypto = require('crypto');
+var basename = require('path').basename;
+var proxyaddr = require('proxy-addr');
+var typer = require('media-typer');
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=""' + encodeURI(filename) + '""; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
+
+  return ret;
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
-  var exists = charsetRegExp.test(type);
-
-  // removing existing charset
-  if (exists) {
-    var parts = type.split(';');
-
-    for (var i = 1; i < parts.length; i++) {
-      if (charsetRegExp.test(';' + parts[i])) {
-        parts.splice(i, 1);
-        break;
-      }
-    }
-
-    type = parts.join(';');
-  }
-
-  return type + '; charset=' + charset;
-};
+  // parse type
+  var parsed = typer.parse(type);
+
+  // set charset
+  parsed.parameters.charset = charset;
+
+  // format type
+  return typer.format(parsed);
+};"
expressjs_express,3ffceff3ed356a711fce5fee6ed00a03f43affd8,Merge tag '3.12.0',package.json,"-  ""version"": ""3.10.5"",
+  ""version"": ""4.4.4"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""connect"": ""2.19.6"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.0.5"",
+    ""buffer-crc32"": ""0.2.3"",
-    ""mkdirp"": ""0.5.0"",
+    ""serve-static"": ""1.2.3"",
+    ""type-is"": ""1.2.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.5.0"",
+    ""method-override"": ""2.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.10.5"",
+  ""version"": ""3.12.0"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""connect"": ""2.19.6"",
+    ""buffer-crc32"": ""0.2.3"",
+    ""connect"": ""2.21.0"",
+    ""depd"": ""0.3.0"",
+    ""media-typer"": ""0.2.0"",","-  ""version"": ""3.10.5"",
+  ""version"": ""4.4.4"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""connect"": ""2.19.6"",
-    ""commander"": ""1.3.2"",
+    ""accepts"": ""~1.0.5"",
+    ""buffer-crc32"": ""0.2.3"",
+    ""depd"": ""0.3.0"",
+    ""media-typer"": ""0.2.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""serve-static"": ""1.2.3"",
+    ""type-is"": ""1.2.1"",
-    ""merge-descriptors"": ""0.0.2""
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.20.0"",
-    ""should"": ""~4.0.0"",
+    ""mocha"": ""~1.20.1"",
+    ""should"": ""~4.0.4"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""~1.4.3"",
+    ""cookie-parser"": ""~1.3.1"",
+    ""express-session"": ""~1.5.0"",
+    ""method-override"": ""2.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""2.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,3ffceff3ed356a711fce5fee6ed00a03f43affd8,Merge tag '3.12.0',test/utils.js,"-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-
-  describe('when params included', function(){
-    it('should match params', function(){
-      assert(null == utils.accepts('text/html; charset=us-ascii', 'text/html; charset=utf-8'));
-    })
-  })
-})","-
-describe('utils.deprecate(fn, msg)', function(){
-  var env
-  before(function(){
-    env = process.env.NODE_ENV
-  })
-  after(function(){
-    process.env.NODE_ENV = env
-  })
-
-  it('should pass-through fn in test environment', function(){
-    var fn = function(){}
-    process.env.NODE_ENV = 'test'
-    utils.deprecate(fn).should.equal(fn)
-  })
-
-  it('should return new fn in other environment', function(){
-    var fn = function(){}
-    process.env.NODE_ENV = ''
-    utils.deprecate(fn).should.not.equal(fn)
-  })
-})","-
-describe('utils.deprecate(fn, msg)', function(){
-  var env
-  before(function(){
-    env = process.env.NODE_ENV
-  })
-  after(function(){
-    process.env.NODE_ENV = env
-  })
-
-  it('should pass-through fn in test environment', function(){
-    var fn = function(){}
-    process.env.NODE_ENV = 'test'
-    utils.deprecate(fn).should.equal(fn)
-  })
-
-  it('should return new fn in other environment', function(){
-    var fn = function(){}
-    process.env.NODE_ENV = ''
-    utils.deprecate(fn).should.not.equal(fn)
-  })
-})
-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-
-  describe('when params included', function(){
-    it('should match params', function(){
-      assert(null == utils.accepts('text/html; charset=us-ascii', 'text/html; charset=utf-8'));
-    })
-  })
-})"
expressjs_express,9bf1247716c1f43e2c31c96fc965387abfeae531,Merge tag '3.10.3',lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+var vary = require('vary');
-  var self = this;
-
-  // nothing
+  // checks for back-compat
-
-  // array
-  if (Array.isArray(field)) {
-    field.forEach(function(field){
-      self.vary(field);
-    });
-    return;
-  }
-
-  var vary = this.get('Vary');
-
-  // append
-  if (vary) {
-    vary = vary.split(/ *, */);
-    if (!~vary.indexOf(field)) vary.push(field);
-    this.set('Vary', vary.join(', '));
-    return this;
-  }
-
-  // set
-  this.set('Vary', field);
+  if (Array.isArray(field) && !field.length) return this;
+
+  vary(this, field);
+","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
+var vary = require('vary');
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-  var self = this;
-
-  // nothing
+  // checks for back-compat
-
-  // array
-  if (Array.isArray(field)) {
-    field.forEach(function(field){
-      self.vary(field);
-    });
-    return;
-  }
-
-  var vary = this.get('Vary');
-
-  // append
-  if (vary) {
-    vary = vary.split(/ *, */);
-    if (!~vary.indexOf(field)) vary.push(field);
-    this.set('Vary', vary.join(', '));
-    return this;
-  }
-
-  // set
-  this.set('Vary', field);
+  if (Array.isArray(field) && !field.length) return this;
+
+  vary(this, field);
+
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,9bf1247716c1f43e2c31c96fc965387abfeae531,Merge tag '3.10.3',package.json,"-  ""version"": ""3.10.0"",
+  ""version"": ""4.4.1"",
+    ""accepts"": ""1.0.2"",
-    ""connect"": ""2.19.1"",
-    ""commander"": ""1.3.2"",
-    ""mkdirp"": ""0.5.0"",
-    ""proxy-addr"": ""1.0.0"",
+    ""proxy-addr"": ""1.0.1"",
+    ""serve-static"": ""1.2.1"",
+    ""type-is"": ""1.2.1"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
+    ""after"": ""0.8.1"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""1.3.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""2.0.1"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.10.0"",
+  ""version"": ""3.10.3"",
-    {
-      ""name"": ""TJ Holowaychuk"",
-      ""email"": ""tj@vision-media.ca""
-    },
-    {
-      ""name"": ""Aaron Heckmann"",
-      ""email"": ""aaron.heckmann+github@gmail.com""
-    },
-    {
-      ""name"": ""Ciaran Jessup"",
-      ""email"": ""ciaranj@gmail.com""
-    },
-    {
-      ""name"": ""Douglas Christopher Wilson"",
-      ""email"": ""doug@somethingdoug.com""
-    },
-    {
-      ""name"": ""Guillermo Rauch"",
-      ""email"": ""rauchg@gmail.com""
-    },
-    {
-      ""name"": ""Jonathan Ong"",
-      ""email"": ""me@jongleberry.com""
-    },
-    {
-      ""name"": ""Roman Shtylman"",
-      ""email"": ""shtylman+expressjs@gmail.com""
-    }
+    ""Aaron Heckmann <aaron.heckmann+github@gmail.com>"",
+    ""Ciaran Jessup <ciaranj@gmail.com>"",
+    ""Douglas Christopher Wilson <doug@somethingdoug.com>"",
+    ""Guillermo Rauch <rauchg@gmail.com>"",
+    ""Jonathan Ong <me@jongleberry.com>"",
+    ""Roman Shtylman <shtylman+expressjs@gmail.com""
-  ""repository"": ""git://github.com/visionmedia/express"",
+  ""repository"": ""visionmedia/express"",
-    ""connect"": ""2.19.1"",
+    ""connect"": ""2.19.4"",
+    ""debug"": ""1.0.0"",
-    ""proxy-addr"": ""1.0.0"",
+    ""proxy-addr"": ""1.0.1"",
+    ""vary"": ""0.1.0"",
-    ""merge-descriptors"": ""0.0.2"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""merge-descriptors"": ""0.0.2""","-  ""version"": ""3.10.0"",
+  ""version"": ""4.4.1"",
-    {
-      ""name"": ""TJ Holowaychuk"",
-      ""email"": ""tj@vision-media.ca""
-    },
-    {
-      ""name"": ""Aaron Heckmann"",
-      ""email"": ""aaron.heckmann+github@gmail.com""
-    },
-    {
-      ""name"": ""Ciaran Jessup"",
-      ""email"": ""ciaranj@gmail.com""
-    },
-    {
-      ""name"": ""Douglas Christopher Wilson"",
-      ""email"": ""doug@somethingdoug.com""
-    },
-    {
-      ""name"": ""Guillermo Rauch"",
-      ""email"": ""rauchg@gmail.com""
-    },
-    {
-      ""name"": ""Jonathan Ong"",
-      ""email"": ""me@jongleberry.com""
-    },
-    {
-      ""name"": ""Roman Shtylman"",
-      ""email"": ""shtylman+expressjs@gmail.com""
-    }
+    ""Aaron Heckmann <aaron.heckmann+github@gmail.com>"",
+    ""Ciaran Jessup <ciaranj@gmail.com>"",
+    ""Douglas Christopher Wilson <doug@somethingdoug.com>"",
+    ""Guillermo Rauch <rauchg@gmail.com>"",
+    ""Jonathan Ong <me@jongleberry.com>"",
+    ""Roman Shtylman <shtylman+expressjs@gmail.com""
-  ""repository"": ""git://github.com/visionmedia/express"",
+  ""repository"": ""visionmedia/express"",
+    ""accepts"": ""1.0.2"",
-    ""connect"": ""2.19.1"",
-    ""commander"": ""1.3.2"",
+    ""debug"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
-    ""proxy-addr"": ""1.0.0"",
+    ""proxy-addr"": ""1.0.1"",
+    ""serve-static"": ""1.2.1"",
+    ""type-is"": ""1.2.1"",
+    ""vary"": ""0.1.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2""
+    ""after"": ""0.8.1"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""1.3.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""2.0.1"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,402ec83157dbfbafc5ad6f3bca376b250a25b09e,Merge tag '3.10.0',lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+var escapeHtml = require('escape-html');
-      var u = utils.escape(url);
+      var u = escapeHtml(url);","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var escapeHtml = require('escape-html');
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
- * @param {Mixed} body or status
- * @param {Mixed} body
- * @return {ServerResponse}
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
- * @param {Mixed} obj or status
- * @param {Mixed} obj
- * @return {ServerResponse}
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
- * @param {String} path
- * @param {Object|Function} options or fn
- * @param {Function} fn
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * @param {String} path
- * @param {String|Function} filename or fn
- * @param {Function} fn
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
- * @param  {String} view
- * @param  {Object|Function} options or callback function
- * @param  {Function} fn
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,402ec83157dbfbafc5ad6f3bca376b250a25b09e,Merge tag '3.10.0',package.json,"-  ""version"": ""3.9.0"",
+  ""version"": ""4.4.1"",
+    ""accepts"": ""1.0.2"",
-    ""connect"": ""2.18.0"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""methods"": ""1.0.1"",
-    ""send"": ""0.4.0"",
+    ""send"": ""0.4.1"",
+    ""serve-static"": ""1.2.1"",
+    ""type-is"": ""1.2.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
+    ""after"": ""0.8.1"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""1.3.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""2.0.1"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.9.0"",
+  ""version"": ""3.10.0"",
-    ""connect"": ""2.18.0"",
+    ""connect"": ""2.19.1"",
-    ""methods"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""methods"": ""1.0.1"",
-    ""send"": ""0.4.0"",
+    ""send"": ""0.4.1"",","-  ""version"": ""3.9.0"",
+  ""version"": ""4.4.1"",
+    ""accepts"": ""1.0.2"",
-    ""connect"": ""2.18.0"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""escape-html"": ""1.0.1"",
+    ""methods"": ""1.0.1"",
-    ""send"": ""0.4.0"",
+    ""send"": ""0.4.1"",
+    ""serve-static"": ""1.2.1"",
+    ""type-is"": ""1.2.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""qs"": ""0.6.6"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
+    ""after"": ""0.8.1"",
+    ""supertest"": ""~0.13.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""marked"": ""0.3.2"",
-    ""connect-redis"": ""~1.4.5"",
-    ""supertest"": ""~0.13.0""
+    ""body-parser"": ""1.3.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""2.0.1"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/auth/app.js,"-var express = require('../..')
-  , hash = require('./pass').hash;
+var express = require('../..');
+var hash = require('./pass').hash;
+var bodyParser = require('body-parser');
+var cookieParser = require('cookie-parser');
+var session = require('express-session');
-app.use(express.bodyParser());
-app.use(express.cookieParser('shhhh, very secret'));
-app.use(express.session());
+app.use(bodyParser());
+app.use(cookieParser('shhhh, very secret'));
+app.use(session());
-  var err = req.session.error
-    , msg = req.session.success;
+  var err = req.session.error;
+  var msg = req.session.success;
-  })
+  });
-  res.redirect('login');
+  res.redirect('/login');
-      // to prevent fixation 
+      // to prevent fixation
-        // Store the user's primary key 
+        // Store the user's primary key
-      res.redirect('login');
+      res.redirect('/login');",+/* istanbul ignore next */,"-var express = require('../..')
-  , hash = require('./pass').hash;
+var express = require('../..');
+var hash = require('./pass').hash;
+var bodyParser = require('body-parser');
+var cookieParser = require('cookie-parser');
+var session = require('express-session');
-app.use(express.bodyParser());
-app.use(express.cookieParser('shhhh, very secret'));
-app.use(express.session());
+app.use(bodyParser());
+app.use(cookieParser('shhhh, very secret'));
+app.use(session());
-  var err = req.session.error
-    , msg = req.session.success;
+  var err = req.session.error;
+  var msg = req.session.success;
-  })
+  });
-  res.redirect('login');
+  res.redirect('/login');
-      // to prevent fixation 
+      // to prevent fixation
-        // Store the user's primary key 
+        // Store the user's primary key
-      res.redirect('login');
+      res.redirect('/login');
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/big-view/index.js,"+/**
+ * Module dependencies.
+ */
-var express = require('../..')
-  , app = express();
+var express = require('../..');
+var logger = require('morgan');
+var app = express();
-app.use(express.logger('dev'));
+app.use(logger('dev'));","-app.listen(3000);
-console.log('Express listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","+/**
+ * Module dependencies.
+ */
-var express = require('../..')
-  , app = express();
+var express = require('../..');
+var logger = require('morgan');
+var app = express();
-app.use(express.logger('dev'));
+app.use(logger('dev'));
-app.listen(3000);
-console.log('Express listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/content-negotiation/index.js,"-var express = require('../../')
-  , app = module.exports = express()
-  , users = require('./db');
+var express = require('../../');
+var app = module.exports = express();
+var users = require('./db');
-// so either you can deal with different types of formatting 
+// so either you can deal with different types of formatting
-  })
+  });
-  }
+  };","+/* istanbul ignore next */
-  console.log('listening on port 3000');
+  console.log('Express started on port 3000');","-var express = require('../../')
-  , app = module.exports = express()
-  , users = require('./db');
+var express = require('../../');
+var app = module.exports = express();
+var users = require('./db');
-// so either you can deal with different types of formatting 
+// so either you can deal with different types of formatting
-  })
+  });
-  }
+  };
+/* istanbul ignore next */
-  console.log('listening on port 3000');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/cookie-sessions/index.js,"-
+var cookie-parser = require('cookie-parser');
-// ignore GET /favicon.ico
-app.use(express.favicon());
-
-app.use(express.cookieParser('manny is cool'));
+app.use(cookieParser('manny is cool'));
-app.use(express.cookieSession());
+app.use(cookieSession());","+/* istanbul ignore next */
-  console.log('Express server listening on port 3000');
+  console.log('Express started on port 3000');","-
+var cookie-parser = require('cookie-parser');
-// ignore GET /favicon.ico
-app.use(express.favicon());
-
-app.use(express.cookieParser('manny is cool'));
+app.use(cookieParser('manny is cool'));
-app.use(express.cookieSession());
+app.use(cookieSession());
+/* istanbul ignore next */
-  console.log('Express server listening on port 3000');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/cookies/app.js,"-
-var express = require('../../')
-  , app = module.exports = express();
-
-
-// add favicon() before logger() so
-// GET /favicon.ico requests are not
-// logged, because this middleware
-// reponds to /favicon.ico and does not
-// call next()
-app.use(express.favicon());
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
-  app.use(express.logger(':method :url'));
+  app.use(logger(':method :url'));
-// when the secret is passed, used 
+// when the secret is passed, used
-app.use(express.cookieParser('my secret here'));
+app.use(cookieParser('my secret here'));
-app.use(express.bodyParser());
+app.use(bodyParser());","-if ('test' != process.env.NODE_ENV)
-  app.use(express.logger(':method :url'));
+if ('test' != process.env.NODE_ENV) app.use(express.logger(':method :url'));
-if (!module.parent){
+/* istanbul ignore next */
+if (!module.parent) {","-
-var express = require('../../')
-  , app = module.exports = express();
-
-
-// add favicon() before logger() so
-// GET /favicon.ico requests are not
-// logged, because this middleware
-// reponds to /favicon.ico and does not
-// call next()
-app.use(express.favicon());
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
-if ('test' != process.env.NODE_ENV)
-  app.use(express.logger(':method :url'));
+if ('test' != process.env.NODE_ENV) app.use(logger(':method :url'));
-// when the secret is passed, used 
+// when the secret is passed, used
-app.use(express.cookieParser('my secret here'));
+app.use(cookieParser('my secret here'));
-app.use(express.bodyParser());
+app.use(bodyParser());
-if (!module.parent){
+/* istanbul ignore next */
+if (!module.parent) {"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/downloads/app.js,"-
-var express = require('../../')
-  , app = module.exports = express();
+var express = require('../../');
+var app = module.exports = express();
+    + '<li>Download <a href=""/files/utf-8 한中日.txt"">utf-8 한中日.txt</a>.</li>'
-  var file = req.params.file
-    , path = __dirname + '/files/' + file;
+  var file = req.params.file;
+  var path = __dirname + '/files/' + file;",+/* istanbul ignore next */,"-
-var express = require('../../')
-  , app = module.exports = express();
+var express = require('../../');
+var app = module.exports = express();
+    + '<li>Download <a href=""/files/utf-8 한中日.txt"">utf-8 한中日.txt</a>.</li>'
-  var file = req.params.file
-    , path = __dirname + '/files/' + file;
+  var file = req.params.file;
+  var path = __dirname + '/files/' + file;
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/ejs/index.js,-,"+/* istanbul ignore next */
-  console.log('Express app started on port 3000');
+  console.log('Express started on port 3000');","-
+/* istanbul ignore next */
-  console.log('Express app started on port 3000');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/error-pages/index.js,"-var express = require('../../')
-  , app = module.exports = express()
-  , silent = 'test' == process.env.NODE_ENV;
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var silent = 'test' == process.env.NODE_ENV;
-app.use(express.favicon());
+silent || app.use(logger('dev'));
-silent || app.use(express.logger('dev'));
+// Routes
-// ""app.router"" positions our routes 
-// above the middleware defined below,
-// this means that Express will attempt
-// to match & call routes _before_ continuing
-// on, at which point we assume it's a 404 because
-// no route has handled the request.
+app.get('/', function(req, res){
+  res.render('index.jade');
+});
-app.use(app.router);
+app.get('/404', function(req, res, next){
+  // trigger a 404 since no other middleware
+  // will match /404 after this one, and we're not
+  // responding here
+  next();
+});
+
+app.get('/403', function(req, res, next){
+  // trigger a 403 error
+  var err = new Error('not allowed!');
+  err.status = 403;
+  next(err);
+});
+
+app.get('/500', function(req, res, next){
+  // trigger a generic (500) error
+  next(new Error('keyboard cat!'));
+});
+
+// Error handlers
-  
+
-// Routes
-
-app.get('/', function(req, res){
-  res.render('index.jade');
-});
-
-app.get('/404', function(req, res, next){
-  // trigger a 404 since no other middleware
-  // will match /404 after this one, and we're not
-  // responding here
-  next();
-});
-
-app.get('/403', function(req, res, next){
-  // trigger a 403 error
-  var err = new Error('not allowed!');
-  err.status = 403;
-  next(err);
-});
-
-app.get('/500', function(req, res, next){
-  // trigger a generic (500) error
-  next(new Error('keyboard cat!'));
-});","-if ('production' == app.settings.env) {
-  app.disable('verbose errors');
-}
+if ('production' == app.settings.env) app.disable('verbose errors');
+/* istanbul ignore next */
-  silent || console.log('Express started on port 3000');
+  console.log('Express started on port 3000');","-var express = require('../../')
-  , app = module.exports = express()
-  , silent = 'test' == process.env.NODE_ENV;
+var express = require('../../');
+var app = module.exports = express();
+var logger = require('morgan');
+var silent = 'test' == process.env.NODE_ENV;
-if ('production' == app.settings.env) {
-  app.disable('verbose errors');
-}
+if ('production' == app.settings.env) app.disable('verbose errors');
-app.use(express.favicon());
+silent || app.use(logger('dev'));
-silent || app.use(express.logger('dev'));
+// Routes
-// ""app.router"" positions our routes 
-// above the middleware defined below,
-// this means that Express will attempt
-// to match & call routes _before_ continuing
-// on, at which point we assume it's a 404 because
-// no route has handled the request.
+app.get('/', function(req, res){
+  res.render('index.jade');
+});
-app.use(app.router);
+app.get('/404', function(req, res, next){
+  // trigger a 404 since no other middleware
+  // will match /404 after this one, and we're not
+  // responding here
+  next();
+});
+
+app.get('/403', function(req, res, next){
+  // trigger a 403 error
+  var err = new Error('not allowed!');
+  err.status = 403;
+  next(err);
+});
+
+app.get('/500', function(req, res, next){
+  // trigger a generic (500) error
+  next(new Error('keyboard cat!'));
+});
+
+// Error handlers
-  
+
-// Routes
-app.get('/', function(req, res){
-  res.render('index.jade');
-});
-
-app.get('/404', function(req, res, next){
-  // trigger a 404 since no other middleware
-  // will match /404 after this one, and we're not
-  // responding here
-  next();
-});
-
-app.get('/403', function(req, res, next){
-  // trigger a 403 error
-  var err = new Error('not allowed!');
-  err.status = 403;
-  next(err);
-});
-
-app.get('/500', function(req, res, next){
-  // trigger a generic (500) error
-  next(new Error('keyboard cat!'));
-});
-
+/* istanbul ignore next */
-  silent || console.log('Express started on port 3000');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/error/index.js,"-
-var express = require('../../')
-  , app = module.exports = express()
-  , test = app.get('env') == 'test';
+var express = require('../../');
+var logger = require('morgan');
+var app = module.exports = express();
+var test = app.get('env') == 'test';
-if (!test) app.use(express.logger('dev'));
-app.use(app.router);
-
-// the error handler is strategically
-// placed *below* the app.router; if it
-// were above it would not receive errors
-// from app.get() etc 
-app.use(error);
+if (!test) app.use(logger('dev'));
+// the error handler is placed after routes
+// if it were above it would not receive errors
+// from app.get() etc
+app.use(error);
+",+/* istanbul ignore next */,"-
-var express = require('../../')
-  , app = module.exports = express()
-  , test = app.get('env') == 'test';
+var express = require('../../');
+var logger = require('morgan');
+var app = module.exports = express();
+var test = app.get('env') == 'test';
-if (!test) app.use(express.logger('dev'));
-app.use(app.router);
-
-// the error handler is strategically
-// placed *below* the app.router; if it
-// were above it would not receive errors
-// from app.get() etc 
-app.use(error);
+if (!test) app.use(logger('dev'));
+// the error handler is placed after routes
+// if it were above it would not receive errors
+// from app.get() etc
+app.use(error);
+
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/expose-data-to-client/index.js,"-var express = require('../..')
-  , app = express();
+var express = require('../..');
+var logger = require('morgan');
+var app = express();
-  }
+  };
-app.use(express.logger('dev'));
+app.use(logger('dev'));","-app.listen(3000);
-console.log('app listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-var express = require('../..')
-  , app = express();
+var express = require('../..');
+var logger = require('morgan');
+var app = express();
-  }
+  };
-app.use(express.logger('dev'));
+app.use(logger('dev'));
-app.listen(3000);
-console.log('app listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/hello-world/index.js,-,"-app.listen(3000);
-console.log('Express started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
-app.listen(3000);
-console.log('Express started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/jade/index.js,"-
-app.use(app.router);
-app.use(express.errorHandler());
+// change this to a better error handler in your code
+// sending stacktrace to users in production is not good
+app.use(function(err, req, res, next) {
+  res.send(err.stack);
+});
+","-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
-app.use(app.router);
-app.use(express.errorHandler());
-app.listen(3000);
-console.log('Express app started on port 3000');
+// change this to a better error handler in your code
+// sending stacktrace to users in production is not good
+app.use(function(err, req, res, next) {
+  res.send(err.stack);
+});
+
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/markdown/index.js,"-
-var express = require('../..')
-  , fs = require('fs')
-  , md = require('marked').parse;
+var express = require('../..');
+var fs = require('fs');
+var md = require('marked').parse;
-      })
+      });
-})
+});
-})
+});
-})
+});",+/* istanbul ignore next */,"-
-var express = require('../..')
-  , fs = require('fs')
-  , md = require('marked').parse;
+var express = require('../..');
+var fs = require('fs');
+var md = require('marked').parse;
-      })
+      });
-})
+});
-})
+});
-})
+});
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/multipart/index.js,"-
-var express = require('../..')
-  , format = require('util').format;
+var express = require('../..');
+var multiparty = require('multiparty');
+var format = require('util').format;
-var app = module.exports = express()
-
-// bodyParser in connect 2.x uses node-formidable to parse 
-// the multipart form data.
-app.use(express.bodyParser())
+var app = module.exports = express();
-  // the uploaded file can be found as `req.files.image` and the
-  // title field as `req.body.title`
-  res.send(format('\nuploaded %s (%d Kb) to %s as %s'
-    , req.files.image.name
-    , req.files.image.size / 1024 | 0 
-    , req.files.image.path
-    , req.body.title));
+  // create a form to begin parsing
+  var form = new multiparty.Form();
+  var image;
+  var title;
+
+  form.on('error', next);
+  form.on('close', function(){
+    res.send(format('\nuploaded %s (%d Kb) as %s'
+      , image.filename
+      , image.size / 1024 | 0
+      , title));
+  });
+
+  // listen on field event for title
+  form.on('field', function(name, val){
+    if (name !== 'title') return;
+    title = val;
+  });
+
+  // listen on part event for image file
+  form.on('part', function(part){
+    if (!part.filename) return;
+    if (part.name !== 'image') return part.resume();
+    image = {};
+    image.filename = part.filename;
+    image.size = 0;
+    part.on('data', function(buf){
+      image.size += buf.length;
+    });
+  });
+
+
+  // parse the form
+  form.parse(req);
-  app.listen(3000);
+  app.listen(4000);",+/* istanbul ignore next */,"-
-var express = require('../..')
-  , format = require('util').format;
+var express = require('../..');
+var multiparty = require('multiparty');
+var format = require('util').format;
-var app = module.exports = express()
-
-// bodyParser in connect 2.x uses node-formidable to parse 
-// the multipart form data.
-app.use(express.bodyParser())
+var app = module.exports = express();
-  // the uploaded file can be found as `req.files.image` and the
-  // title field as `req.body.title`
-  res.send(format('\nuploaded %s (%d Kb) to %s as %s'
-    , req.files.image.name
-    , req.files.image.size / 1024 | 0 
-    , req.files.image.path
-    , req.body.title));
+  // create a form to begin parsing
+  var form = new multiparty.Form();
+  var image;
+  var title;
+
+  form.on('error', next);
+  form.on('close', function(){
+    res.send(format('\nuploaded %s (%d Kb) as %s'
+      , image.filename
+      , image.size / 1024 | 0
+      , title));
+  });
+
+  // listen on field event for title
+  form.on('field', function(name, val){
+    if (name !== 'title') return;
+    title = val;
+  });
+
+  // listen on part event for image file
+  form.on('part', function(part){
+    if (!part.filename) return;
+    if (part.name !== 'image') return part.resume();
+    image = {};
+    image.filename = part.filename;
+    image.size = 0;
+    part.on('data', function(buf){
+      image.size += buf.length;
+    });
+  });
+
+
+  // parse the form
+  form.parse(req);
+/* istanbul ignore next */
-  app.listen(3000);
+  app.listen(4000);"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/mvc/index.js,"+/**
+ * Module dependencies.
+ */
+
+var logger = require('morgan');
+var session = require('express-session');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
+var methodOverride = require('method-override');
-// map .renderFile to "".html"" files
-app.engine('html', require('ejs').renderFile);
-
-// make "".html"" the default
-app.set('view engine', 'html');
+// set our default template engine to ""jade""
+// which prevents the need for extensions
+app.set('view engine', 'jade');
-if (!module.parent) app.use(express.logger('dev'));
+if (!module.parent) app.use(logger('dev'));
-app.use(express.cookieParser('some secret here'));
-app.use(express.session());
+app.use(cookieParser('some secret here'));
+app.use(session());
-app.use(express.bodyParser());
+app.use(bodyParser());
-// support _method (PUT in forms etc)
-app.use(express.methodOverride());
+// override methods (put, delete)
+app.use(methodOverride());","+/* istanbul ignore next */
-  console.log('\n  listening on port 3000\n');
+  console.log('Express started on port 3000');","+/**
+ * Module dependencies.
+ */
+
+var logger = require('morgan');
+var session = require('express-session');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
+var methodOverride = require('method-override');
-// map .renderFile to "".html"" files
-app.engine('html', require('ejs').renderFile);
-
-// make "".html"" the default
-app.set('view engine', 'html');
+// set our default template engine to ""jade""
+// which prevents the need for extensions
+app.set('view engine', 'jade');
-if (!module.parent) app.use(express.logger('dev'));
+if (!module.parent) app.use(logger('dev'));
-app.use(express.cookieParser('some secret here'));
-app.use(express.session());
+app.use(cookieParser('some secret here'));
+app.use(session());
-app.use(express.bodyParser());
+app.use(bodyParser());
-// support _method (PUT in forms etc)
-app.use(express.methodOverride());
+// override methods (put, delete)
+app.use(methodOverride());
+/* istanbul ignore next */
-  console.log('\n  listening on port 3000\n');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/online/index.js,"-
-var express = require('../..')
-  , online = require('online')
-  , redis = require('redis')
-  , db = redis.createClient();
+var express = require('../..');
+var online = require('online');
+var redis = require('redis');
+var db = redis.createClient();","-app.listen(3000);
-console.log('listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
-var express = require('../..')
-  , online = require('online')
-  , redis = require('redis')
-  , db = redis.createClient();
+var express = require('../..');
+var online = require('online');
+var redis = require('redis');
+var db = redis.createClient();
-app.listen(3000);
-console.log('listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/params/app.js,"-
-var express = require('../../')
-  , app = module.exports = express();
+var express = require('../../');
+var app = module.exports = express();
-app.param(['to', 'from'], function(req, res, next, num, name){ 
+app.param(['to', 'from'], function(req, res, next, num, name){
-  var from = req.params.from
-    , to = req.params.to
-    , names = users.map(function(user){ return user.name; });
+  var from = req.params.from;
+  var to = req.params.to;
+  var names = users.map(function(user){ return user.name; });","-  req.params[name] = num = parseInt(num, 10);
-  if( isNaN(num) ){
+  req.params[name] = parseInt(num, 10);
+  if( isNaN(req.params[name]) ){
+/* istanbul ignore next */","-
-var express = require('../../')
-  , app = module.exports = express();
+var express = require('../../');
+var app = module.exports = express();
-app.param(['to', 'from'], function(req, res, next, num, name){ 
-  req.params[name] = num = parseInt(num, 10);
-  if( isNaN(num) ){
+app.param(['to', 'from'], function(req, res, next, num, name){
+  req.params[name] = parseInt(num, 10);
+  if( isNaN(req.params[name]) ){
-  var from = req.params.from
-    , to = req.params.to
-    , names = users.map(function(user){ return user.name; });
+  var from = req.params.from;
+  var to = req.params.to;
+  var names = users.map(function(user){ return user.name; });
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/resource/app.js,"-
-    var a = parseInt(req.params.a, 10)
-      , b = parseInt(req.params.b, 10)
-      , format = req.params.format;
+    var a = parseInt(req.params.a, 10);
+    var b = parseInt(req.params.b, 10);
+    var format = req.params.format;
-  ].join('\n')); 
+  ].join('\n'));","-  this.delete(path + '/:id', obj.destroy);
+  this.delete(path + '/:id', function(req, res){
+    var id = parseInt(req.params.id, 10);
+    obj.destroy(req, res, id);
+  });
-  destroy: function(req, res){
-    var id = req.params.id;
+  destroy: function(req, res, id){
+/* istanbul ignore next */","-
-    var a = parseInt(req.params.a, 10)
-      , b = parseInt(req.params.b, 10)
-      , format = req.params.format;
+    var a = parseInt(req.params.a, 10);
+    var b = parseInt(req.params.b, 10);
+    var format = req.params.format;
-  this.delete(path + '/:id', obj.destroy);
+  this.delete(path + '/:id', function(req, res){
+    var id = parseInt(req.params.id, 10);
+    obj.destroy(req, res, id);
+  });
-  destroy: function(req, res){
-    var id = req.params.id;
+  destroy: function(req, res, id){
-  ].join('\n')); 
+  ].join('\n'));
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/route-map/index.js,"+/**
+ * Module dependencies.
+ */
-var express = require('../../lib/express')
-  , verbose = process.env.NODE_ENV != 'test'
-  , app = module.exports = express();
+var express = require('../../lib/express');
+
+var verbose = process.env.NODE_ENV != 'test';
+
+var app = module.exports = express();","-app.listen(3000);
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","+/**
+ * Module dependencies.
+ */
-var express = require('../../lib/express')
-  , verbose = process.env.NODE_ENV != 'test'
-  , app = module.exports = express();
+var express = require('../../lib/express');
+
+var verbose = process.env.NODE_ENV != 'test';
+
+var app = module.exports = express();
-app.listen(3000);
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/route-separation/index.js,"-
-var express = require('../..')
-  , app = express()
-  , site = require('./site')
-  , post = require('./post')
-  , user = require('./user');
+var express = require('../..');
+var app = express();
+var logger = require('morgan');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
+var site = require('./site');
+var post = require('./post');
+var user = require('./user');
-app.use(express.logger('dev'));
-app.use(express.cookieParser());
-app.use(express.bodyParser());
-app.use(express.methodOverride());
+app.use(logger('dev'));
+app.use(cookieParser());
+app.use(bodyParser());","-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
-var express = require('../..')
-  , app = express()
-  , site = require('./site')
-  , post = require('./post')
-  , user = require('./user');
+var express = require('../..');
+var app = express();
+var logger = require('morgan');
+var cookieParser = require('cookie-parser');
+var bodyParser = require('body-parser');
+var site = require('./site');
+var post = require('./post');
+var user = require('./user');
-app.use(express.logger('dev'));
-app.use(express.cookieParser());
-app.use(express.bodyParser());
-app.use(express.methodOverride());
+app.use(logger('dev'));
+app.use(cookieParser());
+app.use(bodyParser());
-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/search/index.js,"-
-var express = require('../..')
-  , redis = require('redis')
-  , db = redis.createClient();
+var express = require('../..');
+var redis = require('redis');
+
+var db = redis.createClient();","-app.listen(3000);
-console.log('app listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
-var express = require('../..')
-  , redis = require('redis')
-  , db = redis.createClient();
+var express = require('../..');
+var redis = require('redis');
+
+var db = redis.createClient();
-app.listen(3000);
-console.log('app listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/session/index.js,"-
+var cookieParser = require('cookie-parser');
+var session = require('express-session');
-
-app.use(express.logger('dev'));
-app.use(express.cookieParser('keyboard cat'));
+app.use(cookieParser('keyboard cat'));
-app.use(express.session());
+app.use(session());","-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","-
+var cookieParser = require('cookie-parser');
+var session = require('express-session');
-
-app.use(express.logger('dev'));
-app.use(express.cookieParser('keyboard cat'));
+app.use(cookieParser('keyboard cat'));
-app.use(express.session());
+app.use(session());
-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/vhost/index.js,"+var logger = require('morgan');
+var vhost = require('vhost');
-main.use(express.logger('dev'));
+main.use(logger('dev'));
-  res.send('Hello from main app!')
+  res.send('Hello from main app!');
-app.use(express.vhost('*.example.com', redirect)) // Serves all subdomains via Redirect app
-app.use(express.vhost('example.com', main)); // Serves top level domain via Main server app 
+app.use(vhost('*.example.com', redirect)); // Serves all subdomains via Redirect app
+app.use(vhost('example.com', main)); // Serves top level domain via Main server app","-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","+var logger = require('morgan');
+var vhost = require('vhost');
-main.use(express.logger('dev'));
+main.use(logger('dev'));
-  res.send('Hello from main app!')
+  res.send('Hello from main app!');
-app.use(express.vhost('*.example.com', redirect)) // Serves all subdomains via Redirect app
-app.use(express.vhost('example.com', main)); // Serves top level domain via Main server app 
+app.use(vhost('*.example.com', redirect)); // Serves all subdomains via Redirect app
+app.use(vhost('example.com', main)); // Serves top level domain via Main server app
-app.listen(3000);
-console.log('Express app started on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/view-constructor/index.js,"-
-var express = require('../../')
-  , http = require('http')
-  , GithubView = require('./github-view')
-  , md = require('marked').parse;
+var express = require('../../');
+var http = require('http');
+var GithubView = require('./github-view');
+var md = require('marked').parse;
-    })
+    });
-})
+});
-})
+});
-})
+});",+/* istanbul ignore next */,"-
-var express = require('../../')
-  , http = require('http')
-  , GithubView = require('./github-view')
-  , md = require('marked').parse;
+var express = require('../../');
+var http = require('http');
+var GithubView = require('./github-view');
+var md = require('marked').parse;
-    })
+    });
-})
+});
-})
+});
-})
+});
+/* istanbul ignore next */"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/view-locals/index.js,"+/**
+ * Module dependencies.
+ */
-var express = require('../..')
-  , User = require('./user')
-  , app = express();
+var express = require('../..');
+var User = require('./user');
+var app = express();
-// 
+//","-app.listen(3000);
-console.log('Application listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}","+/**
+ * Module dependencies.
+ */
-var express = require('../..')
-  , User = require('./user')
-  , app = express();
+var express = require('../..');
+var User = require('./user');
+var app = express();
-// 
+//
-app.listen(3000);
-console.log('Application listening on port 3000');
+/* istanbul ignore next */
+if (!module.parent) {
+  app.listen(3000);
+  console.log('Express started on port 3000');
+}"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',examples/web-service/index.js,"-
-// position our routes above the error handling middleware,
-// and below our API middleware, since we want the API validation
-// to take place BEFORE our routes
-app.use(app.router);
-
-// middleware with an arity of 4 are considered
-// error handling middleware. When you next(err)
-// it will be passed through the defined middleware
-// in order, but ONLY those with an arity of 4, ignoring
-// regular middleware.
-app.use(function(err, req, res, next){
-  // whatever you want here, feel free to populate
-  // properties on `err` to treat it differently in here.
-  res.send(err.status || 500, { error: err.message });
-});
-
-// our custom JSON 404 middleware. Since it's placed last
-// it will be the last middleware called, if all others
-// invoke next() and do not respond.
-app.use(function(req, res){
-  res.send(404, { error: ""Lame, can't find that"" });
-});
-
-  var name = req.params.name
-    , user = userRepos[name];
-  
+  var name = req.params.name;
+  var user = userRepos[name];
+
+});
+
+// middleware with an arity of 4 are considered
+// error handling middleware. When you next(err)
+// it will be passed through the defined middleware
+// in order, but ONLY those with an arity of 4, ignoring
+// regular middleware.
+app.use(function(err, req, res, next){
+  // whatever you want here, feel free to populate
+  // properties on `err` to treat it differently in here.
+  res.send(err.status || 500, { error: err.message });
+});
+
+// our custom JSON 404 middleware. Since it's placed last
+// it will be the last middleware called, if all others
+// invoke next() and do not respond.
+app.use(function(req, res){
+  res.send(404, { error: ""Lame, can't find that"" });","+/* istanbul ignore next */
-  console.log('Express server listening on port 3000');
+  console.log('Express started on port 3000');","-
-// position our routes above the error handling middleware,
-// and below our API middleware, since we want the API validation
-// to take place BEFORE our routes
-app.use(app.router);
-
-// middleware with an arity of 4 are considered
-// error handling middleware. When you next(err)
-// it will be passed through the defined middleware
-// in order, but ONLY those with an arity of 4, ignoring
-// regular middleware.
-app.use(function(err, req, res, next){
-  // whatever you want here, feel free to populate
-  // properties on `err` to treat it differently in here.
-  res.send(err.status || 500, { error: err.message });
-});
-
-// our custom JSON 404 middleware. Since it's placed last
-// it will be the last middleware called, if all others
-// invoke next() and do not respond.
-app.use(function(req, res){
-  res.send(404, { error: ""Lame, can't find that"" });
-});
-
-  var name = req.params.name
-    , user = userRepos[name];
-  
+  var name = req.params.name;
+  var user = userRepos[name];
+
+// middleware with an arity of 4 are considered
+// error handling middleware. When you next(err)
+// it will be passed through the defined middleware
+// in order, but ONLY those with an arity of 4, ignoring
+// regular middleware.
+app.use(function(err, req, res, next){
+  // whatever you want here, feel free to populate
+  // properties on `err` to treat it differently in here.
+  res.send(err.status || 500, { error: err.message });
+});
+
+// our custom JSON 404 middleware. Since it's placed last
+// it will be the last middleware called, if all others
+// invoke next() and do not respond.
+app.use(function(req, res){
+  res.send(404, { error: ""Lame, can't find that"" });
+});
+
+/* istanbul ignore next */
-  console.log('Express server listening on port 3000');
+  console.log('Express started on port 3000');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileTrust = require('./utils').compileTrust;
+var deprecate = require('./utils').deprecate;
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);","+  , compileETag = require('./utils').compileETag
-  this.enable('etag');
+  this.set('etag', 'weak');
-  if (1 == arguments.length) {
+  if (arguments.length === 1) {
+    // app.get(setting)
-  } else {
-    this.settings[setting] = val;
-
-    if (setting === 'trust proxy') {
-      debug('compile trust proxy %j', val);
+  }
+
+  // set value
+  this.settings[setting] = val;
+
+  // trigger matched settings
+  switch (setting) {
+    case 'etag':
+      debug('compile etag %s', val);
+      this.set('etag fn', compileETag(val));
+      break;
+    case 'trust proxy':
+      debug('compile trust proxy %s', val);
-    }
-
-    return this;
-  }
+      break;
+  }
+
+  return this;","-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , compileTrust = require('./utils').compileTrust
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileETag = require('./utils').compileETag;
+var compileTrust = require('./utils').compileTrust;
+var deprecate = require('./utils').deprecate;
-  this.enable('etag');
-  this.set('env', process.env.NODE_ENV || 'development');
+  this.set('etag', 'weak');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
-  if (1 == arguments.length) {
+  if (arguments.length === 1) {
+    // app.get(setting)
-  } else {
-    this.settings[setting] = val;
-
-    if (setting === 'trust proxy') {
-      debug('compile trust proxy %j', val);
+  }
+
+  // set value
+  this.settings[setting] = val;
+
+  // trigger matched settings
+  switch (setting) {
+    case 'etag':
+      debug('compile etag %s', val);
+      this.set('etag fn', compileETag(val));
+      break;
+    case 'trust proxy':
+      debug('compile trust proxy %s', val);
-    }
-
-    return this;
-  }
+      break;
+  }
+
+  return this;
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","-  , etag = require('./utils').etag
-  // populate Content-Length
-  if (undefined !== body && !this.get('Content-Length')) {
-    this.set('Content-Length', len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body));
-  }
-
-  // ETag support
-  // TODO: W/ support
-  if (app.settings.etag && len && 'GET' == req.method) {
-    if (!this.get('ETag')) {
-      this.set('ETag', etag(body));
-    }
-  }
-
+    }
+  }
+
+  // populate Content-Length
+  if (undefined !== body && !this.get('Content-Length')) {
+    len = Buffer.isBuffer(body)
+      ? body.length
+      : Buffer.byteLength(body, encoding);
+    this.set('Content-Length', len);
+  }
+
+  // ETag support
+  var etag = len !== undefined && app.get('etag fn');
+  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
+    if (!this.get('ETag')) {
+      etag = etag(body, encoding);
+      etag && this.set('ETag', etag);","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , setCharset = require('./utils').setCharset
-  , deprecate = require('./utils').deprecate
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  // populate Content-Length
-  if (undefined !== body && !this.get('Content-Length')) {
-    this.set('Content-Length', len = Buffer.isBuffer(body)
-      ? body.length
-      : Buffer.byteLength(body));
-  }
-
-  // ETag support
-  // TODO: W/ support
-  if (app.settings.etag && len && 'GET' == req.method) {
-    if (!this.get('ETag')) {
-      this.set('ETag', etag(body));
-    }
-  }
-
+    }
+  }
+
+  // populate Content-Length
+  if (undefined !== body && !this.get('Content-Length')) {
+    len = Buffer.isBuffer(body)
+      ? body.length
+      : Buffer.byteLength(body, encoding);
+    this.set('Content-Length', len);
+  }
+
+  // ETag support
+  var etag = len !== undefined && app.get('etag fn');
+  if (etag && ('GET' === req.method || 'HEAD' === req.method)) {
+    if (!this.get('ETag')) {
+      etag = etag(body, encoding);
+      etag && this.set('ETag', etag);
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',lib/utils.js,"-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
+
+  return ret;
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**","-  , crc32 = require('buffer-crc32');
+  , crc32 = require('buffer-crc32')
+  , crypto = require('crypto');
- * Return ETag for `body`.
+ * Return strong ETag for `body`.
+ * @param {String} [encoding]
-exports.etag = function(body){
-  return '""' + crc32.signed(body) + '""';
+exports.etag = function etag(body, encoding){
+  if (body.length === 0) {
+    // fast-path empty body
+    return '""1B2M2Y8AsgTpgAmY7PhCfg==""'
+  }
+
+  var hash = crypto
+    .createHash('md5')
+    .update(body, encoding)
+    .digest('base64')
+  return '""' + hash + '""'
+};
+
+/**
+ * Return weak ETag for `body`.
+ *
+ * @param {String|Buffer} body
+ * @param {String} [encoding]
+ * @return {String}
+ * @api private
+ */
+
+exports.wetag = function wetag(body, encoding){
+  if (body.length === 0) {
+    // fast-path empty body
+    return 'W/""0-0""'
+  }
+
+  var buf = Buffer.isBuffer(body)
+    ? body
+    : new Buffer(body, encoding)
+  var len = buf.length
+  return 'W/""' + len.toString(16) + '-' + crc32.unsigned(buf) + '""'
+ * Compile ""etag"" value to function.
+ *
+ * @param  {Boolean|String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileETag = function(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = exports.wetag;
+      break;
+    case false:
+      break;
+    case 'strong':
+      fn = exports.etag;
+      break;
+    case 'weak':
+      fn = exports.wetag;
+      break;
+    default:
+      throw new TypeError('unknown value for etag function: ' + val);
+  }
+
+  return fn;
+}
+
+/**","-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var crypto = require('crypto');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
- * Return ETag for `body`.
+ * Return strong ETag for `body`.
- * @return {String}
- * @api private
- */
-
-exports.etag = function(body){
-  return '""' + crc32.signed(body) + '""';
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
+ * @param {String} [encoding]
+ * @return {String}
+ * @api private
+ */
+
+exports.etag = function etag(body, encoding){
+  if (body.length === 0) {
+    // fast-path empty body
+    return '""1B2M2Y8AsgTpgAmY7PhCfg==""'
+  }
+
+  var hash = crypto
+    .createHash('md5')
+    .update(body, encoding)
+    .digest('base64')
+  return '""' + hash + '""'
+};
+
+/**
+ * Return weak ETag for `body`.
+ *
+ * @param {String|Buffer} body
+ * @param {String} [encoding]
+ * @return {String}
+ * @api private
+ */
+
+exports.wetag = function wetag(body, encoding){
+  if (body.length === 0) {
+    // fast-path empty body
+    return 'W/""0-0""'
+  }
+
+  var buf = Buffer.isBuffer(body)
+    ? body
+    : new Buffer(body, encoding)
+  var len = buf.length
+  return 'W/""' + len.toString(16) + '-' + crc32.unsigned(buf) + '""'
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
- * @return {String}
- * @api private
- */
-
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
+ * @return {String}
+ * @api private
+ */
+
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
+
+  return ret;
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
+ * Compile ""etag"" value to function.
+ *
+ * @param  {Boolean|String|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileETag = function(val) {
+  var fn;
+
+  if (typeof val === 'function') {
+    return val;
+  }
+
+  switch (val) {
+    case true:
+      fn = exports.wetag;
+      break;
+    case false:
+      break;
+    case 'strong':
+      fn = exports.etag;
+      break;
+    case 'weak':
+      fn = exports.wetag;
+      break;
+    default:
+      throw new TypeError('unknown value for etag function: ' + val);
+  }
+
+  return fn;"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',package.json,"-  ""version"": ""3.8.1"",
+  ""version"": ""4.3.2"",
-    ""connect"": ""2.17.3"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.2.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
-    ""ejs"": ""~0.8.4"",
+    ""after"": ""0.8.1"",
-    ""jade"": ""~0.30.0"",
+    ""supertest"": ""~0.12.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""body-parser"": ""1.2.2"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""1.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.8.1"",
+  ""version"": ""3.9.0"",
-    ""connect"": ""2.17.3"",
+    ""buffer-crc32"": ""0.2.1"",
+    ""connect"": ""2.18.0"",
+    ""send"": ""0.4.0"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""send"": ""0.3.0"",
-    ""ejs"": ""~0.8.4"",
-    ""mocha"": ""~1.19.0"",
-    ""should"": ""~3.3.1"",
-    ""jade"": ""~0.30.0"",
+    ""mocha"": ""~1.20.0"",
+    ""should"": ""~4.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~1.3.1"",
-    ""stylus"": ""~0.40.0"",
+    ""marked"": ""0.3.2"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""supertest"": ""~0.13.0""","-  ""version"": ""3.8.1"",
+  ""version"": ""4.3.2"",
-    ""connect"": ""2.17.3"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""accepts"": ""1.0.1"",
+    ""buffer-crc32"": ""0.2.1"",
+    ""send"": ""0.4.0"",
+    ""type-is"": ""1.2.0"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""send"": ""0.3.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
-    ""ejs"": ""~0.8.4"",
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.19.0"",
-    ""should"": ""~3.3.1"",
-    ""jade"": ""~0.30.0"",
+    ""mocha"": ""~1.20.0"",
+    ""should"": ""~4.0.0"",
+    ""supertest"": ""~0.12.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~1.3.1"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""body-parser"": ""1.2.2"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.2.1"",
+    ""method-override"": ""1.0.2"",
+    ""morgan"": ""1.1.1"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0"""
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/app.param.js,"+    it('should only call once per request', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.user = user;
+        next();
+      });
+
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.user].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 1 bob', done);
+    })
+
+    it('should call when values differ', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.users = (req.users || []).concat(user);
+        next();
+      });
+
+      app.get('/:user/bob', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.users.join(',')].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 2 foo,bob', done);
+    })
+
+
+    it('should defer all the param routes', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, val){
+        if (val === 'new') return next('route');
+        return next();
+      });
+
+      app.all('/user/:id', function(req, res){
+        res.send('all.id');
+      });
+
+      app.get('/user/:id', function(req, res){
+        res.send('get.id');
+      });
+
+      app.get('/user/new', function(req, res){
+        res.send('get.new');
+      });
+
+      request(app)
+      .get('/user/new')
+      .expect('get.new', done);
+    })","+    it('should work with encoded values', function(done){
+      var app = express();
+
+      app.param('name', function(req, res, next, name){
+        req.params.name = name;
+        next();
+      });
+
+      app.get('/user/:name', function(req, res){
+        var name = req.params.name;
+        res.send('' + name);
+      });
+
+      request(app)
+      .get('/user/foo%25bar')
+      .expect('foo%bar', done);
+    })
+","+    it('should only call once per request', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.user = user;
+        next();
+      });
+
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.user].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 1 bob', done);
+    })
+
+    it('should call when values differ', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.users = (req.users || []).concat(user);
+        next();
+      });
+
+      app.get('/:user/bob', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.users.join(',')].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 2 foo,bob', done);
+    })
+
+    it('should work with encoded values', function(done){
+      var app = express();
+
+      app.param('name', function(req, res, next, name){
+        req.params.name = name;
+        next();
+      });
+
+      app.get('/user/:name', function(req, res){
+        var name = req.params.name;
+        res.send('' + name);
+      });
+
+      request(app)
+      .get('/user/foo%25bar')
+      .expect('foo%bar', done);
+    })
+
+
+    it('should defer all the param routes', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, val){
+        if (val === 'new') return next('route');
+        return next();
+      });
+
+      app.all('/user/:id', function(req, res){
+        res.send('all.id');
+      });
+
+      app.get('/user/:id', function(req, res){
+        res.send('get.id');
+      });
+
+      app.get('/user/new', function(req, res){
+        res.send('get.new');
+      });
+
+      request(app)
+      .get('/user/new')
+      .expect('get.new', done);
+    })"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/app.router.js,"-    app.use(app.router);
+    app.get('/', function(req, res, next){
+      calls.push('GET /')
+      next();
+    });
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-  it('should be auto .use()d on the first app.VERB() call', function(done){
-    var app = express();
-
-    var calls = [];
-
-    app.use(function(req, res, next){
-      calls.push('before');
-      next();
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-    });
-
-    app.use(function(req, res, next){
-      calls.push('after');
-      res.end();
-    });
-
-    request(app)
-    .get('/')
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
-  })
-
+  it('should run in order added', function(done){
+    var app = express();
+    var path = [];
+
+    app.get('*', function(req, res, next){
+      path.push(0);
+      next();
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      path.push(1);
+      next();
+    });
+
+    app.use(function(req, res, next){
+      path.push(2);
+      next();
+    });
+
+    app.all('/user/:id', function(req, res, next){
+      path.push(3);
+      next();
+    });
+
+    app.get('*', function(req, res, next){
+      path.push(4);
+      next();
+    });
+
+    app.use(function(req, res, next){
+      path.push(5);
+      res.end(path.join(','))
+    });
+
+    request(app)
+    .get('/user/1')
+    .expect(200, '0,1,2,3,4,5', done);
+  })
+","+  describe('when next(""route"") is called', function(){
+    it('should jump to next route', function(done){
+      var app = express()
+
+      function fn(req, res, next){
+        res.set('X-Hit', '1')
+        next('route')
+      }
+
+      app.get('/foo', fn, function(req, res, next){
+        res.end('failure')
+      });
+
+      app.get('/foo', function(req, res){
+        res.end('success')
+      })
+
+      request(app)
+      .get('/foo')
+      .expect('X-Hit', '1')
+      .expect(200, 'success', done)
+    })
+  })
+","-    app.use(app.router);
+    app.get('/', function(req, res, next){
+      calls.push('GET /')
+      next();
+    });
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-  it('should be auto .use()d on the first app.VERB() call', function(done){
-    var app = express();
-
-    var calls = [];
-
-    app.use(function(req, res, next){
-      calls.push('before');
-      next();
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-    });
-
-    app.use(function(req, res, next){
-      calls.push('after');
-      res.end();
-    });
-
-    request(app)
-    .get('/')
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
-  })
-
+  describe('when next(""route"") is called', function(){
+    it('should jump to next route', function(done){
+      var app = express()
+
+      function fn(req, res, next){
+        res.set('X-Hit', '1')
+        next('route')
+      }
+
+      app.get('/foo', fn, function(req, res, next){
+        res.end('failure')
+      });
+
+      app.get('/foo', function(req, res){
+        res.end('success')
+      })
+
+      request(app)
+      .get('/foo')
+      .expect('X-Hit', '1')
+      .expect(200, 'success', done)
+    })
+  })
+
+  it('should run in order added', function(done){
+    var app = express();
+    var path = [];
+
+    app.get('*', function(req, res, next){
+      path.push(0);
+      next();
+    });
+
+    app.get('/user/:id', function(req, res, next){
+      path.push(1);
+      next();
+    });
+
+    app.use(function(req, res, next){
+      path.push(2);
+      next();
+    });
+
+    app.all('/user/:id', function(req, res, next){
+      path.push(3);
+      next();
+    });
+
+    app.get('*', function(req, res, next){
+      path.push(4);
+      next();
+    });
+
+    app.use(function(req, res, next){
+      path.push(5);
+      res.end(path.join(','))
+    });
+
+    request(app)
+    .get('/user/1')
+    .expect(200, '0,1,2,3,4,5', done);
+  })
+"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/res.cookie.js,"-  , utils = require('connect').utils
-  , cookie = require('cookie');
+  , mixin = require('utils-merge')
+  , cookie = require('cookie')
+  , cookieParser = require('cookie-parser')
+        res.cookie('gender', '?');
-        var val = ['name=tobi; Path=/', 'age=1; Path=/'];
+        var val = ['name=tobi; Path=/', 'age=1; Path=/', 'gender=%3F; Path=/'];
-        var optionsCopy = utils.merge({}, options);
+        var optionsCopy = mixin({}, options);
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));","-          res.headers['set-cookie'][0].should.not.include('Thu, 01 Jan 1970 00:00:01 GMT');
+          res.headers['set-cookie'][0].should.not.containEql('Thu, 01 Jan 1970 00:00:01 GMT');
-        .end(function(err, res){
-          res.headers['set-cookie'][0].should.include('Max-Age=1');
-          done();
-        })
+        .expect('Set-Cookie', /Max-Age=1/, done)","-  , utils = require('connect').utils
-  , cookie = require('cookie');
+  , mixin = require('utils-merge')
+  , cookie = require('cookie')
+  , cookieParser = require('cookie-parser')
+        res.cookie('gender', '?');
-        var val = ['name=tobi; Path=/', 'age=1; Path=/'];
+        var val = ['name=tobi; Path=/', 'age=1; Path=/', 'gender=%3F; Path=/'];
-          res.headers['set-cookie'][0].should.not.include('Thu, 01 Jan 1970 00:00:01 GMT');
+          res.headers['set-cookie'][0].should.not.containEql('Thu, 01 Jan 1970 00:00:01 GMT');
-        .end(function(err, res){
-          res.headers['set-cookie'][0].should.include('Max-Age=1');
-          done();
-        })
+        .expect('Set-Cookie', /Max-Age=1/, done)
-        var optionsCopy = utils.merge({}, options);
+        var optionsCopy = mixin({}, options);
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));
-        app.use(express.cookieParser('foo bar baz'));
+        app.use(cookieParser('foo bar baz'));"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/res.redirect.js,"-        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href=""/&lt;lame&gt;"">/&lt;lame&gt;</a></p>');
+        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href=""&lt;lame&gt;"">&lt;lame&gt;</a></p>');
-
-  describe('responses redirected to relative paths', function(){
-    function create(depth, parent) {
-      var app = express();
-
-      if (parent) {
-        parent.use('/depth' + depth, app);
-      }
-
-      app.get('/', function(req, res){
-        res.redirect('./index');
-      });
-
-      app.get('/index', function(req, res){
-        res.json({ depth: depth, content: 'index' });
-      });
-
-      return app;
-    }
-
-    var root = create(0);
-    var depth1 = create(1, root);
-    var depth2 = create(2, depth1);
-    var depth3 = create(3, depth2);
-
-    root.use('/depth2', depth2);
-    root.use('/depth3', depth3);
-
-    it('should not contain redundant leading slashes in the location header', function(done){
-      request(root)
-      .get('/')
-      .end(function(err, res){
-        res.headers.location.search(/^\/{2}/).should.equal(-1);
-        done();
-      })
-    })
-
-    it('should preserve context when redirecting nested applications at any depth', function(done){
-      request(root)
-      .get('/depth1')
-      .end(function(err, res){
-        res.headers.should.have.property('location', '/depth1/index');
-
-        request(root)
-        .get('/depth1/depth2')
-        .end(function(err, res){
-          res.headers.should.have.property('location', '/depth1/depth2/index');
-
-          request(root)
-          .get('/depth1/depth2/depth3')
-          .end(function(err, res){
-            res.headers.should.have.property('location', '/depth1/depth2/depth3/index');
-            done();
-          })
-        })
-      });
-    })
-
-    it('should redirect correctly for nested applications that have been remounted', function(done){
-      request(root)
-      .get('/depth2')
-      .end(function(err, res){
-        res.headers.should.have.property('location', '/depth2/index');
-        request(root)
-        .get('/depth3')
-        .end(function(err, res){
-          res.headers.should.have.property('location', '/depth3/index');
-          done();
-        })
-      })
-    })
-  })","-      .end(function(err, res){
-        res.statusCode.should.equal(302);
-        res.headers.should.have.property('location', 'http://google.com');
-        done();
-      })
+      .expect('location', 'http://google.com')
+      .expect(302, done)
-      .end(function(err, res){
-        res.should.have.status(302);
-        res.headers.should.have.property('location', 'http://google.com');
+      .expect('location', 'http://google.com')
+      .expect('content-length', '0')
+      .expect(302, '', function(err, res){
+        if (err) return done(err)
-        res.headers.should.have.property('content-length', '0');
-        res.text.should.equal('');","-      .end(function(err, res){
-        res.statusCode.should.equal(302);
-        res.headers.should.have.property('location', 'http://google.com');
-        done();
-      })
+      .expect('location', 'http://google.com')
+      .expect(302, done)
-        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href=""/&lt;lame&gt;"">/&lt;lame&gt;</a></p>');
+        res.text.should.equal('<p>Moved Temporarily. Redirecting to <a href=""&lt;lame&gt;"">&lt;lame&gt;</a></p>');
-      .end(function(err, res){
-        res.should.have.status(302);
-        res.headers.should.have.property('location', 'http://google.com');
+      .expect('location', 'http://google.com')
+      .expect('content-length', '0')
+      .expect(302, '', function(err, res){
+        if (err) return done(err)
-        res.headers.should.have.property('content-length', '0');
-        res.text.should.equal('');
-
-  describe('responses redirected to relative paths', function(){
-    function create(depth, parent) {
-      var app = express();
-
-      if (parent) {
-        parent.use('/depth' + depth, app);
-      }
-
-      app.get('/', function(req, res){
-        res.redirect('./index');
-      });
-
-      app.get('/index', function(req, res){
-        res.json({ depth: depth, content: 'index' });
-      });
-
-      return app;
-    }
-
-    var root = create(0);
-    var depth1 = create(1, root);
-    var depth2 = create(2, depth1);
-    var depth3 = create(3, depth2);
-
-    root.use('/depth2', depth2);
-    root.use('/depth3', depth3);
-
-    it('should not contain redundant leading slashes in the location header', function(done){
-      request(root)
-      .get('/')
-      .end(function(err, res){
-        res.headers.location.search(/^\/{2}/).should.equal(-1);
-        done();
-      })
-    })
-
-    it('should preserve context when redirecting nested applications at any depth', function(done){
-      request(root)
-      .get('/depth1')
-      .end(function(err, res){
-        res.headers.should.have.property('location', '/depth1/index');
-
-        request(root)
-        .get('/depth1/depth2')
-        .end(function(err, res){
-          res.headers.should.have.property('location', '/depth1/depth2/index');
-
-          request(root)
-          .get('/depth1/depth2/depth3')
-          .end(function(err, res){
-            res.headers.should.have.property('location', '/depth1/depth2/depth3/index');
-            done();
-          })
-        })
-      });
-    })
-
-    it('should redirect correctly for nested applications that have been remounted', function(done){
-      request(root)
-      .get('/depth2')
-      .end(function(err, res){
-        res.headers.should.have.property('location', '/depth2/index');
-        request(root)
-        .get('/depth3')
-        .end(function(err, res){
-          res.headers.should.have.property('location', '/depth3/index');
-          done();
-        })
-      })
-    })
-  })"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/res.send.js,"+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');","-      .expect('ETag', '""-1498647312""')
+      .expect('ETag', 'W/""7ff-2796319984""')
-      .expect('ETag', '""-1498647312""')
+      .expect('ETag', 'W/""7ff-2796319984""')
+    var etag = '""asdf""';
-      res.set('ETag', 'asdf');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'asdf')
+    .set('If-None-Match', etag)
-    .set('If-None-Match', '""-1498647312""')
+    .set('If-None-Match', 'W/""7ff-2796319984""')
+    var etag = '""asdf""';
-      res.set('ETag', 'asdf');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'asdf')
+    .set('If-None-Match', etag)
-      it('should send ETag even when content-length < 1024', function(done){
+      it('should send ETag', function(done){
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.have.property('etag');
-          done();
-        });
-      })
-
-      it('should send ETag ', function(done){
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""c-1525560792""', done)
+      })
+
+      it('should send ETag for empty string response', function(done){
+        var app = express()
+
+        app.use(function(req, res){
+          res.send('')
+        });
+
+        app.enable('etag')
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""0-0""', done)
+      })
+
+      it('should send ETag for long response', function(done){
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""7ff-2796319984""', done)
+      });
+
+      it('should not override ETag when manually set', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.set('etag', '""asdf""');
+          res.send(200);
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', '""asdf""', done)
+      });
+
+      it('should not send ETag for res.send()', function(done){
+        var app = express()
+
+        app.use(function(req, res){
+          res.send()
+        });
+
+        app.enable('etag')
+
-          res.headers.should.have.property('etag', '""-1498647312""');
+          res.headers.should.not.have.property('etag');
-        });
-      });
+        })
+      })
-          res.set('etag', 1);
+          res.set('etag', '""asdf""');
+        .expect('etag', '""asdf""', done)
+      });
+    });
+
+    describe('when ""strong""', function(){
+      it('should send strong ETag', function(done){
+        var app = express()
+
+        app.set('etag', 'strong');
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
+      })
+    })
+
+    describe('when ""weak""', function(){
+      it('should send weak ETag', function(done){
+        var app = express()
+
+        app.set('etag', 'weak');
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""d-1486392595""', done)
+      })
+    })
+
+    describe('when a function', function(){
+      it('should send custom ETag', function(done){
+        var app = express()
+
+        app.set('etag', function(body, encoding){
+          body.should.equal('hello, world!')
+          encoding.should.equal('utf8')
+          return '""custom""'
+        });
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', '""custom""', done)
+      })
+
+      it('should not send falsy ETag', function(done){
+        var app = express()
+
+        app.set('etag', function(body, encoding){
+          return undefined
+        });
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
-          res.headers.should.have.property('etag');
+          res.headers.should.not.have.property('etag')
-        });
-      });
-    });
+        })
+      })
+    })","+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-      .expect('ETag', '""-1498647312""')
+      .expect('ETag', 'W/""7ff-2796319984""')
-      .expect('ETag', '""-1498647312""')
+      .expect('ETag', 'W/""7ff-2796319984""')
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
+    var etag = '""asdf""';
-      res.set('ETag', 'asdf');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'asdf')
+    .set('If-None-Match', etag)
-    .set('If-None-Match', '""-1498647312""')
+    .set('If-None-Match', 'W/""7ff-2796319984""')
+    var etag = '""asdf""';
-      res.set('ETag', 'asdf');
+      res.set('ETag', etag);
-    .set('If-None-Match', 'asdf')
+    .set('If-None-Match', etag)
-      it('should send ETag even when content-length < 1024', function(done){
+      it('should send ETag', function(done){
-        request(app)
-        .get('/')
-        .end(function(err, res){
-          res.headers.should.have.property('etag');
-          done();
-        });
-      })
-
-      it('should send ETag ', function(done){
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""c-1525560792""', done)
+      })
+
+      it('should send ETag for empty string response', function(done){
+        var app = express()
+
+        app.use(function(req, res){
+          res.send('')
+        });
+
+        app.enable('etag')
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""0-0""', done)
+      })
+
+      it('should send ETag for long response', function(done){
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""7ff-2796319984""', done)
+      });
+
+      it('should not override ETag when manually set', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.set('etag', '""asdf""');
+          res.send(200);
+        });
+
+        app.enable('etag');
+
+        request(app)
+        .get('/')
+        .expect('etag', '""asdf""', done)
+      });
+
+      it('should not send ETag for res.send()', function(done){
+        var app = express()
+
+        app.use(function(req, res){
+          res.send()
+        });
+
+        app.enable('etag')
+
-          res.headers.should.have.property('etag', '""-1498647312""');
+          res.headers.should.not.have.property('etag');
-        });
-      });
+        })
+      })
-          res.set('etag', 1);
+          res.set('etag', '""asdf""');
+        .expect('etag', '""asdf""', done)
+      });
+    });
+
+    describe('when ""strong""', function(){
+      it('should send strong ETag', function(done){
+        var app = express()
+
+        app.set('etag', 'strong');
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', '""Otu60XkfuuPskIiUxJY4cA==""', done)
+      })
+    })
+
+    describe('when ""weak""', function(){
+      it('should send weak ETag', function(done){
+        var app = express()
+
+        app.set('etag', 'weak');
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', 'W/""d-1486392595""', done)
+      })
+    })
+
+    describe('when a function', function(){
+      it('should send custom ETag', function(done){
+        var app = express()
+
+        app.set('etag', function(body, encoding){
+          body.should.equal('hello, world!')
+          encoding.should.equal('utf8')
+          return '""custom""'
+        });
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
+        .expect('etag', '""custom""', done)
+      })
+
+      it('should not send falsy ETag', function(done){
+        var app = express()
+
+        app.set('etag', function(body, encoding){
+          return undefined
+        });
+
+        app.use(function(req, res){
+          res.send('hello, world!');
+        });
+
+        request(app)
+        .get('/')
-          res.headers.should.have.property('etag');
+          res.headers.should.not.have.property('etag')
-        });
-      });
-    });
+        })
+      })
+    })"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/res.sendfile.js,"-      .expect('Content-Type', 'text/plain')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+    it('should not serve hidden files', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/.name');
+      });
+
+      request(app)
+      .get('/')
+      .expect(404, done);
+    })
+
+    it('should accept hidden option', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/.name', { hidden: true });
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, 'tobi', done);
+    })
+","-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!err);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
+        res.sendfile('test/fixtures/user.html', done)","-        res.sendfile('test/fixtures/user.html', function(err){
-          assert(!err);
-          req.socket.listeners('error').should.have.length(1); // node's original handler
-          done();
-        });
+        res.sendfile('test/fixtures/user.html', done)
-      .expect('Content-Type', 'text/plain')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+    it('should not serve hidden files', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/.name');
+      });
+
+      request(app)
+      .get('/')
+      .expect(404, done);
+    })
+
+    it('should accept hidden option', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.sendfile('test/fixtures/.name', { hidden: true });
+      });
+
+      request(app)
+      .get('/')
+      .expect(200, 'tobi', done);
+    })
+"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/res.set.js,"-        res.set('Content-Type', 'text/x-foo').end();
+        res.set('Content-Type', 'text/x-foo; charset=utf-8').end();
-      .expect('Content-Type', 'text/x-foo')
+      .expect('Content-Type', 'text/x-foo; charset=utf-8')
+
+    it('should not set a charset of one is already set', function () {
+      res.headers = {};
+      res.set('Content-Type', 'text/html; charset=lol');
+      res.get('content-type').should.equal('text/html; charset=lol');
+    })","-      res.set('ETag', 123);
-      res.get('ETag').should.equal('123');
+      res.set('X-Number', 123);
+      res.get('X-Number').should.equal('123');
-      res.set('ETag', [123, 456]);
-      JSON.stringify(res.get('ETag')).should.equal('[""123"",""456""]');
+      res.set('X-Numbers', [123, 456]);
+      JSON.stringify(res.get('X-Numbers'))
+      .should.equal('[""123"",""456""]');
-      res.set({ ETag: 123 });
-      res.get('ETag').should.equal('123');
+      res.set({ 'X-Number': 123 });
+      res.get('X-Number').should.equal('123');","-        res.set('Content-Type', 'text/x-foo').end();
+        res.set('Content-Type', 'text/x-foo; charset=utf-8').end();
-      .expect('Content-Type', 'text/x-foo')
+      .expect('Content-Type', 'text/x-foo; charset=utf-8')
-      res.set('ETag', 123);
-      res.get('ETag').should.equal('123');
+      res.set('X-Number', 123);
+      res.get('X-Number').should.equal('123');
-      res.set('ETag', [123, 456]);
-      JSON.stringify(res.get('ETag')).should.equal('[""123"",""456""]');
+      res.set('X-Numbers', [123, 456]);
+      JSON.stringify(res.get('X-Numbers'))
+      .should.equal('[""123"",""456""]');
+    })
+
+    it('should not set a charset of one is already set', function () {
+      res.headers = {};
+      res.set('Content-Type', 'text/html; charset=lol');
+      res.get('content-type').should.equal('text/html; charset=lol');
-      res.set({ ETag: 123 });
-      res.get('ETag').should.equal('123');
+      res.set({ 'X-Number': 123 });
+      res.get('X-Number').should.equal('123');"
expressjs_express,db4448dda88f23dccb6f4f6f19481dda0b39e31a,Merge tag '3.9.0',test/utils.js,"-
-describe('utils.escape(html)', function(){
-  it('should escape html entities', function(){
-    utils.escape('<script>foo & ""bar""')
-      .should.equal('&lt;script&gt;foo &amp; &quot;bar&quot;')
-  })
-})
-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-})","-describe('utils.etag(body)', function(){
-
-  var str = 'Hello CRC';
-  var strUTF8 = '<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body><p>自動販売</p></body></html>';
-
+describe('utils.deprecate(fn, msg)', function(){
+  var env
+  before(function(){
+    env = process.env.NODE_ENV
+  })
+  after(function(){
+    process.env.NODE_ENV = env
+  })
+
+  it('should pass-through fn in test environment', function(){
+    var fn = function(){}
+    process.env.NODE_ENV = 'test'
+    utils.deprecate(fn).should.equal(fn)
+  })
+
+  it('should return new fn in other environment', function(){
+    var fn = function(){}
+    process.env.NODE_ENV = ''
+    utils.deprecate(fn).should.not.equal(fn)
+  })
+})
+
+describe('utils.etag(body, encoding)', function(){
-    utils.etag(str).should.eql('""-2034458343""');
+    utils.etag('express!')
+    .should.eql('""zZdv4imtWD49AHEviejT6A==""')
-    utils.etag(strUTF8).should.eql('""1395090196""');
+    utils.etag('express❤', 'utf8')
+    .should.eql('""fsFba4IxwQS6h6Umb+FNxw==""')
-    utils.etag(new Buffer(strUTF8)).should.eql('""1395090196""');
-    utils.etag(new Buffer(str)).should.eql('""-2034458343""');
-  })
-
+    var buf = new Buffer('express!')
+    utils.etag(buf)
+    .should.eql('""zZdv4imtWD49AHEviejT6A==""');
+  })
+
+  it('should support empty string', function(){
+    utils.etag('')
+    .should.eql('""1B2M2Y8AsgTpgAmY7PhCfg==""');
+  })
+})
+
+describe('utils.wetag(body, encoding)', function(){
+  it('should support strings', function(){
+    utils.wetag('express!')
+    .should.eql('W/""8-3098196679""')
+  })
+
+  it('should support utf8 strings', function(){
+    utils.wetag('express❤', 'utf8')
+    .should.eql('W/""a-1751845617""')
+  })
+
+  it('should support buffer', function(){
+    var buf = new Buffer('express!')
+    utils.wetag(buf)
+    .should.eql('W/""8-3098196679""');
+  })
+
+  it('should support empty string', function(){
+    utils.wetag('')
+    .should.eql('W/""0-0""');
+  })
-  it('should unices', function(){
+  it('should support windows unc', function(){
+    assert(utils.isAbsolute('\\\\foo\\bar'))
+  })
+
+  it('should support unices', function(){
-})
+
+  describe('when params included', function(){
+    it('should match params', function(){
+      assert(null == utils.accepts('text/html; charset=us-ascii', 'text/html; charset=utf-8'));
+    })
+  })
+})","-describe('utils.etag(body)', function(){
+describe('utils.deprecate(fn, msg)', function(){
+  var env
+  before(function(){
+    env = process.env.NODE_ENV
+  })
+  after(function(){
+    process.env.NODE_ENV = env
+  })
-  var str = 'Hello CRC';
-  var strUTF8 = '<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body><p>自動販売</p></body></html>';
+  it('should pass-through fn in test environment', function(){
+    var fn = function(){}
+    process.env.NODE_ENV = 'test'
+    utils.deprecate(fn).should.equal(fn)
+  })
+  it('should return new fn in other environment', function(){
+    var fn = function(){}
+    process.env.NODE_ENV = ''
+    utils.deprecate(fn).should.not.equal(fn)
+  })
+})
+
+describe('utils.etag(body, encoding)', function(){
-    utils.etag(str).should.eql('""-2034458343""');
+    utils.etag('express!')
+    .should.eql('""zZdv4imtWD49AHEviejT6A==""')
-    utils.etag(strUTF8).should.eql('""1395090196""');
+    utils.etag('express❤', 'utf8')
+    .should.eql('""fsFba4IxwQS6h6Umb+FNxw==""')
-    utils.etag(new Buffer(strUTF8)).should.eql('""1395090196""');
-    utils.etag(new Buffer(str)).should.eql('""-2034458343""');
+    var buf = new Buffer('express!')
+    utils.etag(buf)
+    .should.eql('""zZdv4imtWD49AHEviejT6A==""');
+  it('should support empty string', function(){
+    utils.etag('')
+    .should.eql('""1B2M2Y8AsgTpgAmY7PhCfg==""');
+  })
+})
+
+describe('utils.wetag(body, encoding)', function(){
+  it('should support strings', function(){
+    utils.wetag('express!')
+    .should.eql('W/""8-3098196679""')
+  })
+
+  it('should support utf8 strings', function(){
+    utils.wetag('express❤', 'utf8')
+    .should.eql('W/""a-1751845617""')
+  })
+
+  it('should support buffer', function(){
+    var buf = new Buffer('express!')
+    utils.wetag(buf)
+    .should.eql('W/""8-3098196679""');
+  })
+
+  it('should support empty string', function(){
+    utils.wetag('')
+    .should.eql('W/""0-0""');
+  })
-  it('should unices', function(){
+  it('should support windows unc', function(){
+    assert(utils.isAbsolute('\\\\foo\\bar'))
+  })
+
+  it('should support unices', function(){
-
-describe('utils.escape(html)', function(){
-  it('should escape html entities', function(){
-    utils.escape('<script>foo & ""bar""')
-      .should.equal('&lt;script&gt;foo &amp; &quot;bar&quot;')
-  })
-})
-
-describe('utils.parseParams(str)', function(){
-  it('should default quality to 1', function(){
-    utils.parseParams('text/html')
-      .should.eql([{ value: 'text/html', quality: 1, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse qvalues', function(){
-    utils.parseParams('text/html; q=0.5')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=.2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should parse accept parameters', function(){
-    utils.parseParams('application/json; ver=2.0')
-      .should.eql([{ value: 'application/json', quality: 1, params: {ver: ""2.0""}, originalIndex: 0 }]);
-
-    utils.parseParams('text/html; q=0.5; level=2')
-      .should.eql([{ value: 'text/html', quality: 0.5, params: {level: ""2""}, originalIndex: 0 }]);
-    utils.parseParams('text/html;q=.2;ver=beta')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {ver: ""beta""}, originalIndex: 0 }]);
-  })
-
-  it('should work with messed up whitespace', function(){
-    utils.parseParams('text/html   ;  q =   .2')
-      .should.eql([{ value: 'text/html', quality: 0.2, params: {}, originalIndex: 0 }]);
-  })
-
-  it('should work with multiples', function(){
-    var str = 'da, en;q=.5, en-gb;q=.8';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('da');
-    arr[1].value.should.equal('en-gb');
-    arr[2].value.should.equal('en');
-  })
-
-  it('should work with long lists', function(){
-    var str = 'en, nl, fr, de, ja, it, es, pt, pt-PT, da, fi, nb, sv, ko, zh-Hans, zh-Hant, ru, pl';
-    var arr = utils.parseParams(str).map(function(o){ return o.value });
-    arr.should.eql(str.split(', '));
-  })
-
-  it('should sort by quality', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0.5';
-    var arr = utils.parseParams(str);
-    arr[0].value.should.equal('application/json');
-    arr[1].value.should.equal('text/html');
-    arr[2].value.should.equal('text/plain');
-  })
-
-  it('should exclude those with a quality of 0', function(){
-    var str = 'text/plain;q=.2, application/json, text/html;q=0';
-    var arr = utils.parseParams(str);
-    arr.should.have.length(2);
-  })
-})
-
-describe('utils.parseAccept(str)', function(){
-  it('should provide .type', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].type.should.equal('text');
-  })
-
-  it('should provide .subtype', function(){
-    var arr = utils.parseAccept('text/html');
-    arr[0].subtype.should.equal('html');
-  })
-})
-
-describe('utils.accepts(type, str)', function(){
-  describe('when a string is not given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a string is empty', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', '')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when */* is given', function(){
-    it('should return the value', function(){
-      utils.accepts('text/html', 'text/plain, */*')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when an array is given', function(){
-    it('should return the best match', function(){
-      utils.accepts(['html', 'json'], 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts(['html', 'application/json'], 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts(['text/html', 'application/json'], 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when a comma-delimited list is give', function(){
-    it('should behave like an array', function(){
-      utils.accepts('html, json', 'text/plain, application/json')
-        .should.equal('json');
-
-      utils.accepts('html, application/json', 'text/plain, application/json')
-        .should.equal('application/json');
-
-      utils.accepts('text/html, application/json', 'application/json;q=.5, text/html')
-        .should.equal('text/html');
-    })
-  })
-
-  describe('when accepting type/subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/plain, text/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'text/plain, application/json'));
-    })
-  })
-
-  describe('when accepting */subtype', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', 'text/*')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', 'image/*'));
-    })
-  })
-
-  describe('when accepting type/*', function(){
-    it('should return the value when present', function(){
-      utils.accepts('text/html', '*/html')
-        .should.equal('text/html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('text/html', '*/json'));
-    })
-  })
-
-  describe('when an extension is given', function(){
-    it('should return the value when present', function(){
-      utils.accepts('html', 'text/html, application/json')
-        .should.equal('html');
-    })
-
-    it('should return undefined otherwise', function(){
-      assert(null == utils.accepts('html', 'text/plain, application/json'));
-    })
-
-    it('should support *', function(){
-      utils.accepts('html', 'text/*')
-        .should.equal('html');
-
-      utils.accepts('html', '*/html')
-        .should.equal('html');
-    })
-  })
-})"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , deprecate = require('./utils').deprecate
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+  , setCharset = require('./utils').setCharset
+  var type;
+  var encoding;
+  // write strings in utf-8
+  if ('string' === typeof body) {
+    encoding = 'utf8';
+    type = this.get('Content-Type');
+
+    // reflect this in content-type
+    if ('string' === typeof type) {
+      this.set('Content-Type', setCharset(type, 'utf-8'));
+    }
+  }
+
-  this.end(head ? null : body);
+  this.end((head ? null : body), encoding);
+
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , deprecate = require('./utils').deprecate
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var setCharset = require('./utils').setCharset;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
+  var type;
+  var encoding;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
+    }
+  }
+
+  // write strings in utf-8
+  if ('string' === typeof body) {
+    encoding = 'utf8';
+    type = this.get('Content-Type');
+
+    // reflect this in content-type
+    if ('string' === typeof type) {
+      this.set('Content-Type', setCharset(type, 'utf-8'));
-  this.end(head ? null : body);
+  this.end((head ? null : body), encoding);
+
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',lib/utils.js,"-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
- * @param {Array} types
- * @param {String} str
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+  return ret;
-}
-
-/**
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');","+
+/**
+ * Simple detection of charset parameter in content-type
+ */
+var charsetRegExp = /;\s*charset\s*=/;
+
+/**
+ * Set the charset in a given Content-Type string.
+ *
+ * @param {String} type
+ * @param {String} charset
+ * @return {String}
+ * @api private
+ */
+
+exports.setCharset = function(type, charset){
+  if (!type || !charset) return type;
+
+  var exists = charsetRegExp.test(type);
+
+  // removing existing charset
+  if (exists) {
+    var parts = type.split(';');
+
+    for (var i = 1; i < parts.length; i++) {
+      if (charsetRegExp.test(';' + parts[i])) {
+        parts.splice(i, 1);
+        break;
+      }
+    }
+
+    type = parts.join(';');
+  }
+
+  return type + '; charset=' + charset;
+};","-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , proxyaddr = require('proxy-addr')
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
+
+/**
+ * Simple detection of charset parameter in content-type
+ */
+var charsetRegExp = /;\s*charset\s*=/;
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
- *
- * @param {Array} types
- * @param {String} str
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
+ *
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
-
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
+
+  return ret;
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}
-
-/**
+
+/**
+ * Set the charset in a given Content-Type string.
+ *
+ * @param {String} type
+ * @param {String} charset
+ * @return {String}
+ * @api private
+ */
+
+exports.setCharset = function(type, charset){
+  if (!type || !charset) return type;
+
+  var exists = charsetRegExp.test(type);
+
+  // removing existing charset
+  if (exists) {
+    var parts = type.split(';');
+
+    for (var i = 1; i < parts.length; i++) {
+      if (charsetRegExp.test(';' + parts[i])) {
+        parts.splice(i, 1);
+        break;
+      }
+    }
+
+    type = parts.join(';');
+  }
+
+  return type + '; charset=' + charset;
+};"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',package.json,"-  ""version"": ""3.7.0"",
+  ""version"": ""4.2.0"",
-    ""connect"": ""2.16.2"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.2.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
+    ""after"": ""0.8.1"",
-    ""ejs"": ""~0.8.4"",
-    ""jade"": ""~0.30.0"",
+    ""supertest"": ""~0.12.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""body-parser"": ""1.2.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.1.0"",
+    ""method-override"": ""1.0.1"",
+    ""morgan"": ""1.1.0"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && cat ./coverage/lcov.info | coveralls""
+    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && (cat ./coverage/lcov.info | coveralls || true)""","-  ""version"": ""3.7.0"",
+  ""version"": ""3.8.0"",
-    ""connect"": ""2.16.2"",
+    ""connect"": ""2.17.1"",
-    ""coveralls"": ""2.10.0"",
-    ""mocha"": ""~1.18.2"",
+    ""mocha"": ""~1.19.0"",
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && cat ./coverage/lcov.info | coveralls""
+    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/""","-  ""version"": ""3.7.0"",
+  ""version"": ""4.2.0"",
-    ""connect"": ""2.16.2"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.2.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
-    ""coveralls"": ""2.10.0"",
-    ""ejs"": ""~0.8.4"",
+    ""after"": ""0.8.1"",
-    ""mocha"": ""~1.18.2"",
+    ""mocha"": ""~1.19.0"",
-    ""jade"": ""~0.30.0"",
+    ""supertest"": ""~0.12.0"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""body-parser"": ""1.2.0"",
+    ""cookie-parser"": ""1.1.0"",
+    ""express-session"": ""1.1.0"",
+    ""method-override"": ""1.0.1"",
+    ""morgan"": ""1.1.0"",
+    ""vhost"": ""1.0.0""
-    ""node"": "">= 0.8.0""
-  },
-  ""bin"": {
-    ""express"": ""./bin/express""
+    ""node"": "">= 0.10.0""
-    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && cat ./coverage/lcov.info | coveralls""
+    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/"""
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/app.js,"-describe('app.route', function(){
+describe('app.mountpath', function(){
-    app.route.should.equal('/');
-    blog.route.should.equal('/blog');
-    blogAdmin.route.should.equal('/admin');
+    app.mountpath.should.equal('/');
+    blog.mountpath.should.equal('/blog');
+    blogAdmin.mountpath.should.equal('/admin');
+  })
+})
+
+describe('app.router', function(){
+  it('should throw with notice', function(done){
+    var app = express()
+
+    try {
+      app.router;
+    } catch(err) {
+      done();
+    }","+
+describe('without NODE_ENV', function(){
+  it('should default to development', function(){
+    process.env.NODE_ENV = '';
+    var app = express();
+    app.get('env').should.equal('development');
+    process.env.NODE_ENV = 'test';
+  })
+})","-describe('app.route', function(){
+describe('app.mountpath', function(){
-    app.route.should.equal('/');
-    blog.route.should.equal('/blog');
-    blogAdmin.route.should.equal('/admin');
+    app.mountpath.should.equal('/');
+    blog.mountpath.should.equal('/blog');
+    blogAdmin.mountpath.should.equal('/admin');
+  })
+})
+
+describe('app.router', function(){
+  it('should throw with notice', function(done){
+    var app = express()
+
+    try {
+      app.router;
+    } catch(err) {
+      done();
+    }
+
+describe('without NODE_ENV', function(){
+  it('should default to development', function(){
+    process.env.NODE_ENV = '';
+    var app = express();
+    app.get('env').should.equal('development');
+    process.env.NODE_ENV = 'test';
+  })
+})"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/app.param.js,"+
+    it('should only call once per request', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.user = user;
+        next();
+      });
+
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.user].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 1 bob', done);
+    })
+
+    it('should call when values differ', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.users = (req.users || []).concat(user);
+        next();
+      });
+
+      app.get('/:user/bob', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.users.join(',')].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 2 foo,bob', done);
+    })","+    })
+
+    it('should fail if not given fn', function(){
+      var app = express();
+      app.param.bind(app, ':name', 'bob').should.throw();
+
+    it('should catch thrown error', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, id){
+        throw new Error('err!');
+      });
+
+      app.get('/user/:id', function(req, res){
+        var id = req.params.id;
+        res.send('' + id);
+      });
+
+      request(app)
+      .get('/user/123')
+      .expect(500, done);
+    })
+
+    it('should defer to next route', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, id){
+        next('route');
+      });
+
+      app.get('/user/:id', function(req, res){
+        var id = req.params.id;
+        res.send('' + id);
+      });
+
+      app.get('/:name/123', function(req, res){
+        res.send('name');
+      });
+
+      request(app)
+      .get('/user/123')
+      .expect('name', done);
+    })","+    })
+
+    it('should fail if not given fn', function(){
+      var app = express();
+      app.param.bind(app, ':name', 'bob').should.throw();
+
+    it('should only call once per request', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.user = user;
+        next();
+      });
+
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.user].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 1 bob', done);
+    })
+
+    it('should call when values differ', function(done) {
+      var app = express();
+      var called = 0;
+      var count = 0;
+
+      app.param('user', function(req, res, next, user) {
+        called++;
+        req.users = (req.users || []).concat(user);
+        next();
+      });
+
+      app.get('/:user/bob', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.get('/foo/:user', function(req, res, next) {
+        count++;
+        next();
+      });
+      app.use(function(req, res) {
+        res.end([count, called, req.users.join(',')].join(' '));
+      });
+
+      request(app)
+      .get('/foo/bob')
+      .expect('2 2 foo,bob', done);
+    })
+
+    it('should catch thrown error', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, id){
+        throw new Error('err!');
+      });
+
+      app.get('/user/:id', function(req, res){
+        var id = req.params.id;
+        res.send('' + id);
+      });
+
+      request(app)
+      .get('/user/123')
+      .expect(500, done);
+    })
+
+    it('should defer to next route', function(done){
+      var app = express();
+
+      app.param('id', function(req, res, next, id){
+        next('route');
+      });
+
+      app.get('/user/:id', function(req, res){
+        var id = req.params.id;
+        res.send('' + id);
+      });
+
+      app.get('/:name/123', function(req, res){
+        res.send('name');
+      });
+
+      request(app)
+      .get('/user/123')
+      .expect('name', done);
+    })"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/app.render.js,"-            err.message.should.match(/user is not defined/);
+            err.message.should.match(/Cannot read property '[^']+' of undefined/);","+        done();
+      })
+    })
+
+    it('should handle render error throws', function(done){
+      var app = express();
+
+      function View(name, options){
+        this.name = name;
+        this.path = 'fale';
+      }
+
+      View.prototype.render = function(options, fn){
+        throw new Error('err!');
+      };
+
+      app.set('view', View);
+
+      app.render('something', function(err, str){
+        err.should.be.ok;
+        err.message.should.equal('err!');
+
+    describe('caching', function(){
+      it('should always lookup view without cache', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', false);
+        app.set('view', View);
+
+        app.render('something', function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', function(err, str){
+            if (err) return done(err);
+            count.should.equal(2);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+
+      it('should cache with ""view cache"" setting', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', true);
+        app.set('view', View);
+
+        app.render('something', function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', function(err, str){
+            if (err) return done(err);
+            count.should.equal(1);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+    })
+
+    describe('caching', function(){
+      it('should cache with cache option', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', false);
+        app.set('view', View);
+
+        app.render('something', {cache: true}, function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', {cache: true}, function(err, str){
+            if (err) return done(err);
+            count.should.equal(1);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+    })","+    it('should handle render error throws', function(done){
+      var app = express();
+
+      function View(name, options){
+        this.name = name;
+        this.path = 'fale';
+      }
+
+      View.prototype.render = function(options, fn){
+        throw new Error('err!');
+      };
+
+      app.set('view', View);
+
+      app.render('something', function(err, str){
+        err.should.be.ok;
+        err.message.should.equal('err!');
+        done();
+      })
+    })
+
-            err.message.should.match(/user is not defined/);
+            err.message.should.match(/Cannot read property '[^']+' of undefined/);
+
+    describe('caching', function(){
+      it('should always lookup view without cache', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', false);
+        app.set('view', View);
+
+        app.render('something', function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', function(err, str){
+            if (err) return done(err);
+            count.should.equal(2);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+
+      it('should cache with ""view cache"" setting', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', true);
+        app.set('view', View);
+
+        app.render('something', function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', function(err, str){
+            if (err) return done(err);
+            count.should.equal(1);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+    })
+
+    describe('caching', function(){
+      it('should cache with cache option', function(done){
+        var app = express();
+        var count = 0;
+
+        function View(name, options){
+          this.name = name;
+          this.path = 'fake';
+          count++;
+        }
+
+        View.prototype.render = function(options, fn){
+          fn(null, 'abstract engine');
+        };
+
+        app.set('view cache', false);
+        app.set('view', View);
+
+        app.render('something', {cache: true}, function(err, str){
+          if (err) return done(err);
+          count.should.equal(1);
+          str.should.equal('abstract engine');
+          app.render('something', {cache: true}, function(err, str){
+            if (err) return done(err);
+            count.should.equal(1);
+            str.should.equal('abstract engine');
+            done();
+          })
+        })
+      })
+    })"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/res.attachment.js,"+
+  describe('.attachment(utf8filename)', function(){
+    it('should add the filename and filename* params', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.attachment('/locales/日本語.txt');
+        res.send('japanese');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Disposition', 'attachment;' +
+          ' filename=%E6%97%A5%E6%9C%AC%E8%AA%9E.txt;' +
+          ' filename*=UTF-8\'\'%E6%97%A5%E6%9C%AC%E8%AA%9E.txt',
+        done);
+    })
+
+    it('should set the Content-Type', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.attachment('/locales/日本語.txt');
+        res.send('japanese');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=utf-8', done);
+    })
+  })","-        res.send('foo');
+        res.send(new Buffer(4));","-        res.send('foo');
+        res.send(new Buffer(4));
+
+  describe('.attachment(utf8filename)', function(){
+    it('should add the filename and filename* params', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.attachment('/locales/日本語.txt');
+        res.send('japanese');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Disposition', 'attachment;' +
+          ' filename=%E6%97%A5%E6%9C%AC%E8%AA%9E.txt;' +
+          ' filename*=UTF-8\'\'%E6%97%A5%E6%9C%AC%E8%AA%9E.txt',
+        done);
+    })
+
+    it('should set the Content-Type', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.attachment('/locales/日本語.txt');
+        res.send('japanese');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=utf-8', done);
+    })
+  })"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/res.json.js,"+    it('should not override previous Content-Types', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.json({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-    
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-  
+
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-
-  it('should not override previous Content-Types', function(done){
-    var app = express();
-
-    app.get('/', function(req, res){
-      res.type('application/vnd.example+json');
-      res.json({ hello: 'world' });
-    });
-
-    request(app)
-    .get('/')
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
-      res.headers.should.have.property('content-type', 'application/vnd.example+json');
-      res.text.should.equal('{""hello"":""world""}');
-      done();
-    })
-  })","+    it('should not override previous Content-Types', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.json({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json; charset=utf-8')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('300');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '300', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('""str""');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '""str""', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('[""foo"",""bar"",""baz""]');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '[""foo"",""bar"",""baz""]', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.text.should.equal('{\n  ""name"": ""tobi"",\n  ""age"": 2\n}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{\n  ""name"": ""tobi"",\n  ""age"": 2\n}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('200');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '200', done)
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
-      res.headers.should.have.property('content-type', 'application/vnd.example+json');
-      res.text.should.equal('{""hello"":""world""}');
-      done();
-    })
+    .expect('content-type', 'application/vnd.example+json; charset=utf-8')
+    .expect(200, '{""hello"":""world""}', done)","+    it('should not override previous Content-Types', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.json({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json; charset=utf-8')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('300');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '300', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('""str""');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '""str""', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('[""foo"",""bar"",""baz""]');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '[""foo"",""bar"",""baz""]', done)
-    
+
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        .end(function(err, res){
-          res.text.should.equal('{\n  ""name"": ""tobi"",\n  ""age"": 2\n}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{\n  ""name"": ""tobi"",\n  ""age"": 2\n}', done)
-  
+
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('200');
-        done();
-      })
-    })
-  })
-
-  it('should not override previous Content-Types', function(done){
-    var app = express();
-
-    app.get('/', function(req, res){
-      res.type('application/vnd.example+json');
-      res.json({ hello: 'world' });
-    });
-
-    request(app)
-    .get('/')
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
-      res.headers.should.have.property('content-type', 'application/vnd.example+json');
-      res.text.should.equal('{""hello"":""world""}');
-      done();
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '200', done)"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/res.jsonp.js,"-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
+
+    it('should not override previous Content-Types with no callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
+    it('should override previous Content-Types with callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/?callback=cb')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /cb\(\{""hello"":""world""\}\);$/, done);
+    })
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');","-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""count"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""count"":1}', done)
+
+    it('should not override previous Content-Types with no callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json; charset=utf-8')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
+    it('should override previous Content-Types with callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/?callback=cb')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /cb\(\{""hello"":""world""\}\);$/, done);
+    })
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('[""foo"",""bar"",""baz""]');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '[""foo"",""bar"",""baz""]', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('300');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '300', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('""str""');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '""str""', done)
-        .end(function(err, res){
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.text.should.equal('{\n  ""name"": ""tobi"",\n  ""age"": 2\n}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{\n  ""name"": ""tobi"",\n  ""age"": 2\n}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('200');
-        done();
-      })
-    })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '200', done)
+    })
+  })
+
+  it('should not override previous Content-Types', function(done){
+    var app = express();
+
+    app.get('/', function(req, res){
+      res.type('application/vnd.example+json');
+      res.jsonp({ hello: 'world' });
+    });
+
+    request(app)
+    .get('/')
+    .expect('content-type', 'application/vnd.example+json; charset=utf-8')
+    .expect(200, '{""hello"":""world""}', done)","-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""count"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""count"":1}', done)
+
+    it('should not override previous Content-Types with no callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json; charset=utf-8')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
+    it('should override previous Content-Types with callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/?callback=cb')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /cb\(\{""hello"":""world""\}\);$/, done);
+    })
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('[""foo"",""bar"",""baz""]');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '[""foo"",""bar"",""baz""]', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-        .end(function(err, res){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('null');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, 'null', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('300');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '300', done)
-        .end(function(err, res){
-          res.statusCode.should.equal(200);
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-          res.text.should.equal('""str""');
-          done();
-        })
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '""str""', done)
-        .end(function(err, res){
-          res.text.should.equal('{""name"":""tobi""}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{""name"":""tobi""}', done)
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        .end(function(err, res){
-          res.text.should.equal('{\n  ""name"": ""tobi"",\n  ""age"": 2\n}');
-          done();
-        });
+        .expect('Content-Type', 'application/json; charset=utf-8')
+        .expect(200, '{\n  ""name"": ""tobi"",\n  ""age"": 2\n}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""id"":1}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '{""id"":1}', done)
-      .end(function(err, res){
-        res.statusCode.should.equal(201);
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('200');
-        done();
-      })
-    })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(201, '200', done)
+    })
+  })
+
+  it('should not override previous Content-Types', function(done){
+    var app = express();
+
+    app.get('/', function(req, res){
+      res.type('application/vnd.example+json');
+      res.jsonp({ hello: 'world' });
+    });
+
+    request(app)
+    .get('/')
+    .expect('content-type', 'application/vnd.example+json; charset=utf-8')
+    .expect(200, '{""hello"":""world""}', done)"
expressjs_express,db4a061ed6244afb2c4aa11244bbf0d694586614,Merge tag '3.8.0',test/res.send.js,"+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-      .expect('Content-Type', 'text/plain')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');","-      .expect('Content-Type', 'text/plain')
-      .expect('hey')
-      .expect(200, done);
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
+    })
+
+    it('should override charset in Content-Type', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send('hey');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
+    })
+
+    it('should keep charset in Content-Type for Buffers', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(new Buffer('hi'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=iso-8859-1')
+      .expect(200, 'hi', done);
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""name"":""tobi""}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""name"":""tobi""}', done)","+      .expect('Content-Length', '0')
-      .expect('', done);
+      .expect('', function(req, res){
+        res.header.should.not.have.property('content-length');
+        done();
+      });
-      .expect('Content-Type', 'text/plain')
-      .expect('hey')
-      .expect(200, done);
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
+    })
+
+    it('should override charset in Content-Type', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send('hey');
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=utf-8')
+      .expect(200, 'hey', done);
+    })
+
+    it('should keep charset in Content-Type for Buffers', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.set('Content-Type', 'text/plain; charset=iso-8859-1').send(new Buffer('hi'));
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'text/plain; charset=iso-8859-1')
+      .expect(200, 'hi', done);
-        res.headers.should.have.property('content-type', 'text/plain');
+        res.headers.should.have.property('content-type', 'text/plain; charset=utf-8');
-      .end(function(err, res){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
-        res.text.should.equal('{""name"":""tobi""}');
-        done();
-      })
+      .expect('Content-Type', 'application/json; charset=utf-8')
+      .expect(200, '{""name"":""tobi""}', done)"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var deprecate = require('./utils').deprecate;
+  this._baseRoutes = {};
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    if ('get' == method && 1 == arguments.length) return this.set(path);
-
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    if (method === 'get' && arguments.length === 1) {
+      return this.set(path);
+    }
+
+    var route = this._baseRoute(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  var route = this._baseRoute(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);
+
+/**
+ * Get or create a new base route for path.
+ *
+ * @param {String} path
+ * @return {Route}
+ * @api private
+ */
+
+app._baseRoute = function(path){
+  this.lazyrouter();
+
+  var key = typeof path !== 'string'
+    ? 'o:' + String(path)
+    : 's:' + path;
+
+  if (path.ignoreCase || !this._router.caseSensitive) {
+    key = 'i' + key.toLowerCase();
+  }
+
+  var route = this._baseRoutes[key];
+
+  if (!route) {
+    route = this._router.route(path);
+    this._baseRoutes[key] = route;
+  }
+
+  return route;
+};","+  , compileTrust = require('./utils').compileTrust
+  this.set('trust proxy', false);
+
+    if (setting === 'trust proxy') {
+      debug('compile trust proxy %j', val);
+      this.set('trust proxy fn', compileTrust(val));
+    }
+","-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , View = require('./view')
-  , utils = connect.utils
-  , deprecate = require('./utils').deprecate
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var compileTrust = require('./utils').compileTrust;
+var deprecate = require('./utils').deprecate;
+  this._baseRoutes = {};
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+  this.set('trust proxy', false);
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
+
+    if (setting === 'trust proxy') {
+      debug('compile trust proxy %j', val);
+      this.set('trust proxy fn', compileTrust(val));
+    }
+
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    if ('get' == method && 1 == arguments.length) return this.set(path);
-
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    if (method === 'get' && arguments.length === 1) {
+      return this.set(path);
+    }
+
+    var route = this._baseRoute(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  var route = this._baseRoute(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);
+
+/**
+ * Get or create a new base route for path.
+ *
+ * @param {String} path
+ * @return {Route}
+ * @api private
+ */
+
+app._baseRoute = function(path){
+  this.lazyrouter();
+
+  var key = typeof path !== 'string'
+    ? 'o:' + String(path)
+    : 's:' + path;
+
+  if (path.ignoreCase || !this._router.caseSensitive) {
+    key = 'i' + key.toLowerCase();
+  }
+
+  var route = this._baseRoutes[key];
+
+  if (!route) {
+    route = this._router.route(path);
+    this._baseRoutes[key] = route;
+  }
+
+  return route;
+};"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',lib/request.js,"-
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = connect.utils.parseUrl
-  , mime = connect.mime;
+var accepts = require('accepts');
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
+req.acceptsEncoding = // backwards compatibility
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
+req.acceptsCharset = // backwards compatibility
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
+req.acceptsLanguage = // backwards compatibility
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
-});
-
-/**
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  // missing
-  var auth = this.get('Authorization');
-  if (!auth) return;
-
-  // malformed
-  var parts = auth.split(' ');
-  if ('basic' != parts[0].toLowerCase()) return;
-  if (!parts[1]) return;
-  auth = parts[1];
-
-  // credentials
-  auth = new Buffer(auth, 'base64').toString().match(/^([^:]*):(.*)$/);
-  if (!auth) return;
-  return { username: auth[1], password: auth[2] };","-  , parse = connect.utils.parseUrl
+  , parse = require('parseurl')
+  , proxyaddr = require('proxy-addr')
- * setting is enabled the ""X-Forwarded-Proto"" header
- * field will be trusted. If you're running behind
- * a reverse proxy that supplies https for you this
- * may be enabled.
+ * setting trusts the socket address, the
+ * ""X-Forwarded-Proto"" header field will be trusted.
+ * If you're running behind a reverse proxy that
+ * supplies https for you this may be enabled.
-  var trustProxy = this.app.get('trust proxy');
-  if (this.connection.encrypted) return 'https';
-  if (!trustProxy) return 'http';
+  var trust = this.app.get('trust proxy fn');
+
+  if (!trust(this.connection.remoteAddress)) {
+    return this.connection.encrypted
+      ? 'https'
+      : 'http';
+  }
+
+  // Note: X-Forwarded-Proto is normally only ever a
+  //       single value, but this is to be safe.
- * Return the remote address, or when
- * ""trust proxy"" is `true` return
- * the upstream addr.
+ * Return the remote address from the trusted proxy.
+ *
+ * The is the remote address on the socket unless
+ * ""trust proxy"" is set.
-  return this.ips[0] || this.connection.remoteAddress;
-});
-
-/**
- * When ""trust proxy"" is `true`, parse
- * the ""X-Forwarded-For"" ip address list.
+  var trust = this.app.get('trust proxy fn');
+  return proxyaddr(this, trust);
+});
+
+/**
+ * When ""trust proxy"" is set, trusted proxy addresses + client.
- * where ""proxy2"" is the furthest down-stream.
+ * where ""proxy2"" is the furthest down-stream and ""proxy1"" and
+ * ""proxy2"" were trusted.
-  var trustProxy = this.app.get('trust proxy');
-  var val = this.get('X-Forwarded-For');
-  return trustProxy && val
-    ? val.split(/ *, */)
-    : [];
+  var trust = this.app.get('trust proxy fn');
+  var addrs = proxyaddr.all(this, trust);
+  return addrs.slice(1).reverse();
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
-  var trustProxy = this.app.get('trust proxy');
-  var host = trustProxy && this.get('X-Forwarded-Host');
-  host = host || this.get('Host');
+  var trust = this.app.get('trust proxy fn');
+  var host = this.get('X-Forwarded-Host');
+
+  if (!host || !trust(this.connection.remoteAddress)) {
+    host = this.get('Host');
+  }
+
+
+  // IPv6 literal support
+","-
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = connect.utils.parseUrl
-  , mime = connect.mime;
+var accepts = require('accepts');
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+var proxyaddr = require('proxy-addr');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
+req.acceptsEncoding = // backwards compatibility
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
+req.acceptsCharset = // backwards compatibility
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
+req.acceptsLanguage = // backwards compatibility
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
- * setting is enabled the ""X-Forwarded-Proto"" header
- * field will be trusted. If you're running behind
- * a reverse proxy that supplies https for you this
- * may be enabled.
+ * setting trusts the socket address, the
+ * ""X-Forwarded-Proto"" header field will be trusted.
+ * If you're running behind a reverse proxy that
+ * supplies https for you this may be enabled.
-  var trustProxy = this.app.get('trust proxy');
-  if (this.connection.encrypted) return 'https';
-  if (!trustProxy) return 'http';
+  var trust = this.app.get('trust proxy fn');
+
+  if (!trust(this.connection.remoteAddress)) {
+    return this.connection.encrypted
+      ? 'https'
+      : 'http';
+  }
+
+  // Note: X-Forwarded-Proto is normally only ever a
+  //       single value, but this is to be safe.
- * Return the remote address, or when
- * ""trust proxy"" is `true` return
- * the upstream addr.
+ * Return the remote address from the trusted proxy.
+ *
+ * The is the remote address on the socket unless
+ * ""trust proxy"" is set.
-  return this.ips[0] || this.connection.remoteAddress;
-});
-
-/**
- * When ""trust proxy"" is `true`, parse
- * the ""X-Forwarded-For"" ip address list.
+  var trust = this.app.get('trust proxy fn');
+  return proxyaddr(this, trust);
+});
+
+/**
+ * When ""trust proxy"" is set, trusted proxy addresses + client.
- * where ""proxy2"" is the furthest down-stream.
+ * where ""proxy2"" is the furthest down-stream and ""proxy1"" and
+ * ""proxy2"" were trusted.
-  var trustProxy = this.app.get('trust proxy');
-  var val = this.get('X-Forwarded-For');
-  return trustProxy && val
-    ? val.split(/ *, */)
-    : [];
-});
-
-/**
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  // missing
-  var auth = this.get('Authorization');
-  if (!auth) return;
-
-  // malformed
-  var parts = auth.split(' ');
-  if ('basic' != parts[0].toLowerCase()) return;
-  if (!parts[1]) return;
-  auth = parts[1];
-
-  // credentials
-  auth = new Buffer(auth, 'base64').toString().match(/^([^:]*):(.*)$/);
-  if (!auth) return;
-  return { username: auth[1], password: auth[2] };
+  var trust = this.app.get('trust proxy fn');
+  var addrs = proxyaddr.all(this, trust);
+  return addrs.slice(1).reverse();
+ * When the ""trust proxy"" setting trusts the socket
+ * address, the ""X-Forwarded-Host"" header field will
+ * be trusted.
+ *
-  var trustProxy = this.app.get('trust proxy');
-  var host = trustProxy && this.get('X-Forwarded-Host');
-  host = host || this.get('Host');
+  var trust = this.app.get('trust proxy fn');
+  var host = this.get('X-Forwarded-Host');
+
+  if (!host || !trust(this.connection.remoteAddress)) {
+    host = this.get('Host');
+  }
+
+
+  // IPv6 literal support
+"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',lib/utils.js,"-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-};
-
-/**
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
- * @param {Array} types
- * @param {String} str
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+  return ret;
-
-/**
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}","+  , proxyaddr = require('proxy-addr')
- * Deprecate function, like core `util.deprecate`
+ * Deprecate function, like core `util.deprecate`,
+ * but with NODE_ENV and color support.
-  return 'test' !== process.env.NODE_ENV
-    ? deprecate(fn, 'express: ' + msg)
-    : fn;
+  if (process.env.NODE_ENV === 'test') return fn;
+
+  // prepend module name
+  msg = 'express: ' + msg;
+
+  if (process.stderr.isTTY) {
+    // colorize
+    msg = '\x1b[31;1m' + msg + '\x1b[0m';
+  }
+
+  return deprecate(fn, msg);
+
+/**
+ * Compile ""proxy trust"" value to function.
+ *
+ * @param  {Boolean|String|Number|Array|Function} val
+ * @return {Function}
+ * @api private
+ */
+
+exports.compileTrust = function(val) {
+  if (typeof val === 'function') return val;
+
+  if (val === true) {
+    // Support plain true/false
+    return function(){ return true };
+  }
+
+  if (typeof val === 'number') {
+    // Support trusting hop count
+    return function(a, i){ return i < val };
+  }
+
+  if (typeof val === 'string') {
+    // Support comma-separated values
+    val = val.split(/ *, */);
+  }
+
+  return proxyaddr.compile(val || []);
+}","-
-var mime = require('connect').mime
-  , deprecate = require('util').deprecate
-  , crc32 = require('buffer-crc32');
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
+var proxyaddr = require('proxy-addr');
- * toString ref.
- */
-
-var toString = {}.toString;
-
-/**
- * Deprecate function, like core `util.deprecate`
+ * Deprecate function, like core `util.deprecate`,
+ * but with NODE_ENV and color support.
-  return 'test' !== process.env.NODE_ENV
-    ? deprecate(fn, 'express: ' + msg)
-    : fn;
+  if (process.env.NODE_ENV === 'test') return fn;
+
+  // prepend module name
+  msg = 'express: ' + msg;
+
+  if (process.stderr.isTTY) {
+    // colorize
+    msg = '\x1b[31;1m' + msg + '\x1b[0m';
+  }
+
+  return deprecate(fn, msg);
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
- * @param {Array} types
- * @param {String} str
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+  return ret;
- * Escape special characters in the given string of html.
+ * Compile ""proxy trust"" value to function.
- * @param  {String} html
- * @return {String}
+ * @param  {Boolean|String|Number|Array|Function} val
+ * @return {Function}
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
+exports.compileTrust = function(val) {
+  if (typeof val === 'function') return val;
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
+  if (val === true) {
+    // Support plain true/false
+    return function(){ return true };
+  }
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
+  if (typeof val === 'number') {
+    // Support trusting hop count
+    return function(a, i){ return i < val };
+  }
+
+  if (typeof val === 'string') {
+    // Support comma-separated values
+    val = val.split(/ *, */);
+  }
+
+  return proxyaddr.compile(val || []);"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',package.json,"-  ""version"": ""3.6.0"",
+  ""version"": ""4.2.0"",
-    ""connect"": ""2.15.0"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.2.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.8.0 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
-    ""ejs"": ""~0.8.4"",
-    ""jade"": ""~0.30.0"",
+    ""body-parser"": ""~1.1.2"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""should"": ""~2.1.1"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
+    ""should"": ""~3.3.1"",
+    ""supertest"": ""~0.12.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""express-session"": ""1.0.4"",
+    ""morgan"": ""1.0.1"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },
-    ""node"": "">= 0.8.0""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.6.0"",
+  ""version"": ""3.7.0"",
-  ""dependencies"": {
-    ""connect"": ""2.15.0"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
-    ""range-parser"": ""1.0.0"",
-    ""cookie"": ""0.1.2"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""fresh"": ""0.2.2"",
-    ""send"": ""0.3.0"",
-    ""cookie-signature"": ""1.0.3"",
-    ""merge-descriptors"": ""0.0.2"",
-    ""debug"": "">= 0.8.0 < 1""
-  },
-  ""devDependencies"": {
-    ""ejs"": ""~0.8.4"",
-    ""mocha"": ""~1.18.2"",
-    ""jade"": ""~0.30.0"",
-    ""hjs"": ""~0.0.6"",
-    ""stylus"": ""~0.40.0"",
-    ""should"": ""~2.1.1"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
-  },
-  ""main"": ""index"",
+  ""license"": ""MIT"",
+  ""dependencies"": {
+    ""connect"": ""2.16.2"",
+    ""commander"": ""1.3.2"",
+    ""methods"": ""1.0.0"",
+    ""mkdirp"": ""0.5.0"",
+    ""parseurl"": ""1.0.1"",
+    ""proxy-addr"": ""1.0.0"",
+    ""range-parser"": ""1.0.0"",
+    ""cookie"": ""0.1.2"",
+    ""buffer-crc32"": ""0.2.1"",
+    ""fresh"": ""0.2.2"",
+    ""send"": ""0.3.0"",
+    ""cookie-signature"": ""1.0.3"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""debug"": "">= 0.8.0 < 1""
+  },
+  ""devDependencies"": {
+    ""coveralls"": ""2.10.0"",
+    ""ejs"": ""~0.8.4"",
+    ""istanbul"": ""0.2.10"",
+    ""mocha"": ""~1.18.2"",
+    ""should"": ""~3.3.1"",
+    ""jade"": ""~0.30.0"",
+    ""hjs"": ""~0.0.6"",
+    ""stylus"": ""~0.40.0"",
+    ""connect-redis"": ""~1.4.5"",
+    ""marked"": ""0.2.10"",
+    ""supertest"": ""~0.12.1""
+  },
+  ""engines"": {
+    ""node"": "">= 0.8.0""
+  },
-    ""test"": ""make test""
-  },
-  ""engines"": {
-    ""node"": "">= 0.8.0""
-  },
-  ""license"": ""MIT""
+    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && cat ./coverage/lcov.info | coveralls""
+  }","-  ""version"": ""3.6.0"",
+  ""version"": ""4.2.0"",
-  ""dependencies"": {
-    ""connect"": ""2.15.0"",
-    ""commander"": ""1.3.2"",
-    ""methods"": ""1.0.0"",
-    ""mkdirp"": ""0.5.0"",
-    ""range-parser"": ""1.0.0"",
-    ""cookie"": ""0.1.2"",
-    ""buffer-crc32"": ""0.2.1"",
-    ""fresh"": ""0.2.2"",
-    ""send"": ""0.3.0"",
-    ""cookie-signature"": ""1.0.3"",
-    ""merge-descriptors"": ""0.0.2"",
-    ""debug"": "">= 0.8.0 < 1""
-  },
-  ""devDependencies"": {
-    ""ejs"": ""~0.8.4"",
-    ""mocha"": ""~1.18.2"",
-    ""jade"": ""~0.30.0"",
-    ""hjs"": ""~0.0.6"",
-    ""stylus"": ""~0.40.0"",
-    ""should"": ""~2.1.1"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.12.1""
-  },
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
+  ""license"": ""MIT"",
+  ""dependencies"": {
+    ""accepts"": ""1.0.1"",
+    ""parseurl"": ""1.0.1"",
+    ""proxy-addr"": ""1.0.0"",
+    ""range-parser"": ""1.0.0"",
+    ""type-is"": ""1.2.0"",
+    ""cookie"": ""0.1.2"",
+    ""buffer-crc32"": ""0.2.1"",
+    ""fresh"": ""0.2.2"",
+    ""methods"": ""1.0.0"",
+    ""send"": ""0.3.0"",
+    ""cookie-signature"": ""1.0.3"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": ""0.8.1""
+  },
+  ""devDependencies"": {
+    ""coveralls"": ""2.10.0"",
+    ""istanbul"": ""0.2.10"",
+    ""mocha"": ""~1.18.2"",
+    ""should"": ""~3.3.1"",
+    ""supertest"": ""~0.12.0"",
+    ""body-parser"": ""~1.1.2"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
+    ""hjs"": ""~0.0.6"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""express-session"": ""1.0.4"",
+    ""morgan"": ""1.0.1"",
+    ""vhost"": ""1.0.0""
+  },
+  ""engines"": {
+    ""node"": "">= 0.10.0""
-    ""test"": ""make test""
-  },
-  ""engines"": {
-    ""node"": "">= 0.8.0""
-  },
-  ""license"": ""MIT""
+    ""test"": ""mocha --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-cov"": ""istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"",
+    ""test-travis"": ""istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/ && cat ./coverage/lcov.info | coveralls""
+  }"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/acceptance/auth.js,"-  , request = require('../support/http');
+  , request = require('supertest');
-      .end(redirects(/\/login$/, done))
+      .end(redirects(/login$/, done))
-      .end(redirects(/\/login$/,done))
+      .end(redirects(/login$/,done))
-      .end(redirects(/\/login$/, done))
+      .end(redirects(/login$/, done))","-  , request = require('../support/http');
-
-function redirects(to, fn){
-  return function(err, res){
-    res.statusCode.should.equal(302)
-    res.headers.should.have.property('location').match(to);
-    fn()
-  }
-}
+var request = require('supertest')
-      .end(redirects(/\/login$/, done))
+      .expect('Location', '/login')
+      .expect(302, done)
-  describe('GET /restricted (w/o cookie)',function(){
-    it('should redirect to /login', function(done){
+  describe('GET /login',function(){
+    it('should render login form', function(done){
+      request(app)
+      .get('/login')
+      .expect(200, /<form/, done)
+    })
+
+    it('should display login error', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=not-tj&password=foobar')
+      .expect('Location', '/login')
+      .expect(302, function(err, res){
+        if (err) return done(err)
+        request(app)
+        .get('/login')
+        .set('Cookie', getCookie(res))
+        .expect(200, /Authentication failed/, done)
+      })
+    })
+  })
+
+  describe('GET /logout',function(){
+    it('should redirect to /', function(done){
+      request(app)
+      .get('/logout')
+      .expect('Location', '/')
+      .expect(302, done)
+    })
+  })
+
+  describe('GET /restricted',function(){
+    it('should redirect to /login without cookie', function(done){
-      .end(redirects(/\/login$/,done))
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should succeed with proper cookie', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=foobar')
+      .expect('Location', '/')
+      .expect(302, function(err, res){
+        if (err) return done(err)
+        request(app)
+        .get('/restricted')
+        .set('Cookie', getCookie(res))
+        .expect(200, done)
+      })
-    it('should fail without proper credentials', function(done){
+    it('should fail without proper username', function(done){
-      .end(redirects(/\/login$/, done))
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should fail without proper password', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=baz')
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should succeed with proper credentials', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=foobar')
+      .expect('Location', '/')
+      .expect(302, done)","-  , request = require('../support/http');
-
-function redirects(to, fn){
-  return function(err, res){
-    res.statusCode.should.equal(302)
-    res.headers.should.have.property('location').match(to);
-    fn()
-  }
-}
+var request = require('supertest')
-      .end(redirects(/\/login$/, done))
+      .expect('Location', '/login')
+      .expect(302, done)
-  describe('GET /restricted (w/o cookie)',function(){
-    it('should redirect to /login', function(done){
+  describe('GET /login',function(){
+    it('should render login form', function(done){
+      request(app)
+      .get('/login')
+      .expect(200, /<form/, done)
+    })
+
+    it('should display login error', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=not-tj&password=foobar')
+      .expect('Location', '/login')
+      .expect(302, function(err, res){
+        if (err) return done(err)
+        request(app)
+        .get('/login')
+        .set('Cookie', getCookie(res))
+        .expect(200, /Authentication failed/, done)
+      })
+    })
+  })
+
+  describe('GET /logout',function(){
+    it('should redirect to /', function(done){
+      request(app)
+      .get('/logout')
+      .expect('Location', '/')
+      .expect(302, done)
+    })
+  })
+
+  describe('GET /restricted',function(){
+    it('should redirect to /login without cookie', function(done){
-      .end(redirects(/\/login$/,done))
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should succeed with proper cookie', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=foobar')
+      .expect('Location', '/')
+      .expect(302, function(err, res){
+        if (err) return done(err)
+        request(app)
+        .get('/restricted')
+        .set('Cookie', getCookie(res))
+        .expect(200, done)
+      })
-    it('should fail without proper credentials', function(done){
+    it('should fail without proper username', function(done){
-      .end(redirects(/\/login$/, done))
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should fail without proper password', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=baz')
+      .expect('Location', '/login')
+      .expect(302, done)
+    })
+
+    it('should succeed with proper credentials', function(done){
+      request(app)
+      .post('/login')
+      .type('urlencoded')
+      .send('username=tj&password=foobar')
+      .expect('Location', '/')
+      .expect(302, done)"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/middleware.basic.js,"-// 
-// var express = require('../')
-//   , request = require('./support/http');
-// 
-// describe('middleware', function(){
-//   describe('.next()', function(){
-//     it('should behave like connect', function(done){
-//       var app = express()
-//         , calls = [];
-// 
-//       app.use(function(req, res, next){
-//         calls.push('one');
-//         next();
-//       });
-// 
-//       app.use(function(req, res, next){
-//         calls.push('two');
-//         next();
-//       });
-//       
-//       app.use(function(req, res){
-//         var buf = '';
-//         res.setHeader('Content-Type', 'application/json');
-//         req.setEncoding('utf8');
-//         req.on('data', function(chunk){ buf += chunk });
-//         req.on('end', function(){
-//           res.end(buf);
-//         });
-//       });
-// 
-//       request(app)
-//       .get('/')
-//       .set('Content-Type', 'application/json')
-//       .write('{""foo"":""bar""}')
-//       .end(function(res){
-//         res.headers.should.have.property('content-type', 'application/json');
-//         res.statusCode.should.equal(200);
-//         res.body.should.equal('{""foo"":""bar""}');
-//         done();
-//       })
-//     })
-//   })
-// })
+
+var express = require('../');
+var request = require('supertest');
+
+describe('middleware', function(){
+  describe('.next()', function(){
+    it('should behave like connect', function(done){
+      var app = express()
+        , calls = [];
+
+      app.use(function(req, res, next){
+        calls.push('one');
+        next();
+      });
+
+      app.use(function(req, res, next){
+        calls.push('two');
+        next();
+      });
+
+      app.use(function(req, res){
+        var buf = '';
+        res.setHeader('Content-Type', 'application/json');
+        req.setEncoding('utf8');
+        req.on('data', function(chunk){ buf += chunk });
+        req.on('end', function(){
+          res.end(buf);
+        });
+      });
+
+      request(app.listen())
+      .get('/')
+      .set('Content-Type', 'application/json')
+      .send('{""foo"":""bar""}')
+      .end(function(err, res){
+        if (err) return done(err);
+        res.headers.should.have.property('content-type', 'application/json');
+        res.statusCode.should.equal(200);
+        res.text.should.equal('{""foo"":""bar""}');
+        done();
+      })
+    })
+  })
+})","-//   , request = require('./support/http');
+//   , request = require('supertest');","-// 
-// var express = require('../')
-//   , request = require('./support/http');
-// 
-// describe('middleware', function(){
-//   describe('.next()', function(){
-//     it('should behave like connect', function(done){
-//       var app = express()
-//         , calls = [];
-// 
-//       app.use(function(req, res, next){
-//         calls.push('one');
-//         next();
-//       });
-// 
-//       app.use(function(req, res, next){
-//         calls.push('two');
-//         next();
-//       });
-//       
-//       app.use(function(req, res){
-//         var buf = '';
-//         res.setHeader('Content-Type', 'application/json');
-//         req.setEncoding('utf8');
-//         req.on('data', function(chunk){ buf += chunk });
-//         req.on('end', function(){
-//           res.end(buf);
-//         });
-//       });
-// 
-//       request(app)
-//       .get('/')
-//       .set('Content-Type', 'application/json')
-//       .write('{""foo"":""bar""}')
-//       .end(function(res){
-//         res.headers.should.have.property('content-type', 'application/json');
-//         res.statusCode.should.equal(200);
-//         res.body.should.equal('{""foo"":""bar""}');
-//         done();
-//       })
-//     })
-//   })
-// })
+
+var express = require('../');
+var request = require('supertest');
+
+describe('middleware', function(){
+  describe('.next()', function(){
+    it('should behave like connect', function(done){
+      var app = express()
+        , calls = [];
+
+      app.use(function(req, res, next){
+        calls.push('one');
+        next();
+      });
+
+      app.use(function(req, res, next){
+        calls.push('two');
+        next();
+      });
+
+      app.use(function(req, res){
+        var buf = '';
+        res.setHeader('Content-Type', 'application/json');
+        req.setEncoding('utf8');
+        req.on('data', function(chunk){ buf += chunk });
+        req.on('end', function(){
+          res.end(buf);
+        });
+      });
+
+      request(app.listen())
+      .get('/')
+      .set('Content-Type', 'application/json')
+      .send('{""foo"":""bar""}')
+      .end(function(err, res){
+        if (err) return done(err);
+        res.headers.should.have.property('content-type', 'application/json');
+        res.statusCode.should.equal(200);
+        res.text.should.equal('{""foo"":""bar""}');
+        done();
+      })
+    })
+  })
+})"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/req.host.js,"-  , request = require('./support/http')
+  , request = require('supertest')","-  , request = require('./support/http')
+  , request = require('supertest')
+
+    describe('when ""trust proxy"" is enabled', function(){
+      it('should respect X-Forwarded-Host', function(done){
+        var app = express();
+
+        app.enable('trust proxy');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'example.com')
+        .expect('example.com', done);
+      })
+
+      it('should ignore X-Forwarded-Host if socket addr not trusted', function(done){
+        var app = express();
+
+        app.set('trust proxy', '10.0.0.1');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'example.com')
+        .expect('localhost', done);
+      })
+
+      it('should default to Host', function(done){
+        var app = express();
+
+        app.enable('trust proxy');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'example.com')
+        .expect('example.com', done);
+      })
+    })
+
+    describe('when ""trust proxy"" is disabled', function(){
+      it('should ignore X-Forwarded-Host', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'evil')
+        .expect('localhost', done);
+      })
+    })","-  , request = require('./support/http')
+  , request = require('supertest')
+
+    describe('when ""trust proxy"" is enabled', function(){
+      it('should respect X-Forwarded-Host', function(done){
+        var app = express();
+
+        app.enable('trust proxy');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'example.com')
+        .expect('example.com', done);
+      })
+
+      it('should ignore X-Forwarded-Host if socket addr not trusted', function(done){
+        var app = express();
+
+        app.set('trust proxy', '10.0.0.1');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'example.com')
+        .expect('localhost', done);
+      })
+
+      it('should default to Host', function(done){
+        var app = express();
+
+        app.enable('trust proxy');
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'example.com')
+        .expect('example.com', done);
+      })
+    })
+
+    describe('when ""trust proxy"" is disabled', function(){
+      it('should ignore X-Forwarded-Host', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.end(req.host);
+        });
+
+        request(app)
+        .get('/')
+        .set('Host', 'localhost')
+        .set('X-Forwarded-Host', 'evil')
+        .expect('localhost', done);
+      })
+    })"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/req.ip.js,"-  , request = require('./support/http');
+  , request = require('supertest');","-  , request = require('./support/http');
+  , request = require('supertest');
+        })
+
+        it('should return the addr after trusted proxy', function(done){
+          var app = express();
+
+          app.set('trust proxy', 2);
+
+          app.use(function(req, res, next){
+            res.send(req.ip);
+          });
+
+          request(app)
+          .get('/')
+          .set('X-Forwarded-For', 'client, p1, p2')
+          .expect('p1', done);","-  , request = require('./support/http');
+  , request = require('supertest');
+        })
+
+        it('should return the addr after trusted proxy', function(done){
+          var app = express();
+
+          app.set('trust proxy', 2);
+
+          app.use(function(req, res, next){
+            res.send(req.ip);
+          });
+
+          request(app)
+          .get('/')
+          .set('X-Forwarded-For', 'client, p1, p2')
+          .expect('p1', done);"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/req.ips.js,"-  , request = require('./support/http');
+  , request = require('supertest');","-  , request = require('./support/http');
+  , request = require('supertest');
+        })
+
+        it('should stop at first untrusted', function(done){
+          var app = express();
+
+          app.set('trust proxy', 2);
+
+          app.use(function(req, res, next){
+            res.send(req.ips);
+          });
+
+          request(app)
+          .get('/')
+          .set('X-Forwarded-For', 'client, p1, p2')
+          .expect('[""p1"",""p2""]', done);","-  , request = require('./support/http');
+  , request = require('supertest');
+        })
+
+        it('should stop at first untrusted', function(done){
+          var app = express();
+
+          app.set('trust proxy', 2);
+
+          app.use(function(req, res, next){
+            res.send(req.ips);
+          });
+
+          request(app)
+          .get('/')
+          .set('X-Forwarded-For', 'client, p1, p2')
+          .expect('[""p1"",""p2""]', done);"
expressjs_express,097cd0c242debb3c7f369fab68fc8461bd4e891c,Merge tag '3.7.0',test/req.protocol.js,"-  , request = require('./support/http');
+  , request = require('supertest');","-  , request = require('./support/http');
+  , request = require('supertest');
+      })
+
+      it('should ignore X-Forwarded-Proto if socket addr not trusted', function(done){
+        var app = express();
+
+        app.set('trust proxy', '10.0.0.1');
+
+        app.use(function(req, res){
+          res.end(req.protocol);
+        });
+
+        request(app)
+        .get('/')
+        .set('X-Forwarded-Proto', 'https')
+        .expect('http', done);","-  , request = require('./support/http');
+  , request = require('supertest');
+      })
+
+      it('should ignore X-Forwarded-Proto if socket addr not trusted', function(done){
+        var app = express();
+
+        app.set('trust proxy', '10.0.0.1');
+
+        app.use(function(req, res){
+          res.end(req.protocol);
+        });
+
+        request(app)
+        .get('/')
+        .set('X-Forwarded-Proto', 'https')
+        .expect('http', done);"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',examples/resource/app.js,"-
-    var a = parseInt(req.params.a, 10)
-      , b = parseInt(req.params.b, 10)
-      , format = req.params.format;
+    var a = parseInt(req.params.a, 10);
+    var b = parseInt(req.params.b, 10);
+    var format = req.params.format;
-  ].join('\n')); 
+  ].join('\n'));","-  this.del(path + '/:id', obj.destroy);
+  this.delete(path + '/:id', obj.destroy);","-
-    var a = parseInt(req.params.a, 10)
-      , b = parseInt(req.params.b, 10)
-      , format = req.params.format;
+    var a = parseInt(req.params.a, 10);
+    var b = parseInt(req.params.b, 10);
+    var format = req.params.format;
-  this.del(path + '/:id', obj.destroy);
+  this.delete(path + '/:id', obj.destroy);
-  ].join('\n')); 
+  ].join('\n'));"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',examples/route-map/index.js,"+/**
+ * Module dependencies.
+ */
-var express = require('../../lib/express')
-  , verbose = process.env.NODE_ENV != 'test'
-  , app = module.exports = express();
+var express = require('../../lib/express');
+
+var verbose = process.env.NODE_ENV != 'test';
+
+var app = module.exports = express();","-  del: function(req, res){
+  delete: function(req, res){
-  del: function(req, res){
+  delete: function(req, res){
-    del: users.del,
+    delete: users.delete,
-          del: pets.del
+          delete: pets.delete","+/**
+ * Module dependencies.
+ */
-var express = require('../../lib/express')
-  , verbose = process.env.NODE_ENV != 'test'
-  , app = module.exports = express();
+var express = require('../../lib/express');
+
+var verbose = process.env.NODE_ENV != 'test';
+
+var app = module.exports = express();
-  del: function(req, res){
+  delete: function(req, res){
-  del: function(req, res){
+  delete: function(req, res){
-    del: users.del,
+    delete: users.delete,
-          del: pets.del
+          delete: pets.delete"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',lib/application.js,"-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , View = require('./view')
-  , utils = connect.utils
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
- * @param {String} val
+ * @param {*} [val]
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // deprecated
-    if (Array.isArray(path)) {
-      console.trace('passing an array to app.VERB() is deprecated and will be removed in 4.0');
-    }
-
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);","+  , deprecate = require('./utils').deprecate
- * @param {String} val
+ * @param {*} [val]
-    // deprecated
-    if (Array.isArray(path)) {
-      console.trace('passing an array to app.VERB() is deprecated and will be removed in 4.0');
-    }
-
-app.del = app.delete;
+app.del = deprecate(app.delete, 'app.del: Use app.delete instead');","-var connect = require('connect')
-  , Router = require('./router')
-  , methods = require('methods')
-  , middleware = require('./middleware')
-  , debug = require('debug')('express:application')
-  , locals = require('./utils').locals
-  , View = require('./view')
-  , utils = connect.utils
-  , http = require('http');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var Router = require('./router');
+var methods = require('methods');
+var middleware = require('./middleware/init');
+var query = require('./middleware/query');
+var debug = require('debug')('express:application');
+var View = require('./view');
+var http = require('http');
+var deprecate = require('./utils').deprecate;
-  this.set('env', process.env.NODE_ENV || 'development');
+  var env = process.env.NODE_ENV || 'development';
+  this.set('env', env);
-  debug('booting in %s mode', this.get('env'));
-
-  // implicit middleware
-  this.use(connect.query());
-  this.use(middleware.init(this));
+
+  debug('booting in %s mode', env);
-  // router
-  this._router = new Router(this);
-  this.routes = this._router.map;
-  this.__defineGetter__('router', function(){
-    this._usedRouter = true;
-    this._router.caseSensitive = this.enabled('case sensitive routing');
-    this._router.strict = this.enabled('strict routing');
-    return this._router.middleware;
-  });
-
-  this.locals = locals(this);
+  this.locals = Object.create(null);
+
+  // top-most app is mounted at /
+  this.mountpath = '/';
-  this.configure('development', function(){
-    this.set('json spaces', 2);
+  if (env === 'production') {
+    this.enable('view cache');
+  }
+
+  Object.defineProperty(this, 'router', {
+    get: function() {
+      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
+    }
-
-  this.configure('production', function(){
-    this.enable('view cache');
+};
+
+/**
+ * lazily adds the base router if it has not yet been added.
+ *
+ * We cannot add the base router in the defaultConfiguration because
+ * it reads app settings which might be set after that has run.
+ *
+ * @api private
+ */
+app.lazyrouter = function() {
+  if (!this._router) {
+    this._router = new Router({
+      caseSensitive: this.enabled('case sensitive routing'),
+      strict: this.enabled('strict routing')
+    });
+
+    this._router.use(query());
+    this._router.use(middleware.init(this));
+  }
+};
+
+/**
+ * Dispatch a req, res pair into the application. Starts pipeline processing.
+ *
+ * If no _done_ callback is provided, then default error handlers will respond
+ * in the event of an error bubbling through the stack.
+ *
+ * @api private
+ */
+
+app.handle = function(req, res, done) {
+  var env = this.get('env');
+
+  this._router.handle(req, res, function(err) {
+    if (done) {
+      return done(err);
+    }
+
+    // unhandled error
+    if (err) {
+      // default to 500
+      if (res.statusCode < 400) res.statusCode = 500;
+      debug('default %s', res.statusCode);
+
+      // respect err.status
+      if (err.status) res.statusCode = err.status;
+
+      // production gets a basic error message
+      var msg = 'production' == env
+        ? http.STATUS_CODES[res.statusCode]
+        : err.stack || err.toString();
+      msg = escapeHtml(msg);
+
+      // log to stderr in a non-test env
+      if ('test' != env) console.error(err.stack || err.toString());
+      if (res.headersSent) return req.socket.destroy();
+      res.setHeader('Content-Type', 'text/html');
+      res.setHeader('Content-Length', Buffer.byteLength(msg));
+      if ('HEAD' == req.method) return res.end();
+      res.end(msg);
+      return;
+    }
+
+    // 404
+    debug('default 404');
+    res.statusCode = 404;
+    res.setHeader('Content-Type', 'text/html');
+    if ('HEAD' == req.method) return res.end();
+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');
- * Proxy `connect#use()` to apply settings to
- * mounted applications.
+ * Proxy `Router#use()` to add middleware to the app router.
+ * See Router#use() documentation for details.
+ *
+ * If the _fn_ parameter is an express app, then it will be
+ * mounted at the _route_ specified.
-  var app;
+  var mount_app;
-  if (fn.handle && fn.set) app = fn;
+  if (fn.handle && fn.set) mount_app = fn;
-  if (app) {
-    app.route = route;
+  if (mount_app) {
+    debug('.use app under %s', route);
+    mount_app.mountpath = route;
-      app.handle(req, res, function(err){
+      mount_app.handle(req, res, function(err) {
-  connect.proto.use.call(this, route, fn);
+  this.lazyrouter();
+  this._router.use(route, fn);
-  if (app) {
-    app.parent = this;
-    app.emit('mount', this);
+  if (mount_app) {
+    mount_app.parent = this;
+    mount_app.emit('mount', this);
+};
+
+/**
+ * Proxy to the app `Router#route()`
+ * Returns a new `Route` instance for the _path_.
+ *
+ * Routes are isolated middleware stacks for specific paths.
+ * See the Route api docs for details.
+ *
+ * @api public
+ */
+
+app.route = function(path){
+  this.lazyrouter();
+  return this._router.route(path);
- * Map the given param placeholder `name`(s) to the given callback(s).
- *
- * Parameter mapping is used to provide pre-conditions to routes
- * which use normalized placeholders. For example a _:user_id_ parameter
- * could automatically load a user's information from the database without
- * any additional code,
- *
- * The callback uses the same signature as middleware, the only difference
- * being that the value of the placeholder is passed, in this case the _id_
- * of the user. Once the `next()` function is invoked, just like middleware
- * it will continue on to execute the route, or subsequent parameter functions.
- *
- *      app.param('user_id', function(req, res, next, id){
- *        User.find(id, function(err, user){
- *          if (err) {
- *            next(err);
- *          } else if (user) {
- *            req.user = user;
- *            next();
- *          } else {
- *            next(new Error('failed to load user'));
- *          }
- *        });
- *      });
+ * Proxy to `Router#param()` with one added api feature. The _name_ parameter
+ * can be an array of names.
+ *
+ * See the Router#param() docs for more details.
-  var self = this
-    , fns = [].slice.call(arguments, 1);
-
-  // array
+  var self = this;
+  self.lazyrouter();
+
-    name.forEach(function(name){
-      fns.forEach(function(fn){
-        self.param(name, fn);
-      });
+    name.forEach(function(key) {
+      self.param(key, fn);
-  // param logic
-  } else if ('function' == typeof name) {
-    this._router.param(name);
-  // single
-  } else {
-    if (':' == name[0]) name = name.substr(1);
-    fns.forEach(function(fn){
-      self._router.param(name, fn);
-    });
-  }
-
+    return this;
+  }
+
+  self._router.param(name, fn);
- * @param {String} val
+ * @param {*} [val]
-    ? this.parent.path() + this.route
+    ? this.parent.path() + this.mountpath
- * Configure callback for zero or more envs,
- * when no `env` is specified that callback will
- * be invoked for all environments. Any combination
- * can be used multiple times, in any order desired.
- *
- * Examples:
- *
- *    app.configure(function(){
- *      // executed for all envs
- *    });
- *
- *    app.configure('stage', function(){
- *      // executed staging env
- *    });
- *
- *    app.configure('stage', 'production', function(){
- *      // executed for stage and production
- *    });
- *
- * Note:
- *
- *  These callbacks are invoked immediately, and
- *  are effectively sugar for the following:
- *
- *     var env = process.env.NODE_ENV || 'development';
- *
- *      switch (env) {
- *        case 'development':
- *          ...
- *          break;
- *        case 'stage':
- *          ...
- *          break;
- *        case 'production':
- *          ...
- *          break;
- *      }
- *
- * @param {String} env...
- * @param {Function} fn
- * @return {app} for chaining
- * @api public
- */
-
-app.configure = function(env, fn){
-  var envs = 'all'
-    , args = [].slice.call(arguments);
-  fn = args.pop();
-  if (args.length) envs = args;
-  if ('all' == envs || ~envs.indexOf(this.settings.env)) fn.call(this);
-  return this;
-};
-
-/**
-    // deprecated
-    if (Array.isArray(path)) {
-      console.trace('passing an array to app.VERB() is deprecated and will be removed in 4.0');
-    }
-
-    // if no router attached yet, attach the router
-    if (!this._usedRouter) this.use(this.router);
-
-    // setup route
-    this._router[method].apply(this._router, arguments);
+    this.lazyrouter();
+
+    var route = this._router.route(path);
+    route[method].apply(route, [].slice.call(arguments, 1));
-  var args = arguments;
+  this.lazyrouter();
+
+  var route = this._router.route(path);
+  var args = [].slice.call(arguments, 1);
-    app[method].apply(this, args);
-  }, this);
+    route[method].apply(route, args);
+  });
+
-app.del = app.delete;
+app.del = deprecate(app.delete, 'app.del: Use app.delete instead');
-  var opts = {}
-    , cache = this.cache
-    , engines = this.engines
-    , view;
+  var opts = {};
+  var cache = this.cache;
+  var engines = this.engines;
+  var view;
-  utils.merge(opts, this.locals);
+  mixin(opts, this.locals);
-  if (options._locals) utils.merge(opts, options._locals);
+  if (options._locals) mixin(opts, options._locals);
-  utils.merge(opts, options);
+  mixin(opts, options);"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var contentDisposition = require('./utils').contentDisposition;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headerSent) self.removeHeader('Content-Disposition');
+    if (!self.headersSent) self.removeHeader('Content-Disposition');
-    if (self.headerSent) return;
+    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * ocurred. Be sure to check `res.headerSent` if you plan to respond.
+ * ocurred. Be sure to check `res.headersSent` if you plan to respond.
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+  , deprecate = require('./utils').deprecate
+      return 'number' === typeof obj
+        ? jsonNumDeprecated.call(this, obj)
+        : jsonDeprecated.call(this, obj);
+
+var jsonDeprecated = deprecate(res.json,
+  'res.json(obj, status): Use res.json(status, obj) instead');
+
+var jsonNumDeprecated = deprecate(res.json,
+  'res.json(num, status): Use res.status(status).json(num) instead');
+      return 'number' === typeof obj
+        ? jsonpNumDeprecated.call(this, obj)
+        : jsonpDeprecated.call(this, obj);
+
+var jsonpDeprecated = deprecate(res.json,
+  'res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
+
+var jsonpNumDeprecated = deprecate(res.json,
+  'res.jsonp(num, status): Use res.status(status).jsonp(num) instead');","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var contentDisposition = require('./utils').contentDisposition;
+var deprecate = require('./utils').deprecate;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
+      return 'number' === typeof obj
+        ? jsonNumDeprecated.call(this, obj)
+        : jsonDeprecated.call(this, obj);
-  this.charset = this.charset || 'utf-8';
+
+var jsonDeprecated = deprecate(res.json,
+  'res.json(obj, status): Use res.json(status, obj) instead');
+
+var jsonNumDeprecated = deprecate(res.json,
+  'res.json(num, status): Use res.status(status).json(num) instead');
+      return 'number' === typeof obj
+        ? jsonpNumDeprecated.call(this, obj)
+        : jsonpDeprecated.call(this, obj);
-  this.charset = this.charset || 'utf-8';
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+var jsonpDeprecated = deprecate(res.json,
+  'res.jsonp(obj, status): Use res.jsonp(status, obj) instead');
+
+var jsonpNumDeprecated = deprecate(res.json,
+  'res.jsonp(num, status): Use res.status(status).jsonp(num) instead');
+
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headerSent) self.removeHeader('Content-Disposition');
+    if (!self.headersSent) self.removeHeader('Content-Disposition');
-    if (self.headerSent) return;
+    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * ocurred. Be sure to check `res.headerSent` if you plan to respond.
+ * ocurred. Be sure to check `res.headersSent` if you plan to respond.
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',lib/utils.js,"-
-var mime = require('connect').mime
-  , crc32 = require('buffer-crc32');
-
-/**
- * toString ref.
- */
-
-var toString = {}.toString;
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
- * @param {Array} types
- * @param {String} str
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+  return ret;
-
-/**
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}","+  , deprecate = require('util').deprecate
+
+/**
+ * Deprecate function, like core `util.deprecate`
+ *
+ * @param {Function} fn
+ * @param {String} msg
+ * @return {Function}
+ * @api private
+ */
+
+exports.deprecate = function(fn, msg){
+  return 'test' !== process.env.NODE_ENV
+    ? deprecate(fn, 'express: ' + msg)
+    : fn;
+};","-
-var mime = require('connect').mime
-  , crc32 = require('buffer-crc32');
+var mime = require('send').mime;
+var crc32 = require('buffer-crc32');
+var basename = require('path').basename;
+var deprecate = require('util').deprecate;
- * toString ref.
+ * Deprecate function, like core `util.deprecate`
+ *
+ * @param {Function} fn
+ * @param {String} msg
+ * @return {Function}
+ * @api private
-var toString = {}.toString;
+exports.deprecate = function(fn, msg){
+  return 'test' !== process.env.NODE_ENV
+    ? deprecate(fn, 'express: ' + msg)
+    : fn;
+};
-};
-
-/**
- * Make `locals()` bound to the given `obj`.
- *
- * This is used for `app.locals` and `res.locals`.
- *
- * @param {Object} obj
- * @return {Function}
- * @api private
- */
-
-exports.locals = function(){
-  function locals(obj){
-    for (var key in obj) locals[key] = obj[key];
-    return obj;
-  };
-
-  return locals;
-  var ret = ret || []
-    , len = arr.length;
+  ret = ret || [];
+  var len = arr.length;
- * Return the acceptable type in `types`, if any.
+ * Generate Content-Disposition header appropriate for the filename.
+ * non-ascii filenames are urlencoded and a filename* parameter is added
- * @param {Array} types
- * @param {String} str
+ * @param {String} filename
-exports.acceptsArray = function(types, str){
-  // accept anything when Accept is not present
-  if (!str) return types[0];
+exports.contentDisposition = function(filename){
+  var ret = 'attachment';
+  if (filename) {
+    filename = basename(filename);
+    // if filename contains non-ascii characters, add a utf-8 version ala RFC 5987
+    ret = /[^\040-\176]/.test(filename)
+      ? 'attachment; filename=' + encodeURI(filename) + '; filename*=UTF-8\'\'' + encodeURI(filename)
+      : 'attachment; filename=""' + filename + '""';
+  }
-  // parse
-  var accepted = exports.parseAccept(str)
-    , normalized = exports.normalizeTypes(types)
-    , len = accepted.length;
-
-  for (var i = 0; i < len; ++i) {
-    for (var j = 0, jlen = types.length; j < jlen; ++j) {
-      if (exports.accept(normalized[j], accepted[i])) {
-        return types[j];
-      }
-    }
-  }
-};
-
-/**
- * Check if `type(s)` are acceptable based on
- * the given `str`.
- *
- * @param {String|Array} type(s)
- * @param {String} str
- * @return {Boolean|String}
- * @api private
- */
-
-exports.accepts = function(type, str){
-  if ('string' == typeof type) type = type.split(/ *, */);
-  return exports.acceptsArray(type, str);
-};
-
-/**
- * Check if `type` array is acceptable for `other`.
- *
- * @param {Object} type
- * @param {Object} other
- * @return {Boolean}
- * @api private
- */
-
-exports.accept = function(type, other){
-  var t = type.value.split('/');
-  return (t[0] == other.type || '*' == other.type)
-    && (t[1] == other.subtype || '*' == other.subtype)
-    && paramsEqual(type.params, other.params);
-};
-
-/**
- * Check if accept params are equal.
- *
- * @param {Object} a
- * @param {Object} b
- * @return {Boolean}
- * @api private
- */
-
-function paramsEqual(a, b){
-  return !Object.keys(a).some(function(k) {
-    return a[k] != b[k];
-  });
-}
-
-/**
- * Parse accept `str`, returning
- * an array objects containing
- * `.type` and `.subtype` along
- * with the values provided by
- * `parseQuality()`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseAccept = function(str){
-  return exports
-    .parseParams(str)
-    .map(function(obj){
-      var parts = obj.value.split('/');
-      obj.type = parts[0];
-      obj.subtype = parts[1];
-      return obj;
-    });
-};
-
-/**
- * Parse quality `str`, returning an
- * array of objects with `.value`,
- * `.quality` and optional `.params`
- *
- * @param {String} str
- * @return {Array}
- * @api private
- */
-
-exports.parseParams = function(str){
-  return str
-    .split(/ *, */)
-    .map(acceptParams)
-    .filter(function(obj){
-      return obj.quality;
-    })
-    .sort(function(a, b){
-      if (a.quality === b.quality) {
-        return a.originalIndex - b.originalIndex;
-      } else {
-        return b.quality - a.quality;
-      }
-    });
+  return ret;
-
-/**
- * Escape special characters in the given string of html.
- *
- * @param  {String} html
- * @return {String}
- * @api private
- */
-
-exports.escape = function(html) {
-  return String(html)
-    .replace(/&/g, '&amp;')
-    .replace(/""/g, '&quot;')
-    .replace(/</g, '&lt;')
-    .replace(/>/g, '&gt;');
-};
-
-/**
- * Normalize the given path string,
- * returning a regular expression.
- *
- * An empty array should be passed,
- * which will contain the placeholder
- * key names. For example ""/user/:id"" will
- * then contain [""id""].
- *
- * @param  {String|RegExp|Array} path
- * @param  {Array} keys
- * @param  {Boolean} sensitive
- * @param  {Boolean} strict
- * @return {RegExp}
- * @api private
- */
-
-exports.pathRegexp = function(path, keys, sensitive, strict) {
-  if (toString.call(path) == '[object RegExp]') return path;
-  if (Array.isArray(path)) path = '(' + path.join('|') + ')';
-  path = path
-    .concat(strict ? '' : '/?')
-    .replace(/\/\(/g, '(?:/')
-    .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star){
-      keys.push({ name: key, optional: !! optional });
-      slash = slash || '';
-      return ''
-        + (optional ? '' : slash)
-        + '(?:'
-        + (optional ? slash : '')
-        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
-        + (optional || '')
-        + (star ? '(/*)?' : '');
-    })
-    .replace(/([\/.])/g, '\\$1')
-    .replace(/\*/g, '(.*)');
-  return new RegExp('^' + path + '$', sensitive ? '' : 'i');
-}"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',package.json,"-  ""version"": ""3.5.3"",
+  ""version"": ""4.1.2"",
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.5"",
-    ""commander"": ""1.3.2"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
-    ""mkdirp"": ""0.4.0"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
-    ""ejs"": ""~0.8.4"",
-    ""jade"": ""~0.30.0"",
+    ""body-parser"": ""1.0.2"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""should"": ""~2.1.1"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.11.0""
+    ""should"": ""~3.3.1"",
+    ""supertest"": ""~0.11.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""express-session"": ""1.0.4"",
+    ""morgan"": ""1.0.1"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },
-    ""node"": "">= 0.8.0""
+    ""node"": "">= 0.10.0""","-  ""version"": ""3.5.3"",
+  ""version"": ""3.6.0"",
+      ""name"": ""Douglas Christopher Wilson"",
+      ""email"": ""doug@somethingdoug.com""
+    },
+    {
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.5"",
+    ""connect"": ""2.15.0"",
+    ""methods"": ""1.0.0"",
+    ""mkdirp"": ""0.5.0"",
-    ""mkdirp"": ""0.4.0"",
-    ""methods"": ""0.1.0"",
-    ""debug"": "">= 0.7.3 < 1""
+    ""debug"": "">= 0.8.0 < 1""
-    ""supertest"": ""~0.11.0""
+    ""supertest"": ""~0.12.1""","-  ""version"": ""3.5.3"",
+  ""version"": ""4.1.2"",
+      ""name"": ""Douglas Christopher Wilson"",
+      ""email"": ""doug@somethingdoug.com""
+    },
+    {
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.5"",
-    ""commander"": ""1.3.2"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
-    ""mkdirp"": ""0.4.0"",
-    ""methods"": ""0.1.0"",
+    ""methods"": ""1.0.0"",
-    ""debug"": "">= 0.7.3 < 1""
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.1.0"",
+    ""path-to-regexp"": ""0.1.2"",
+    ""debug"": "">= 0.8.0 < 1""
-    ""ejs"": ""~0.8.4"",
-    ""jade"": ""~0.30.0"",
+    ""body-parser"": ""1.0.2"",
+    ""connect-redis"": ""~2.0.0"",
+    ""ejs"": ""~1.0.0"",
+    ""jade"": ""~0.35.0"",
+    ""marked"": ""0.3.2"",
+    ""multiparty"": ""~3.2.4"",
-    ""stylus"": ""~0.40.0"",
-    ""should"": ""~2.1.1"",
-    ""connect-redis"": ""~1.4.5"",
-    ""marked"": ""0.2.10"",
-    ""supertest"": ""~0.11.0""
+    ""should"": ""~3.3.1"",
+    ""supertest"": ""~0.12.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""express-session"": ""1.0.4"",
+    ""morgan"": ""1.0.1"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },
-    ""node"": "">= 0.8.0""
+    ""node"": "">= 0.10.0"""
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',test/app.router.js,"-  , request = require('./support/http')
+  , request = require('supertest')
+      if (method === 'connect') return;
+
-    app.use(app.router);
+    app.get('/', function(req, res, next){
+      calls.push('GET /')
+      next();
+    });
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-  it('should be auto .use()d on the first app.VERB() call', function(done){
-    var app = express();
-
-    var calls = [];
-
-    app.use(function(req, res, next){
-      calls.push('before');
-      next();
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-    });
-
-    app.use(function(req, res, next){
-      calls.push('after');
-      res.end();
-    });
-
-    request(app)
-    .get('/')
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
-  })
-
-        var id = req.params.shift()
-          , op = req.params.shift();
+        var id = req.params[0]
+          , op = req.params[1];
-        var resource = req.params.shift()
-          , format = req.params.shift();
+        var resource = req.params[0]
+          , format = req.params[1];","-  , request = require('./support/http')
+  , request = require('supertest')
-    methods.forEach(function(method){
+    methods.concat('del').forEach(function(method){
+      if (method === 'connect') return;
+
-        if (method == 'delete') method = 'del';
-        var id = req.params.shift()
-          , op = req.params.shift();
+        var id = req.params[0]
+          , op = req.params[1];
-        var resource = req.params.shift()
-          , format = req.params.shift();
+        var resource = req.params[0]
+          , format = req.params[1];","-  , request = require('./support/http')
+  , request = require('supertest')
-    methods.forEach(function(method){
+    methods.concat('del').forEach(function(method){
+      if (method === 'connect') return;
+
-        if (method == 'delete') method = 'del';
-    app.use(app.router);
+    app.get('/', function(req, res, next){
+      calls.push('GET /')
+      next();
+    });
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-  it('should be auto .use()d on the first app.VERB() call', function(done){
-    var app = express();
-
-    var calls = [];
-
-    app.use(function(req, res, next){
-      calls.push('before');
-      next();
-    });
-
-    app.get('/', function(req, res, next){
-      calls.push('GET /')
-      next();
-    });
-
-    app.use(function(req, res, next){
-      calls.push('after');
-      res.end();
-    });
-
-    request(app)
-    .get('/')
-    .end(function(res){
-      calls.should.eql(['before', 'GET /', 'after'])
-      done();
-    })
-  })
-
-        var id = req.params.shift()
-          , op = req.params.shift();
+        var id = req.params[0]
+          , op = req.params[1];
-        var resource = req.params.shift()
-          , format = req.params.shift();
+        var resource = req.params[0]
+          , format = req.params[1];"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',test/res.format.js,"-  , request = require('./support/http')
+  , request = require('supertest')
-  
+
+
+    describe('in router', function(){
+      var app = express();
+      var router = express.Router();
+
+      router.get('/', function(req, res, next){
+        res.format({
+          text: function(){ res.send('hey') },
+          html: function(){ res.send('<p>hey</p>') },
+          json: function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      router.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      })
+
+      app.use(router)
+
+      test(app)
+    })
-    .expect('Content-Type', 'text/plain; charset=UTF-8')
+    .expect('Content-Type', 'text/plain; charset=utf-8')
-    .expect('Content-Type', 'text/html; charset=UTF-8');
+    .expect('Content-Type', 'text/html; charset=utf-8');
-    .expect('Content-Type', 'text/plain; charset=UTF-8');
+    .expect('Content-Type', 'text/plain; charset=utf-8');","-var app = express();
+var app1 = express();
-app.use(function(req, res, next){
+app1.use(function(req, res, next){
-app.use(function(err, req, res, next){
+app1.use(function(err, req, res, next){
+var app4 = express();
+
+app4.get('/', function(req, res, next){
+  res.format({
+    text: function(){ res.send('hey') },
+    html: function(){ res.send('<p>hey</p>') },
+    json: function(){ res.send({ message: 'hey' }) }
+  });
+});
+
+app4.use(function(err, req, res, next){
+  res.send(err.status, 'Supports: ' + err.types.join(', '));
+})
+
-      test(app);
+      test(app1);
+    })
+
+    describe('in router', function(){
+      test(app4);","-  , request = require('./support/http')
+  , request = require('supertest')
-var app = express();
+var app1 = express();
-app.use(function(req, res, next){
+app1.use(function(req, res, next){
-  
+
-app.use(function(err, req, res, next){
+app1.use(function(err, req, res, next){
+var app4 = express();
+
+app4.get('/', function(req, res, next){
+  res.format({
+    text: function(){ res.send('hey') },
+    html: function(){ res.send('<p>hey</p>') },
+    json: function(){ res.send({ message: 'hey' }) }
+  });
+});
+
+app4.use(function(err, req, res, next){
+  res.send(err.status, 'Supports: ' + err.types.join(', '));
+})
+
-      test(app);
+      test(app1);
+    })
+
+    describe('in router', function(){
+      test(app4);
+    })
+
+    describe('in router', function(){
+      var app = express();
+      var router = express.Router();
+
+      router.get('/', function(req, res, next){
+        res.format({
+          text: function(){ res.send('hey') },
+          html: function(){ res.send('<p>hey</p>') },
+          json: function(){ res.send({ message: 'hey' }) }
+        });
+      });
+
+      router.use(function(err, req, res, next){
+        res.send(err.status, 'Supports: ' + err.types.join(', '));
+      })
+
+      app.use(router)
+
+      test(app)
-    .expect('Content-Type', 'text/plain; charset=UTF-8')
+    .expect('Content-Type', 'text/plain; charset=utf-8')
-    .expect('Content-Type', 'text/html; charset=UTF-8');
+    .expect('Content-Type', 'text/html; charset=utf-8');
-    .expect('Content-Type', 'text/plain; charset=UTF-8');
+    .expect('Content-Type', 'text/plain; charset=utf-8');"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',test/res.json.js,"-  , request = require('./support/http')
+  , request = require('supertest')
+    it('should not override previous Content-Types', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.json({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-    
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-  
+
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-
-  it('should not override previous Content-Types', function(done){
-    var app = express();
-
-    app.get('/', function(req, res){
-      res.type('application/vnd.example+json');
-      res.json({ hello: 'world' });
-    });
-
-    request(app)
-    .get('/')
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
-      res.headers.should.have.property('content-type', 'application/vnd.example+json');
-      res.text.should.equal('{""hello"":""world""}');
-      done();
-    })
-  })","-      it('should respond with json', function(done){
+      it('should respond with json for null', function(done){
+          done();
+        })
+      })
+
+      it('should respond with json for Number', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.json(300);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.text.should.equal('300');
+          done();
+        })
+      })
+
+      it('should respond with json for String', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.json('str');
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.text.should.equal('""str""');
+        done();
+      })
+    })
+
+    it('should use status as second number for backwards compat', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.json(200, 201);
+      });
+
+      request(app)
+      .get('/')
+      .end(function(err, res){
+        res.statusCode.should.equal(201);
+        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.text.should.equal('200');","-  , request = require('./support/http')
+  , request = require('supertest')
+    it('should not override previous Content-Types', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.json({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
-      it('should respond with json', function(done){
+      it('should respond with json for null', function(done){
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
+          done();
+        })
+      })
+
+      it('should respond with json for Number', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.json(300);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json');
+          res.text.should.equal('300');
+          done();
+        })
+      })
+
+      it('should respond with json for String', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.json('str');
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json');
+          res.text.should.equal('""str""');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-    
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-  
+
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-  })
-
-  it('should not override previous Content-Types', function(done){
-    var app = express();
-
-    app.get('/', function(req, res){
-      res.type('application/vnd.example+json');
-      res.json({ hello: 'world' });
-    });
-
-    request(app)
-    .get('/')
-    .end(function(err, res){
-      res.statusCode.should.equal(200);
-      res.headers.should.have.property('content-type', 'application/vnd.example+json');
-      res.text.should.equal('{""hello"":""world""}');
-      done();
+
+    it('should use status as second number for backwards compat', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.json(200, 201);
+      });
+
+      request(app)
+      .get('/')
+      .end(function(err, res){
+        res.statusCode.should.equal(201);
+        res.headers.should.have.property('content-type', 'application/json');
+        res.text.should.equal('200');
+        done();
+      })"
expressjs_express,35c50601bdd67b54b5e8b7a779d24f6dee54c3fd,Merge tag '3.6.0',test/res.jsonp.js,"-  , request = require('./support/http')
+  , request = require('supertest')
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
+
+    it('should not override previous Content-Types with no callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
+    it('should override previous Content-Types with callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/?callback=cb')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /cb\(\{""hello"":""world""\}\);$/, done);
+    })
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');","+    describe('when given primitives', function(){
+      it('should respond with json for null', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp(null);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.text.should.equal('null');
+          done();
+        })
+      })
+
+      it('should respond with json for Number', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp(300);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.text.should.equal('300');
+          done();
+        })
+      })
+
+      it('should respond with json for String', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp('str');
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.text.should.equal('""str""');
+          done();
+        })
+      })
+    })
+
+
+    it('should use status as second number for backwards compat', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp(200, 201);
+      });
+
+      request(app)
+      .get('/')
+      .end(function(err, res){
+        res.statusCode.should.equal(201);
+        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.text.should.equal('200');
+        done();
+      })
+    })","-  , request = require('./support/http')
+  , request = require('supertest')
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
+
+    it('should not override previous Content-Types with no callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/')
+      .expect('Content-Type', 'application/vnd.example+json')
+      .expect(200, '{""hello"":""world""}', done);
+    })
+
+    it('should override previous Content-Types with callback', function(done){
+      var app = express();
+
+      app.get('/', function(req, res){
+        res.type('application/vnd.example+json');
+        res.jsonp({ hello: 'world' });
+      });
+
+      request(app)
+      .get('/?callback=cb')
+      .expect('Content-Type', 'text/javascript; charset=utf-8')
+      .expect(200, /cb\(\{""hello"":""world""\}\);$/, done);
+    })
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
+          done();
+        })
+      })
+    })
+
+    describe('when given primitives', function(){
+      it('should respond with json for null', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp(null);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.headers.should.have.property('content-type', 'application/json');
+          res.text.should.equal('null');
+          done();
+        })
+      })
+
+      it('should respond with json for Number', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp(300);
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json');
+          res.text.should.equal('300');
+          done();
+        })
+      })
+
+      it('should respond with json for String', function(done){
+        var app = express();
+
+        app.use(function(req, res){
+          res.jsonp('str');
+        });
+
+        request(app)
+        .get('/')
+        .end(function(err, res){
+          res.statusCode.should.equal(200);
+          res.headers.should.have.property('content-type', 'application/json');
+          res.text.should.equal('""str""');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
+        done();
+      })
+    })
+
+    it('should use status as second number for backwards compat', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp(200, 201);
+      });
+
+      request(app)
+      .get('/')
+      .end(function(err, res){
+        res.statusCode.should.equal(201);
+        res.headers.should.have.property('content-type', 'application/json');
+        res.text.should.equal('200');"
expressjs_express,0bbbc849593476764cae46f335f96b4894f8c7cc,Merge branch '4.1.x',lib/response.js,"-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');","+  // fixup callback
+  if (Array.isArray(callback)) {
+    callback = callback[0];
+  }
+
-  if (callback) {
-    if (Array.isArray(callback)) callback = callback[0];
+  if (callback && 'string' === typeof callback) {","-  if (app.settings.etag && len && 'GET' == req.method) {
+  if (app.settings.etag && len && ('GET' == req.method || 'HEAD' == req.method)) {
-  this.set('Content-Type', 'application/json');
+  this.get('Content-Type') || this.set('Content-Type', 'application/json');
+
+  // fixup callback
+  if (Array.isArray(callback)) {
+    callback = callback[0];
+  }
-  if (callback) {
-    if (Array.isArray(callback)) callback = callback[0];
+  if (callback && 'string' === typeof callback) {"
expressjs_express,0bbbc849593476764cae46f335f96b4894f8c7cc,Merge branch '4.1.x',test/res.jsonp.js,"+
+  it('should not override previous Content-Types', function(done){
+    var app = express();
+
+    app.get('/', function(req, res){
+      res.type('application/vnd.example+json');
+      res.jsonp({ hello: 'world' });
+    });
+
+    request(app)
+    .get('/')
+    .end(function(err, res){
+      res.statusCode.should.equal(200);
+      res.headers.should.have.property('content-type', 'application/vnd.example+json');
+      res.text.should.equal('{""hello"":""world""}');
+      done();
+    })
+  })","+    it('should ignore object callback parameter with jsonp', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback[a]=something')
+      .end(function(err, res){
+        res.headers.should.have.property('content-type', 'application/json');
+        res.text.should.equal('{""count"":1}');
+        done();
+      })
+    })
+
-  describe('.json(status, object)', function(){
+  describe('.jsonp(status, object)', function(){
-  describe('.json(object, status)', function(){
+  describe('.jsonp(object, status)', function(){","+    it('should ignore object callback parameter with jsonp', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback[a]=something')
+      .end(function(err, res){
+        res.headers.should.have.property('content-type', 'application/json');
+        res.text.should.equal('{""count"":1}');
+        done();
+      })
+    })
+
-  describe('.json(status, object)', function(){
+  describe('.jsonp(status, object)', function(){
-  describe('.json(object, status)', function(){
+  describe('.jsonp(object, status)', function(){
+
+  it('should not override previous Content-Types', function(done){
+    var app = express();
+
+    app.get('/', function(req, res){
+      res.type('application/vnd.example+json');
+      res.jsonp({ hello: 'world' });
+    });
+
+    request(app)
+    .get('/')
+    .end(function(err, res){
+      res.statusCode.should.equal(200);
+      res.headers.should.have.property('content-type', 'application/vnd.example+json');
+      res.text.should.equal('{""hello"":""world""}');
+      done();
+    })
+  })"
expressjs_express,2901bd6916f90accfcf0f1ae1ae3acf48de61038,Merge branch '3.5.x' into 4.1.x,lib/request.js,"-
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = connect.utils.parseUrl
-  , mime = connect.mime;
+var accepts = require('accepts');
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
+req.acceptsEncoding = // backwards compatibility
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
+req.acceptsCharset = // backwards compatibility
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
+req.acceptsLanguage = // backwards compatibility
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  // missing
-  var auth = this.get('Authorization');
-  if (!auth) return;
-
-  // malformed
-  var parts = auth.split(' ');
-  if ('basic' != parts[0].toLowerCase()) return;
-  if (!parts[1]) return;
-  auth = parts[1];
-
-  // credentials
-  auth = new Buffer(auth, 'base64').toString().match(/^([^:]*):(.*)$/);
-  if (!auth) return;
-  return { username: auth[1], password: auth[2] };
-});
-
-/**","-  return host.split(':')[0];
+  var offset = host[0] === '['
+    ? host.indexOf(']') + 1
+    : 0;
+  var index = host.indexOf(':', offset);
+  return ~index
+    ? host.substring(0, index)
+    : host;","-
-var http = require('http')
-  , utils = require('./utils')
-  , connect = require('connect')
-  , fresh = require('fresh')
-  , parseRange = require('range-parser')
-  , parse = connect.utils.parseUrl
-  , mime = connect.mime;
+var accepts = require('accepts');
+var typeis = require('type-is');
+var http = require('http');
+var fresh = require('fresh');
+var parseRange = require('range-parser');
+var parse = require('parseurl');
+ * To do: update docs.
+ *
-req.accepts = function(type){
-  var args = arguments.length > 1 ? [].slice.apply(arguments) : type;
-  return utils.accepts(args, this.get('Accept'));
+req.accepts = function(){
+  var accept = accepts(this);
+  return accept.types.apply(accept, arguments);
-req.acceptsEncoding = function(encoding){
-  return !! ~this.acceptedEncodings.indexOf(encoding);
-};
-
-/**
+req.acceptsEncoding = // backwards compatibility
+req.acceptsEncodings = function(){
+  var accept = accepts(this);
+  return accept.encodings.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsCharset = function(charset){
-  var accepted = this.acceptedCharsets;
-  return accepted.length
-    ? !! ~accepted.indexOf(charset)
-    : true;
-};
-
-/**
+req.acceptsCharset = // backwards compatibility
+req.acceptsCharsets = function(){
+  var accept = accepts(this);
+  return accept.charsets.apply(accept, arguments);
+};
+
+/**
+ * To do: update docs.
+ *
-req.acceptsLanguage = function(lang){
-  var accepted = this.acceptedLanguages;
-  return accepted.length
-    ? !! ~accepted.indexOf(lang)
-    : true;
+req.acceptsLanguage = // backwards compatibility
+req.acceptsLanguages = function(){
+  var accept = accepts(this);
+  return accept.languages.apply(accept, arguments);
- * Return an array of encodings.
- *
- * Examples:
- *
- *     ['gzip', 'deflate']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedEncodings', function(){
-  var accept = this.get('Accept-Encoding');
-  return accept
-    ? accept.trim().split(/ *, */)
-    : [];
-});
-
-/**
- * Return an array of Accepted media types
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     [ { value: 'application/json',
- *         quality: 1,
- *         type: 'application',
- *         subtype: 'json' },
- *       { value: 'text/html',
- *         quality: 0.5,
- *         type: 'text',
- *         subtype: 'html' } ]
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('accepted', function(){
-  var accept = this.get('Accept');
-  return accept
-    ? utils.parseAccept(accept)
-    : [];
-});
-
-/**
- * Return an array of Accepted languages
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Language: en;q=.5, en-us
- *     ['en-us', 'en']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedLanguages', function(){
-  var accept = this.get('Accept-Language');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * Return an array of Accepted charsets
- * ordered from highest quality to lowest.
- *
- * Examples:
- *
- *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8
- *     ['unicode-1-1', 'iso-8859-5']
- *
- * @return {Array}
- * @api public
- */
-
-req.__defineGetter__('acceptedCharsets', function(){
-  var accept = this.get('Accept-Charset');
-  return accept
-    ? utils
-      .parseParams(accept)
-      .map(function(obj){
-        return obj.value;
-      })
-    : [];
-});
-
-/**
- * the `connect.bodyParser()` middleware.
+ * the `bodyParser()` middleware.
-req.is = function(type){
-  var ct = this.get('Content-Type');
-  if (!ct) return false;
-  ct = ct.split(';')[0];
-  if (!~type.indexOf('/')) type = mime.lookup(type);
-  if (~type.indexOf('*')) {
-    type = type.split('/');
-    ct = ct.split('/');
-    if ('*' == type[0] && type[1] == ct[1]) return true;
-    if ('*' == type[1] && type[0] == ct[0]) return true;
-    return false;
-  }
-  return !! ~ct.indexOf(type);
+req.is = function(types){
+  if (!Array.isArray(types)) types = [].slice.call(arguments);
+  return typeis(this, types);
- * Return basic auth credentials.
- *
- * Examples:
- *
- *    // http://tobi:hello@example.com
- *    req.auth
- *    // => { username: 'tobi', password: 'hello' }
- *
- * @return {Object} or undefined
- * @api public
- */
-
-req.__defineGetter__('auth', function(){
-  // missing
-  var auth = this.get('Authorization');
-  if (!auth) return;
-
-  // malformed
-  var parts = auth.split(' ');
-  if ('basic' != parts[0].toLowerCase()) return;
-  if (!parts[1]) return;
-  auth = parts[1];
-
-  // credentials
-  auth = new Buffer(auth, 'base64').toString().match(/^([^:]*):(.*)$/);
-  if (!auth) return;
-  return { username: auth[1], password: auth[2] };
-});
-
-/**
-  return host.split(':')[0];
+  var offset = host[0] === '['
+    ? host.indexOf(']') + 1
+    : 0;
+  var index = host.indexOf(':', offset);
+  return ~index
+    ? host.substring(0, index)
+    : host;"
expressjs_express,2901bd6916f90accfcf0f1ae1ae3acf48de61038,Merge branch '3.5.x' into 4.1.x,lib/response.js,"-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var contentDisposition = require('./utils').contentDisposition;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headerSent) self.removeHeader('Content-Disposition');
+    if (!self.headersSent) self.removeHeader('Content-Disposition');
-    if (self.headerSent) return;
+    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * ocurred. Be sure to check `res.headerSent` if you plan to respond.
+ * ocurred. Be sure to check `res.headersSent` if you plan to respond.
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;","+  // fixup callback
+  if (Array.isArray(callback)) {
+    callback = callback[0];
+  }
+
-  if (callback) {
-    if (Array.isArray(callback)) callback = callback[0];
+  if (callback && 'string' === typeof callback) {","-var http = require('http')
-  , path = require('path')
-  , connect = require('connect')
-  , utils = connect.utils
-  , sign = require('cookie-signature').sign
-  , normalizeType = require('./utils').normalizeType
-  , normalizeTypes = require('./utils').normalizeTypes
-  , etag = require('./utils').etag
-  , statusCodes = http.STATUS_CODES
-  , cookie = require('cookie')
-  , send = require('send')
-  , mime = connect.mime
-  , resolve = require('url').resolve
-  , basename = path.basename
-  , extname = path.extname;
+var http = require('http');
+var path = require('path');
+var mixin = require('utils-merge');
+var escapeHtml = require('escape-html');
+var sign = require('cookie-signature').sign;
+var normalizeType = require('./utils').normalizeType;
+var normalizeTypes = require('./utils').normalizeTypes;
+var contentDisposition = require('./utils').contentDisposition;
+var etag = require('./utils').etag;
+var statusCodes = http.STATUS_CODES;
+var cookie = require('cookie');
+var send = require('send');
+var basename = path.basename;
+var extname = path.extname;
+var mime = send.mime;
-      if (!this.get('Content-Type')) {
-        this.charset = this.charset || 'utf-8';
-        this.type('html');
-      }
+      if (!this.get('Content-Type')) this.type('html');
-  this.charset = this.charset || 'utf-8';
-  this.charset = this.charset || 'utf-8';
+  // fixup callback
+  if (Array.isArray(callback)) {
+    callback = callback[0];
+  }
+
-  if (callback) {
-    if (Array.isArray(callback)) callback = callback[0];
+  if (callback && 'string' === typeof callback) {
+ *   - `hidden` serve hidden files, defaulting to false
+ *
+ * Other options are passed along to `send`.
-  var self = this
-    , req = self.req
-    , next = this.req.next
-    , options = options || {}
-    , done;
+  options = options || {};
+  var self = this;
+  var req = self.req;
+  var next = this.req.next;
+  var done;
+
-    if (!self.headerSent) self.removeHeader('Content-Disposition');
+    if (!self.headersSent) self.removeHeader('Content-Disposition');
-    if (self.headerSent) return;
+    if (self.headersSent) return;
+  // Back-compat
+  options.maxage = options.maxage || options.maxAge || 0;
+
-  var file = send(req, path);
-  if (options.root) file.root(options.root);
-  file.maxage(options.maxAge || 0);
+  var file = send(req, path, options);
- * ocurred. Be sure to check `res.headerSent` if you plan to respond.
+ * ocurred. Be sure to check `res.headersSent` if you plan to respond.
-  this.set('Content-Disposition', 'attachment; filename=""' + basename(filename) + '""');
+  this.set('Content-Disposition', contentDisposition(filename));
-  var req = this.req
-    , next = req.next;
+  var req = this.req;
+  var next = req.next;
-    var type = normalizeType(key).value;
-    var charset = mime.charsets.lookup(type);
-    if (charset) type += '; charset=' + charset;
-    this.set('Content-Type', type);
+    this.set('Content-Type', normalizeType(key).value);
-  this.set('Content-Disposition', filename
-    ? 'attachment; filename=""' + basename(filename) + '""'
-    : 'attachment');
+  this.set('Content-Disposition', contentDisposition(filename));
+    if ('content-type' == field.toLowerCase() && !/;\s*charset\s*=/.test(val)) {
+      var charset = mime.charsets.lookup(val.split(';')[0]);
+      if (charset) val += '; charset=' + charset.toLowerCase();
+    }
-    ? utils.merge(opts, options)
+    ? mixin(opts, options)
-  options = utils.merge({}, options);
+  options = mixin({}, options);
-  if (signed && !secret) throw new Error('connect.cookieParser(""secret"") required for signed cookies');
+  if (signed && !secret) throw new Error('cookieParser(""secret"") required for signed cookies');
-  this.set('Set-Cookie', cookie.serialize(name, String(val), options));
+  var headerVal = cookie.serialize(name, String(val), options);
+
+  // supports multiple 'res.cookie' calls by getting previous value
+  var prev = this.get('Set-Cookie');
+  if (prev) {
+    if (Array.isArray(prev)) {
+      headerVal = prev.concat(headerVal);
+    } else {
+      headerVal = [prev, headerVal];
+    }
+  }
+  this.set('Set-Cookie', headerVal);
- *    res.location('../login'); // /blog/post/1 -> /blog/login
- *
- * Mounting:
- *
- *   When an application is mounted and `res.location()`
- *   is given a path that does _not_ lead with ""/"" it becomes
- *   relative to the mount-point. For example if the application
- *   is mounted at ""/blog"", the following would become ""/blog/login"".
- *
- *      res.location('login');
- *
- *   While the leading slash would result in a location of ""/login"":
- *
- *      res.location('/login');
+ *    res.location('../login');
-  var app = this.app
-    , req = this.req
-    , path;
+  var req = this.req;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    // relative to path
-    if ('.' == url[0]) {
-      path = req.originalUrl.split('?')[0];
-      path = path + ('/' == path[path.length - 1] ? '' : '/');
-      url = resolve(path, url);
-      // relative to mount-point
-    } else if ('/' != url[0]) {
-      path = app.path();
-      url = path + '/' + url;
-    }
-  }
-  var head = 'HEAD' == this.req.method
-    , status = 302
-    , body;
+  var head = 'HEAD' == this.req.method;
+  var status = 302;
+  var body;
-      var u = utils.escape(url);
+      var u = escapeHtml(url);
-  var self = this
-    , options = options || {}
-    , req = this.req
-    , app = req.app;
+  options = options || {};
+  var self = this;
+  var req = this.req;
+  var app = req.app;"
expressjs_express,2901bd6916f90accfcf0f1ae1ae3acf48de61038,Merge branch '3.5.x' into 4.1.x,test/req.host.js,"-  , request = require('./support/http')
+  , request = require('supertest')","+    it('should strip port number', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', 'example.com:3000')
+      .expect('example.com', done);
+    })
+
+
+    it('should work with IPv6 Host', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', '[::1]')
+      .expect('[::1]', done);
+    })
+
+    it('should work with IPv6 Host and port', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', '[::1]:3000')
+      .expect('[::1]', done);
+    })","-  , request = require('./support/http')
+  , request = require('supertest')
+    it('should strip port number', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', 'example.com:3000')
+      .expect('example.com', done);
+    })
+
+
+    it('should work with IPv6 Host', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', '[::1]')
+      .expect('[::1]', done);
+    })
+
+    it('should work with IPv6 Host and port', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.end(req.host);
+      });
+
+      request(app)
+      .post('/')
+      .set('Host', '[::1]:3000')
+      .expect('[::1]', done);
+    })"
expressjs_express,2901bd6916f90accfcf0f1ae1ae3acf48de61038,Merge branch '3.5.x' into 4.1.x,test/res.jsonp.js,"-  , request = require('./support/http')
+  , request = require('supertest')
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');","+    it('should ignore object callback parameter with jsonp', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback[a]=something')
+      .end(function(err, res){
+        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.text.should.equal('{""count"":1}');
+        done();
+      })
+    })
+
-  describe('.json(status, object)', function(){
+  describe('.jsonp(status, object)', function(){
-  describe('.json(object, status)', function(){
+  describe('.jsonp(object, status)', function(){","-  , request = require('./support/http')
+  , request = require('supertest')
+    it('should ignore object callback parameter with jsonp', function(done){
+      var app = express();
+
+      app.use(function(req, res){
+        res.jsonp({ count: 1 });
+      });
+
+      request(app)
+      .get('/?callback[a]=something')
+      .end(function(err, res){
+        res.headers.should.have.property('content-type', 'application/json');
+        res.text.should.equal('{""count"":1}');
+        done();
+      })
+    })
+
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-          res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+          res.headers.should.have.property('content-type', 'application/json');
-      it('should default to 2 in development', function(){
-        process.env.NODE_ENV = 'development';
-        var app = express();
-        app.get('json spaces').should.equal(2);
-        process.env.NODE_ENV = 'test';
-      })
-
-      it('should be undefined otherwise', function(){
+      it('should be undefined by default', function(){
-  describe('.json(status, object)', function(){
+  describe('.jsonp(status, object)', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');
-  describe('.json(object, status)', function(){
+  describe('.jsonp(object, status)', function(){
-        res.headers.should.have.property('content-type', 'application/json; charset=utf-8');
+        res.headers.should.have.property('content-type', 'application/json');"
expressjs_express,66b38b58bc17d6b6642ab3e91f12194ed9a27efe,Merge branch '3.5.x' into 3.x,package.json,"+      ""name"": ""Douglas Christopher Wilson"",
+      ""email"": ""doug@somethingdoug.com""
+    },
+    {
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.5"",
+    ""connect"": ""2.15.0"",
-    ""debug"": "">= 0.7.3 < 1""
+    ""debug"": "">= 0.8.0 < 1""","-  ""version"": ""3.5.2"",
+  ""version"": ""3.5.3"",","-  ""version"": ""3.5.2"",
+  ""version"": ""3.5.3"",
+      ""name"": ""Douglas Christopher Wilson"",
+      ""email"": ""doug@somethingdoug.com""
+    },
+    {
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.5"",
+    ""connect"": ""2.15.0"",
-    ""debug"": "">= 0.7.3 < 1""
+    ""debug"": "">= 0.8.0 < 1"""
expressjs_express,8ccceacf91bffc535ef9f05ab2084c7111529896,Merge branch '3.x',package.json,"-  ""version"": ""3.5.1"",
+  ""version"": ""4.0.0"",
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.1"",
-    ""commander"": ""1.3.2"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
-    ""mkdirp"": ""0.3.5"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.0.4"",
+    ""path-to-regexp"": ""0.1.2"",
-    ""supertest"": ""~0.9.0""
+    ""supertest"": ""~0.9.0"",
+    ""body-parser"": ""1.0.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""static-favicon"": ""1.0.0"",
+    ""express-session"": ""1.0.1"",
+    ""morgan"": ""1.0.0"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },","-  ""version"": ""3.5.1"",
+  ""version"": ""3.5.2"",
-    ""connect"": ""2.14.1"",
+    ""connect"": ""2.14.5"",
-    ""mkdirp"": ""0.3.5"",
-    ""cookie"": ""0.1.1"",
+    ""mkdirp"": ""0.4.0"",
+    ""cookie"": ""0.1.2"",
-    ""send"": ""0.2.0"",
+    ""send"": ""0.3.0"",
-    ""mocha"": ""~1.17.1"",
+    ""mocha"": ""~1.18.2"",
-    ""supertest"": ""~0.9.0""
+    ""supertest"": ""~0.11.0""","-  ""version"": ""3.5.1"",
+  ""version"": ""4.0.0"",
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.14.1"",
-    ""commander"": ""1.3.2"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
-    ""mkdirp"": ""0.3.5"",
-    ""cookie"": ""0.1.1"",
+    ""cookie"": ""0.1.2"",
-    ""send"": ""0.2.0"",
+    ""send"": ""0.3.0"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.0.4"",
+    ""path-to-regexp"": ""0.1.2"",
-    ""mocha"": ""~1.17.1"",
+    ""mocha"": ""~1.18.2"",
-    ""supertest"": ""~0.9.0""
+    ""supertest"": ""~0.11.0"",
+    ""body-parser"": ""1.0.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""static-favicon"": ""1.0.0"",
+    ""express-session"": ""1.0.1"",
+    ""morgan"": ""1.0.0"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },"
expressjs_express,6ac6305b533d3569f91ff411eee5e3c8918a4253,Merge branch '3.x' into HEAD,package.json,"-  ""version"": ""3.4.7"",
+  ""version"": ""4.0.0"",
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.12.0"",
-    ""commander"": ""1.3.2"",
-    ""range-parser"": ""0.0.4"",
-    ""mkdirp"": ""0.3.5"",
-    ""cookie"": ""0.1.0"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
+    ""range-parser"": ""1.0.0"",
+    ""cookie"": ""0.1.1"",
-    ""fresh"": ""0.2.0"",
+    ""fresh"": ""0.2.2"",
-    ""send"": ""0.1.4"",
-    ""cookie-signature"": ""1.0.1"",
-    ""merge-descriptors"": ""0.0.1"",
+    ""send"": ""0.2.0"",
+    ""cookie-signature"": ""1.0.3"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.0.4"",
+    ""path-to-regexp"": ""0.1.2"",
-    ""supertest"": ""~0.8.1""
+    ""supertest"": ""~0.8.1"",
+    ""body-parser"": ""1.0.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""static-favicon"": ""1.0.0"",
+    ""express-session"": ""1.0.1"",
+    ""morgan"": ""1.0.0"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },","-  ""version"": ""3.4.7"",
+  ""version"": ""3.5.1"",
-    ""connect"": ""2.12.0"",
+    ""connect"": ""2.14.1"",
-    ""range-parser"": ""0.0.4"",
+    ""range-parser"": ""1.0.0"",
-    ""cookie"": ""0.1.0"",
+    ""cookie"": ""0.1.1"",
-    ""fresh"": ""0.2.0"",
+    ""fresh"": ""0.2.2"",
-    ""send"": ""0.1.4"",
-    ""cookie-signature"": ""1.0.1"",
-    ""merge-descriptors"": ""0.0.1"",
+    ""send"": ""0.2.0"",
+    ""cookie-signature"": ""1.0.3"",
+    ""merge-descriptors"": ""0.0.2"",
-    ""mocha"": ""~1.15.1"",
+    ""mocha"": ""~1.17.1"",
-    ""supertest"": ""~0.8.1""
+    ""supertest"": ""~0.9.0""","-  ""version"": ""3.4.7"",
+  ""version"": ""4.0.0"",
+    },
+    {
+      ""name"": ""Jonathan Ong"",
+      ""email"": ""me@jongleberry.com""
+    },
+    {
+      ""name"": ""Roman Shtylman"",
+      ""email"": ""shtylman+expressjs@gmail.com""
-    ""connect"": ""2.12.0"",
-    ""commander"": ""1.3.2"",
-    ""range-parser"": ""0.0.4"",
-    ""mkdirp"": ""0.3.5"",
-    ""cookie"": ""0.1.0"",
+    ""parseurl"": ""1.0.1"",
+    ""accepts"": ""1.0.1"",
+    ""type-is"": ""1.1.0"",
+    ""range-parser"": ""1.0.0"",
+    ""cookie"": ""0.1.1"",
-    ""fresh"": ""0.2.0"",
+    ""fresh"": ""0.2.2"",
-    ""send"": ""0.1.4"",
-    ""cookie-signature"": ""1.0.1"",
-    ""merge-descriptors"": ""0.0.1"",
+    ""send"": ""0.2.0"",
+    ""cookie-signature"": ""1.0.3"",
+    ""merge-descriptors"": ""0.0.2"",
+    ""utils-merge"": ""1.0.0"",
+    ""escape-html"": ""1.0.1"",
+    ""qs"": ""0.6.6"",
+    ""serve-static"": ""1.0.4"",
+    ""path-to-regexp"": ""0.1.2"",
-    ""mocha"": ""~1.15.1"",
+    ""mocha"": ""~1.17.1"",
-    ""supertest"": ""~0.8.1""
+    ""supertest"": ""~0.9.0"",
+    ""body-parser"": ""1.0.0"",
+    ""method-override"": ""1.0.0"",
+    ""cookie-parser"": ""1.0.1"",
+    ""static-favicon"": ""1.0.0"",
+    ""express-session"": ""1.0.1"",
+    ""morgan"": ""1.0.0"",
+    ""vhost"": ""1.0.0""
-  ""main"": ""index"",
-  ""bin"": {
-    ""express"": ""./bin/express""
-  },"
expressjs_express,4867cf1e7b59e6fc4f4b4439bab004461dcc46c7,Merge pull request #1964 from blakeembrey/modular-routing  keep route params from previous middleware matches,package.json,"-  ""version"": ""4.0.0-rc2"",
+  ""version"": ""4.0.0-rc3"",","-    ""path-to-regexp"": ""0.1.0"",
+    ""path-to-regexp"": ""0.1.2"",","-  ""version"": ""4.0.0-rc2"",
+  ""version"": ""4.0.0-rc3"",
-    ""path-to-regexp"": ""0.1.0"",
+    ""path-to-regexp"": ""0.1.2"","
expressjs_express,3f14b4de1f65c1983780ef4c54d8513174591142,Merge pull request #1835 from visionmedia/change-req-params-to-object  change req.params to an object instead of an array,lib/router/route.js,"-    var val = 'string' == typeof m[i]
-      ? utils.decode(m[i])
-      : m[i];
+    try {
+      var val = 'string' == typeof m[i]
+        ? decodeURIComponent(m[i])
+        : m[i];
+    } catch(e) {
+      var err = new Error(""Failed to decode param '"" + m[i] + ""'"");
+      err.status = 400;
+      throw err;
+    }","-    , params = this.params = []
-    , m = this.regexp.exec(path);
+    , params = this.params = {}
+    , m = this.regexp.exec(path)
+    , n = 0;
-      params.push(val);
+      params[n++] = val;","-    , params = this.params = []
-    , m = this.regexp.exec(path);
+    , params = this.params = {}
+    , m = this.regexp.exec(path)
+    , n = 0;
-    var val = 'string' == typeof m[i]
-      ? utils.decode(m[i])
-      : m[i];
+    try {
+      var val = 'string' == typeof m[i]
+        ? decodeURIComponent(m[i])
+        : m[i];
+    } catch(e) {
+      var err = new Error(""Failed to decode param '"" + m[i] + ""'"");
+      err.status = 400;
+      throw err;
+    }
-      params.push(val);
+      params[n++] = val;"
expressjs_express,3f14b4de1f65c1983780ef4c54d8513174591142,Merge pull request #1835 from visionmedia/change-req-params-to-object  change req.params to an object instead of an array,test/app.router.js,"-  it('should decode params', function(done){
-    var app = express();
-
-    app.get('/:name', function(req, res, next){
-      res.send(req.params.name);
-    });
-
-    request(app)
-    .get('/foo%2Fbar')
-    .expect('foo/bar', done);
-  })
-
-  it('should accept params in malformed paths', function(done) {
-    var app = express();
-
-    app.get('/:name', function(req, res, next){
-      res.send(req.params.name);
-    });
-
-    request(app)
-    .get('/%foobar')
-    .expect('%foobar', done);
+  describe('decode querystring', function(){
+    it('should decode correct params', function(done){
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/foo%2Fbar')
+      .expect('foo/bar', done);
+    })
+
+    it('should not accept params in malformed paths', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/%foobar')
+      .expect(400, done);
+    })
+
+    it('should not decode spaces', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/foo+bar')
+      .expect('foo+bar', done);
+    })
+
+    it('should work with unicode', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/%ce%b1')
+      .expect('\u03b1', done);
+    })","-        var id = req.params.shift()
-          , op = req.params.shift();
+        var id = req.params[0]
+          , op = req.params[1];
-        var resource = req.params.shift()
-          , format = req.params.shift();
+        var resource = req.params[0]
+          , format = req.params[1];","-  it('should decode params', function(done){
-    var app = express();
-
-    app.get('/:name', function(req, res, next){
-      res.send(req.params.name);
-    });
-
-    request(app)
-    .get('/foo%2Fbar')
-    .expect('foo/bar', done);
-  })
-
-  it('should accept params in malformed paths', function(done) {
-    var app = express();
-
-    app.get('/:name', function(req, res, next){
-      res.send(req.params.name);
-    });
-
-    request(app)
-    .get('/%foobar')
-    .expect('%foobar', done);
+  describe('decode querystring', function(){
+    it('should decode correct params', function(done){
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/foo%2Fbar')
+      .expect('foo/bar', done);
+    })
+
+    it('should not accept params in malformed paths', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/%foobar')
+      .expect(400, done);
+    })
+
+    it('should not decode spaces', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/foo+bar')
+      .expect('foo+bar', done);
+    })
+
+    it('should work with unicode', function(done) {
+      var app = express();
+
+      app.get('/:name', function(req, res, next){
+        res.send(req.params.name);
+      });
+
+      request(app)
+      .get('/%ce%b1')
+      .expect('\u03b1', done);
+    })
-        var id = req.params.shift()
-          , op = req.params.shift();
+        var id = req.params[0]
+          , op = req.params[1];
-        var resource = req.params.shift()
-          , format = req.params.shift();
+        var resource = req.params[0]
+          , format = req.params[1];"
expressjs_express,3ea7381deabe68c1bd7586aa63042883576fb1f7,Merge pull request #1711 from jonjenkins/master  Fixes from pull request #1643,lib/response.js,"+
+  // settings
+  var app = this.app;
-  if (len > 1024 && 'GET' == req.method) {
+  if (app.settings.etag && len > 1024 && 'GET' == req.method) {","-    if (callback instanceof Array) callback = callback[0];
+    if (Array.isArray(callback)) callback = callback[0];","+
+  // settings
+  var app = this.app;
-  if (len > 1024 && 'GET' == req.method) {
+  if (app.settings.etag && len > 1024 && 'GET' == req.method) {
-    if (callback instanceof Array) callback = callback[0];
+    if (Array.isArray(callback)) callback = callback[0];"
expressjs_express,5aa967012001807a3620202182d6a7c1f4298475,Merge pull request #1685 from CharlesHolbrow/master  Fix typo in app.param comment,lib/application.js,+  this.enable('etag');,"- * The callback uses the samesignature as middleware, the only differencing
+ * The callback uses the same signature as middleware, the only differencing","+  this.enable('etag');
- * The callback uses the samesignature as middleware, the only differencing
+ * The callback uses the same signature as middleware, the only differencing"
expressjs_express,26802a689cbd20c9b2c5b7760205a7f57a381e77,fix package.json conflict,package.json,"-  ""version"": ""3.3.1"",
+  ""version"": ""3.3.3"",
-    ""connect"": ""2.8.1"",
+    ""connect"": ""2.8.3"",
-    ""send"": ""0.1.1"",
+    ""send"": ""0.1.2"",","-    ""commander"": ""0.6.1"",
+    ""commander"": ""1.2.0"",
-    ""mkdirp"": ""0.3.4"",
+    ""mkdirp"": ""0.3.5"",","-  ""version"": ""3.3.1"",
+  ""version"": ""3.3.3"",
-    ""connect"": ""2.8.1"",
-    ""commander"": ""0.6.1"",
+    ""connect"": ""2.8.3"",
+    ""commander"": ""1.2.0"",
-    ""mkdirp"": ""0.3.4"",
+    ""mkdirp"": ""0.3.5"",
-    ""send"": ""0.1.1"",
+    ""send"": ""0.1.2"","
expressjs_express,c805d80a9bff33891c0a307242dd2e02c01a7255,Merge pull request #1592 from bartsqueezy/eb1bbb9  Removing dependency which is no longer supported,package.json,"-  ""version"": ""3.2.0"",
+  ""version"": ""3.2.4"",
-    ""connect"": ""2.7.6"",
+    ""connect"": ""2.7.9"",
-    ""cookie"": ""0.0.5"",
+    ""cookie"": ""0.1.0"",
-    ""debug"": ""*"",
-    ""qs"": ""0.6.1""
+    ""debug"": ""*""","-    ""github-flavored-markdown"": ""*"",
+    ""marked"": ""*"",","-  ""version"": ""3.2.0"",
+  ""version"": ""3.2.4"",
-    ""connect"": ""2.7.6"",
+    ""connect"": ""2.7.9"",
-    ""cookie"": ""0.0.5"",
+    ""cookie"": ""0.1.0"",
-    ""debug"": ""*"",
-    ""qs"": ""0.6.1""
+    ""debug"": ""*""
-    ""github-flavored-markdown"": ""*"",
+    ""marked"": ""*"","
expressjs_express,d876778d22cbda402cf2e3c4effaf1131fb28fd6,Merge pull request #1597 from Cauldrath/cookie_version  Version bump for node-cookie,package.json,"-  ""version"": ""3.2.1"",
+  ""version"": ""3.2.4"",
-    ""connect"": ""2.7.7"",
+    ""connect"": ""2.7.9"",
-    ""debug"": ""*"",
-    ""qs"": ""0.6.1""
+    ""debug"": ""*""","-    ""cookie"": ""0.0.5"",
+    ""cookie"": ""0.1.0"",","-  ""version"": ""3.2.1"",
+  ""version"": ""3.2.4"",
-    ""connect"": ""2.7.7"",
+    ""connect"": ""2.7.9"",
-    ""cookie"": ""0.0.5"",
+    ""cookie"": ""0.1.0"",
-    ""debug"": ""*"",
-    ""qs"": ""0.6.1""
+    ""debug"": ""*"""
expressjs_express,2db135dfc7c6057842e242b303106873b9398780,Merge pull request #1566 from daguej/v8-context-fix  Possible fix for #1557,lib/utils.js,"- *  
- * This is used for `app.locals` and `res.locals`. 
+ *
+ * This is used for `app.locals` and `res.locals`.
- * @return {String}
+ * @return {Object}
-  return ~type.indexOf('/') ? type : mime.lookup(type);
+  return ~type.indexOf('/')
+    ? acceptParams(type)
+    : { value: mime.lookup(type), params: {} };
-    ret.push(~types[i].indexOf('/')
-      ? types[i]
-      : mime.lookup(types[i]));
+    ret.push(exports.normalizeType(types[i]));
-      if (exports.accept(normalized[j].split('/'), accepted[i])) {
+      if (exports.accept(normalized[j], accepted[i])) {
- * @param {Array} type
+ * @param {Object} type
-  return (type[0] == other.type || '*' == other.type)
-    && (type[1] == other.subtype || '*' == other.subtype);
-};
+  var t = type.value.split('/');
+  return (t[0] == other.type || '*' == other.type)
+    && (t[1] == other.subtype || '*' == other.subtype)
+    && paramsEqual(type.params, other.params);
+};
+
+/**
+ * Check if accept params are equal.
+ *
+ * @param {Object} a
+ * @param {Object} b
+ * @return {Boolean}
+ * @api private
+ */
+
+function paramsEqual(a, b){
+  return !Object.keys(a).some(function(k) {
+    return a[k] != b[k];
+  });
+}
-    .parseQuality(str)
+    .parseParams(str)
- * array of objects with `.value` and
- * `.quality`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseQuality = function(str){
+ * array of objects with `.value`,
+ * `.quality` and optional `.params`
+ *
+ * @param {String} str
+ * @return {Array}
+ * @api private
+ */
+
+exports.parseParams = function(str){
-    .map(quality)
+    .map(acceptParams)
-      return b.quality - a.quality;
+      if (a.quality === b.quality) {
+        return a.originalIndex - b.originalIndex;
+      } else {
+        return b.quality - a.quality;
+      }
- * Parse quality `str` returning an
- * object with `.value` and `.quality`.
+ * Parse accept params `str` returning an
+ * object with `.value`, `.quality` and `.params`.
+ * also includes `.originalIndex` for stable sorting
-function quality(str) {
-  var parts = str.split(/ *; */)
-    , val = parts[0];
-
-  var q = parts[1]
-    ? parseFloat(parts[1].split(/ *= */)[1])
-    : 1;
-
-  return { value: val, quality: q };
+function acceptParams(str, index) {
+  var parts = str.split(/ *; */);
+  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };
+
+  for (var i = 1; i < parts.length; ++i) {
+    var pms = parts[i].split(/ *= */);
+    if ('q' == pms[0]) {
+      ret.quality = parseFloat(pms[1]);
+    } else {
+      ret.params[pms[0]] = pms[1];
+    }
+  }
+
+  return ret;","-  if (path instanceof RegExp) return path;
+  if (Object.prototype.toString.call(path) == '[object RegExp]') return path; // see #1557","- *  
- * This is used for `app.locals` and `res.locals`. 
+ *
+ * This is used for `app.locals` and `res.locals`.
- * @return {String}
+ * @return {Object}
-  return ~type.indexOf('/') ? type : mime.lookup(type);
+  return ~type.indexOf('/')
+    ? acceptParams(type)
+    : { value: mime.lookup(type), params: {} };
-    ret.push(~types[i].indexOf('/')
-      ? types[i]
-      : mime.lookup(types[i]));
+    ret.push(exports.normalizeType(types[i]));
-      if (exports.accept(normalized[j].split('/'), accepted[i])) {
+      if (exports.accept(normalized[j], accepted[i])) {
- * @param {Array} type
+ * @param {Object} type
-  return (type[0] == other.type || '*' == other.type)
-    && (type[1] == other.subtype || '*' == other.subtype);
-};
+  var t = type.value.split('/');
+  return (t[0] == other.type || '*' == other.type)
+    && (t[1] == other.subtype || '*' == other.subtype)
+    && paramsEqual(type.params, other.params);
+};
+
+/**
+ * Check if accept params are equal.
+ *
+ * @param {Object} a
+ * @param {Object} b
+ * @return {Boolean}
+ * @api private
+ */
+
+function paramsEqual(a, b){
+  return !Object.keys(a).some(function(k) {
+    return a[k] != b[k];
+  });
+}
-    .parseQuality(str)
+    .parseParams(str)
- * array of objects with `.value` and
- * `.quality`.
- *
- * @param {Type} name
- * @return {Type}
- * @api private
- */
-
-exports.parseQuality = function(str){
+ * array of objects with `.value`,
+ * `.quality` and optional `.params`
+ *
+ * @param {String} str
+ * @return {Array}
+ * @api private
+ */
+
+exports.parseParams = function(str){
-    .map(quality)
+    .map(acceptParams)
-      return b.quality - a.quality;
+      if (a.quality === b.quality) {
+        return a.originalIndex - b.originalIndex;
+      } else {
+        return b.quality - a.quality;
+      }
- * Parse quality `str` returning an
- * object with `.value` and `.quality`.
+ * Parse accept params `str` returning an
+ * object with `.value`, `.quality` and `.params`.
+ * also includes `.originalIndex` for stable sorting
-function quality(str) {
-  var parts = str.split(/ *; */)
-    , val = parts[0];
-
-  var q = parts[1]
-    ? parseFloat(parts[1].split(/ *= */)[1])
-    : 1;
-
-  return { value: val, quality: q };
+function acceptParams(str, index) {
+  var parts = str.split(/ *; */);
+  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };
+
+  for (var i = 1; i < parts.length; ++i) {
+    var pms = parts[i].split(/ *= */);
+    if ('q' == pms[0]) {
+      ret.quality = parseFloat(pms[1]);
+    } else {
+      ret.params[pms[0]] = pms[1];
+    }
+  }
+
+  return ret;
-  if (path instanceof RegExp) return path;
+  if (Object.prototype.toString.call(path) == '[object RegExp]') return path; // see #1557"
expressjs_express,82731dae6e316b791e7ad31df4625047864cd4a7,Merge pull request #1503 from shesek/settings-inheritance  Inherit settings from parent application using [[Prototype]],lib/application.js,"-  this.viewCallbacks = [];
- * work seeessly within Express.
+ * work seamlessly within Express.
-    // if no router attacked yet, attach the router
+    // if no router attached yet, attach the router","+    this.settings.__proto__ = parent.settings;
-    if (this.settings.hasOwnProperty(setting)) {
-      return this.settings[setting];
-    } else if (this.parent) {
-      return this.parent.set(setting);
-    }
+    return this.settings[setting];","-  this.viewCallbacks = [];
+    this.settings.__proto__ = parent.settings;
- * work seeessly within Express.
+ * work seamlessly within Express.
-    if (this.settings.hasOwnProperty(setting)) {
-      return this.settings[setting];
-    } else if (this.parent) {
-      return this.parent.set(setting);
-    }
+    return this.settings[setting];
-    // if no router attacked yet, attach the router
+    // if no router attached yet, attach the router"
expressjs_express,b7afa4f0f411d74155465079b2a4373331deedd6,Merge pull request #1523 from thomseddon/fix-whitespace  Remove some superfluous trailing whitespace,lib/utils.js,"-  obj.viewCallbacks = obj.viewCallbacks || [];
-","- *  
- * This is used for `app.locals` and `res.locals`. 
+ *
+ * This is used for `app.locals` and `res.locals`.","- *  
- * This is used for `app.locals` and `res.locals`. 
+ *
+ * This is used for `app.locals` and `res.locals`.
-  obj.viewCallbacks = obj.viewCallbacks || [];
-"
expressjs_express,9df93d6deca235774bc82dfbae4d85d1b55e4069,Merge pull request #1533 from shesek/old-viewcallbacks  Removed old references to viewCallbacks,lib/application.js,"+  this.set('subdomain offset', 2);
- * work seemlessly within Express.
+ * work seamlessly within Express.
-    // if no router attacked yet, attach the router
+    // if no router attached yet, attach the router",-  this.viewCallbacks = [];,"-  this.viewCallbacks = [];
+  this.set('subdomain offset', 2);
- * work seemlessly within Express.
+ * work seamlessly within Express.
-    // if no router attacked yet, attach the router
+    // if no router attached yet, attach the router"
expressjs_express,57cda1578da747f440be6a9c4fba5d5068e07193,Merge pull request #1477 from gmethvin/set_array  Allow setting an array of header values in the response,lib/response.js,"-/**
- * Redirect to the given `url` with optional response `status`
- * defaulting to 302.
+
+/**
+ * Set the location header to `url`.
+ *
+ * Examples:
+ *
+ *    res.location('/foo/bar').;
+ *    res.location('http://example.com');
+ *    res.location('../login'); // /blog/post/1 -> /blog/login
+ *
+ * Mounting:
+ *
+ *   When an application is mounted and `res.location()`
+ *   is given a path that does _not_ lead with ""/"" it becomes
+ *   relative to the mount-point. For example if the application
+ *   is mounted at ""/blog"", the following would become ""/blog/login"".
+ *
+ *      res.location('login');
+ *
+ *   While the leading slash would result in a location of ""/login"":
+ *
+ *      res.location('/login');
+ *
+ * @param {String} url
+ * @api public
+ */
+
+res.location = function(url){
+  var app = this.app
+    , req = this.req;
+
+  // setup redirect map
+  var map = { back: req.get('Referrer') || '/' };
+
+  // perform redirect
+  url = map[url] || url;
+
+  // relative
+  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
+    var path = app.path();
+
+    // relative to path
+    if ('.' == url[0]) {
+      url = req.path + '/' + url;
+    // relative to mount-point
+    } else if ('/' != url[0]) {
+      url = path + '/' + url;
+    }
+  }
+
+  // Respond
+  this.set('Location', url);
+  return this;
+};
+
+/**
+ * Redirect to the given `url` with optional response `status`
+ * defaulting to 302.
+ *
+ * The resulting `url` is determined by `res.location()`, so
+ * it will play nicely with mounted apps, relative paths,
+ * `""back""` etc.
- * Mounting:
- *
- *   When an application is mounted, and `res.redirect()`
- *   is given a path that does _not_ lead with ""/"". For
- *   example suppose a ""blog"" app is mounted at ""/blog"",
- *   the following redirect would result in ""/blog/login"":
- *
- *      res.redirect('login');
- *
- *   While the leading slash would result in a redirect to ""/login"":
- *
- *      res.redirect('/login');
- *
-    , req = this.req
-    , head = 'HEAD' == req.method
+    , head = 'HEAD' == this.req.method
-  // setup redirect map
-  var map = { back: req.get('Referrer') || '/' };
-
-  // perform redirect
-  url = map[url] || url;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    var path = app.path();
-
-    // relative to path
-    if ('.' == url[0]) {
-      url = req.path + '/' + url;
-    // relative to mount-point
-    } else if ('/' != url[0]) {
-      url = path + '/' + url;
-    }
-  }
+  // Set location header
+  this.location(url);
+  url = this.get('Location');
-  this.set('Location', url);","-res.header = function(field, val){
+res.header = function header(field, val){
-    this.setHeader(field, '' + val);
+    this.setHeader(field, Array.isArray(val) ? val.map(String) : String(val));
-      this.setHeader(key, '' + field[key]);
+      header.call(this, key, field[key]);","-res.header = function(field, val){
+res.header = function header(field, val){
-    this.setHeader(field, '' + val);
+    this.setHeader(field, Array.isArray(val) ? val.map(String) : String(val));
-      this.setHeader(key, '' + field[key]);
+      header.call(this, key, field[key]);
-/**
- * Redirect to the given `url` with optional response `status`
- * defaulting to 302.
+
+/**
+ * Set the location header to `url`.
+ *
+ * Examples:
+ *
+ *    res.location('/foo/bar').;
+ *    res.location('http://example.com');
+ *    res.location('../login'); // /blog/post/1 -> /blog/login
+ *
+ * Mounting:
+ *
+ *   When an application is mounted and `res.location()`
+ *   is given a path that does _not_ lead with ""/"" it becomes
+ *   relative to the mount-point. For example if the application
+ *   is mounted at ""/blog"", the following would become ""/blog/login"".
+ *
+ *      res.location('login');
+ *
+ *   While the leading slash would result in a location of ""/login"":
+ *
+ *      res.location('/login');
+ *
+ * @param {String} url
+ * @api public
+ */
+
+res.location = function(url){
+  var app = this.app
+    , req = this.req;
+
+  // setup redirect map
+  var map = { back: req.get('Referrer') || '/' };
+
+  // perform redirect
+  url = map[url] || url;
+
+  // relative
+  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
+    var path = app.path();
+
+    // relative to path
+    if ('.' == url[0]) {
+      url = req.path + '/' + url;
+    // relative to mount-point
+    } else if ('/' != url[0]) {
+      url = path + '/' + url;
+    }
+  }
+
+  // Respond
+  this.set('Location', url);
+  return this;
+};
+
+/**
+ * Redirect to the given `url` with optional response `status`
+ * defaulting to 302.
+ *
+ * The resulting `url` is determined by `res.location()`, so
+ * it will play nicely with mounted apps, relative paths,
+ * `""back""` etc.
- * Mounting:
- *
- *   When an application is mounted, and `res.redirect()`
- *   is given a path that does _not_ lead with ""/"". For
- *   example suppose a ""blog"" app is mounted at ""/blog"",
- *   the following redirect would result in ""/blog/login"":
- *
- *      res.redirect('login');
- *
- *   While the leading slash would result in a redirect to ""/login"":
- *
- *      res.redirect('/login');
- *
-    , req = this.req
-    , head = 'HEAD' == req.method
+    , head = 'HEAD' == this.req.method
-  // setup redirect map
-  var map = { back: req.get('Referrer') || '/' };
-
-  // perform redirect
-  url = map[url] || url;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    var path = app.path();
-
-    // relative to path
-    if ('.' == url[0]) {
-      url = req.path + '/' + url;
-    // relative to mount-point
-    } else if ('/' != url[0]) {
-      url = path + '/' + url;
-    }
-  }
+  // Set location header
+  this.location(url);
+  url = this.get('Location');
-  this.set('Location', url);"
expressjs_express,49abd7bec1cd02ae686ceb7c60c70a23f5ec5399,merge,lib/response.js,"-  
+
-  
+
- * 
+ *
- *     
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- * Aliased as `res.header()`. 
+ * Aliased as `res.header()`.
-res.set = 
+res.set =
- *   is given a path that does _not_ lead with ""/"". For 
+ *   is given a path that does _not_ lead with ""/"". For","-  
+
-  
+
- * 
+ *
- *     
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- * Aliased as `res.header()`. 
+ * Aliased as `res.header()`.
-res.set = 
+res.set =
-/**
- * Redirect to the given `url` with optional response `status`
- * defaulting to 302.
+
+/**
+ * Set the location header to `url`.
+ *
+ * Examples:
+ *
+ *    res.location('/foo/bar').;
+ *    res.location('http://example.com');
+ *    res.location('../login'); // /blog/post/1 -> /blog/login
+ *
+ * Mounting:
+ *
+ *   When an application is mounted, and `res.location()`
+ *   is given a path that does _not_ lead with ""/"". For 
+ *   example suppose a ""blog"" app is mounted at ""/blog"",
+ *   the following call to `res.location()` would result
+ *   in ""/blog/login"":
+ *
+ *      res.location('login');
+ *
+ *   While the leading slash would result in a location of ""/login"":
+ *
+ *      res.location('/login');
+ *
+ * @param {String} url
+ * @api public
+ */
+
+res.location = function(url){
+  var app = this.app
+    , req = this.req;
+
+  // setup redirect map
+  var map = { back: req.get('Referrer') || '/' };
+
+  // perform redirect
+  url = map[url] || url;
+
+  // relative
+  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
+    var path = app.path();
+
+    // relative to path
+    if ('.' == url[0]) {
+      url = req.path + '/' + url;
+    // relative to mount-point
+    } else if ('/' != url[0]) {
+      url = path + '/' + url;
+    }
+  }
+
+  // Respond
+  this.set('Location', url);
+  return this;
+};
+
+/**
+ * Redirect to the given `url` with optional response `status`
+ * defaulting to 302.
+ *
+ * The resulting `url` is determined by `res.location()`, so
+ * it will play nicely with mounted apps, relative paths,
+ * `""back""` etc.
- * Mounting:
- *
- *   When an application is mounted, and `res.redirect()`
- *   is given a path that does _not_ lead with ""/"". For 
- *   example suppose a ""blog"" app is mounted at ""/blog"",
- *   the following redirect would result in ""/blog/login"":
- *
- *      res.redirect('login');
- *
- *   While the leading slash would result in a redirect to ""/login"":
- *
- *      res.redirect('/login');
- *
-    , req = this.req
-    , head = 'HEAD' == req.method
+    , head = 'HEAD' == this.req.method
-  // setup redirect map
-  var map = { back: req.get('Referrer') || '/' };
-
-  // perform redirect
-  url = map[url] || url;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    var path = app.path();
-
-    // relative to path
-    if ('.' == url[0]) {
-      url = req.path + '/' + url;
-    // relative to mount-point
-    } else if ('/' != url[0]) {
-      url = path + '/' + url;
-    }
-  }
+  // Set location header
+  this.location(url);
+  url = this.get('Location');
-  this.set('Location', url);","-  
+
-  
+
- * 
+ *
- *     
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- *    
+ *
- * Aliased as `res.header()`. 
+ * Aliased as `res.header()`.
-res.set = 
+res.set =
-/**
- * Redirect to the given `url` with optional response `status`
- * defaulting to 302.
+
+/**
+ * Set the location header to `url`.
+ *
+ * Examples:
+ *
+ *    res.location('/foo/bar').;
+ *    res.location('http://example.com');
+ *    res.location('../login'); // /blog/post/1 -> /blog/login
+ *
+ * Mounting:
+ *
+ *   When an application is mounted and `res.location()`
+ *   is given a path that does _not_ lead with ""/"" it becomes
+ *   relative to the mount-point. For example if the application
+ *   is mounted at ""/blog"", the following would become ""/blog/login"".
+ *
+ *      res.location('login');
+ *
+ *   While the leading slash would result in a location of ""/login"":
+ *
+ *      res.location('/login');
+ *
+ * @param {String} url
+ * @api public
+ */
+
+res.location = function(url){
+  var app = this.app
+    , req = this.req;
+
+  // setup redirect map
+  var map = { back: req.get('Referrer') || '/' };
+
+  // perform redirect
+  url = map[url] || url;
+
+  // relative
+  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
+    var path = app.path();
+
+    // relative to path
+    if ('.' == url[0]) {
+      url = req.path + '/' + url;
+    // relative to mount-point
+    } else if ('/' != url[0]) {
+      url = path + '/' + url;
+    }
+  }
+
+  // Respond
+  this.set('Location', url);
+  return this;
+};
+
+/**
+ * Redirect to the given `url` with optional response `status`
+ * defaulting to 302.
+ *
+ * The resulting `url` is determined by `res.location()`, so
+ * it will play nicely with mounted apps, relative paths,
+ * `""back""` etc.
- * Mounting:
- *
- *   When an application is mounted, and `res.redirect()`
- *   is given a path that does _not_ lead with ""/"". For 
- *   example suppose a ""blog"" app is mounted at ""/blog"",
- *   the following redirect would result in ""/blog/login"":
- *
- *      res.redirect('login');
- *
- *   While the leading slash would result in a redirect to ""/login"":
- *
- *      res.redirect('/login');
- *
-    , req = this.req
-    , head = 'HEAD' == req.method
+    , head = 'HEAD' == this.req.method
-  // setup redirect map
-  var map = { back: req.get('Referrer') || '/' };
-
-  // perform redirect
-  url = map[url] || url;
-
-  // relative
-  if (!~url.indexOf('://') && 0 != url.indexOf('//')) {
-    var path = app.path();
-
-    // relative to path
-    if ('.' == url[0]) {
-      url = req.path + '/' + url;
-    // relative to mount-point
-    } else if ('/' != url[0]) {
-      url = path + '/' + url;
-    }
-  }
+  // Set location header
+  this.location(url);
+  url = this.get('Location');
-  this.set('Location', url);"
expressjs_express,e2ad0d3d6e7cd3d47a81030e01f47d324af4e2bd,merge,package.json,"-  ""version"": ""3.0.1"",
+  ""version"": ""3.0.3"",
-    ""connect"": ""2.6.2"",
+    ""connect"": ""2.7.0"",
-    ""cookie"": ""0.0.4"",
+    ""cookie"": ""0.0.5"",","-    ""crc"": ""0.2.0"",
+    ""buffer-crc32"": ""0.1.1"",","-  ""version"": ""3.0.1"",
+  ""version"": ""3.0.3"",
-  ""contributors"": [ 
-    { ""name"": ""TJ Holowaychuk"", ""email"": ""tj@vision-media.ca"" }, 
+  ""contributors"": [
+    { ""name"": ""TJ Holowaychuk"", ""email"": ""tj@vision-media.ca"" },
-    ""connect"": ""2.6.2"",
+    ""connect"": ""2.7.0"",
-    ""cookie"": ""0.0.4"",
-    ""crc"": ""0.2.0"",
+    ""cookie"": ""0.0.5"",
+    ""buffer-crc32"": ""0.1.1"","
expressjs_express,c8526932f3658cfde30079298ebb132eca353b10,Merge branch 'master' of github.com:visionmedia/express,lib/response.js,+  options.maxAge /= 1000;,"-      body = statusCodes[status] + '. Redirecting to ' + url;
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);","+  options.maxAge /= 1000;
-      body = statusCodes[status] + '. Redirecting to ' + url;
+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);"
expressjs_express,2d49c0d1f38e2291be30a132e3c7f05ea0f21d84,Merge branch 'master' of github.com:visionmedia/express,lib/application.js,"-    return this._router.route.apply(this._router, args);
-  }
+    this._router.route.apply(this._router, args);
+    return this;
+  };","-  , url = require('url')
-  , join = path.join
-  , fs = require('fs');
+  , join = path.join;
-  var self = this;
-  var app, home, handle;
+  var app, handle;
-  var self = this
-    , opts = {}
+  var opts = {}","-  , url = require('url')
-  , join = path.join
-  , fs = require('fs');
+  , join = path.join;
-  var self = this;
-  var app, home, handle;
+  var app, handle;
-    return this._router.route.apply(this._router, args);
-  }
+    this._router.route.apply(this._router, args);
+    return this;
+  };
-  var self = this
-    , opts = {}
+  var opts = {}"
expressjs_express,2d49c0d1f38e2291be30a132e3c7f05ea0f21d84,Merge branch 'master' of github.com:visionmedia/express,lib/response.js,"+  , sign = require('cookie-signature').sign
-  if (signed) val = 's:' + utils.sign(val, secret);
+  if (signed) val = 's:' + sign(val, secret);","-var fs = require('fs')
-  , http = require('http')
+var http = require('http')
-  , crc = require('crc')","-var fs = require('fs')
-  , http = require('http')
+var http = require('http')
+  , sign = require('cookie-signature').sign
-  , crc = require('crc')
-  if (signed) val = 's:' + utils.sign(val, secret);
+  if (signed) val = 's:' + sign(val, secret);"
expressjs_express,363d0d4f41620443efdbed2ef15982d5f528625d,Merge branch 'master' of github.com:visionmedia/express,lib/application.js,+  this.enable('x-powered-by');,"- *    http.createServer({ ... }, app).listen(443);
+ *    https.createServer({ ... }, app).listen(443);","+  this.enable('x-powered-by');
- *    http.createServer({ ... }, app).listen(443);
+ *    https.createServer({ ... }, app).listen(443);"
expressjs_express,442e782692da3815bef3b45769d2adca5262d783,Merge pull request #1176 from nullfirm/master  add hogan.js template engine for express@3.0,package.json,"-    ""connect"": ""2.3.2"",
+    ""connect"": ""2.3.3"",","+    ""hjs"": ""*"",","-    ""connect"": ""2.3.2"",
+    ""connect"": ""2.3.3"",
+    ""hjs"": ""*"","
expressjs_express,0acee673391640c40cd258321564485dd55e3f62,Merge branch 'master' of github.com:visionmedia/express,lib/response.js,"-  , mime = require('mime')
+  , mime = connect.mime","- * an object of of header fields.
+ * an object of header fields.","-  , mime = require('mime')
+  , mime = connect.mime
- * an object of of header fields.
+ * an object of header fields."
expressjs_express,7a329204485b5f0173b0763ad9b800b9ceb0e4ec,Merge branch 'master' of github.com:visionmedia/express,package.json,"-    ""commander"": ""0.3.2"",
-    ""mime"": "">= 1.2.2"",
-    ""qs"": "">= 0.3.2"",
-    ""mkdirp"": ""0.0.7""
+    ""commander"": ""0.5.1"",
+    ""mime"": "">= 1.2.4"",
+    ""qs"": "">= 0.4.0"",
+    ""mkdirp"": ""0.2.2""
-    ""connect-form"": ""0.2.1"",","-    ""connect-form"": ""0.2.1"",
-  ""scripts"": { ""prepublish"" : ""npm prune"" },
+  ""scripts"": {
+    ""prepublish"" : ""npm prune"",
+    ""test"": ""make test""
+  },","-    ""commander"": ""0.3.2"",
-    ""mime"": "">= 1.2.2"",
-    ""qs"": "">= 0.3.2"",
-    ""mkdirp"": ""0.0.7""
+    ""commander"": ""0.5.1"",
+    ""mime"": "">= 1.2.4"",
+    ""qs"": "">= 0.4.0"",
+    ""mkdirp"": ""0.2.2""
-    ""connect-form"": ""0.2.1"",
-  ""scripts"": { ""prepublish"" : ""npm prune"" },
+  ""scripts"": {
+    ""prepublish"" : ""npm prune"",
+    ""test"": ""make test""
+  },"
expressjs_express,547d18ce46ec4bc6592b125202984950f769b4db,merged,package.json,"-    ""mocha"": ""0.0.1-alpha5"",
+    ""mocha"": ""0.0.1"",","-    ""mocha"": ""0.0.1-alpha5"",
+    ""mocha"": ""0.0.1-alpha6"",","-    ""mocha"": ""0.0.1-alpha5"",
+    ""mocha"": ""*"","
expressjs_express,8ef6a0b4326f901d1871f88554bf3de6f0b9d60b,"Merge branch 'master' of http://github.com/visionmedia/express  * 'master' of http://github.com/visionmedia/express: (168 commits)   Updated haml submodule   s/==/===/   Misc refactoring to make parseCookie() more readable / spec for overriding keys   s/QueryString/queryString/   Added spec for malformed cookies   regexps have no ""n"" flag   No need to quote key in spec   Fixed LF -> CRLF for setting multiple cookies   Redo cookies parsing to accept quoted values and url escaped cookies   Remove inode from ETag, modified time only   Release 0.11.0   Works fine with node --version v0.1.94   Refactoring some spec fixtures   Fixing spec for EJS partial   Updated ext   Updated haml   Added spec / refactored layout of different engine support   Added spec for layouts with different engines   Fixing EJS partial support by passing along the context. Issue #307   Allow layouts to use different engines   ...  Conflicts: 	lib/express/core.js",lib/express/core.js,"-    require('http')
+    this.http = require('http')
-      .listen(this.port, this.host, this.backlog)
+    this.http.listen(this.port, this.host, this.backlog)","-var multipart = require('multipart'),
+var Request = require('express/request').Request,
+    normalizePath = require('express/request').normalizePath,
+    multipart = require('old'),
-    events = require('events'),
+    http = require('http'),
+    sys = require('sys'),
-global.merge(require('sys'))
-global.merge(require('express/event'))
-global.merge(require('express/request'))
-global.merge(require('express/plugin'))
-global.merge(require('express/dsl'))
+Object.merge(global, require('express/plugin'))
+Object.merge(global, require('express/dsl'))
+    this.method = request.method.lowercase
-    if (this.request.method.toLowerCase() == route.method)
+    if (this.method === route.method)
-  host: 'localhost',
-  
-  /**
-   * Maximum number of queued connections.
-   */
-  
-  backlog: 128,
-  
-  /**
-   * Run Express.
-   *
-   *  - Buffers request bodies
-   *  - Calls #route() once the request is complete
+  host: null,
+  
+  /**
+   * Run Express with optional _port_ defaulting to 3000,
+   * and host defaulting to null (INADDR_ANY).
-   * @param  {int} backlog
+   * @return {Server}
-  run: function(port, host, backlog){
+  run: function(port, host){
-    if (backlog !== undefined) this.backlog = backlog
-    require('http')
+    var server = http
-        if (request.header('content-type') &&
-            request.header('content-type').includes('multipart/form-data')) {
+        if (request.header('Content-Type') &&
+            request.header('Content-Type').includes('multipart/form-data')) {
-              contentLength = parseInt(request.header('content-length')),
+              contentLength = parseInt(request.header('Content-Length')),
-                part.tempfile = '/tmp/express-' + Number(new Date) + utils.uid(),
+                part.tempfile = '/tmp/express-' + Date.now() + utils.uid(),
-                stream.part.fileStream.write(chunk)
+                stream.part.fileStream.write(chunk, 'binary')
-                part.fileStream.close(function(){
+                part.fileStream.end(function(){
-      .listen(this.port, this.host, this.backlog)
-    puts('Express started at http://' + this.host + ':' + this.port + '/ in ' + Express.environment + ' mode')
+    server.listen(this.port, this.host)
+    sys.puts('Express started at http://' + (this.host || '*') + ':' + this.port + '/ in ' + Express.environment + ' mode')
+    return server
-      try {
+      try { 
-          request.halt(200, body, function(err){
-            if (err) request.error(err)
-          }) 
+          request.respond(200, body)
-      }  
+      }
-  version: '0.8.0',
+  version: '0.11.0',
+  enable('dump exceptions')
+  disable('dump exceptions')","-var multipart = require('multipart'),
+var Request = require('express/request').Request,
+    normalizePath = require('express/request').normalizePath,
+    multipart = require('old'),
-    events = require('events'),
+    http = require('http'),
+    sys = require('sys'),
-global.merge(require('sys'))
-global.merge(require('express/event'))
-global.merge(require('express/request'))
-global.merge(require('express/plugin'))
-global.merge(require('express/dsl'))
+Object.merge(global, require('express/plugin'))
+Object.merge(global, require('express/dsl'))
+    this.method = request.method.lowercase
-    if (this.request.method.toLowerCase() == route.method)
+    if (this.method === route.method)
-  host: 'localhost',
-  
-  /**
-   * Maximum number of queued connections.
-   */
-  
-  backlog: 128,
-  
-  /**
-   * Run Express.
-   *
-   *  - Buffers request bodies
-   *  - Calls #route() once the request is complete
+  host: null,
+  
+  /**
+   * Run Express with optional _port_ defaulting to 3000,
+   * and host defaulting to null (INADDR_ANY).
-   * @param  {int} backlog
+   * @return {Server}
-  run: function(port, host, backlog){
+  run: function(port, host){
-    if (backlog !== undefined) this.backlog = backlog
-    require('http')
+    var server = http
-        if (request.header('content-type') &&
-            request.header('content-type').includes('multipart/form-data')) {
+        if (request.header('Content-Type') &&
+            request.header('Content-Type').includes('multipart/form-data')) {
-              contentLength = parseInt(request.header('content-length')),
+              contentLength = parseInt(request.header('Content-Length')),
-                part.tempfile = '/tmp/express-' + Number(new Date) + utils.uid(),
+                part.tempfile = '/tmp/express-' + Date.now() + utils.uid(),
-                stream.part.fileStream.write(chunk)
+                stream.part.fileStream.write(chunk, 'binary')
-                part.fileStream.close(function(){
+                part.fileStream.end(function(){
-      .listen(this.port, this.host, this.backlog)
-    puts('Express started at http://' + this.host + ':' + this.port + '/ in ' + Express.environment + ' mode')
+    server.listen(this.port, this.host)
+    sys.puts('Express started at http://' + (this.host || '*') + ':' + this.port + '/ in ' + Express.environment + ' mode')
+    return server
-      try {
+      try { 
-          request.halt(200, body, function(err){
-            if (err) request.error(err)
-          }) 
+          request.respond(200, body)
-      }  
+      }
-  version: '0.8.0',
+  version: '0.11.0',
+  enable('dump exceptions')
+  disable('dump exceptions')"
expressjs_express,a180efeca72d7a6d77cbd3814561c4737546c1bd,Merge branch 'master' of git://github.com/tritonrc/express into integration,lib/express/plugins/cookie.js,"-        event.request.header('Set-Cookie', event.response.cookies.join('\nSet-Cookie: '))
+        event.request.header('Set-Cookie', event.response.cookies.join('\r\nSet-Cookie: '))","+var QueryString = require('querystring')
-exports.parseCookie = function(cookie) {
-  return cookie.replace(/^ *| *$/g, '').split(/ *; */).reduce(function(hash, pair){
-    var parts = pair.split(/ *= */)
-    hash[parts[0]] = parts[1]
-    return hash
+exports.parseCookie = function(cookieStr) {
+  return cookieStr.split(/[;,] */n).reduce(function(cookies, p) { 
+    var eqidx = p.indexOf('=')
+    if(eqidx == -1) return cookies //Probably want to log this
+    var k = QueryString.unescape(p.slice(0, eqidx).trim(), true)
+    var v = QueryString.unescape(p.slice(eqidx + 1).trim(), true)
+    var m = v.match(/^(""|')(.*)\1$/)
+    if(m) v = m[2].replace('\\'+m[1], m[1])
+    //RFC2109 states the most specific path will be
+    //listed first
+    if(!(cookie = cookies[k]))
+      cookies[k] = v
+    return cookies","+var QueryString = require('querystring')
-exports.parseCookie = function(cookie) {
-  return cookie.replace(/^ *| *$/g, '').split(/ *; */).reduce(function(hash, pair){
-    var parts = pair.split(/ *= */)
-    hash[parts[0]] = parts[1]
-    return hash
+exports.parseCookie = function(cookieStr) {
+  return cookieStr.split(/[;,] */n).reduce(function(cookies, p) { 
+    var eqidx = p.indexOf('=')
+    if(eqidx == -1) return cookies //Probably want to log this
+    var k = QueryString.unescape(p.slice(0, eqidx).trim(), true)
+    var v = QueryString.unescape(p.slice(eqidx + 1).trim(), true)
+    var m = v.match(/^(""|')(.*)\1$/)
+    if(m) v = m[2].replace('\\'+m[1], m[1])
+    //RFC2109 states the most specific path will be
+    //listed first
+    if(!(cookie = cookies[k]))
+      cookies[k] = v
+    return cookies
-        event.request.header('Set-Cookie', event.response.cookies.join('\nSet-Cookie: '))
+        event.request.header('Set-Cookie', event.response.cookies.join('\r\nSet-Cookie: '))"
expressjs_express,a180efeca72d7a6d77cbd3814561c4737546c1bd,Merge branch 'master' of git://github.com/tritonrc/express into integration,spec/spec.plugins.cookie.js,"-          get('/user').headers['Set-Cookie'].should.eql 'SID=732423sdfs73243; path=/; secure\nSet-Cookie: foo=bar; path=/'
+          get('/user').headers['Set-Cookie'].should.eql 'SID=732423sdfs73243; path=/; secure\r\nSet-Cookie: foo=bar; path=/'","+
+      it 'should support complex quoted values'
+        var attrs = 'SID=""123456789""; fbs_0011223355=""uid=0987654321&name=Test+User""'
+        parseCookie(attrs).should.eql { SID: '123456789', ""fbs_0011223355"": 'uid=0987654321&name=Test User' }
+      end","+
+      it 'should support complex quoted values'
+        var attrs = 'SID=""123456789""; fbs_0011223355=""uid=0987654321&name=Test+User""'
+        parseCookie(attrs).should.eql { SID: '123456789', ""fbs_0011223355"": 'uid=0987654321&name=Test User' }
+      end
-          get('/user').headers['Set-Cookie'].should.eql 'SID=732423sdfs73243; path=/; secure\nSet-Cookie: foo=bar; path=/'
+          get('/user').headers['Set-Cookie'].should.eql 'SID=732423sdfs73243; path=/; secure\r\nSet-Cookie: foo=bar; path=/'"
expressjs_express,cb8e704d5c4a4b5651c47a46d75e92bd05fdf8d5,Merged bdotdub/master,spec/spec.plugins.view.js,"+        describe 'given a full layout name'
+          it 'should render a layout of a different engine'
+            get('/', function(){
+                this.render('hello.html.haml', { layout: 'layout.html.ejs' })
+            })
+            get('/').body.should.include '<h2>Hello'
+            get('/').body.should.include '<p>'
+          end
+        end
+        
-                layout: 'layout.user',
+                layout: 'layout-user',","-        it 'should render a partial'
-          get('/', function(){
-            this.render('list.html.haml', { locals: { items: ['foo', 'bar'] }})
-          })
-          get('/').body.should.include '<ul>'
-          get('/').body.should.include '<li>foo'
-          get('/').body.should.include '<li>bar'
-        end
-        
-        it 'should render collections'
-          get('/', function(){
-            return this.partial('item.html.haml', {
-              collection: ['foo', 'bar']
-            })
-          })
-          get('/').body.should.include '<li>foo'
-          get('/').body.should.include '<li>bar'
-        end
-        
-        it 'should render collections with a given object name'
-          get('/', function(){
-            return this.partial('video.html.haml', {
-              collection: ['im a movie', 'im another movie'],
-              as: 'vid'
-            })
-          })
-          get('/').body.should.include '<li>im a movie'
-          get('/').body.should.include '<li>im another movie'
-        end
-        
-        it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
-          get('/', function(){
-            return this.partial('article.html.haml', {
-              collection: ['a', 'b', 'c']
-            })
-          })
-          get('/').body.should.include '<li class=""first"">a'
-          get('/').body.should.include '<li class=""1"">b'
-          get('/').body.should.include '<li class=""last"">c'
+        describe 'with EJS'
+          it 'should render a partial'
+            get('/', function(){
+              this.render('list.html.ejs', { locals: { items: ['foo', 'bar'] }})
+            })
+            get('/').body.should.include '<ul>'
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections'
+            get('/', function(){
+              return this.partial('item.html.ejs', {
+                collection: ['foo', 'bar']
+              })
+            })
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections with a given object name'
+            get('/', function(){
+              return this.partial('video.html.ejs', {
+                collection: ['im a movie', 'im another movie'],
+                as: 'vid'
+              })
+            })
+            get('/').body.should.include '<li>im a movie'
+            get('/').body.should.include '<li>im another movie'
+          end
+          
+          it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
+            get('/', function(){
+              return this.partial('article.html.ejs', {
+                collection: ['a', 'b', 'c']
+              })
+            })
+            get('/').body.should.include '<li class=""first"">a'
+            get('/').body.should.include '<li class=""1"">b'
+            get('/').body.should.include '<li class=""last"">c'
+          end
+        end
+        describe 'with Haml'
+          it 'should render a partial'
+            get('/', function(){
+              this.render('list.html.haml', { locals: { items: ['foo', 'bar'] }})
+            })
+            get('/').body.should.include '<ul>'
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections'
+            get('/', function(){
+              return this.partial('item.html.haml', {
+                collection: ['foo', 'bar']
+              })
+            })
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections with a given object name'
+            get('/', function(){
+              return this.partial('video.html.haml', {
+                collection: ['im a movie', 'im another movie'],
+                as: 'vid'
+              })
+            })
+            get('/').body.should.include '<li>im a movie'
+            get('/').body.should.include '<li>im another movie'
+          end
+          
+          it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
+            get('/', function(){
+              return this.partial('article.html.haml', {
+                collection: ['a', 'b', 'c']
+              })
+            })
+            get('/').body.should.include '<li class=""first"">a'
+            get('/').body.should.include '<li class=""1"">b'
+            get('/').body.should.include '<li class=""last"">c'
+          end","-        it 'should render a partial'
-          get('/', function(){
-            this.render('list.html.haml', { locals: { items: ['foo', 'bar'] }})
-          })
-          get('/').body.should.include '<ul>'
-          get('/').body.should.include '<li>foo'
-          get('/').body.should.include '<li>bar'
-        end
-        
-        it 'should render collections'
-          get('/', function(){
-            return this.partial('item.html.haml', {
-              collection: ['foo', 'bar']
-            })
-          })
-          get('/').body.should.include '<li>foo'
-          get('/').body.should.include '<li>bar'
-        end
-        
-        it 'should render collections with a given object name'
-          get('/', function(){
-            return this.partial('video.html.haml', {
-              collection: ['im a movie', 'im another movie'],
-              as: 'vid'
-            })
-          })
-          get('/').body.should.include '<li>im a movie'
-          get('/').body.should.include '<li>im another movie'
-        end
-        
-        it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
-          get('/', function(){
-            return this.partial('article.html.haml', {
-              collection: ['a', 'b', 'c']
-            })
-          })
-          get('/').body.should.include '<li class=""first"">a'
-          get('/').body.should.include '<li class=""1"">b'
-          get('/').body.should.include '<li class=""last"">c'
+        describe 'with EJS'
+          it 'should render a partial'
+            get('/', function(){
+              this.render('list.html.ejs', { locals: { items: ['foo', 'bar'] }})
+            })
+            get('/').body.should.include '<ul>'
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections'
+            get('/', function(){
+              return this.partial('item.html.ejs', {
+                collection: ['foo', 'bar']
+              })
+            })
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections with a given object name'
+            get('/', function(){
+              return this.partial('video.html.ejs', {
+                collection: ['im a movie', 'im another movie'],
+                as: 'vid'
+              })
+            })
+            get('/').body.should.include '<li>im a movie'
+            get('/').body.should.include '<li>im another movie'
+          end
+          
+          it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
+            get('/', function(){
+              return this.partial('article.html.ejs', {
+                collection: ['a', 'b', 'c']
+              })
+            })
+            get('/').body.should.include '<li class=""first"">a'
+            get('/').body.should.include '<li class=""1"">b'
+            get('/').body.should.include '<li class=""last"">c'
+          end
+        end
+        describe 'with Haml'
+          it 'should render a partial'
+            get('/', function(){
+              this.render('list.html.haml', { locals: { items: ['foo', 'bar'] }})
+            })
+            get('/').body.should.include '<ul>'
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections'
+            get('/', function(){
+              return this.partial('item.html.haml', {
+                collection: ['foo', 'bar']
+              })
+            })
+            get('/').body.should.include '<li>foo'
+            get('/').body.should.include '<li>bar'
+          end
+          
+          it 'should render collections with a given object name'
+            get('/', function(){
+              return this.partial('video.html.haml', {
+                collection: ['im a movie', 'im another movie'],
+                as: 'vid'
+              })
+            })
+            get('/').body.should.include '<li>im a movie'
+            get('/').body.should.include '<li>im another movie'
+          end
+          
+          it 'should pass __isFirst__, __isLast__, and __index__ to partials as locals'
+            get('/', function(){
+              return this.partial('article.html.haml', {
+                collection: ['a', 'b', 'c']
+              })
+            })
+            get('/').body.should.include '<li class=""first"">a'
+            get('/').body.should.include '<li class=""1"">b'
+            get('/').body.should.include '<li class=""last"">c'
+          end
+          end
+        end
+        
+        describe 'given a full layout name'
+          it 'should render a layout of a different engine'
+            get('/', function(){
+                this.render('hello.html.haml', { layout: 'layout.html.ejs' })
+            })
+            get('/').body.should.include '<h2>Hello'
+            get('/').body.should.include '<p>'
-                layout: 'layout.user',
+                layout: 'layout-user',"
expressjs_express,46bee05d9341ec531f45411f862435652be5defc,Merge branch 'master' of git://github.com/nick/express into integration,lib/express/plugins/view.js,"-              layout = options.layout === undefined ? 'layout' : options.layout
+              layout = options.layout === undefined
+                ? 'layout'
+                : options.layout","-            this.render([layout, contentType, engine].join('.'), Object.mergeDeep(options, {
+            // If the layout has a content type and engine, use that instead of the main view file
+            this.render(layout.match(/\..*\./) ? layout : [layout, contentType, engine].join('.'), Object.mergeDeep(options, {","-              layout = options.layout === undefined ? 'layout' : options.layout
+              layout = options.layout === undefined
+                ? 'layout'
+                : options.layout
-            this.render([layout, contentType, engine].join('.'), Object.mergeDeep(options, {
+            // If the layout has a content type and engine, use that instead of the main view file
+            this.render(layout.match(/\..*\./) ? layout : [layout, contentType, engine].join('.'), Object.mergeDeep(options, {"
expressjs_express,b5d6f1ada594f6fb58c9a49d9df169ca52bc878c,Merge branch 'etag',lib/express/core.js,"+    this.method = request.method.lowercase
-    if (this.request.method.toLowerCase() === route.method)
+    if (this.method === route.method)","-        if (request.header('content-type') &&
-            request.header('content-type').includes('multipart/form-data')) {
+        if (request.header('Content-Type') &&
+            request.header('Content-Type').includes('multipart/form-data')) {
-              contentLength = parseInt(request.header('content-length')),
+              contentLength = parseInt(request.header('Content-Length')),","+    this.method = request.method.lowercase
-    if (this.request.method.toLowerCase() === route.method)
+    if (this.method === route.method)
-        if (request.header('content-type') &&
-            request.header('content-type').includes('multipart/form-data')) {
+        if (request.header('Content-Type') &&
+            request.header('Content-Type').includes('multipart/form-data')) {
-              contentLength = parseInt(request.header('content-length')),
+              contentLength = parseInt(request.header('Content-Length')),"
expressjs_express,b5d6f1ada594f6fb58c9a49d9df169ca52bc878c,Merge branch 'etag',lib/express/request.js,"-    data = data || {}
-    data.merge({ request: this, response: this.response })
+    data = { request: this, response: this.response }.merge(data)","-      : this.response.headers[key.lowercase] = val
+      : this.response.headers[key] = val
-    return (this.header('x-requested-with') || '').lowercase === 'xmlhttprequest'
+    return (this.header('X-Requested-With') || '').lowercase === 'xmlhttprequest'
-    if (body = body || statusBodies[code])
-      return this.respond(body, encoding, callback)
+    if (body !== null)
+      body = body || statusBodies[code]
+    return this.respond(body, encoding, callback)
-      if (err)
-        if (callback !== undefined) callback(err)
-        else self.error(err)
-      self.response.writeHeader(self.response.status, self.response.headers)
-      self.response.write(self.response.body, encoding)
+      if (err) self.error(err, callback)
+      // TODO: revisit. when this is true node will add Transfer-Encoding: chunked
+      // along with a response body, which is not ideal when the user attemps
+      // to respond with no body
+      if (!body) self.response.useChunkedEncodingByDefault = false
+      self.sendHead()
+      if (body) self.response.write(self.response.body, encoding)
+   * @param  {function} callback
-          return 'errno' in err && err.errno === 2
-            ? self.notFound()
-            : self.error(err)
+          return self.error(err, callback)
+          first = false
+          self.header('Transfer-Encoding', 'chunked')
-          first = false
-          self.response.writeHeader(self.response.status, self.response.headers)
+          self.sendHead()
-        self.response.end()
-          if (err) {
-            stream.destroy()
-            if (callback !== undefined) callback(err)
-            else self.error(err)
-          }
+          if (err)
+            stream.destroy(),
+            self.error(err, callback)
+          else
+            self.response.end()
+   * Send the response header.
+   *
+   * @return {Request}
+   * @api public
+   */
+  
+  sendHead: function(){
+    this.response.writeHead(this.response.status, this.response.headers)
+    return this
+  },
+  
+  /**
-    this.header('content-type', mime.type(path))
+    this.header('Content-Type', mime.type(path))
-    this.header('content-disposition', filename
+    this.header('Content-Disposition', filename
+   * Also a _callback_ function may be supplied, which when defined
+   * will be called, by-passing the process mentioned above.
+   *
+   * @param  {function} callback
-  error: function(err) {
+  error: function(err, callback) {
+    if (callback)
+      return callback(err)","-      : this.response.headers[key.lowercase] = val
+      : this.response.headers[key] = val
-    return (this.header('x-requested-with') || '').lowercase === 'xmlhttprequest'
+    return (this.header('X-Requested-With') || '').lowercase === 'xmlhttprequest'
-    if (body = body || statusBodies[code])
-      return this.respond(body, encoding, callback)
+    if (body !== null)
+      body = body || statusBodies[code]
+    return this.respond(body, encoding, callback)
-      if (err)
-        if (callback !== undefined) callback(err)
-        else self.error(err)
-      self.response.writeHeader(self.response.status, self.response.headers)
-      self.response.write(self.response.body, encoding)
+      if (err) self.error(err, callback)
+      // TODO: revisit. when this is true node will add Transfer-Encoding: chunked
+      // along with a response body, which is not ideal when the user attemps
+      // to respond with no body
+      if (!body) self.response.useChunkedEncodingByDefault = false
+      self.sendHead()
+      if (body) self.response.write(self.response.body, encoding)
+   * @param  {function} callback
-          return 'errno' in err && err.errno === 2
-            ? self.notFound()
-            : self.error(err)
+          return self.error(err, callback)
+          first = false
+          self.header('Transfer-Encoding', 'chunked')
-          first = false
-          self.response.writeHeader(self.response.status, self.response.headers)
+          self.sendHead()
-        self.response.end()
-          if (err) {
-            stream.destroy()
-            if (callback !== undefined) callback(err)
-            else self.error(err)
-          }
+          if (err)
+            stream.destroy(),
+            self.error(err, callback)
+          else
+            self.response.end()
+   * Send the response header.
+   *
+   * @return {Request}
+   * @api public
+   */
+  
+  sendHead: function(){
+    this.response.writeHead(this.response.status, this.response.headers)
+    return this
+  },
+  
+  /**
-    this.header('content-type', mime.type(path))
+    this.header('Content-Type', mime.type(path))
-    data = data || {}
-    data.merge({ request: this, response: this.response })
+    data = { request: this, response: this.response }.merge(data)
-    this.header('content-disposition', filename
+    this.header('Content-Disposition', filename
+   * Also a _callback_ function may be supplied, which when defined
+   * will be called, by-passing the process mentioned above.
+   *
+   * @param  {function} callback
-  error: function(err) {
+  error: function(err, callback) {
+    if (callback)
+      return callback(err)"
expressjs_express,b5d6f1ada594f6fb58c9a49d9df169ca52bc878c,Merge branch 'etag',spec/spec.plugins.session.js,"+      
+      describe 'and requesting /favicon.ico'
+        it 'should not set sid cookie'
+          get('/favicon.ico', function(){ this.halt() })
+          get('/favicon.ico').headers.should.not.have_property 'set-cookie'
+        end
+      end
-
+","-        get('/login').headers['set-cookie'].should.match(/^sid=(\w+);/)
+        get('/login').headers['Set-Cookie'].should.match(/^sid=(\w+);/)
-        get('/login', { headers: { cookie: 'sid=123' }}).headers.should.not.have_property 'set-cookie'
+        get('/login', { headers: { cookie: 'sid=123' }}).headers.should.not.have_property 'Set-Cookie'
-        headers.should.have_property 'set-cookie'
+        headers.should.have_property 'Set-Cookie'","-        get('/login').headers['set-cookie'].should.match(/^sid=(\w+);/)
+        get('/login').headers['Set-Cookie'].should.match(/^sid=(\w+);/)
+      end
+      
+      describe 'and requesting /favicon.ico'
+        it 'should not set sid cookie'
+          get('/favicon.ico', function(){ this.halt() })
+          get('/favicon.ico').headers.should.not.have_property 'set-cookie'
+        end
-
+    
-        get('/login', { headers: { cookie: 'sid=123' }}).headers.should.not.have_property 'set-cookie'
+        get('/login', { headers: { cookie: 'sid=123' }}).headers.should.not.have_property 'Set-Cookie'
-        headers.should.have_property 'set-cookie'
+        headers.should.have_property 'Set-Cookie'"
expressjs_express,09bb10cd3fc49a19b3e69f124651185a869d50cd,Merge branch 'download' of git://github.com/aheckmann/express into integration,lib/express/request.js,"-      self.response.close()
+      self.response.end()","-   * Transfer static file at the given _path_ as an attachment.
-   * The basename of _path_ is used as the attachment filename.
-   *
-   * @param  {string} path
-   * @return {Request}
-   * @api public
-   */
-  
-  download: function(path) {
-    return this.attachment(basename(path)).sendfile(path)
-  },
-  
-  /**","-      self.response.close()
+      self.response.end()
-   * Transfer static file at the given _path_ as an attachment.
-   * The basename of _path_ is used as the attachment filename.
-   *
-   * @param  {string} path
-   * @return {Request}
-   * @api public
-   */
-  
-  download: function(path) {
-    return this.attachment(basename(path)).sendfile(path)
-  },
-  
-  /**"
expressjs_express,e885421a6715448f4b215d0598beb9b7e1709a24,Merge branch 'master' of git://github.com/aheckmann/express into integration,lib/express/dsl.js,"+/**
+ * Register a ""Not Found"" route.
+ *
+ * @param  {function} fn
+ * @api public
+ */
+
+exports.notFound = function(fn) {
+  Express.notFound = fn
+}
+
+/**
+ * Register an ""error"" route.
+ *
+ * @param  {function} fn
+ * @api public
+ */
+
+exports.error = function(fn) {
+  Express.error = fn
+}
+","-  return function(path, options, fn){
+  return function(path, options, callback){
-      fn = options, options = {}
-    Express.routes.push(new Route(method, path, fn, options))
+      callback = options, options = {}
+    Express.routes.push(new Route(method, path, callback, options))
- * Configure _env_ with _fn_.
+ * Configure _env_ with _callback_.
- * @param  {function} fn
+ * @param  {function} callback
-exports.configure = function(env, fn) {
+exports.configure = function(env, callback) {
-    fn = env, env = 'all'
-  if (fn instanceof Function)
-    return Express.config.push([env, fn])
+    callback = env, env = 'all'
+  if (callback instanceof Function)
+    return Express.config.push([env, callback])
- * Pre-process param _key_ with _fn_.
+ * Pre-process param _key_ with _callback_.
- * @param  {function} fn
+ * @param  {function} callback
-exports.param = function(key, fn) {
+exports.param = function(key, callback) {
-  if (typeof fn !== 'function')
+  if (typeof callback !== 'function')
-  Express.params[key] = fn
+  Express.params[key] = callback","-  return function(path, options, fn){
+  return function(path, options, callback){
-      fn = options, options = {}
-    Express.routes.push(new Route(method, path, fn, options))
+      callback = options, options = {}
+    Express.routes.push(new Route(method, path, callback, options))
- * Configure _env_ with _fn_.
+ * Configure _env_ with _callback_.
- * @param  {function} fn
+ * @param  {function} callback
-exports.configure = function(env, fn) {
+exports.configure = function(env, callback) {
-    fn = env, env = 'all'
-  if (fn instanceof Function)
-    return Express.config.push([env, fn])
+    callback = env, env = 'all'
+  if (callback instanceof Function)
+    return Express.config.push([env, callback])
- * Pre-process param _key_ with _fn_.
+ * Pre-process param _key_ with _callback_.
+ * @param  {function} callback
+ * @api public
+ */
+
+exports.param = function(key, callback) {
+  if (typeof key !== 'string')
+    throw new TypeError('param key must be a string')
+  if (typeof callback !== 'function')
+    throw new TypeError('param must pass a function to process ""' + key + '""')
+  Express.params[key] = callback
+}
+
+/**
+ * Register a ""Not Found"" route.
+ *
-exports.param = function(key, fn) {
-  if (typeof key !== 'string')
-    throw new TypeError('param key must be a string')
-  if (typeof fn !== 'function')
-    throw new TypeError('param must pass a function to process ""' + key + '""')
-  Express.params[key] = fn
+exports.notFound = function(fn) {
+  Express.notFound = fn
+}
+
+/**
+ * Register an ""error"" route.
+ *
+ * @param  {function} fn
+ * @api public
+ */
+
+exports.error = function(fn) {
+  Express.error = fn"
expressjs_express,e885421a6715448f4b215d0598beb9b7e1709a24,Merge branch 'master' of git://github.com/aheckmann/express into integration,lib/express/spec/mocks.js,"+  delete Express.notFound
+  delete Express.error","-fs.readFile = function(path, encoding, fn) {
+fs.readFile = function(path, encoding, callback) {
-    fn = encoding,
+    callback = encoding,
-    fn(null, fs.readFileSync(path, encoding))
+    callback(null, fs.readFileSync(path, encoding))
-    fn(e)
+    callback(e)
-path.exists = function(path, fn) {
+path.exists = function(path, callback) {
-    fn(true)
+    callback(true)
-    fn(false)
+    callback(false)
-fs.stat = function(path, fn) {
+fs.stat = function(path, callback) {
-    fn(null, fs.statSync(path))
+    callback(null, fs.statSync(path))
-    fn(e)
+    callback(e)
-function request(method, path, options, fn) {
+function request(method, path, options, callback) {
-  return function(path, options, fn){
+  return function(path, options, callback){
-      fn = options, options = {}
-    if (fn instanceof Function)
-      Express.routes.push(new Route(method, path, fn, options))
+      callback = options, options = {}
+    if (callback instanceof Function)
+      Express.routes.push(new Route(method, path, callback, options))
-      return request(method, path, options, fn)
+      return request(method, path, options, callback)","-fs.readFile = function(path, encoding, fn) {
+fs.readFile = function(path, encoding, callback) {
-    fn = encoding,
+    callback = encoding,
-    fn(null, fs.readFileSync(path, encoding))
+    callback(null, fs.readFileSync(path, encoding))
-    fn(e)
+    callback(e)
-path.exists = function(path, fn) {
+path.exists = function(path, callback) {
-    fn(true)
+    callback(true)
-    fn(false)
+    callback(false)
-fs.stat = function(path, fn) {
+fs.stat = function(path, callback) {
-    fn(null, fs.statSync(path))
+    callback(null, fs.statSync(path))
-    fn(e)
+    callback(e)
-function request(method, path, options, fn) {
+function request(method, path, options, callback) {
+  delete Express.notFound
+  delete Express.error
-  return function(path, options, fn){
+  return function(path, options, callback){
-      fn = options, options = {}
-    if (fn instanceof Function)
-      Express.routes.push(new Route(method, path, fn, options))
+      callback = options, options = {}
+    if (callback instanceof Function)
+      Express.routes.push(new Route(method, path, callback, options))
-      return request(method, path, options, fn)
+      return request(method, path, options, callback)"
expressjs_express,12e90b0eef180da76c3cc6c968ac26f0e642c573,Merge branch 'session_with_callbacks' of git://github.com/ciaranj/express into async-session,lib/express/request.js,"-var StaticFile = require('express/static').File,
-    statusBodies = require('http').STATUS_CODES,
+var statusBodies = require('http').STATUS_CODES,
-  },
-  
-  /**
-   * Transfer static file at the given _path_.
-   *
-   * @param  {string} path
-   * @return {Request}
-   * @api public
-   */
-   
-  // DEPRECATED: remove in 0.9.0
-  
-  sendfile: function(path) {
-    Ext.warn('Request#sendfile() is deprecated, it is now part of the Static plugin, use(Static) to re-gain this method')
-    (new StaticFile(path)).send(this)
-    return this","+           puts(""Error:  (""+name+"") - "" + e );","-var StaticFile = require('express/static').File,
-    statusBodies = require('http').STATUS_CODES,
+var statusBodies = require('http').STATUS_CODES,
+           puts(""Error:  (""+name+"") - "" + e );
-  },
-  
-  /**
-   * Transfer static file at the given _path_.
-   *
-   * @param  {string} path
-   * @return {Request}
-   * @api public
-   */
-   
-  // DEPRECATED: remove in 0.9.0
-  
-  sendfile: function(path) {
-    Ext.warn('Request#sendfile() is deprecated, it is now part of the Static plugin, use(Static) to re-gain this method')
-    (new StaticFile(path)).send(this)
-    return this"
expressjs_express,6455e954fcc192cb8467a5c9971a26d6f12cc67a,"Removed CommonLogger, use Logger",lib/express/plugins.js,"-var utils = require('express/utils')
-utils.mixin(require('express/plugins/hooks'))
-utils.mixin(require('express/plugins/flash'))
-utils.mixin(require('express/plugins/cache'))
-utils.mixin(require('express/plugins/cookie'))
-utils.mixin(require('express/plugins/session'))
-utils.mixin(require('express/plugins/profiler'))
-utils.mixin(require('express/plugins/common-logger'))
-utils.mixin(require('express/plugins/content-length'))
-utils.mixin(require('express/plugins/method-override'))
+global.merge(require('express/plugins/hooks'))
+global.merge(require('express/plugins/flash'))
+global.merge(require('express/plugins/cache'))
+global.merge(require('express/plugins/cookie'))
+global.merge(require('express/plugins/session'))
+global.merge(require('express/plugins/profiler'))
+global.merge(require('express/plugins/common-logger'))
+global.merge(require('express/plugins/content-length'))
+global.merge(require('express/plugins/method-override'))",+utils.mixin(require('express/plugins/logger')),"-var utils = require('express/utils')
-utils.mixin(require('express/plugins/hooks'))
-utils.mixin(require('express/plugins/flash'))
-utils.mixin(require('express/plugins/cache'))
-utils.mixin(require('express/plugins/cookie'))
-utils.mixin(require('express/plugins/session'))
-utils.mixin(require('express/plugins/profiler'))
-utils.mixin(require('express/plugins/common-logger'))
-utils.mixin(require('express/plugins/content-length'))
-utils.mixin(require('express/plugins/method-override'))
+global.merge(require('express/plugins/hooks'))
+global.merge(require('express/plugins/flash'))
+global.merge(require('express/plugins/cache'))
+global.merge(require('express/plugins/cookie'))
+global.merge(require('express/plugins/session'))
+global.merge(require('express/plugins/profiler'))
+global.merge(require('express/plugins/logger'))
+global.merge(require('express/plugins/content-length'))
+global.merge(require('express/plugins/method-override'))"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/core.js,"-    request = new Request(request, response)
-    request.trigger('request')
-    if (request.response.finished) return
-    try {
-      if (typeof (body = (new Router(request)).route()) == 'string')
-        request.halt(200, body)
-    }
-    catch (e) {
-      this.error(e, request)
-    }
+    request = new Request(request, response) 
+    var self= this;
+    request.trigger('request', null,  function(error) {   
+      if (request.response.finished) return
+      try {
+        if (typeof (body = (new Router(request)).route()) == 'string')
+          request.halt(200, body) 
+      }
+      catch (e) {
+        self.error(e, request)
+      }
+    });
-      request.trigger('request')
+      request.trigger('request',null,  function(error) {/*NOOP?*/ } )","-utils.mixin(require('sys'))
-utils.mixin(require('express/exceptions'))
-utils.mixin(require('express/collection'))
-utils.mixin(require('express/event'))
-utils.mixin(require('express/request'))
-utils.mixin(require('express/plugin'))
-utils.mixin(require('express/dsl'))
+global.merge(require('sys'))
+global.merge(require('express/exceptions'))
+global.merge(require('express/event'))
+global.merge(require('express/request'))
+global.merge(require('express/plugin'))
+global.merge(require('express/dsl'))
-    return new RegExp('^' + utils.escapeRegexp(normalizePath(path), '.')
+    return new RegExp('^' + RegExp.escape(normalizePath(path), '.')
-    var self = this
-    return $(Express.routes).find(function(route){
-      return self.match(route)
-    })
+    return Express.routes.find(function(route){
+      return this.match(route)
+    }, this)
-   * given _route_ keys.
+   * given _route_ params.
-    var self = this
-    $(route.keys).each(function(key, i){
-      self.request.params.path[key] = self.request.captures[++i]
-    })
+    route.keys.each(function(key, i){
+      this.request.params.path[key] = this.request.captures[++i]
+    }, this)
-            request.headers['content-type'].indexOf('multipart/form-data') !== -1) {
+            request.headers['content-type'].includes('multipart/form-data')) {
-  version: '0.4.0',
+  version: '0.5.0',","-utils.mixin(require('sys'))
-utils.mixin(require('express/exceptions'))
-utils.mixin(require('express/collection'))
-utils.mixin(require('express/event'))
-utils.mixin(require('express/request'))
-utils.mixin(require('express/plugin'))
-utils.mixin(require('express/dsl'))
+global.merge(require('sys'))
+global.merge(require('express/exceptions'))
+global.merge(require('express/event'))
+global.merge(require('express/request'))
+global.merge(require('express/plugin'))
+global.merge(require('express/dsl'))
-    return new RegExp('^' + utils.escapeRegexp(normalizePath(path), '.')
+    return new RegExp('^' + RegExp.escape(normalizePath(path), '.')
-    var self = this
-    return $(Express.routes).find(function(route){
-      return self.match(route)
-    })
+    return Express.routes.find(function(route){
+      return this.match(route)
+    }, this)
-   * given _route_ keys.
+   * given _route_ params.
-    var self = this
-    $(route.keys).each(function(key, i){
-      self.request.params.path[key] = self.request.captures[++i]
-    })
+    route.keys.each(function(key, i){
+      this.request.params.path[key] = this.request.captures[++i]
+    }, this)
-            request.headers['content-type'].indexOf('multipart/form-data') !== -1) {
+            request.headers['content-type'].includes('multipart/form-data')) {
-    request = new Request(request, response)
-    request.trigger('request')
-    if (request.response.finished) return
-    try {
-      if (typeof (body = (new Router(request)).route()) == 'string')
-        request.halt(200, body)
-    }
-    catch (e) {
-      this.error(e, request)
-    }
+    request = new Request(request, response) 
+    var self= this;
+    request.trigger('request', null,  function(error) {   
+      if (request.response.finished) return
+      try {
+        if (typeof (body = (new Router(request)).route()) == 'string')
+          request.halt(200, body) 
+      }
+      catch (e) {
+        self.error(e, request)
+      }
+    });
-      request.trigger('request')
+      request.trigger('request',null,  function(error) {/*NOOP?*/ } )
-  version: '0.4.0',
+  version: '0.5.0',"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugin.js,"-  trigger: function(event) {
+  trigger: function(event, callback) {
-        this.on[event.name].call(this, event)
+        this.on[event.name].call(this, event, callback)
+      else callback()
+    else callback()","+
+// Express - Plugin - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)
+
+/**
+ * Module dependencies.
+ */
+
-// Express - Plugin - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)
-  $(Express.plugins).each(function(other, i){
+  Express.plugins.each(function(other, i){","+
+// Express - Plugin - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)
+
+/**
+ * Module dependencies.
+ */
+
-// Express - Plugin - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)
-  $(Express.plugins).each(function(other, i){
+  Express.plugins.each(function(other, i){
-  trigger: function(event) {
+  trigger: function(event, callback) {
-        this.on[event.name].call(this, event)
+        this.on[event.name].call(this, event, callback)
+      else callback()
+    else callback()"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/body-decoder.js,"-    request: function(event) {
+    request: function(event, callback) {
+      
+      callback();","+/**
+ * Module dependencies.
+ */
+
+
+// --- BodyDecoder
-          request.header('content-type').indexOf('application/x-www-form-urlencoded') > -1)
+          request.header('content-type').includes('application/x-www-form-urlencoded'))","+/**
+ * Module dependencies.
+ */
+
+
+// --- BodyDecoder
-    request: function(event) {
+    request: function(event, callback) {
-          request.header('content-type').indexOf('application/x-www-form-urlencoded') > -1)
+          request.header('content-type').includes('application/x-www-form-urlencoded'))
+      
+      callback();"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/cookie.js,"-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback();","-  return $(cookie.replace(/^ *| *$/g, '').split(/ *; */)).reduce({}, function(hash, pair){
+  return cookie.replace(/^ *| *$/g, '').split(/ *; */).reduce(function(hash, pair){
-  })
+  }, {})
-  return name + '=' + val + '; ' + $(options).map(function(val, key){
+  return name + '=' + val + '; ' + options.map(function(val, key){
-  }).toArray().join('; ')
+  }).join('; ')
-      event.request.cookies = event.request.headers.cookie ? 
-        exports.parseCookie(event.request.headers.cookie) : 
-          {}
+      event.request.cookies = event.request.headers.cookie
+        ? exports.parseCookie(event.request.headers.cookie)
+        : {}","-  return $(cookie.replace(/^ *| *$/g, '').split(/ *; */)).reduce({}, function(hash, pair){
+  return cookie.replace(/^ *| *$/g, '').split(/ *; */).reduce(function(hash, pair){
-  })
+  }, {})
-  return name + '=' + val + '; ' + $(options).map(function(val, key){
+  return name + '=' + val + '; ' + options.map(function(val, key){
-  }).toArray().join('; ')
+  }).join('; ')
-    request: function(event) {
+    request: function(event, callback) {
-      event.request.cookies = event.request.headers.cookie ? 
-        exports.parseCookie(event.request.headers.cookie) : 
-          {}
+      event.request.cookies = event.request.headers.cookie
+        ? exports.parseCookie(event.request.headers.cookie)
+        : {}
+	  callback()
-    response: function(event) {
+    response: function(event, callback) {
+      callback();"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/hooks.js,"-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback();","+
+/**
+ * Callbacks.
+ */
-      process.mixin(GLOBAL, { before: exports.before,
-                              after: exports.after })
+      global.merge({
+        before: exports.before,
+        after: exports.after
+      })
-      $(exports.callbacks.before).each(function(fn){
+      exports.callbacks.before.each(function(fn){
-      $(exports.callbacks.after).each(function(fn){
+      exports.callbacks.after.each(function(fn){","+
+/**
+ * Callbacks.
+ */
-      process.mixin(GLOBAL, { before: exports.before,
-                              after: exports.after })
+      global.merge({
+        before: exports.before,
+        after: exports.after
+      })
-    request: function(event) {
-      $(exports.callbacks.before).each(function(fn){
+    request: function(event, callback) {
+      exports.callbacks.before.each(function(fn){
+      callback();
-      $(exports.callbacks.after).each(function(fn){
+      exports.callbacks.after.each(function(fn){
+      callback();"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/profiler.js,"-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback()","-      process.mixin(this, options)
+      this.merge(options || {})","-      process.mixin(this, options)
+      this.merge(options || {})
-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback()"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/redirect.js,"-    request: function(event) {
+    request: function(event, callback) {
+      callback();","-          if (url == 'back' || url == 'home') url = this[url]
+          if (url === 'back' || url === 'home') url = this[url]","-          if (url == 'back' || url == 'home') url = this[url]
+          if (url === 'back' || url === 'home') url = this[url]
-    request: function(event) {
+    request: function(event, callback) {
+      callback();"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/plugins/session.js,"-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback()","-    return $(this.store).length()
+    return this.store.values.length
-    var self = this,
-        threshold = Number(new Date(Number(new Date) - ms))
-    $(this.store).each(function(session, sid){
+    var threshold = Number(new Date(Number(new Date) - ms))
+    this.store.each(function(session, sid){
-        self.destroy(sid)
-    })
+        this.destroy(sid)
+    }, this)
-      process.mixin(this, options)
+      this.merge(options || {})","-    return $(this.store).length()
+    return this.store.values.length
-    var self = this,
-        threshold = Number(new Date(Number(new Date) - ms))
-    $(this.store).each(function(session, sid){
+    var threshold = Number(new Date(Number(new Date) - ms))
+    this.store.each(function(session, sid){
-        self.destroy(sid)
-    })
+        this.destroy(sid)
+    }, this)
-      process.mixin(this, options)
+      this.merge(options || {})
-    request: function(event) {
+    request: function(event, callback) {
+      callback();
-    response: function(event) {
+    response: function(event, callback) {
+      callback()"
expressjs_express,27ff13459fa3eea995003187f2c29295ef9d6d0b,Merge branch 'master' of git://github.com/visionmedia/express into async_plugins  Conflicts: 	lib/express/plugins/cookie.js 	lib/express/plugins/hooks.js 	lib/express/request.js,lib/express/request.js,"-  halt: function(code, body, encoding) {
+  halt: function(code, body, encoding, callback) {
-      return this.respond(body, encoding)
+      return this.respond(body, encoding, callback)
-  respond: function(body, encoding) {
+  respond: function(body, encoding, callback) {
-    this.trigger('response')
-    if (typeof this.response.body != 'string') throw new InvalidResponseBody(this)
-    if (typeof this.response.status != 'number') throw new InvalidStatusCode(this.response.status)
-    this.response.writeHeader(this.response.status, this.response.headers)
-    this.response.write(this.response.body, encoding)
-    this.response.close()
+    var self= this;
+    this.trigger('response', null, function (error) {
+      if (typeof self.response.body != 'string') {callback( new InvalidResponseBody(self) ); return; }
+      if (typeof self.response.status != 'number'){ calback( new InvalidStatusCode(self.response.status) ); return; }
+      self.response.writeHeader(self.response.status, self.response.headers)
+      self.response.write(self.response.body, encoding)
+      self.response.close()
+    });
-  trigger: function(name, data) {
+  trigger: function(name, data, callback) {
-    this.plugins.each(function(plugin){
-      plugin.trigger(new Event(name, data))
-    })
+    //TODO: we'd want to use the nice collection stuff that was here instead of this crappy approach...
+    var pluginsExecuted= 0,
+        plugin= undefined,
+        totalPlugins= this.plugins.length(),
+        self= this;
+    var callNextPlugin= function(error) {
+        if( error || pluginsExecuted >= totalPlugins ) callback(error); // All the plugins have called back or there was an error ..
+        else {
+          try{
+            plugin= self.plugins.at(pluginsExecuted++);
+            if( plugin && plugin.trigger ) plugin.trigger(new Event(name, data), callNextPlugin)
+            else callNextPlugin();
+          } catch(e) {
+            callNextPlugin(e);
+          }
+        }
+    }; 
+    callNextPlugin();","-    this.plugins = $(Express.plugins).map(function(plugin){
+    this.plugins = Express.plugins.map(function(plugin){
-    return accept ? 
-      $(arguments).any(function(path){
-        var type = mime.type(path)
-        return accept.indexOf(type) !== -1 ||
-          accept.indexOf(type.split('/')[0]+'/*') !== -1
-      }) :
-        true
+    return accept 
+      ? arguments.any(function(path){
+          var type = mime.type(path)
+          return accept.indexOf(type) !== -1 ||
+            accept.indexOf(type.split('/')[0]+'/*') !== -1
+        })
+      : true
-    data = process.mixin(data || {}, {
-      request: this,
-      response: this.response
-    })
+    data = data || {}
+    data.merge({ request: this, response: this.response })
-    this.header('content-disposition', path ? 
-       'attachment; filename=""' + path + '""' :
-         'attachment')
+    this.header('content-disposition', path
+      ? 'attachment; filename=""' + path + '""'
+      : 'attachment')","-    this.plugins = $(Express.plugins).map(function(plugin){
+    this.plugins = Express.plugins.map(function(plugin){
-    return accept ? 
-      $(arguments).any(function(path){
-        var type = mime.type(path)
-        return accept.indexOf(type) !== -1 ||
-          accept.indexOf(type.split('/')[0]+'/*') !== -1
-      }) :
-        true
+    return accept 
+      ? arguments.any(function(path){
+          var type = mime.type(path)
+          return accept.indexOf(type) !== -1 ||
+            accept.indexOf(type.split('/')[0]+'/*') !== -1
+        })
+      : true
-  halt: function(code, body, encoding) {
+  halt: function(code, body, encoding, callback) {
-      return this.respond(body, encoding)
+      return this.respond(body, encoding, callback)
-  respond: function(body, encoding) {
+  respond: function(body, encoding, callback) {
-    this.trigger('response')
-    if (typeof this.response.body != 'string') throw new InvalidResponseBody(this)
-    if (typeof this.response.status != 'number') throw new InvalidStatusCode(this.response.status)
-    this.response.writeHeader(this.response.status, this.response.headers)
-    this.response.write(this.response.body, encoding)
-    this.response.close()
+    var self= this;
+    this.trigger('response', null, function (error) {
+      if (typeof self.response.body != 'string') {callback( new InvalidResponseBody(self) ); return; }
+      if (typeof self.response.status != 'number'){ calback( new InvalidStatusCode(self.response.status) ); return; }
+      self.response.writeHeader(self.response.status, self.response.headers)
+      self.response.write(self.response.body, encoding)
+      self.response.close()
+    });
-  trigger: function(name, data) {
-    data = process.mixin(data || {}, {
-      request: this,
-      response: this.response
-    })
-    this.plugins.each(function(plugin){
-      plugin.trigger(new Event(name, data))
-    })
+  trigger: function(name, data, callback) {
+    data = data || {}
+    data.merge({ request: this, response: this.response })
+    //TODO: we'd want to use the nice collection stuff that was here instead of this crappy approach...
+    var pluginsExecuted= 0,
+        plugin= undefined,
+        totalPlugins= this.plugins.length,
+        self= this;
+    var callNextPlugin= function(error) {
+        if( error || pluginsExecuted >= totalPlugins ) callback(error); // All the plugins have called back or there was an error ..
+        else {
+          try{
+            plugin= self.plugins.at(pluginsExecuted++);
+            if( plugin && plugin.trigger ) plugin.trigger(new Event(name, data), callNextPlugin)
+            else callNextPlugin();
+          } catch(e) {
+            callNextPlugin(e);
+          }
+        }
+    }; 
+    callNextPlugin();
-    this.header('content-disposition', path ? 
-       'attachment; filename=""' + path + '""' :
-         'attachment')
+    this.header('content-disposition', path
+      ? 'attachment; filename=""' + path + '""'
+      : 'attachment')"
expressjs_express,cec677062b1bd72a4f660ecd61a5c9ffed76da85,Merge,examples/chat/app.js,"+  var fiveMinutes = 300000,
+      oneMinute = 60000
+  use(Cookie)
+  use(Session, { lifetime: fiveMinutes, reapInterval: oneMinute })
-      messages: messages
+      messages: messages,
+      name: this.session.name
+  this.session.name = this.param('name')
-    .push(escape(this.param('message'))
+    .push(escape(this.param('name')) + ': ' + escape(this.param('message'))
+get('/favicon.ico', function(){
+  this.halt()
+})
+","-  set('root', dirname(__filename))
+  set('root', __dirname)
-var messages = []
+var messages = [],
+    utils = require('express/utils')
-    .push(escape(this.param('message'))
+    .push(utils.escape(this.param('message'))
-  this.sendfile(dirname(__filename) + '/public/' + file)
+  this.sendfile(__dirname + '/public/' + file)","+  var fiveMinutes = 300000,
+      oneMinute = 60000
-  set('root', dirname(__filename))
+  use(Cookie)
+  use(Session, { lifetime: fiveMinutes, reapInterval: oneMinute })
+  set('root', __dirname)
-var messages = []
+var messages = [],
+    utils = require('express/utils')
-      messages: messages
+      messages: messages,
+      name: this.session.name
+  this.session.name = this.param('name')
-    .push(escape(this.param('message'))
+    .push(utils.escape(this.param('name')) + ': ' + utils.escape(this.param('message'))
-  this.sendfile(dirname(__filename) + '/public/' + file)
+  this.sendfile(__dirname + '/public/' + file)
+get('/favicon.ico', function(){
+  this.halt()
+})
+"
expressjs_express,cec677062b1bd72a4f660ecd61a5c9ffed76da85,Merge,spec/node.js,"+    'plugins.session',","-    'helpers',
+    'utils',","-    'helpers',
+    'utils',
+    'plugins.session',"
expressjs_express,ae33e7b673d79c33c5eaee13ed9c1b0e20f8fa55,Merge branch 'master' of git://github.com/visionmedia/express  Conflicts: 	lib/express/static.js,lib/express/static.js,"+  
+var static_file_cache={};
-    path.exists(file, function(exists){
-      if (!exists) request.halt()
-      posix.stat(file).addCallback(function(stats){
-        if (!stats.isFile()) request.halt()
-        posix.cat(file, 'binary').addCallback(function(content){
+    if (  set('cache statics') && (content= static_file_cache[escape(file)]) ) {
-        })
-      })
-    })
+    }
+    else {
+        var fileInstance= this;
+    	path.exists(file, function(exists){
+      		if (!exists) request.halt()
+      		posix.stat(file).addCallback(function(stats){
+        		if (!stats.isFile()) request.halt()
+        		posix.cat(file, 'binary').addCallback(function(content){
+          			request.contentType(file)
+          			request.halt(200, content, 'binary')
+        		})
+      		})
+    	})
+	}","+   * @settings 'cache static files'
-    var file = this.path
+    var cache, file = this.path
+    if (set('cache static files') && (cache = request.cache.get(file)))
+      request.contentType(cache.type),
+      request.halt(200, cache.content)
+          if (set('cache static files'))
+            request.cache.set(file, { type: file, content: content })","+   * @settings 'cache static files'
-    var file = this.path
+    var cache, file = this.path
+    if (set('cache static files') && (cache = request.cache.get(file)))
+      request.contentType(cache.type),
+      request.halt(200, cache.content)
+          if (set('cache static files'))
+            request.cache.set(file, { type: file, content: content })"
expressjs_express,17ab8e81aaf9c7b52bd0d64fa17bfe0127f18180,Merge branch 'master' of git://github.com/visionmedia/express  Conflicts: 	lib/express/static.js,lib/express/static.js,"+
+var static_file_cache={};
-  
-    path.exists(file, function(exists){
-      if (!exists) request.halt()
-      posix.stat(file).addCallback(function(stats){
-        if (!stats.isFile()) request.halt()
-        posix.cat(file).addCallback(function(content){
-          request.contentType(file)
-          request.halt(200, content)
+    if (  set('cache statics') && (content= static_file_cache[escape(file)]) ) {
+        this._sendBinaryContent(request, file, content);
+    }
+    else {
+        var fileInstance= this;
+        path.exists(file, function(exists){
+          if (!exists) request.halt()
+          posix.stat(file).addCallback(function(stats){
+            if (!stats.isFile()) request.halt()
+            posix.cat(file, ""binary"").addCallback(function(content){
+              if( set('cache statics') ) {
+                  static_file_cache[escape(file)]= content;
+              }
+              fileInstance._sendBinaryContent(request, file, content);
+            })
+          })
-      })
-    })
+    }
+  },
+   /** 
+    * Private method to send binary content back as the 
+    * response body.
+    * @param {Request} request 
+    * @param {string} file 
+    * @param {string} content
+    * @api private
+    */
+  _sendBinaryContent: function(request, file, content) {
+      request.contentType(file)
+      request.status(200)
+      request.response.body = content
+      request.trigger('response')
+      request.response.sendHeader(request.response.status, request.response.headers)
+      request.response.sendBody(request.response.body, 'binary')
+      request.response.finish()","-        posix.cat(file).addCallback(function(content){
+        posix.cat(file, 'binary').addCallback(function(content){
-          request.halt(200, content)
+          request.halt(200, content, 'binary')","+  
+var static_file_cache={};
-    path.exists(file, function(exists){
-      if (!exists) request.halt()
-      posix.stat(file).addCallback(function(stats){
-        if (!stats.isFile()) request.halt()
-        posix.cat(file).addCallback(function(content){
+    if (  set('cache statics') && (content= static_file_cache[escape(file)]) ) {
-          request.halt(200, content)
-        })
-      })
-    })
+          request.halt(200, content, 'binary')
+    }
+    else {
+        var fileInstance= this;
+    	path.exists(file, function(exists){
+      		if (!exists) request.halt()
+      		posix.stat(file).addCallback(function(stats){
+        		if (!stats.isFile()) request.halt()
+        		posix.cat(file, 'binary').addCallback(function(content){
+          			request.contentType(file)
+          			request.halt(200, content, 'binary')
+        		})
+      		})
+    	})
+	}"
expressjs_express,33ea2216c3c31aac5386d1b1f486542618eba90a,Merge branch 'master' of git://github.com/csausdev/express into dev,spec/spec.core.js,"+    it 'should default response status to 200'
+      get('/foo', function(){
+        halt('Foo bar')
+      })
+      get('/foo').status.should.eql 200
+      get('/foo').body.should.eql 'Foo bar'
+    end
+    
-      -{ Express.halt('Page or file cannot be found', 'Not Found') }.should.throw_error
-      Express.response.status.should.eql 404
-      Express.response.body.should.eql 'Page or file cannot be found'
+      get('/foo', function(){
+        halt('Page or file cannot be found', 'Not Found')
+      })
+      get('/foo').status.should.eql 404
+      get('/foo').body.should.eql 'Page or file cannot be found'
-      -{ Express.halt('File cannot be found', 404) }.should.throw_error
-      Express.response.status.should.eql 404
-      Express.response.body.should.eql 'File cannot be found'
+      get('/foo', function(){
+        halt('Page or file cannot be found', 'Not Found')
+      })
+      get('/foo').status.should.eql 404
+      get('/foo').body.should.eql 'Page or file cannot be found'","-        request = mockRequest({ headers : { 'Referer': uri }})
+        request = mockRequest({ headers : { 'referer': uri }})","+    it 'should default response status to 200'
+      get('/foo', function(){
+        halt('Foo bar')
+      })
+      get('/foo').status.should.eql 200
+      get('/foo').body.should.eql 'Foo bar'
+    end
+    
-      -{ Express.halt('Page or file cannot be found', 'Not Found') }.should.throw_error
-      Express.response.status.should.eql 404
-      Express.response.body.should.eql 'Page or file cannot be found'
+      get('/foo', function(){
+        halt('Page or file cannot be found', 'Not Found')
+      })
+      get('/foo').status.should.eql 404
+      get('/foo').body.should.eql 'Page or file cannot be found'
-      -{ Express.halt('File cannot be found', 404) }.should.throw_error
-      Express.response.status.should.eql 404
-      Express.response.body.should.eql 'File cannot be found'
+      get('/foo', function(){
+        halt('Page or file cannot be found', 'Not Found')
+      })
+      get('/foo').status.should.eql 404
+      get('/foo').body.should.eql 'Page or file cannot be found'
-        request = mockRequest({ headers : { 'Referer': uri }})
+        request = mockRequest({ headers : { 'referer': uri }})"
expressjs_express,a3acc21c6cc555bc4f348d2218269904e41c03c0,merged from upstream,examples/async.js,"+require.paths.unshift(""./lib"")
+require('express')
+
+use(Express.Logger)
+
+get('hello/:value/:time', function() {
+	setTimeout(function() {
+		Express.server.finished('<html><head><title>Asynchronous Example</title></head><body><h1>Hello '+param('value')+', I waited '+param('time')+'ms to talk to you.</h1></body></html>')
+	}, param('time'))
+});
+
+Express.start();","+
+require.paths.unshift(""./lib"")
+require('express')
+
+use(Express.Logger)
+
+get('/wait/:ms', function() {
+	setTimeout(function() {
+	  halt('Waited ' + param('ms') + ' milliseconds before replying')
+	}, param('ms'))
+});
+
+Express.start()","+require.paths.unshift(""./lib"")
+require('express')
+
+use(Express.Logger)
+
+get('/wait/:ms', function() {
+	setTimeout(function() {
+	  halt('Waited ' + param('ms') + ' milliseconds before replying')
+	}, param('ms'))
+});
+
+Express.start()"
expressjs_express,a3acc21c6cc555bc4f348d2218269904e41c03c0,merged from upstream,examples/simple.js,"-get('hello/:value', function(req, res) {
+get('hello/:value', function() {","+
-get('hello/:value', function(req, res) {
-    '<html><head><title>Traditional Example</title></head><body><h1>Hello '+param('value')+'</h1></body></html>'    
-});
+get('/i/like/:object', function() {
+  'You like ""' + param('object') + '""'
+})
-Express.start();
+Express.start()","+
-get('hello/:value', function(req, res) {
-    '<html><head><title>Traditional Example</title></head><body><h1>Hello '+param('value')+'</h1></body></html>'    
-});
+get('/i/like/:object', function() {
+  'You like ""' + param('object') + '""'
+})
-Express.start();
+Express.start()"
expressjs_express,a3acc21c6cc555bc4f348d2218269904e41c03c0,merged from upstream,spec/spec.async.js,"+
+describe 'Express'
+  describe 'server'
+    before_each
+      Express.routes = []
+    end
+
+	describe 'callback'
+			
+		it 'should wait for an asynchronous handler to finish'
+			require('jspec.timers')
+			get('pants', function() {
+				setTimeout(function() {
+					Express.server.finished('asynchronous thing done')
+				}, 50)
+			})
+			var response = get('pants')
+			response.body.should.be_null
+
+			tick(50)
+			response.body.should.eql 'asynchronous thing done'
+			response.status.should.eql 200
+			response.headers['content-type'].should.eql 'text/html'
+		end
+			
+		it 'should still accept a synchronous handler that returns a string'
+			get('pants', function() { 'no pants' })
+			get('pants').body.should.eql 'no pants'
+		end
+	end
+  end
+end","+
+describe 'Express'
+  describe 'server'
+    before_each
+      Express.routes = []
+    end
+
+    describe 'callback'
+      it 'should wait for an asynchronous handler to finish'
+        require('jspec.timers')
+        get('pants', function() {
+          setTimeout(function() {
+            halt('asynchronous thing done')
+          }, 50)
+        })
+        var response = get('pants')
+        response.body.should.be_null
+    
+        tick(50)
+        response.body.should.eql 'asynchronous thing done'
+        response.status.should.eql 200
+        response.headers['content-type'].should.eql 'text/html'
+      end
+        
+      it 'should still accept a synchronous handler that returns a string'
+        get('pants', function() { 'no pants' })
+        get('pants').body.should.eql 'no pants'
+      end
+    end
+  end
+end","+
+describe 'Express'
+  describe 'server'
+    before_each
+      Express.routes = []
+    end
+
+    describe 'callback'
+      it 'should wait for an asynchronous handler to finish'
+        require('jspec.timers')
+        get('pants', function() {
+          setTimeout(function() {
+            halt('asynchronous thing done')
+          }, 50)
+        })
+        var response = get('pants')
+        response.body.should.be_null
+    
+        tick(50)
+        response.body.should.eql 'asynchronous thing done'
+        response.status.should.eql 200
+        response.headers['content-type'].should.eql 'text/html'
+      end
+        
+      it 'should still accept a synchronous handler that returns a string'
+        get('pants', function() { 'no pants' })
+        get('pants').body.should.eql 'no pants'
+      end
+    end
+  end
+end"
expressjs_express,a3acc21c6cc555bc4f348d2218269904e41c03c0,merged from upstream,spec/spec.node.js,+  .exec('spec/spec.async.js'),"-require.paths.unshift(""../jspec-2.11.2/lib"", ""./lib"");
+require.paths.unshift(""./spec/lib"", ""./lib"");
-require(""express.mocks"")
+require(""express/spec/mocks"")
-var posix = require(""posix"");
-readFile = function(path, callback) {
+var posix = require('posix')
+
+quit = process.exit
+print = puts
+
+readFile = function(path) {
+  var result = ''
-    callback(contents)
+    result = contents
+  return result
-if (process.ARGV[2]) {
-  JSpec.exec('spec/spec.'+process.ARGV[2]+'.js')  
-} else {
-JSpec
-  .exec('spec/spec.core.js')
-  .exec('spec/spec.routing.js')
-  .exec('spec/spec.mocks.js')
-  .exec('spec/spec.modules.js')
-  .exec('spec/spec.mime.js')
-  .exec('spec/spec.cookie.js')
-  .exec('spec/spec.session.js')
-  .exec('spec/spec.view.js')  
-}
-JSpec.run({ formatter : JSpec.formatters.Terminal, failuresOnly : true })
+if (process.ARGV[2])
+  JSpec.exec('spec/spec.' + process.ARGV[2] + '.js')  
+else
+  JSpec
+    .exec('spec/spec.core.js')
+    .exec('spec/spec.routing.js')
+    .exec('spec/spec.mocks.js')
+    .exec('spec/spec.modules.js')
+    .exec('spec/spec.mime.js')
+    .exec('spec/spec.cookie.js')
+    .exec('spec/spec.session.js')
+    .exec('spec/spec.view.js')  
+    .exec('spec/spec.async.js')
+JSpec.run({ formatter: JSpec.formatters.Terminal, failuresOnly: true })","-require.paths.unshift(""../jspec-2.11.2/lib"", ""./lib"");
+require.paths.unshift(""./spec/lib"", ""./lib"");
-require(""express.mocks"")
+require(""express/spec/mocks"")
-var posix = require(""posix"");
-readFile = function(path, callback) {
+var posix = require('posix')
+
+quit = process.exit
+print = puts
+
+readFile = function(path) {
+  var result = ''
-    callback(contents)
+    result = contents
+  return result
-if (process.ARGV[2]) {
-  JSpec.exec('spec/spec.'+process.ARGV[2]+'.js')  
-} else {
-JSpec
-  .exec('spec/spec.core.js')
-  .exec('spec/spec.routing.js')
-  .exec('spec/spec.mocks.js')
-  .exec('spec/spec.modules.js')
-  .exec('spec/spec.mime.js')
-  .exec('spec/spec.cookie.js')
-  .exec('spec/spec.session.js')
-  .exec('spec/spec.view.js')  
-}
-JSpec.run({ formatter : JSpec.formatters.Terminal, failuresOnly : true })
+if (process.ARGV[2])
+  JSpec.exec('spec/spec.' + process.ARGV[2] + '.js')  
+else
+  JSpec
+    .exec('spec/spec.core.js')
+    .exec('spec/spec.routing.js')
+    .exec('spec/spec.mocks.js')
+    .exec('spec/spec.modules.js')
+    .exec('spec/spec.mime.js')
+    .exec('spec/spec.cookie.js')
+    .exec('spec/spec.session.js')
+    .exec('spec/spec.view.js')  
+    .exec('spec/spec.async.js')
+JSpec.run({ formatter: JSpec.formatters.Terminal, failuresOnly: true })"
expressjs_express,bf79dd96bf7cbabef70749eb55b95af82016197d,Merge branch 'master' of git@github.com:visionmedia/express,lib/express.core.js,"+    
+        request.cookie = Express.parseCookie(request.headers['Cookie'])
+    
+    /**
+     * Parse _params_, splitting { user[info][name] : 'tj' } into
+     * { user : { info : { name : 'tj' }}}
+     *
+     * @param  {hash} params
+     * @return {hash}
+     * @api public
+     */
+     * Parse _cookie_ string into an object (hash).
+     *
+     * @param  {string} cookie
+     * @return {hash}
+     * @api public
+     */
+    
+    parseCookie : function(cookie) {
+      var hash = {}
+      if (!cookie) return hash
+      var attrs = cookie.split(/\s*;\s*/)
+      for (i = 0; i < attrs.length; ++i)
+        hash[attrs[i].split('=')[0]] = unescape(attrs[i].split('=')[1])
+      return hash
+    },
+    
+    /**
+ p(request.cookie)","-        new node.http.Server(callback).listen(port)
+        node.http.createServer(callback).listen(port)","+    
+        request.cookie = Express.parseCookie(request.headers['Cookie'])
-        new node.http.Server(callback).listen(port)
+        node.http.createServer(callback).listen(port)
+    
+    /**
+     * Parse _params_, splitting { user[info][name] : 'tj' } into
+     * { user : { info : { name : 'tj' }}}
+     *
+     * @param  {hash} params
+     * @return {hash}
+     * @api public
+     */
+     * Parse _cookie_ string into an object (hash).
+     *
+     * @param  {string} cookie
+     * @return {hash}
+     * @api public
+     */
+    
+    parseCookie : function(cookie) {
+      var hash = {}
+      if (!cookie) return hash
+      var attrs = cookie.split(/\s*;\s*/)
+      for (i = 0; i < attrs.length; ++i)
+        hash[attrs[i].split('=')[0]] = unescape(attrs[i].split('=')[1])
+      return hash
+    },
+    
+    /**
+ p(request.cookie)"
